{
    "docs": [
        {
            "location": "/",
            "text": "\u76ee\u5f55",
            "title": "\u76ee\u5f55"
        },
        {
            "location": "/#_1",
            "text": "",
            "title": "\u76ee\u5f55"
        },
        {
            "location": "/leetcode-0001-two-sum/",
            "text": "1. Two Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u548c\u4e3a\u76ee\u6807\u503c\u7684\n\u4e24\u4e2a\n\u6570\u3002\n\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u4e00\u79cd\u7b54\u6848\uff0c\u4e14\u540c\u6837\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u91cd\u590d\u5229\u7528\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\n\n\u56e0\u4e3a nums[\n0\n] + nums[\n1\n] = 2 + 7 = 9\n\n\u6240\u4ee5\u8fd4\u56de [\n0, 1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n1. Two Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n1. \u4e24\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "1. Two Sum"
        },
        {
            "location": "/leetcode-0001-two-sum/#1-two-sum",
            "text": "",
            "title": "1. Two Sum"
        },
        {
            "location": "/leetcode-0001-two-sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u548c\u4e3a\u76ee\u6807\u503c\u7684 \u4e24\u4e2a \u6570\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u4e00\u79cd\u7b54\u6848\uff0c\u4e14\u540c\u6837\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u91cd\u590d\u5229\u7528\u3002  \u793a\u4f8b:  \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\n\n\u56e0\u4e3a nums[ 0 ] + nums[ 1 ] = 2 + 7 = 9\n\n\u6240\u4ee5\u8fd4\u56de [ 0, 1 ]     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 1. Two Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 1. \u4e24\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0001-two-sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0001-two-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0001-two-sum/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/",
            "text": "2. Add Two Numbers\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\n\u975e\u7a7a\n\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\n\u9006\u5e8f\n\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002\n\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002\n\n\n\n\u793a\u4f8b\uff1a\n\n\n\n\u8f93\u5165\uff1a\n(2 -> 4 -> 3) + (5 -> 6 -> 4)\n\n\n\u8f93\u51fa\uff1a\n7 -> 0 -> 8\n\n\n\u539f\u56e0\uff1a\n342 + 465 = 807\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n2. Add Two Numbers\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n2. \u4e24\u6570\u76f8\u52a0\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "2. Add Two Numbers"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/#2-add-two-numbers",
            "text": "",
            "title": "2. Add Two Numbers"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167 \u9006\u5e8f \u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002  \u793a\u4f8b\uff1a  \u8f93\u5165\uff1a (2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a 7 -> 0 -> 8 \u539f\u56e0\uff1a 342 + 465 = 807     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 2. Add Two Numbers   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 2. \u4e24\u6570\u76f8\u52a0   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0002-add-two-numbers/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/",
            "text": "3. Longest Substring Without Repeating Characters\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\n\u6700\u957f\u5b50\u4e32\n\u7684\u957f\u5ea6\u3002\n\n\n\n\u793a\u4f8b\uff1a\n\n\n\n\u7ed9\u5b9a\u00a0\n\"abcabcbb\"\n\u00a0\uff0c\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f\u00a0\n\"abc\"\n\u00a0\uff0c\u90a3\u4e48\u957f\u5ea6\u5c31\u662f3\u3002\n\n\n\n\u7ed9\u5b9a\u00a0\n\"bbbbb\"\n\u00a0\uff0c\u6700\u957f\u7684\u5b50\u4e32\u5c31\u662f\u00a0\n\"b\"\n\u00a0\uff0c\u957f\u5ea6\u662f1\u3002\n\n\n\n\u7ed9\u5b9a\u00a0\n\"pwwkew\"\n\u00a0\uff0c\u6700\u957f\u5b50\u4e32\u662f\u00a0\n\"wke\"\n\u00a0\uff0c\u957f\u5ea6\u662f3\u3002\u8bf7\u6ce8\u610f\u7b54\u6848\u5fc5\u987b\u662f\u4e00\u4e2a\n\u5b50\u4e32\n\uff0c\n\"pwke\"\n\u00a0\u662f\u00a0\n\u5b50\u5e8f\u5217\u00a0\u00a0\n\u800c\u4e0d\u662f\u5b50\u4e32\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n3. Longest Substring Without Repeating Characters\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "3. Longest Substring Without Repeating Characters"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/#3-longest-substring-without-repeating-characters",
            "text": "",
            "title": "3. Longest Substring Without Repeating Characters"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002  \u793a\u4f8b\uff1a  \u7ed9\u5b9a\u00a0 \"abcabcbb\" \u00a0\uff0c\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f\u00a0 \"abc\" \u00a0\uff0c\u90a3\u4e48\u957f\u5ea6\u5c31\u662f3\u3002  \u7ed9\u5b9a\u00a0 \"bbbbb\" \u00a0\uff0c\u6700\u957f\u7684\u5b50\u4e32\u5c31\u662f\u00a0 \"b\" \u00a0\uff0c\u957f\u5ea6\u662f1\u3002  \u7ed9\u5b9a\u00a0 \"pwwkew\" \u00a0\uff0c\u6700\u957f\u5b50\u4e32\u662f\u00a0 \"wke\" \u00a0\uff0c\u957f\u5ea6\u662f3\u3002\u8bf7\u6ce8\u610f\u7b54\u6848\u5fc5\u987b\u662f\u4e00\u4e2a \u5b50\u4e32 \uff0c \"pwke\" \u00a0\u662f\u00a0 \u5b50\u5e8f\u5217\u00a0\u00a0 \u800c\u4e0d\u662f\u5b50\u4e32\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 3. Longest Substring Without Repeating Characters   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0003-longest-substring-without-repeating-characters/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/",
            "text": "4. Median of Two Sorted Arrays\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4\u00a0\nnums1\u00a0\n\u548c\u00a0\nnums2\u00a0\n\u3002\n\n\n\n\u8bf7\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(log (m+n)) \u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\nnums1 = [1, 3]\n\nnums2 = [2]\n\n\n\n\u4e2d\u4f4d\u6570\u662f 2.0\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\nnums1 = [1, 2]\n\nnums2 = [3, 4]\n\n\n\n\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n4. Median of Two Sorted Arrays\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n4. \u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "4. Median of Two Sorted Arrays"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/#4-median-of-two-sorted-arrays",
            "text": "",
            "title": "4. Median of Two Sorted Arrays"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4\u00a0 nums1\u00a0 \u548c\u00a0 nums2\u00a0 \u3002  \u8bf7\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(log (m+n)) \u3002  \u793a\u4f8b 1:  nums1 = [1, 3]\n\nnums2 = [2]\n\n\n\n\u4e2d\u4f4d\u6570\u662f 2.0  \u793a\u4f8b 2:  nums1 = [1, 2]\n\nnums2 = [3, 4]\n\n\n\n\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 4. Median of Two Sorted Arrays   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 4. \u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0004-median-of-two-sorted-arrays/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/",
            "text": "5. Longest Palindromic Substring\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 \ns\n\uff0c\u627e\u5230 \ns\n \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0\ns \n\u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002\n\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\n\u8f93\u5165:\n \"babad\"\n\n\n\u8f93\u51fa:\n \"bab\"\n\n\n\u6ce8\u610f:\n \"aba\"\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\n\n\n\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\n\u8f93\u5165:\n \"cbbd\"\n\n\n\u8f93\u51fa:\n \"bb\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n5. Longest Palindromic Substring\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n5. \u6700\u957f\u56de\u6587\u5b50\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u601d\u8def1\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5\uff1a\u679a\u4e3e\u56de\u6587\u4e32\u7684\u4e2d\u5fc3\uff08\u6ce8\u610f\u5206\u56de\u6587\u4e32\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u65f6\u5019\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u540c\u4e00\u8bbe\u8ba1\u4e00\u4e2a\u65b9\u6cd5\uff09\uff0c\u5f97\u5230\u56de\u6587\u4e32\uff0c\u4ece\u4e2d\u7edf\u8ba1\u4e2d\u6700\u957f\u7684\u56de\u6587\u4e32\u5373\u53ef\u3002  \n\n\n\u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u3002\n\n\n\u601d\u8def3\uff1a\u4e13\u95e8\u89e3\u51b3\u56de\u6587\u4e32\u7684\u4e00\u4e2a\u8457\u540d\u7b97\u6cd5 Manacher \u7b97\u6cd5\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5\n\n\npublic class Solution {\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        for (int i = 0; i < len; i++) {\n            String palindromeOdd = centerSpread(s, len, i, i);\n            String palindromeEven = centerSpread(s, len, i, i + 1);\n            String maxLen = palindromeOdd.length() > palindromeEven.length() ? palindromeOdd : palindromeEven;\n            if (maxLen.length() > longestPalindrome) {\n                longestPalindrome = maxLen.length();\n                longestPalindromeStr = maxLen;\n            }\n        }\n        return longestPalindromeStr;\n    }\n\n    private String centerSpread(String s, int len, int left, int right) {\n        int l = left;\n        int r = right;\n        while (l >= 0 && r < len && s.charAt(l) == s.charAt(r)) {\n            l--;\n            r++;\n        }\n        // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u8df3\u51fa while \u5faa\u73af\u7684\u65f6\u5019\uff0c\u662f\u7b2c 1 \u4e2a\u6ee1\u8db3 s.charAt(l) != s.charAt(r) \u7684\u65f6\u5019\n        // \u6240\u4ee5\uff0c\u4e0d\u80fd\u53d6 l\uff0c\u4e0d\u80fd\u53d6 r\n        return s.substring(l + 1, r);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212\n\n\npublic class Solution2 {\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        boolean[][] dp = new boolean[len][len];\n        // abcdedcba\n        //   j   i\n        // \u5982\u679c dp[j,i] = true \u90a3\u4e48 dp[j+1,i-1] \u4e5f\u4e00\u5b9a\u4e3a true\n        // [j+1,i-1] \u4e00\u5b9a\u8981\u6784\u6210\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\u989d\u533a\u95f4\uff08 1 \u4e2a\u5143\u7d20\u7684\u533a\u95f4\uff0cs.charAt(i)==s.charAt(j) \u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff09\n        // \u5373 j+1 < i-1\uff0c\u5373 i > j + 2 (\u4e0d\u80fd\u53d6\u7b49\u53f7\uff0c\u53d6\u5230\u7b49\u53f7\uff0c\u5c31\u9000\u5316\u6210 1 \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e86)\n        // \u5e94\u8be5\u53cd\u8fc7\u6765\u5199\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j <= i; j++) {\n                // \u533a\u95f4\u5e94\u8be5\u6162\u6162\u653e\u5927\n                if (s.charAt(i) == s.charAt(j) && (i <= j + 2 || dp[j + 1][i - 1])) {\n                    // \u5199\u6210 dp[j][i] \u5c31\u5927\u9519\u7279\u9519\u4e86\uff0c\u4e0d\u8981\u987a\u624b\u5199\u4e60\u60ef\u4e86\n                    dp[j][i] = true;\n                    if (i - j + 1 > longestPalindrome) {\n                        longestPalindrome = i - j + 1;\n                        longestPalindromeStr = s.substring(j, i + 1);\n                    }\n                }\n            }\n        }\n        return longestPalindromeStr;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Manacher \u7b97\u6cd5\n\n\n/**\n * \u4f7f\u7528 Manacher \u7b97\u6cd5\n */\npublic class Solution3 {\n\n    /**\n     * \u521b\u5efa\u5206\u9694\u7b26\u5206\u5272\u7684\u5b57\u7b26\u4e32\n     *\n     * @param s      \u539f\u59cb\u5b57\u7b26\u4e32\n     * @param divide \u5206\u9694\u5b57\u7b26\n     * @return \u4f7f\u7528\u5206\u9694\u5b57\u7b26\u5904\u7406\u4ee5\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\n     */\n    private String generateSDivided(String s, char divide) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        if (s.indexOf(divide) != -1) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\uff0c\u60a8\u4f20\u9012\u7684\u5206\u5272\u5b57\u7b26\uff0c\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5b58\u5728\uff01\");\n        }\n        StringBuilder sBuilder = new StringBuilder();\n        sBuilder.append(divide);\n        for (int i = 0; i < len; i++) {\n            sBuilder.append(s.charAt(i));\n            sBuilder.append(divide);\n        }\n        return sBuilder.toString();\n    }\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        String sDivided = generateSDivided(s, '#');\n        int slen = sDivided.length();\n        int[] p = new int[slen];\n        int mx = 0;\n        // id \u662f\u7531 mx \u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\uff0c\u53ea\u8981\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86\n        int id = 0;\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        for (int i = 0; i < slen; i++) {\n            if (i < mx) {\n                // \u8fd9\u4e00\u6b65\u662f Manacher \u7b97\u6cd5\u7684\u5173\u952e\u6240\u5728\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u56fe\u5f62\u6765\u7406\u89e3\n                // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u5173\u952e\uff0c\u53ef\u4ee5\u628a\u4e24\u79cd\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5408\u5e76\n                p[i] = Integer.min(p[2 * id - i], mx - i);\n            } else {\n                // \u8d70\u5230\u8fd9\u91cc\uff0c\u53ea\u53ef\u80fd\u662f\u56e0\u4e3a i = mx\n                if (i > mx) {\n                    throw new IllegalArgumentException(\"\u7a0b\u5e8f\u51fa\u9519\uff01\");\n                }\n                p[i] = 1;\n            }\n            while (i - p[i] >= 0 && i + p[i] < slen && sDivided.charAt(i - p[i]) == sDivided.charAt(i + p[i])) {\n                p[i]++;\n            }\n            // \u6211\u4eec\u60f3\u8c61 mx \u7684\u5b9a\u4e49\uff0c\u5b83\u662f\u904d\u5386\u8fc7\u7684 i \u7684 i + p[i] \u7684\u6700\u5927\u8005\n            // \u5199\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c mx \u7684\u503c\u8d8a\u5927\uff0c\n            // \u8fdb\u5165\u4e0a\u9762 i < mx \u7684\u5224\u65ad\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u4e4b\u524d\u5224\u65ad\u8fc7\u7684\u56de\u6587\u4fe1\u606f\u4e86\n            if (i + p[i] > mx) {\n                mx = i + p[i];\n                id = i;\n            }\n\n            if (p[i] - 1 > longestPalindrome) {\n                longestPalindrome = p[i] - 1;\n                longestPalindromeStr = sDivided.substring(i - p[i] + 1, i + p[i]).replace(\"#\", \"\");\n            }\n        }\n        return longestPalindromeStr;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0005-longest-palindromic-substring\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "5. Longest Palindromic Substring"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#5-longest-palindromic-substring",
            "text": "",
            "title": "5. Longest Palindromic Substring"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32  s \uff0c\u627e\u5230  s  \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0 s  \u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002  \u793a\u4f8b 1\uff1a  \u8f93\u5165:  \"babad\" \u8f93\u51fa:  \"bab\" \u6ce8\u610f:  \"aba\"\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002  \u793a\u4f8b 2\uff1a  \u8f93\u5165:  \"cbbd\" \u8f93\u51fa:  \"bb\"     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 5. Longest Palindromic Substring   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 5. \u6700\u957f\u56de\u6587\u5b50\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u601d\u8def1\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5\uff1a\u679a\u4e3e\u56de\u6587\u4e32\u7684\u4e2d\u5fc3\uff08\u6ce8\u610f\u5206\u56de\u6587\u4e32\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u65f6\u5019\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u540c\u4e00\u8bbe\u8ba1\u4e00\u4e2a\u65b9\u6cd5\uff09\uff0c\u5f97\u5230\u56de\u6587\u4e32\uff0c\u4ece\u4e2d\u7edf\u8ba1\u4e2d\u6700\u957f\u7684\u56de\u6587\u4e32\u5373\u53ef\u3002    \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u3002  \u601d\u8def3\uff1a\u4e13\u95e8\u89e3\u51b3\u56de\u6587\u4e32\u7684\u4e00\u4e2a\u8457\u540d\u7b97\u6cd5 Manacher \u7b97\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#1",
            "text": "public class Solution {\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        for (int i = 0; i < len; i++) {\n            String palindromeOdd = centerSpread(s, len, i, i);\n            String palindromeEven = centerSpread(s, len, i, i + 1);\n            String maxLen = palindromeOdd.length() > palindromeEven.length() ? palindromeOdd : palindromeEven;\n            if (maxLen.length() > longestPalindrome) {\n                longestPalindrome = maxLen.length();\n                longestPalindromeStr = maxLen;\n            }\n        }\n        return longestPalindromeStr;\n    }\n\n    private String centerSpread(String s, int len, int left, int right) {\n        int l = left;\n        int r = right;\n        while (l >= 0 && r < len && s.charAt(l) == s.charAt(r)) {\n            l--;\n            r++;\n        }\n        // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u8df3\u51fa while \u5faa\u73af\u7684\u65f6\u5019\uff0c\u662f\u7b2c 1 \u4e2a\u6ee1\u8db3 s.charAt(l) != s.charAt(r) \u7684\u65f6\u5019\n        // \u6240\u4ee5\uff0c\u4e0d\u80fd\u53d6 l\uff0c\u4e0d\u80fd\u53d6 r\n        return s.substring(l + 1, r);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#2",
            "text": "public class Solution2 {\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        boolean[][] dp = new boolean[len][len];\n        // abcdedcba\n        //   j   i\n        // \u5982\u679c dp[j,i] = true \u90a3\u4e48 dp[j+1,i-1] \u4e5f\u4e00\u5b9a\u4e3a true\n        // [j+1,i-1] \u4e00\u5b9a\u8981\u6784\u6210\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\u989d\u533a\u95f4\uff08 1 \u4e2a\u5143\u7d20\u7684\u533a\u95f4\uff0cs.charAt(i)==s.charAt(j) \u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff09\n        // \u5373 j+1 < i-1\uff0c\u5373 i > j + 2 (\u4e0d\u80fd\u53d6\u7b49\u53f7\uff0c\u53d6\u5230\u7b49\u53f7\uff0c\u5c31\u9000\u5316\u6210 1 \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e86)\n        // \u5e94\u8be5\u53cd\u8fc7\u6765\u5199\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j <= i; j++) {\n                // \u533a\u95f4\u5e94\u8be5\u6162\u6162\u653e\u5927\n                if (s.charAt(i) == s.charAt(j) && (i <= j + 2 || dp[j + 1][i - 1])) {\n                    // \u5199\u6210 dp[j][i] \u5c31\u5927\u9519\u7279\u9519\u4e86\uff0c\u4e0d\u8981\u987a\u624b\u5199\u4e60\u60ef\u4e86\n                    dp[j][i] = true;\n                    if (i - j + 1 > longestPalindrome) {\n                        longestPalindrome = i - j + 1;\n                        longestPalindromeStr = s.substring(j, i + 1);\n                    }\n                }\n            }\n        }\n        return longestPalindromeStr;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212"
        },
        {
            "location": "/leetcode-0005-longest-palindromic-substring/#3-manacher",
            "text": "/**\n * \u4f7f\u7528 Manacher \u7b97\u6cd5\n */\npublic class Solution3 {\n\n    /**\n     * \u521b\u5efa\u5206\u9694\u7b26\u5206\u5272\u7684\u5b57\u7b26\u4e32\n     *\n     * @param s      \u539f\u59cb\u5b57\u7b26\u4e32\n     * @param divide \u5206\u9694\u5b57\u7b26\n     * @return \u4f7f\u7528\u5206\u9694\u5b57\u7b26\u5904\u7406\u4ee5\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\n     */\n    private String generateSDivided(String s, char divide) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        if (s.indexOf(divide) != -1) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\uff0c\u60a8\u4f20\u9012\u7684\u5206\u5272\u5b57\u7b26\uff0c\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5b58\u5728\uff01\");\n        }\n        StringBuilder sBuilder = new StringBuilder();\n        sBuilder.append(divide);\n        for (int i = 0; i < len; i++) {\n            sBuilder.append(s.charAt(i));\n            sBuilder.append(divide);\n        }\n        return sBuilder.toString();\n    }\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        String sDivided = generateSDivided(s, '#');\n        int slen = sDivided.length();\n        int[] p = new int[slen];\n        int mx = 0;\n        // id \u662f\u7531 mx \u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\uff0c\u53ea\u8981\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86\n        int id = 0;\n        int longestPalindrome = 1;\n        String longestPalindromeStr = s.substring(0, 1);\n        for (int i = 0; i < slen; i++) {\n            if (i < mx) {\n                // \u8fd9\u4e00\u6b65\u662f Manacher \u7b97\u6cd5\u7684\u5173\u952e\u6240\u5728\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u56fe\u5f62\u6765\u7406\u89e3\n                // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u5173\u952e\uff0c\u53ef\u4ee5\u628a\u4e24\u79cd\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5408\u5e76\n                p[i] = Integer.min(p[2 * id - i], mx - i);\n            } else {\n                // \u8d70\u5230\u8fd9\u91cc\uff0c\u53ea\u53ef\u80fd\u662f\u56e0\u4e3a i = mx\n                if (i > mx) {\n                    throw new IllegalArgumentException(\"\u7a0b\u5e8f\u51fa\u9519\uff01\");\n                }\n                p[i] = 1;\n            }\n            while (i - p[i] >= 0 && i + p[i] < slen && sDivided.charAt(i - p[i]) == sDivided.charAt(i + p[i])) {\n                p[i]++;\n            }\n            // \u6211\u4eec\u60f3\u8c61 mx \u7684\u5b9a\u4e49\uff0c\u5b83\u662f\u904d\u5386\u8fc7\u7684 i \u7684 i + p[i] \u7684\u6700\u5927\u8005\n            // \u5199\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c mx \u7684\u503c\u8d8a\u5927\uff0c\n            // \u8fdb\u5165\u4e0a\u9762 i < mx \u7684\u5224\u65ad\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u4e4b\u524d\u5224\u65ad\u8fc7\u7684\u56de\u6587\u4fe1\u606f\u4e86\n            if (i + p[i] > mx) {\n                mx = i + p[i];\n                id = i;\n            }\n\n            if (p[i] - 1 > longestPalindrome) {\n                longestPalindrome = p[i] - 1;\n                longestPalindromeStr = sDivided.substring(i - p[i] + 1, i + p[i]).replace(\"#\", \"\");\n            }\n        }\n        return longestPalindromeStr;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0005-longest-palindromic-substring  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Manacher \u7b97\u6cd5"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/",
            "text": "6. ZigZag Conversion\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5c06\u5b57\u7b26\u4e32\u00a0\n\"PAYPALISHIRING\"\n\u00a0\u4ee5Z\u5b57\u5f62\u6392\u5217\u6210\u7ed9\u5b9a\u7684\u884c\u6570\uff1a\n\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n\n\n\u4e4b\u540e\u4ece\u5de6\u5f80\u53f3\uff0c\u9010\u884c\u8bfb\u53d6\u5b57\u7b26\uff1a\n\"PAHNAPLSIIGYIR\"\n\n\n\u5b9e\u73b0\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570:\n\n\nstring convert(string s, int numRows);\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n s = \"PAYPALISHIRING\", numRows = 3\n\n\u8f93\u51fa:\n \"PAHNAPLSIIGYIR\"\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n s = \"PAYPALISHIRING\", numRows =\u00a04\n\n\u8f93\u51fa:\n\u00a0\"PINALSIGYAHRPI\"\n\n\u89e3\u91ca:\n\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n6. ZigZag Conversion\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n6. Z\u5b57\u5f62\u53d8\u6362\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0006-zigzag-conversion\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "6. ZigZag Conversion"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/#6-zigzag-conversion",
            "text": "",
            "title": "6. ZigZag Conversion"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5c06\u5b57\u7b26\u4e32\u00a0 \"PAYPALISHIRING\" \u00a0\u4ee5Z\u5b57\u5f62\u6392\u5217\u6210\u7ed9\u5b9a\u7684\u884c\u6570\uff1a  P   A   H   N\nA P L S I I G\nY   I   R  \u4e4b\u540e\u4ece\u5de6\u5f80\u53f3\uff0c\u9010\u884c\u8bfb\u53d6\u5b57\u7b26\uff1a \"PAHNAPLSIIGYIR\"  \u5b9e\u73b0\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570:  string convert(string s, int numRows);  \u793a\u4f8b\u00a01:  \u8f93\u5165:  s = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa:  \"PAHNAPLSIIGYIR\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  s = \"PAYPALISHIRING\", numRows =\u00a04 \u8f93\u51fa: \u00a0\"PINALSIGYAHRPI\" \u89e3\u91ca: \n\nP     I    N\nA   L S  I G\nY A   H R\nP     I     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 6. ZigZag Conversion   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 6. Z\u5b57\u5f62\u53d8\u6362   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0006-zigzag-conversion/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0006-zigzag-conversion  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0007-reverse-integer/",
            "text": "7. Reverse Integer\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5c06\u6574\u6570\u4e2d\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 123\n\n\u8f93\u51fa:\n 321\n\n\n\n\u00a0\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n -123\n\n\u8f93\u51fa:\n -321\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n 120\n\n\u8f93\u51fa:\n 21\n\n\n\n\u6ce8\u610f:\n\n\n\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122\n31\n,\u00a0 2\n31\u00a0\n\u2212 1]\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n7. Reverse Integer\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n7. \u53cd\u8f6c\u6574\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8981\u7279\u522b\u6ce8\u610f\u5230\u53cd\u8f6c\u4ee5\u540e\u6574\u6570\u8d8a\u754c\u7684\u95ee\u9898\u3002\n\n\n\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f $[\u22122^{31},  2^{31} \u2212 1]$\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int reverse(int x) {\n        int sign = x >= 0 ? 1 : -1;\n        long res = 0;\n        x = sign * x;\n        while (x > 0) {\n            res = res * 10 + x % 10;\n            x = x / 10;\n        }\n        res = sign * res;\n        if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return (int) res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5355\u72ec\u5224\u65ad\u7b26\u53f7\uff0c\u5e76\u4e14\u6ea2\u51fa\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u5728\u5faa\u73af\u5f53\u4e2d\u505a\u3002\n\n\npublic class Solution2 {\n\n    public int reverse(int x) {\n        if (x == 0) {\n            return 0;\n        }\n        long res = 0;\n        while (x != 0) {\n            res = res * 10 + x % 10;\n            x /= 10;\n            if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) {\n                return 0;\n            }\n        }\n        return (int) res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0007-reverse-integer\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "7. Reverse Integer"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#7-reverse-integer",
            "text": "",
            "title": "7. Reverse Integer"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5c06\u6574\u6570\u4e2d\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  123 \u8f93\u51fa:  321  \u00a0\u793a\u4f8b 2:  \u8f93\u5165:  -123 \u8f93\u51fa:  -321  \u793a\u4f8b 3:  \u8f93\u5165:  120 \u8f93\u51fa:  21  \u6ce8\u610f:  \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 ,\u00a0 2 31\u00a0 \u2212 1]\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 7. Reverse Integer   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 7. \u53cd\u8f6c\u6574\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8981\u7279\u522b\u6ce8\u610f\u5230\u53cd\u8f6c\u4ee5\u540e\u6574\u6570\u8d8a\u754c\u7684\u95ee\u9898\u3002  \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f $[\u22122^{31},  2^{31} \u2212 1]$\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#1",
            "text": "public class Solution {\n\n    public int reverse(int x) {\n        int sign = x >= 0 ? 1 : -1;\n        long res = 0;\n        x = sign * x;\n        while (x > 0) {\n            res = res * 10 + x % 10;\n            x = x / 10;\n        }\n        res = sign * res;\n        if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return (int) res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0007-reverse-integer/#2",
            "text": "public class Solution2 {\n\n    public int reverse(int x) {\n        if (x == 0) {\n            return 0;\n        }\n        long res = 0;\n        while (x != 0) {\n            res = res * 10 + x % 10;\n            x /= 10;\n            if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) {\n                return 0;\n            }\n        }\n        return (int) res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0007-reverse-integer  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5355\u72ec\u5224\u65ad\u7b26\u53f7\uff0c\u5e76\u4e14\u6ea2\u51fa\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u5728\u5faa\u73af\u5f53\u4e2d\u505a\u3002"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/",
            "text": "8. String to Integer (atoi)\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0 \natoi\n\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570\u3002\n\n\n\n\u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e4b\u524d\uff0c\u9700\u8981\u79fb\u9664\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u5b57\u7b26\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6b63\u53f7\u6216\u8d1f\u53f7\uff0c\u9009\u53d6\u8be5\u7b26\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u90e8\u5206\u5b57\u7b26\u5373\u4e3a\u6574\u6570\u7684\u503c\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002\n\n\n\n\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u5f62\u6210\u6574\u6570\u7684\u5b57\u7b26\u540e\u9762\u5305\u62ec\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u6ca1\u6709\u5f71\u54cd\u3002\n\n\n\n\u5f53\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u5e8f\u5217\u4e0d\u662f\u4e2a\u6709\u6548\u7684\u6574\u6570\uff1b\u6216\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff1b\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u3002\n\n\n\n\u82e5\u51fd\u6570\u4e0d\u80fd\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\uff0c\u8fd4\u56de 0\u3002\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f\u00a0[\u22122\n31\n,\u00a0 2\n31\u00a0\n\u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u53ef\u8868\u793a\u7684\u8303\u56f4\uff0c\u5219\u8fd4\u56de \u00a0INT_MAX (2\n31\u00a0\n\u2212 1) \u6216\u00a0INT_MIN (\u22122\n31\n) \u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n \"42\"\n\n\n\u8f93\u51fa:\n 42\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n \"   -42\"\n\n\n\u8f93\u51fa:\n -42\n\n\n\u89e3\u91ca: \n\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n\n\u00a0    \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n \"4193 with words\"\n\n\n\u8f93\u51fa:\n 4193\n\n\n\u89e3\u91ca:\n \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a04:\n\n\n\n\u8f93\u5165:\n \"words and 987\"\n\n\n\u8f93\u51fa:\n 0\n\n\n\u89e3\u91ca:\n \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002\n\n\n\n\u793a\u4f8b\u00a05:\n\n\n\n\u8f93\u5165:\n \"-91283472332\"\n\n\n\u8f93\u51fa:\n -2147483648\n\n\n\u89e3\u91ca:\n \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n\n\u00a0    \u56e0\u6b64\u8fd4\u56de INT_MIN (\u22122\n31\n) \u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n8. String to Integer (atoi)\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n8. \u5b57\u7b26\u4e32\u8f6c\u6574\u6570 (atoi)\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5c31\u662f\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u4e00\u70b9\u90fd\u4e0d\u96be\u3002\n\n\n1\u3001\u53bb\u6389\u5de6\u53f3\u7a7a\u683c\uff1b\n\n\n2\u3001\u770b\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7b26\u53f7\uff0c\u5982\u679c\u662f\u7b26\u53f7\u8bb0\u5f55\u7b26\u53f7\uff0c\u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56de 0\uff1b\n\n\n3\u3001\u6ce8\u610f\u8d8a\u754c\u95ee\u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "8. String to Integer (atoi)"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/#8-string-to-integer-atoi",
            "text": "",
            "title": "8. String to Integer (atoi)"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0  atoi \uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570\u3002  \u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e4b\u524d\uff0c\u9700\u8981\u79fb\u9664\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u5b57\u7b26\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6b63\u53f7\u6216\u8d1f\u53f7\uff0c\u9009\u53d6\u8be5\u7b26\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u90e8\u5206\u5b57\u7b26\u5373\u4e3a\u6574\u6570\u7684\u503c\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002  \u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u5f62\u6210\u6574\u6570\u7684\u5b57\u7b26\u540e\u9762\u5305\u62ec\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u6ca1\u6709\u5f71\u54cd\u3002  \u5f53\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u5e8f\u5217\u4e0d\u662f\u4e2a\u6709\u6548\u7684\u6574\u6570\uff1b\u6216\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff1b\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u3002  \u82e5\u51fd\u6570\u4e0d\u80fd\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\uff0c\u8fd4\u56de 0\u3002  \u8bf4\u660e\uff1a  \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f\u00a0[\u22122 31 ,\u00a0 2 31\u00a0 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u53ef\u8868\u793a\u7684\u8303\u56f4\uff0c\u5219\u8fd4\u56de \u00a0INT_MAX (2 31\u00a0 \u2212 1) \u6216\u00a0INT_MIN (\u22122 31 ) \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  \"42\" \u8f93\u51fa:  42  \u793a\u4f8b\u00a02:  \u8f93\u5165:  \"   -42\" \u8f93\u51fa:  -42 \u89e3\u91ca:  \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n\n\u00a0    \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002  \u793a\u4f8b\u00a03:  \u8f93\u5165:  \"4193 with words\" \u8f93\u51fa:  4193 \u89e3\u91ca:  \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002  \u793a\u4f8b\u00a04:  \u8f93\u5165:  \"words and 987\" \u8f93\u51fa:  0 \u89e3\u91ca:  \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002  \u793a\u4f8b\u00a05:  \u8f93\u5165:  \"-91283472332\" \u8f93\u51fa:  -2147483648 \u89e3\u91ca:  \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n\n\u00a0    \u56e0\u6b64\u8fd4\u56de INT_MIN (\u22122 31 ) \u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 8. String to Integer (atoi)   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6574\u6570 (atoi)   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5c31\u662f\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u4e00\u70b9\u90fd\u4e0d\u96be\u3002  1\u3001\u53bb\u6389\u5de6\u53f3\u7a7a\u683c\uff1b  2\u3001\u770b\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7b26\u53f7\uff0c\u5982\u679c\u662f\u7b26\u53f7\u8bb0\u5f55\u7b26\u53f7\uff0c\u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56de 0\uff1b  3\u3001\u6ce8\u610f\u8d8a\u754c\u95ee\u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0008-string-to-integer-atoi/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0009-palindrome-number/",
            "text": "9. Palindrome Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 121\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n -121\n\n\u8f93\u51fa:\n false\n\n\u89e3\u91ca:\n \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n 10\n\n\u8f93\u51fa:\n false\n\n\u89e3\u91ca:\n \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n\n\n\n\u8fdb\u9636:\n\n\n\u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n9. Palindrome Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n9. \u56de\u6587\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6bcf\u6b21\u6a21 10 \u5f97\u5230\u4e2a\u4f4d\u6570\uff0c\u9664\u4ee5 10 \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u8fd9\u662f\u4ece\u4e00\u4e2a\u6b63\u6574\u6570\u4ece\u4f4e\u4f4d\u8bfb\u5230\u9ad8\u4f4d\u7684\u4e00\u822c\u64cd\u4f5c\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public boolean isPalindrome(int x) {\n        // \u5982\u679c x < 0 \u76f4\u63a5\u5c31\u53ef\u4ee5\u5224\u65ad\u4e0d\u662f\u56de\u6587\u6570\n        if (x < 0) {\n            return false;\n        }\n        return x == reverse(x);\n    }\n\n    private int reverse(int x) {\n        int reverse = 0;\n        while (x != 0) {\n            reverse = reverse * 10 + x % 10;\n            x /= 10;\n        }\n        return reverse;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0009-palindrome-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "9. Palindrome Number"
        },
        {
            "location": "/leetcode-0009-palindrome-number/#9-palindrome-number",
            "text": "",
            "title": "9. Palindrome Number"
        },
        {
            "location": "/leetcode-0009-palindrome-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  121 \u8f93\u51fa:  true  \u793a\u4f8b\u00a02:  \u8f93\u5165:  -121 \u8f93\u51fa:  false \u89e3\u91ca:  \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002  \u793a\u4f8b 3:  \u8f93\u5165:  10 \u8f93\u51fa:  false \u89e3\u91ca:  \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002  \u8fdb\u9636:  \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 9. Palindrome Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 9. \u56de\u6587\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0009-palindrome-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6bcf\u6b21\u6a21 10 \u5f97\u5230\u4e2a\u4f4d\u6570\uff0c\u9664\u4ee5 10 \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u8fd9\u662f\u4ece\u4e00\u4e2a\u6b63\u6574\u6570\u4ece\u4f4e\u4f4d\u8bfb\u5230\u9ad8\u4f4d\u7684\u4e00\u822c\u64cd\u4f5c\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0009-palindrome-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0009-palindrome-number/#1",
            "text": "public class Solution {\n\n    public boolean isPalindrome(int x) {\n        // \u5982\u679c x < 0 \u76f4\u63a5\u5c31\u53ef\u4ee5\u5224\u65ad\u4e0d\u662f\u56de\u6587\u6570\n        if (x < 0) {\n            return false;\n        }\n        return x == reverse(x);\n    }\n\n    private int reverse(int x) {\n        int reverse = 0;\n        while (x != 0) {\n            reverse = reverse * 10 + x % 10;\n            x /= 10;\n        }\n        return reverse;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0009-palindrome-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/",
            "text": "10. Regular Expression Matching\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0(\ns\n) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f\u00a0(\np\n)\u3002\u5b9e\u73b0\u652f\u6301 \n'.'\n\u00a0\u548c\u00a0\n'*'\n\u00a0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002\n\n\n\n'.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26\u3002\n\n'*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20\u3002\n\n\n\n\n\n\u5339\u914d\u5e94\u8be5\u8986\u76d6\n\u6574\u4e2a\n\u5b57\u7b26\u4e32\u00a0(\ns\n) \uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\ns\n\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0\na-z\n\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\np\n\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0\na-z\n\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26\u00a0\n.\n\u00a0\u548c\u00a0\n*\n\u3002\n\n\n\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n\n\ns = \"aa\"\n\np = \"a\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u89e3\u91ca:\n \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n\n\ns = \"aa\"\n\np = \"a*\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n\u00a0'*' \u4ee3\u8868\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20, \u5373\u53ef\u4ee5\u5339\u914d 'a' \u3002\u56e0\u6b64, \u91cd\u590d 'a' \u4e00\u6b21, \u5b57\u7b26\u4e32\u53ef\u53d8\u4e3a \"aa\"\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n\n\ns = \"ab\"\n\np = \".*\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n\u00a0\".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a('*')\u4efb\u610f\u5b57\u7b26('.')\u3002\n\n\n\n\n\n\u793a\u4f8b 4:\n\n\n\n\u8f93\u5165:\n\n\ns = \"aab\"\n\np = \"c*a*b\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n\u00a0'c' \u53ef\u4ee5\u4e0d\u88ab\u91cd\u590d, 'a' \u53ef\u4ee5\u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002\n\n\n\n\n\n\u793a\u4f8b 5:\n\n\n\n\u8f93\u5165:\n\n\ns = \"mississippi\"\n\np = \"mis*is*p*.\"\n\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n10. Regular Expression Matching\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "10. Regular Expression Matching"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/#10-regular-expression-matching",
            "text": "",
            "title": "10. Regular Expression Matching"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f\u00a0( p )\u3002\u5b9e\u73b0\u652f\u6301  '.' \u00a0\u548c\u00a0 '*' \u00a0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002  '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26\u3002\n\n'*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20\u3002  \u5339\u914d\u5e94\u8be5\u8986\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32\u00a0( s ) \uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002  \u8bf4\u660e:   s \u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0 a-z \u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\u3002  p \u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0 a-z \u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26\u00a0 . \u00a0\u548c\u00a0 * \u3002   \u793a\u4f8b 1:  \u8f93\u5165: \n\ns = \"aa\"\n\np = \"a\" \u8f93\u51fa:  false \u89e3\u91ca:  \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b 2:  \u8f93\u5165: \n\ns = \"aa\"\n\np = \"a*\" \u8f93\u51fa:  true \u89e3\u91ca: \u00a0'*' \u4ee3\u8868\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20, \u5373\u53ef\u4ee5\u5339\u914d 'a' \u3002\u56e0\u6b64, \u91cd\u590d 'a' \u4e00\u6b21, \u5b57\u7b26\u4e32\u53ef\u53d8\u4e3a \"aa\"\u3002  \u793a\u4f8b\u00a03:  \u8f93\u5165: \n\ns = \"ab\"\n\np = \".*\" \u8f93\u51fa:  true \u89e3\u91ca: \u00a0\".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a('*')\u4efb\u610f\u5b57\u7b26('.')\u3002  \u793a\u4f8b 4:  \u8f93\u5165: \n\ns = \"aab\"\n\np = \"c*a*b\" \u8f93\u51fa:  true \u89e3\u91ca: \u00a0'c' \u53ef\u4ee5\u4e0d\u88ab\u91cd\u590d, 'a' \u53ef\u4ee5\u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002  \u793a\u4f8b 5:  \u8f93\u5165: \n\ns = \"mississippi\"\n\np = \"mis*is*p*.\" \u8f93\u51fa:  false     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 10. Regular Expression Matching   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0010-regular-expression-matching/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/",
            "text": "11. Container With Most Water\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a \nn\n \u4e2a\u975e\u8d1f\u6574\u6570 \na\n1\n\uff0c\na\n2\uff0c\n...\uff0c\na\nn\uff0c\n\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9\u00a0(\ni\n,\u00a0\na\ni\n) \u3002\u753b \nn\n \u6761\u5782\u76f4\u7ebf\uff0c\u4f7f\u5f97\u5782\u76f4\u7ebf \ni\n\u00a0\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a\u00a0(\ni\n,\u00a0\na\ni\n) \u548c (\ni\n, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e\u00a0\nx\n\u00a0\u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002\n\n\n\n\u6ce8\u610f\uff1a\n\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\nn\n \u81f3\u5c11\u662f2\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n11. Container With Most Water\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "11. Container With Most Water"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/#11-container-with-most-water",
            "text": "",
            "title": "11. Container With Most Water"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a  n  \u4e2a\u975e\u8d1f\u6574\u6570  a 1 \uff0c a 2\uff0c ...\uff0c a n\uff0c \u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9\u00a0( i ,\u00a0 a i ) \u3002\u753b  n  \u6761\u5782\u76f4\u7ebf\uff0c\u4f7f\u5f97\u5782\u76f4\u7ebf  i \u00a0\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a\u00a0( i ,\u00a0 a i ) \u548c ( i , 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e\u00a0 x \u00a0\u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002  \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c n  \u81f3\u5c11\u662f2\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 11. Container With Most Water   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0011-container-with-most-water/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/",
            "text": "12. Integer to Roman\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a\u00a0\nI\n\uff0c\u00a0\nV\n\uff0c\u00a0\nX\n\uff0c\u00a0\nL\n\uff0c\nC\n\uff0c\nD\n\u00a0\u548c\u00a0\nM\n\u3002\n\n\n\u5b57\u7b26\n          \n\u6570\u503c\n\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\n\n\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a\u00a0\nII\n\u00a0\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a\u00a0\nXII\n\u00a0\uff0c\u5373\u4e3a\u00a0\nX\n\u00a0+\u00a0\nII\n\u00a0\u3002 27 \u5199\u505a\u00a0\u00a0\nXXVII\n, \u5373\u4e3a\u00a0\nXX\n\u00a0+\u00a0\nV\n\u00a0+\u00a0\nII\n\u00a0\u3002\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a\u00a0\nIIII\n\uff0c\u800c\u662f\u00a0\nIV\n\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a\u00a0\nIX\n\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a\n\n\n\n\nI\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nV\n\u00a0(5) \u548c\u00a0\nX\n\u00a0(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002\n\n\nX\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nL\n\u00a0(50) \u548c\u00a0\nC\n\u00a0(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c\u00a090\u3002\u00a0\n\n\nC\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nD\n\u00a0(500) \u548c\u00a0\nM\n\u00a0(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a\u00a0400 \u548c\u00a0900\u3002\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1\u00a0\u5230 3999 \u7684\u8303\u56f4\u5185\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n\u00a03\n\n\u8f93\u51fa:\n \"III\"\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n\u00a04\n\n\u8f93\u51fa:\n \"IV\"\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n\u00a09\n\n\u8f93\u51fa:\n \"IX\"\n\n\n\u793a\u4f8b\u00a04:\n\n\n\u8f93\u5165:\n\u00a058\n\n\u8f93\u51fa:\n \"LVIII\"\n\n\u89e3\u91ca:\n C = 100, L = 50, XXX = 30, III = 3.\n\n\n\n\u793a\u4f8b\u00a05:\n\n\n\u8f93\u5165:\n\u00a01994\n\n\u8f93\u51fa:\n \"MCMXCIV\"\n\n\u89e3\u91ca:\n M = 1000, CM = 900, XC = 90, IV = 4.\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n12. Integer to Roman\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u7528\u5230\u7684\u5b57\u6bcd\u662f\u53ef\u4ee5\u7f57\u5217\u51fa\u6765\u7684\uff0c\u6211\u4eec\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u7f57\u5217\u51fa\u6765\uff0c\u518d\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u505a\u51fa\u89e3\u7b54\u3002\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e24\u79cd\u89e3\u6cd5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u7f57\u5217\u51fa\u6240\u6709\u6570\u5b57\u4e0e\u7f57\u9a6c\u5b57\u6bcd\u5bf9\u5e94\u7684\u53ef\u80fd\u6027\uff0c\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217\n    // \u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5230\u4e86\u8d2a\u5fc3\u7b97\u6cd5\n\n    public String intToRoman(int num) {\n        int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        StringBuilder stringBuilder = new StringBuilder();\n        int index = 0;\n        while (index < 13) {\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u53f7\n            while (num >= nums[index]) {\n                stringBuilder.append(romans[index]);\n                num -= nums[index];\n            }\n            index++;\n        }\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 2845;\n        String intToRoman = solution.intToRoman(num);\n        System.out.println(intToRoman);\n\n        num = 1994;\n        intToRoman = solution.intToRoman(num);\n        System.out.println(intToRoman);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public String intToRoman(int num) {\n        int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        StringBuilder stringBuilder = new StringBuilder();\n        int index = 0;\n        while (num > 0) {\n            int times = num / nums[index];\n            while (times > 0) {\n                stringBuilder.append(romans[index]);\n                times--;\n            }\n            num = num % nums[index];\n            index++;\n        }\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2= new Solution2();\n        int num = 2845;\n        String intToRoman = solution2.intToRoman(num);\n        System.out.println(intToRoman);\n\n        num = 1994;\n        intToRoman = solution2.intToRoman(num);\n        System.out.println(intToRoman);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0012-integer-to-roman\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "12. Integer to Roman"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#12-integer-to-roman",
            "text": "",
            "title": "12. Integer to Roman"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a\u00a0 I \uff0c\u00a0 V \uff0c\u00a0 X \uff0c\u00a0 L \uff0c C \uff0c D \u00a0\u548c\u00a0 M \u3002  \u5b57\u7b26            \u6570\u503c \nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000  \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a\u00a0 II \u00a0\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a\u00a0 XII \u00a0\uff0c\u5373\u4e3a\u00a0 X \u00a0+\u00a0 II \u00a0\u3002 27 \u5199\u505a\u00a0\u00a0 XXVII , \u5373\u4e3a\u00a0 XX \u00a0+\u00a0 V \u00a0+\u00a0 II \u00a0\u3002  \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a\u00a0 IIII \uff0c\u800c\u662f\u00a0 IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a\u00a0 IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a   I \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 V \u00a0(5) \u548c\u00a0 X \u00a0(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002  X \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 L \u00a0(50) \u548c\u00a0 C \u00a0(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c\u00a090\u3002\u00a0  C \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 D \u00a0(500) \u548c\u00a0 M \u00a0(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a\u00a0400 \u548c\u00a0900\u3002   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1\u00a0\u5230 3999 \u7684\u8303\u56f4\u5185\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: \u00a03 \u8f93\u51fa:  \"III\"  \u793a\u4f8b\u00a02:  \u8f93\u5165: \u00a04 \u8f93\u51fa:  \"IV\"  \u793a\u4f8b\u00a03:  \u8f93\u5165: \u00a09 \u8f93\u51fa:  \"IX\"  \u793a\u4f8b\u00a04:  \u8f93\u5165: \u00a058 \u8f93\u51fa:  \"LVIII\" \u89e3\u91ca:  C = 100, L = 50, XXX = 30, III = 3.  \u793a\u4f8b\u00a05:  \u8f93\u5165: \u00a01994 \u8f93\u51fa:  \"MCMXCIV\" \u89e3\u91ca:  M = 1000, CM = 900, XC = 90, IV = 4.    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 12. Integer to Roman   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u7528\u5230\u7684\u5b57\u6bcd\u662f\u53ef\u4ee5\u7f57\u5217\u51fa\u6765\u7684\uff0c\u6211\u4eec\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u7f57\u5217\u51fa\u6765\uff0c\u518d\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u505a\u51fa\u89e3\u7b54\u3002  \u4e0b\u9762\u7ed9\u51fa\u4e86\u4e24\u79cd\u89e3\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#1",
            "text": "public class Solution {\n\n    // \u7f57\u5217\u51fa\u6240\u6709\u6570\u5b57\u4e0e\u7f57\u9a6c\u5b57\u6bcd\u5bf9\u5e94\u7684\u53ef\u80fd\u6027\uff0c\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217\n    // \u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5230\u4e86\u8d2a\u5fc3\u7b97\u6cd5\n\n    public String intToRoman(int num) {\n        int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        StringBuilder stringBuilder = new StringBuilder();\n        int index = 0;\n        while (index < 13) {\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u53f7\n            while (num >= nums[index]) {\n                stringBuilder.append(romans[index]);\n                num -= nums[index];\n            }\n            index++;\n        }\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 2845;\n        String intToRoman = solution.intToRoman(num);\n        System.out.println(intToRoman);\n\n        num = 1994;\n        intToRoman = solution.intToRoman(num);\n        System.out.println(intToRoman);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0012-integer-to-roman/#2",
            "text": "public class Solution2 {\n\n    public String intToRoman(int num) {\n        int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        StringBuilder stringBuilder = new StringBuilder();\n        int index = 0;\n        while (num > 0) {\n            int times = num / nums[index];\n            while (times > 0) {\n                stringBuilder.append(romans[index]);\n                times--;\n            }\n            num = num % nums[index];\n            index++;\n        }\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2= new Solution2();\n        int num = 2845;\n        String intToRoman = solution2.intToRoman(num);\n        System.out.println(intToRoman);\n\n        num = 1994;\n        intToRoman = solution2.intToRoman(num);\n        System.out.println(intToRoman);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0012-integer-to-roman  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/",
            "text": "13. Roman to Integer\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a\nI\n\uff0c\u00a0\nV\n\uff0c\u00a0\nX\n\uff0c\u00a0\nL\n\uff0c\nC\n\uff0c\nD\n\u00a0\u548c\u00a0\nM\n\u3002\n\n\n\u5b57\u7b26\n          \n\u6570\u503c\n\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\n\n\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a\u00a0\nII\n\u00a0\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a\u00a0\nXII\n\u00a0\uff0c\u5373\u4e3a\u00a0\nX\n\u00a0+\u00a0\nII\n\u00a0\u3002 27 \u5199\u505a\u00a0\u00a0\nXXVII\n, \u5373\u4e3a\u00a0\nXX\n\u00a0+\u00a0\nV\n\u00a0+\u00a0\nII\n\u00a0\u3002\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a\u00a0\nIIII\n\uff0c\u800c\u662f\u00a0\nIV\n\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a\u00a0\nIX\n\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a\n\n\n\n\nI\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nV\n\u00a0(5) \u548c\u00a0\nX\n\u00a0(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002\n\n\nX\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nL\n\u00a0(50) \u548c\u00a0\nC\n\u00a0(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c\u00a090\u3002\u00a0\n\n\nC\n\u00a0\u53ef\u4ee5\u653e\u5728\u00a0\nD\n\u00a0(500) \u548c\u00a0\nM\n\u00a0(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a\u00a0400 \u548c\u00a0900\u3002\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1\u00a0\u5230 3999 \u7684\u8303\u56f4\u5185\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n\u00a0\"III\"\n\n\u8f93\u51fa:\n 3\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n\u00a0\"IV\"\n\n\u8f93\u51fa:\n 4\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n\u00a0\"IX\"\n\n\u8f93\u51fa:\n 9\n\n\n\u793a\u4f8b\u00a04:\n\n\n\u8f93\u5165:\n\u00a0\"LVIII\"\n\n\u8f93\u51fa:\n 58\n\n\u89e3\u91ca:\n C = 100, L = 50, XXX = 30, III = 3.\n\n\n\n\u793a\u4f8b\u00a05:\n\n\n\u8f93\u5165:\n\u00a0\"MCMXCIV\"\n\n\u8f93\u51fa:\n 1994\n\n\u89e3\u91ca:\n M = 1000, CM = 900, XC = 90, IV = 4.\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n13. Roman to Integer\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5e94\u8be5\u7528\u51cf\u6cd5\uff0c\u4f46\u662f\u524d\u9762\u5df2\u7ecf\u7528\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a\u51cf\u6cd5\u8981\u505a 2 \u6b21\uff0c\u8fd9\u662f\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\n\npublic class Solution {\n\n    public int romanToInt(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return 0;\n        }\n\n        HashMap<Character, Integer> map = new HashMap<>();\n        map.put('I', 1);\n        map.put('V', 5);\n        map.put('X', 10);\n        map.put('L', 50);\n        map.put('C', 100);\n        map.put('D', 500);\n        map.put('M', 1000);\n\n        int res = map.get(s.charAt(0));\n        for (int i = 1; i < len; i++) {\n            int pre = map.get(s.charAt(i - 1));\n            int cur = map.get(s.charAt(i));\n\n            if (pre < cur) {\n                // \u8fd9\u662f\u552f\u4e00\u7684\u4e00\u79cd\u9700\u8981\u6ce8\u610f\u7684\u7279\u6b8a\u60c5\u51b5\uff1a\n                // \u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\n                // \u8981\u7528\u5f53\u524d\u6570\u5b57 - \u524d\u9762\u6570\u5b57\n                // \u56e0\u4e3a\u524d\u9762\u6570\u5b57\u52a0\u8fc7\u4e86\uff0c\u6240\u4ee5\u8981\u51cf\u53bb 2 \u500d\n                res += (cur - 2 * pre);\n            } else {\n                res += cur;\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"III\";\n        int romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n\n        s = \"LVIII\";\n        romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n\n        s = \"MCMXCIV\";\n        romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0013-roman-to-integer\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "13. Roman to Integer"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/#13-roman-to-integer",
            "text": "",
            "title": "13. Roman to Integer"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I \uff0c\u00a0 V \uff0c\u00a0 X \uff0c\u00a0 L \uff0c C \uff0c D \u00a0\u548c\u00a0 M \u3002  \u5b57\u7b26            \u6570\u503c \nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000  \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a\u00a0 II \u00a0\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a\u00a0 XII \u00a0\uff0c\u5373\u4e3a\u00a0 X \u00a0+\u00a0 II \u00a0\u3002 27 \u5199\u505a\u00a0\u00a0 XXVII , \u5373\u4e3a\u00a0 XX \u00a0+\u00a0 V \u00a0+\u00a0 II \u00a0\u3002  \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a\u00a0 IIII \uff0c\u800c\u662f\u00a0 IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a\u00a0 IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a   I \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 V \u00a0(5) \u548c\u00a0 X \u00a0(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002  X \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 L \u00a0(50) \u548c\u00a0 C \u00a0(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c\u00a090\u3002\u00a0  C \u00a0\u53ef\u4ee5\u653e\u5728\u00a0 D \u00a0(500) \u548c\u00a0 M \u00a0(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a\u00a0400 \u548c\u00a0900\u3002   \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1\u00a0\u5230 3999 \u7684\u8303\u56f4\u5185\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: \u00a0\"III\" \u8f93\u51fa:  3  \u793a\u4f8b\u00a02:  \u8f93\u5165: \u00a0\"IV\" \u8f93\u51fa:  4  \u793a\u4f8b\u00a03:  \u8f93\u5165: \u00a0\"IX\" \u8f93\u51fa:  9  \u793a\u4f8b\u00a04:  \u8f93\u5165: \u00a0\"LVIII\" \u8f93\u51fa:  58 \u89e3\u91ca:  C = 100, L = 50, XXX = 30, III = 3.  \u793a\u4f8b\u00a05:  \u8f93\u5165: \u00a0\"MCMXCIV\" \u8f93\u51fa:  1994 \u89e3\u91ca:  M = 1000, CM = 900, XC = 90, IV = 4.    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 13. Roman to Integer   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5e94\u8be5\u7528\u51cf\u6cd5\uff0c\u4f46\u662f\u524d\u9762\u5df2\u7ecf\u7528\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a\u51cf\u6cd5\u8981\u505a 2 \u6b21\uff0c\u8fd9\u662f\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0013-roman-to-integer/#1",
            "text": "import java.util.HashMap;\n\npublic class Solution {\n\n    public int romanToInt(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return 0;\n        }\n\n        HashMap<Character, Integer> map = new HashMap<>();\n        map.put('I', 1);\n        map.put('V', 5);\n        map.put('X', 10);\n        map.put('L', 50);\n        map.put('C', 100);\n        map.put('D', 500);\n        map.put('M', 1000);\n\n        int res = map.get(s.charAt(0));\n        for (int i = 1; i < len; i++) {\n            int pre = map.get(s.charAt(i - 1));\n            int cur = map.get(s.charAt(i));\n\n            if (pre < cur) {\n                // \u8fd9\u662f\u552f\u4e00\u7684\u4e00\u79cd\u9700\u8981\u6ce8\u610f\u7684\u7279\u6b8a\u60c5\u51b5\uff1a\n                // \u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\n                // \u8981\u7528\u5f53\u524d\u6570\u5b57 - \u524d\u9762\u6570\u5b57\n                // \u56e0\u4e3a\u524d\u9762\u6570\u5b57\u52a0\u8fc7\u4e86\uff0c\u6240\u4ee5\u8981\u51cf\u53bb 2 \u500d\n                res += (cur - 2 * pre);\n            } else {\n                res += cur;\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"III\";\n        int romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n\n        s = \"LVIII\";\n        romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n\n        s = \"MCMXCIV\";\n        romanToInt = solution.romanToInt(s);\n        System.out.println(romanToInt);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0013-roman-to-integer  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/",
            "text": "14. Longest Common Prefix\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\n\n\n\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u00a0\n\"\"\n\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165: \n[\"flower\",\"flow\",\"flight\"]\n\n\u8f93\u51fa:\n \"fl\"\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165: \n[\"dog\",\"racecar\",\"car\"]\n\n\u8f93\u51fa:\n \"\"\n\n\u89e3\u91ca:\n \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u00a0\na-z\n\u00a0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n14. Longest Common Prefix\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n14. \u6700\u957f\u516c\u5171\u524d\u7f00\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u90fd\u4ee5\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u7167\u6a21\u677f\u597d\u4e86\u3002\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5199\u51fa\u89e3\u7b54\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public String longestCommonPrefix(String[] strs) {\n        int arrLen = strs.length;\n        if (arrLen == 0) {\n            return \"\";\n        }\n        // \u6839\u636e\u9898\u610f\uff0c\u6700\u957f\u4e0d\u4f1a\u8d85\u8fc7\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        int maxLen = strs[0].length();\n        for (int begin = 0; begin < maxLen; begin++) {\n            for (int i = 0; i < arrLen; i++) {\n                if (begin == strs[i].length() || strs[0].charAt(begin) != strs[i].charAt(begin)) {\n                    return strs[0].substring(0, begin);\n                }\n            }\n        }\n        return strs[0];\n    }\n\n    public static void main(String[] args) {\n        String[] strs = {\"aa\", \"a\"};\n        Solution solution = new Solution();\n        String longestCommonPrefix = solution.longestCommonPrefix(strs);\n        System.out.println(longestCommonPrefix);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0014-longest-common-prefix\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "14. Longest Common Prefix"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/#14-longest-common-prefix",
            "text": "",
            "title": "14. Longest Common Prefix"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002  \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u00a0 \"\" \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa:  \"fl\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa:  \"\" \u89e3\u91ca:  \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002  \u8bf4\u660e:  \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u00a0 a-z \u00a0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 14. Longest Common Prefix   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 14. \u6700\u957f\u516c\u5171\u524d\u7f00   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u90fd\u4ee5\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u7167\u6a21\u677f\u597d\u4e86\u3002\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5199\u51fa\u89e3\u7b54\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0014-longest-common-prefix/#1",
            "text": "public class Solution {\n\n    public String longestCommonPrefix(String[] strs) {\n        int arrLen = strs.length;\n        if (arrLen == 0) {\n            return \"\";\n        }\n        // \u6839\u636e\u9898\u610f\uff0c\u6700\u957f\u4e0d\u4f1a\u8d85\u8fc7\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        int maxLen = strs[0].length();\n        for (int begin = 0; begin < maxLen; begin++) {\n            for (int i = 0; i < arrLen; i++) {\n                if (begin == strs[i].length() || strs[0].charAt(begin) != strs[i].charAt(begin)) {\n                    return strs[0].substring(0, begin);\n                }\n            }\n        }\n        return strs[0];\n    }\n\n    public static void main(String[] args) {\n        String[] strs = {\"aa\", \"a\"};\n        Solution solution = new Solution();\n        String longestCommonPrefix = solution.longestCommonPrefix(strs);\n        System.out.println(longestCommonPrefix);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0014-longest-common-prefix  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0015-3sum/",
            "text": "15. 3Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b \nn\n \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0\nnums\n\uff0c\u5224\u65ad\u00a0\nnums\n\u00a0\u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 \na\uff0cb\uff0cc \uff0c\n\u4f7f\u5f97\u00a0\na + b + c = \n0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\n\n\n\u6ce8\u610f\uff1a\n\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\n\n\n\u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n15. 3Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n15. \u4e09\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u201c\u4e24\u6570\u4e4b\u548c\u201d\u7684\u601d\u8def\u6765\u89e3\u51b3\u201c\u4e09\u6570\u4e4b\u548c\u201d\uff0c\u4f46\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u53bb\u9664\u91cd\u590d\uff0c\u56e0\u6b64\u5728\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6570\u7ec4\u5143\u7d20\u6392\u5e8f\u3002\u6392\u5e8f\u4ee5\u540e\uff0c\u6211\u4eec\u5bf9\u6570\u7ec4\u64cd\u4f5c\u5c31\u6bd4\u65e0\u5e8f\u8981\u65b9\u4fbf\u5f97\u591a\u3002\n\n\n\u5177\u4f53\u7684\u6280\u5de7\u6211\u4eec\u5c55\u793a\u5728\u4e24\u4e2a\u53c2\u8003\u89e3\u7b54\u4e2d\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            # \u7528\u6307\u9488\u5bf9\u649e\u7684\u65b9\u5f0f\n            l = i + 1\n            r = len(nums) - 1\n            # \u4e0d\u80fd\u7b49\u4e8e\uff0c\u7b49\u4e8e\u5c31\u53d8\u6210\u53d6\u4e00\u6837\u7684\u6570\u4e86\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    # \u6ce8\u610f\uff1a\u8fd9\u4e00\u6b65\u5728\u53bb\u91cd\uff0c\u662f\u7b2c\u4e00\u79cd\u89e3\u6cd5 set \u505a\u4e0d\u5230\u7684\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res\n\nif __name__ == '__main__':\n    nums = [-2, 0, 0, 2, 2]\n    solution = Solution()\n    result = solution.threeSum(nums)\n    print(result)\n\n\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.*;\n\npublic class Solution {\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 3) {\n            return res;\n        }\n        Arrays.sort(nums);\n        // \u4e3a\u4e86\u5e94\u5bf9\u4f18\u5316\u70b9 1 \u800c\u5bf9\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u7684\u5904\u7406\n        if (nums[0] == 0 && nums[len - 1] == 0) {\n            List<Integer> threeSum = new ArrayList<>();\n            threeSum.add(0);\n            threeSum.add(0);\n            threeSum.add(0);\n            res.add(threeSum);\n            return res;\n        }\n\n        // \u6ce8\u610f\u5206\u6790\u8fb9\u754c\u6761\u4ef6\n        // 1\u3001\u6700\u591a\u53ea\u80fd\u5230\u5012\u6570\u7b2c 3 \u4f4d\n        // \u5982\u679c\u5168\u90e8\u662f 0 \uff0c\u5176\u5b9e\u4e5f\u7b26\u5408\u9898\u610f\uff0c\u4f46\u662f\u5982\u679c\u6392\u5e8f\u4ee5\u540e\uff0c\u7b2c 1 \u4e2a\u6570\u90fd\u5927\u4e8e\u96f6\uff0c\u80af\u5b9a\u4e0d\u662f\u89e3\n        for (int i = 0; i < len - 2 && nums[i] <= 0; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            // target \u4e00\u5b9a >= 0\n            int target = -nums[i];\n            int l = i + 1;\n            int r = len - 1;\n            while (l < r) {\n                // \u4f18\u5316\u70b91\uff1a\u5982\u679c\u53f3\u8fb9\u7684\u6570\u90fd\u5c0f\u4e8e 0 \u4e86\uff0c\u5de6\u8fb9\u7684\u6570\u4e5f\u4e00\u5b9a\u5c0f\u4e8e 0\n                // \u5b83\u4eec\u7684\u548c\u5c31\u4e0d\u4f1a\u5927\u4e8e 0\n                if (nums[r] < 0) {\n                    break;\n                }\n                int sum = nums[l] + nums[r];\n                if (sum > target) {\n                    r--;\n                } else if (sum < target) {\n                    l++;\n                } else {\n                    assert sum == target;\n                    // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2};\n                    if (l > (i + 1) && nums[l] == nums[l - 1]) {\n                        // \u6b64\u65f6 nums[r] == nums[r + 1] \u4e5f\u4e00\u5b9a\u6210\u7acb\n                        l++;\n                        r--;\n                        continue;\n                    }\n                    List<Integer> threeSum = new ArrayList<>();\n                    threeSum.add(nums[i]);\n                    threeSum.add(nums[l]);\n                    threeSum.add(nums[r]);\n                    res.add(threeSum);\n                    l++;\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {};\n        // int[] nums = {-1, 0, 1, 2, -1, -4};\n        List<List<Integer>> threeSum = solution.threeSum(nums);\n        System.out.println(threeSum);\n    }\n}\n\n\n\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.*;\n\npublic class Solution2 {\n\n    // \u65f6\u95f4\u590d\u6742\u5ea6 : O(n^2);\n    // \u7a7a\u95f4\u590d\u6742\u5ea6 : O(n);\n\n    /**\n     * Edward \u8001\u5e08\u63d0\u4f9b\u7684\u89e3\u6cd5\n     */\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 3) {\n            return res;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < len - 2; i++) {\n            // \u907f\u514d {-1, -1, -1, 1, 2, 3, 4} \u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int low = i + 1;\n            int high = len - 1;\n            int target = -nums[i];\n            while (low < high) {\n                int sum = nums[low] + nums[high];\n                if (sum == target) {\n                    res.add(Arrays.asList(nums[i], nums[low], nums[high]));\n                    // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2};\n                    while (low < high && nums[low] == nums[low + 1]) {\n                        low++;\n                    }\n                    while (low < high && nums[high] == nums[high - 1]) {\n                        high--;\n                    }\n                    low++;\n                    high--;\n                } else if (sum < target) {\n                    low++;\n                } else {\n                    high--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int[] nums = {-2, 0, 0, 2, 2};\n        List<List<Integer>> threeSum = solution2.threeSum(nums);\n        System.out.println(threeSum);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 two sum \u7684\u601d\u8def\u89e3\u51b3\uff0c\u8981\u6ce8\u610f\u53bb\u91cd\u95ee\u9898\u3002\n\n\n\nclass Solution(object):\n    # \u6392\u5e8f\u53ef\u4ee5\u53bb\u6389 -4 \u4f46\u662f\u4e0d\u80fd\u628a\u540e\u9762\u91cd\u590d\u7684 2 \u53bb\u6389\n    # [-4,-4,2,2]\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(nums) < 3:\n            return []\n        nums.sort()\n\n        if nums[0] == nums[-1] == 0:\n            return [[0, 0, 0]]\n\n        res = set()\n        # \u6700\u540e\u4e24\u4e2a\u6570\u5c31\u6ca1\u6709\u5fc5\u8981\u4f5c\u4e3a\u904d\u5386\u7684\u8d77\u70b9\u4e86\n        for index, one in enumerate(nums[:-2]):\n            # \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\uff0c\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\n            if index >= 1 and nums[index] == nums[index - 1]:\n                continue\n            s = set()\n            for two in nums[index + 1:]:\n                if two not in s:\n                    s.add(-one - two)\n                else:\n                    # \u627e\u5230\u4e86\u4e00\u4e2a\u89e3\n                    res.add((one, two, -one - two))\n        return list(map(list, res))\n\n\nif __name__ == '__main__':\n    nums = [-2, 0, 0, 2, 2]\n    solution = Solution()\n    result = solution.threeSum(nums)\n    print(result)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0015-3sum\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "15. 3Sum"
        },
        {
            "location": "/leetcode-0015-3sum/#15-3sum",
            "text": "",
            "title": "15. 3Sum"
        },
        {
            "location": "/leetcode-0015-3sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b  n  \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0 nums \uff0c\u5224\u65ad\u00a0 nums \u00a0\u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20  a\uff0cb\uff0cc \uff0c \u4f7f\u5f97\u00a0 a + b + c =  0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002  \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002  \u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 15. 3Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 15. \u4e09\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0015-3sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a   \u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u201c\u4e24\u6570\u4e4b\u548c\u201d\u7684\u601d\u8def\u6765\u89e3\u51b3\u201c\u4e09\u6570\u4e4b\u548c\u201d\uff0c\u4f46\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u53bb\u9664\u91cd\u590d\uff0c\u56e0\u6b64\u5728\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6570\u7ec4\u5143\u7d20\u6392\u5e8f\u3002\u6392\u5e8f\u4ee5\u540e\uff0c\u6211\u4eec\u5bf9\u6570\u7ec4\u64cd\u4f5c\u5c31\u6bd4\u65e0\u5e8f\u8981\u65b9\u4fbf\u5f97\u591a\u3002  \u5177\u4f53\u7684\u6280\u5de7\u6211\u4eec\u5c55\u793a\u5728\u4e24\u4e2a\u53c2\u8003\u89e3\u7b54\u4e2d\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0015-3sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0015-3sum/#1",
            "text": "Python \u5199\u6cd5\uff1a  class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            # \u7528\u6307\u9488\u5bf9\u649e\u7684\u65b9\u5f0f\n            l = i + 1\n            r = len(nums) - 1\n            # \u4e0d\u80fd\u7b49\u4e8e\uff0c\u7b49\u4e8e\u5c31\u53d8\u6210\u53d6\u4e00\u6837\u7684\u6570\u4e86\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    # \u6ce8\u610f\uff1a\u8fd9\u4e00\u6b65\u5728\u53bb\u91cd\uff0c\u662f\u7b2c\u4e00\u79cd\u89e3\u6cd5 set \u505a\u4e0d\u5230\u7684\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res\n\nif __name__ == '__main__':\n    nums = [-2, 0, 0, 2, 2]\n    solution = Solution()\n    result = solution.threeSum(nums)\n    print(result)  Java \u5199\u6cd5\uff1a  import java.util.*;\n\npublic class Solution {\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 3) {\n            return res;\n        }\n        Arrays.sort(nums);\n        // \u4e3a\u4e86\u5e94\u5bf9\u4f18\u5316\u70b9 1 \u800c\u5bf9\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u7684\u5904\u7406\n        if (nums[0] == 0 && nums[len - 1] == 0) {\n            List<Integer> threeSum = new ArrayList<>();\n            threeSum.add(0);\n            threeSum.add(0);\n            threeSum.add(0);\n            res.add(threeSum);\n            return res;\n        }\n\n        // \u6ce8\u610f\u5206\u6790\u8fb9\u754c\u6761\u4ef6\n        // 1\u3001\u6700\u591a\u53ea\u80fd\u5230\u5012\u6570\u7b2c 3 \u4f4d\n        // \u5982\u679c\u5168\u90e8\u662f 0 \uff0c\u5176\u5b9e\u4e5f\u7b26\u5408\u9898\u610f\uff0c\u4f46\u662f\u5982\u679c\u6392\u5e8f\u4ee5\u540e\uff0c\u7b2c 1 \u4e2a\u6570\u90fd\u5927\u4e8e\u96f6\uff0c\u80af\u5b9a\u4e0d\u662f\u89e3\n        for (int i = 0; i < len - 2 && nums[i] <= 0; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            // target \u4e00\u5b9a >= 0\n            int target = -nums[i];\n            int l = i + 1;\n            int r = len - 1;\n            while (l < r) {\n                // \u4f18\u5316\u70b91\uff1a\u5982\u679c\u53f3\u8fb9\u7684\u6570\u90fd\u5c0f\u4e8e 0 \u4e86\uff0c\u5de6\u8fb9\u7684\u6570\u4e5f\u4e00\u5b9a\u5c0f\u4e8e 0\n                // \u5b83\u4eec\u7684\u548c\u5c31\u4e0d\u4f1a\u5927\u4e8e 0\n                if (nums[r] < 0) {\n                    break;\n                }\n                int sum = nums[l] + nums[r];\n                if (sum > target) {\n                    r--;\n                } else if (sum < target) {\n                    l++;\n                } else {\n                    assert sum == target;\n                    // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2};\n                    if (l > (i + 1) && nums[l] == nums[l - 1]) {\n                        // \u6b64\u65f6 nums[r] == nums[r + 1] \u4e5f\u4e00\u5b9a\u6210\u7acb\n                        l++;\n                        r--;\n                        continue;\n                    }\n                    List<Integer> threeSum = new ArrayList<>();\n                    threeSum.add(nums[i]);\n                    threeSum.add(nums[l]);\n                    threeSum.add(nums[r]);\n                    res.add(threeSum);\n                    l++;\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {};\n        // int[] nums = {-1, 0, 1, 2, -1, -4};\n        List<List<Integer>> threeSum = solution.threeSum(nums);\n        System.out.println(threeSum);\n    }\n}  Java \u5199\u6cd5\uff1a  import java.util.*;\n\npublic class Solution2 {\n\n    // \u65f6\u95f4\u590d\u6742\u5ea6 : O(n^2);\n    // \u7a7a\u95f4\u590d\u6742\u5ea6 : O(n);\n\n    /**\n     * Edward \u8001\u5e08\u63d0\u4f9b\u7684\u89e3\u6cd5\n     */\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 3) {\n            return res;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < len - 2; i++) {\n            // \u907f\u514d {-1, -1, -1, 1, 2, 3, 4} \u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int low = i + 1;\n            int high = len - 1;\n            int target = -nums[i];\n            while (low < high) {\n                int sum = nums[low] + nums[high];\n                if (sum == target) {\n                    res.add(Arrays.asList(nums[i], nums[low], nums[high]));\n                    // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2};\n                    while (low < high && nums[low] == nums[low + 1]) {\n                        low++;\n                    }\n                    while (low < high && nums[high] == nums[high - 1]) {\n                        high--;\n                    }\n                    low++;\n                    high--;\n                } else if (sum < target) {\n                    low++;\n                } else {\n                    high--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int[] nums = {-2, 0, 0, 2, 2};\n        List<List<Integer>> threeSum = solution2.threeSum(nums);\n        System.out.println(threeSum);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0015-3sum/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0015-3sum/#2-two-sum",
            "text": "class Solution(object):\n    # \u6392\u5e8f\u53ef\u4ee5\u53bb\u6389 -4 \u4f46\u662f\u4e0d\u80fd\u628a\u540e\u9762\u91cd\u590d\u7684 2 \u53bb\u6389\n    # [-4,-4,2,2]\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(nums) < 3:\n            return []\n        nums.sort()\n\n        if nums[0] == nums[-1] == 0:\n            return [[0, 0, 0]]\n\n        res = set()\n        # \u6700\u540e\u4e24\u4e2a\u6570\u5c31\u6ca1\u6709\u5fc5\u8981\u4f5c\u4e3a\u904d\u5386\u7684\u8d77\u70b9\u4e86\n        for index, one in enumerate(nums[:-2]):\n            # \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\uff0c\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\n            if index >= 1 and nums[index] == nums[index - 1]:\n                continue\n            s = set()\n            for two in nums[index + 1:]:\n                if two not in s:\n                    s.add(-one - two)\n                else:\n                    # \u627e\u5230\u4e86\u4e00\u4e2a\u89e3\n                    res.add((one, two, -one - two))\n        return list(map(list, res))\n\n\nif __name__ == '__main__':\n    nums = [-2, 0, 0, 2, 2]\n    solution = Solution()\n    result = solution.threeSum(nums)\n    print(result)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0015-3sum  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 two sum \u7684\u601d\u8def\u89e3\u51b3\uff0c\u8981\u6ce8\u610f\u53bb\u91cd\u95ee\u9898\u3002"
        },
        {
            "location": "/leetcode-0016-3sum-closest/",
            "text": "16. 3Sum Closest\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec\u00a0\nn\n \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0\nnums\n\u00a0\n\u548c \u4e00\u4e2a\u76ee\u6807\u503c\u00a0\ntarget\n\u3002\u627e\u51fa\u00a0\nnums\n\u00a0\n\u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e\u00a0\ntarget\n\u00a0\u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u6570\u7ec4 nums = [-1\uff0c2\uff0c1\uff0c-4], \u548c target = 1.\n\n\u4e0e target \u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\u7684\u548c\u4e3a 2. (-1 + 2 + 1 = 2).\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n16. 3Sum Closest\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\uff0c\u524d\u63d0\u662f\u8981\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        if len(nums) < 3:\n            return []\n        # \u521d\u59cb\u5316\n        diff = float('inf')\n        nums.sort()\n        for index in range(len(nums) - 2):\n            if index > 0 and nums[index] == nums[index - 1]:\n                continue\n            l = index + 1\n            r = len(nums) - 1\n            while l < r:\n                s = nums[index] + nums[l] + nums[r]\n                if abs(s - target) < diff:\n                    diff = abs(s - target)\n                    res = s\n                if s > target:\n                    r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    return target\n        return res\n\n\nif __name__ == '__main__':\n    nums = [-1, 0, 1, 1, 55]\n    target = 3\n    solution = Solution()\n    result = solution.threeSumClosest(nums, target)\n    print(result)\n\n\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\n/**\n * \u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\n */\npublic class Solution {\n\n    public int threeSumClosest(int[] nums, int target) {\n        int len = nums.length;\n        if (len < 3) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u521d\u59cb\u5316\n\n        int diff = Integer.MAX_VALUE;\n        int res = nums[0] + nums[1] + nums[len - 1];\n        // \u6392\u5e8f\u5f88\u5173\u952e\n        Arrays.sort(nums);\n        // len-3 len-2 len-1\n        for (int i = 0; i < len - 2; i++) {\n            int left = i + 1;\n            int right = len - 1;\n            while (left < right) {\n                int sum = nums[i] + nums[left] + nums[right];\n                if (sum > target) {\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    return target;\n                }\n                if (Math.abs(sum - target) < diff) {\n                    diff = Math.abs(sum - target);\n                    res = sum;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-1, 2, 1, -4};\n        int target = 1;\n        Solution solution = new Solution();\n        int threeSumClosest = solution.threeSumClosest(nums, target);\n        System.out.println(threeSumClosest);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0016-3sum-closest\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "16. 3Sum Closest"
        },
        {
            "location": "/leetcode-0016-3sum-closest/#16-3sum-closest",
            "text": "",
            "title": "16. 3Sum Closest"
        },
        {
            "location": "/leetcode-0016-3sum-closest/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec\u00a0 n  \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0 nums \u00a0 \u548c \u4e00\u4e2a\u76ee\u6807\u503c\u00a0 target \u3002\u627e\u51fa\u00a0 nums \u00a0 \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e\u00a0 target \u00a0\u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002  \u4f8b\u5982\uff0c\u7ed9\u5b9a\u6570\u7ec4 nums = [-1\uff0c2\uff0c1\uff0c-4], \u548c target = 1.\n\n\u4e0e target \u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\u7684\u548c\u4e3a 2. (-1 + 2 + 1 = 2).     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 16. 3Sum Closest   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0016-3sum-closest/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\uff0c\u524d\u63d0\u662f\u8981\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0016-3sum-closest/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0016-3sum-closest/#1",
            "text": "Python \u5199\u6cd5\uff1a  class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        if len(nums) < 3:\n            return []\n        # \u521d\u59cb\u5316\n        diff = float('inf')\n        nums.sort()\n        for index in range(len(nums) - 2):\n            if index > 0 and nums[index] == nums[index - 1]:\n                continue\n            l = index + 1\n            r = len(nums) - 1\n            while l < r:\n                s = nums[index] + nums[l] + nums[r]\n                if abs(s - target) < diff:\n                    diff = abs(s - target)\n                    res = s\n                if s > target:\n                    r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    return target\n        return res\n\n\nif __name__ == '__main__':\n    nums = [-1, 0, 1, 1, 55]\n    target = 3\n    solution = Solution()\n    result = solution.threeSumClosest(nums, target)\n    print(result)  Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\n/**\n * \u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\n */\npublic class Solution {\n\n    public int threeSumClosest(int[] nums, int target) {\n        int len = nums.length;\n        if (len < 3) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u521d\u59cb\u5316\n\n        int diff = Integer.MAX_VALUE;\n        int res = nums[0] + nums[1] + nums[len - 1];\n        // \u6392\u5e8f\u5f88\u5173\u952e\n        Arrays.sort(nums);\n        // len-3 len-2 len-1\n        for (int i = 0; i < len - 2; i++) {\n            int left = i + 1;\n            int right = len - 1;\n            while (left < right) {\n                int sum = nums[i] + nums[left] + nums[right];\n                if (sum > target) {\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    return target;\n                }\n                if (Math.abs(sum - target) < diff) {\n                    diff = Math.abs(sum - target);\n                    res = sum;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-1, 2, 1, -4};\n        int target = 1;\n        Solution solution = new Solution();\n        int threeSumClosest = solution.threeSumClosest(nums, target);\n        System.out.println(threeSumClosest);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0016-3sum-closest  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/",
            "text": "17. Letter Combinations of a Phone Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57\u00a0\n2-9\n\u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\n\n\n\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002\n\n\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165\uff1a\n\"23\"\n\n\u8f93\u51fa\uff1a\n[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n\n\n\u8bf4\u660e:\n\n\u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n17. Letter Combinations of a Phone Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002\n\n\n\u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a\n1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002\n2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002\n3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002\n\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\n\n\u601d\u8003\u603b\u7ed3\uff1a\n1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b\n\n2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b\n\n3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b\n\n4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f \ndigits.charAt(index) - '0'\n\uff1b\n5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a\nassert c >= '0' || c <= '9' || c != '1';\n\uff1b\n\n6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b\n\n7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b\n\n8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n    private String[] digitsMap = {\n            \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\n            \"pqrs\", \"tuv\", \"wxyz\"\n    };\n\n    private void findCombinations(String digits, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (begin == digits.length()) {\n            res.add(pre);\n            return;\n        }\n        String nextStr = digitsMap[digits.charAt(begin) - '0'];\n        // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af\n        for (int i = 0; i < nextStr.length(); i++) {\n            findCombinations(digits, begin + 1, pre + nextStr.charAt(i));\n        }\n    }\n\n    public List<String> letterCombinations(String digits) {\n        if (digits.length() == 0) {\n            return res;\n        }\n        findCombinations(digits, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> letterCombinations = solution.letterCombinations(\"23\");\n        System.out.println(letterCombinations);\n    }\n}",
            "title": "17. Letter Combinations of a Phone Number"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#17-letter-combinations-of-a-phone-number",
            "text": "",
            "title": "17. Letter Combinations of a Phone Number"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57\u00a0 2-9 \u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002  \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002   \u793a\u4f8b:  \u8f93\u5165\uff1a \"23\" \u8f93\u51fa\uff1a [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].  \u8bf4\u660e: \n\u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 17. Letter Combinations of a Phone Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002  \u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a\n1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002\n2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002\n3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002\n\u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002  \u601d\u8003\u603b\u7ed3\uff1a\n1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b \n2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b \n3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b \n4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f  digits.charAt(index) - '0' \uff1b\n5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a assert c >= '0' || c <= '9' || c != '1'; \uff1b \n6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b \n7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b \n8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0017-letter-combinations-of-a-phone-number/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n    private String[] digitsMap = {\n            \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\n            \"pqrs\", \"tuv\", \"wxyz\"\n    };\n\n    private void findCombinations(String digits, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (begin == digits.length()) {\n            res.add(pre);\n            return;\n        }\n        String nextStr = digitsMap[digits.charAt(begin) - '0'];\n        // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af\n        for (int i = 0; i < nextStr.length(); i++) {\n            findCombinations(digits, begin + 1, pre + nextStr.charAt(i));\n        }\n    }\n\n    public List<String> letterCombinations(String digits) {\n        if (digits.length() == 0) {\n            return res;\n        }\n        findCombinations(digits, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> letterCombinations = solution.letterCombinations(\"23\");\n        System.out.println(letterCombinations);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0018-4sum/",
            "text": "18. 4Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u00a0\nn\n \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0\nnums\n\u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u503c\u00a0\ntarget\n\uff0c\u5224\u65ad\u00a0\nnums\n\u00a0\u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 \na\uff0c\nb\uff0cc\n\u00a0\u548c \nd\n\u00a0\uff0c\u4f7f\u5f97\u00a0\na\n + \nb\n + \nc\n + \nd\n\u00a0\u7684\u503c\u4e0e\u00a0\ntarget\n\u00a0\u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n18. 4Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n18. \u56db\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u91c7\u7528\u4e86\u201c\u4e09\u6570\u4e4b\u548c\u201d\u7684\u89e3\u6cd5\uff0c\u5728\u5916\u9762\u591a\u5957\u4e86\u4e00\u5c42\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    // time : O(n^3);\n    // space : O(n);\n\n\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 4) {\n            return res;\n        }\n        Arrays.sort(nums);\n        // len-4 len-3 len-2 len-1\n        for (int i = 0; i < len - 3; i++) {\n            // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 1\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            // len-3 len-2 len-1\n            for (int j = i + 1; j < len - 2; j++) {\n                // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 2\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                // \u63a5\u4e0b\u6765\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n                int left = j + 1;\n                int right = len - 1;\n                while (left < right) {\n                    int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                    if (sum == target) {\n                        List<Integer> oneSolution = new ArrayList<>();\n                        oneSolution.add(nums[i]);\n                        oneSolution.add(nums[j]);\n                        oneSolution.add(nums[left]);\n                        oneSolution.add(nums[right]);\n                        res.add(oneSolution);\n                        // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 3\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n                        while (left < right && nums[left] == nums[left + 1]) {\n                            left++;\n                        }\n                        while (left < right && nums[right] == nums[right - 1]) {\n                            right--;\n                        }\n                        // \u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86\n                        left++;\n                        right--;\n                    } else if (sum < target) {\n                        left++;\n                    } else {\n                        right--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 0, -1, 0, -2, 2};\n        int target = 0;\n        List<List<Integer>> fourSum = solution.fourSum(nums, target);\n        System.out.println(fourSum);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0018-4sum\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "18. 4Sum"
        },
        {
            "location": "/leetcode-0018-4sum/#18-4sum",
            "text": "",
            "title": "18. 4Sum"
        },
        {
            "location": "/leetcode-0018-4sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u00a0 n  \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0 nums \u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u503c\u00a0 target \uff0c\u5224\u65ad\u00a0 nums \u00a0\u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20  a\uff0c b\uff0cc \u00a0\u548c  d \u00a0\uff0c\u4f7f\u5f97\u00a0 a  +  b  +  c  +  d \u00a0\u7684\u503c\u4e0e\u00a0 target \u00a0\u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002  \u6ce8\u610f\uff1a  \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002  \u793a\u4f8b\uff1a  \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 18. 4Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 18. \u56db\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0018-4sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u91c7\u7528\u4e86\u201c\u4e09\u6570\u4e4b\u548c\u201d\u7684\u89e3\u6cd5\uff0c\u5728\u5916\u9762\u591a\u5957\u4e86\u4e00\u5c42\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0018-4sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0018-4sum/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    // time : O(n^3);\n    // space : O(n);\n\n\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        if (len < 4) {\n            return res;\n        }\n        Arrays.sort(nums);\n        // len-4 len-3 len-2 len-1\n        for (int i = 0; i < len - 3; i++) {\n            // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 1\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            // len-3 len-2 len-1\n            for (int j = i + 1; j < len - 2; j++) {\n                // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 2\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                // \u63a5\u4e0b\u6765\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n                int left = j + 1;\n                int right = len - 1;\n                while (left < right) {\n                    int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                    if (sum == target) {\n                        List<Integer> oneSolution = new ArrayList<>();\n                        oneSolution.add(nums[i]);\n                        oneSolution.add(nums[j]);\n                        oneSolution.add(nums[left]);\n                        oneSolution.add(nums[right]);\n                        res.add(oneSolution);\n                        // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 3\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09\n                        while (left < right && nums[left] == nums[left + 1]) {\n                            left++;\n                        }\n                        while (left < right && nums[right] == nums[right - 1]) {\n                            right--;\n                        }\n                        // \u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86\n                        left++;\n                        right--;\n                    } else if (sum < target) {\n                        left++;\n                    } else {\n                        right--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 0, -1, 0, -2, 2};\n        int target = 0;\n        List<List<Integer>> fourSum = solution.fourSum(nums, target);\n        System.out.println(fourSum);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0018-4sum  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/",
            "text": "19. Remove Nth Node From End of List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c\u00a0\nn\u00a0\n\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: \n1->2->3->4->5\n, \u548c \nn\n = 2\n.\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a \n1->2->3->5\n.\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\u7ed9\u5b9a\u7684 \nn\n\u00a0\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002\n\n\n\u8fdb\u9636\uff1a\n\n\n\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n19. Remove Nth Node From End of List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002\n\n\u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n        // \u8981\u8d70 n \u6b65\n        while (curNode != null && n != -1) {\n            curNode = curNode.next;\n            n--;\n        }\n        ListNode pre = dummyNode;\n        while (curNode != null) {\n            pre = pre.next;\n            curNode = curNode.next;\n        }\n        // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\n        // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n        ListNode deleteNode = pre.next;\n        pre.next = deleteNode.next;\n        deleteNode.next = null;\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2};\n        int n = 2;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n);\n        System.out.println(removeNthFromEnd);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "19. Remove Nth Node From End of List"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#19-remove-nth-node-from-end-of-list",
            "text": "",
            "title": "19. Remove Nth Node From End of List"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c\u00a0 n\u00a0 \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002  \u793a\u4f8b\uff1a  \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868:  1->2->3->4->5 , \u548c  n  = 2 .\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a  1->2->3->5 .  \u8bf4\u660e\uff1a  \u7ed9\u5b9a\u7684  n \u00a0\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002  \u8fdb\u9636\uff1a  \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 19. Remove Nth Node From End of List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \n\u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0019-remove-nth-node-from-end-of-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n        // \u8981\u8d70 n \u6b65\n        while (curNode != null && n != -1) {\n            curNode = curNode.next;\n            n--;\n        }\n        ListNode pre = dummyNode;\n        while (curNode != null) {\n            pre = pre.next;\n            curNode = curNode.next;\n        }\n        // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\n        // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n        ListNode deleteNode = pre.next;\n        pre.next = deleteNode.next;\n        deleteNode.next = null;\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2};\n        int n = 2;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n);\n        System.out.println(removeNthFromEnd);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/",
            "text": "20. Valid Parentheses\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec \n'('\n\uff0c\n')'\n\uff0c\n'{'\n\uff0c\n'}'\n\uff0c\n'['\n\uff0c\n']'\n\u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002\n\n\n\n\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a\n\n\n\n\n\n\n\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002\n\n\n\n\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002\n\n\n\n\n\n\n\u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n \"()\"\n\n\n\u8f93\u51fa:\n true\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n \"()[]{}\"\n\n\n\u8f93\u51fa:\n true\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n \"(]\"\n\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\u793a\u4f8b\u00a04:\n\n\n\n\u8f93\u5165:\n \"([)]\"\n\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\u793a\u4f8b\u00a05:\n\n\n\n\u8f93\u5165:\n \"{[]}\"\n\n\n\u8f93\u51fa:\n true\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n20. Valid Parentheses\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n20. \u6709\u6548\u7684\u62ec\u53f7\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "20. Valid Parentheses"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/#20-valid-parentheses",
            "text": "",
            "title": "20. Valid Parentheses"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec  '(' \uff0c ')' \uff0c '{' \uff0c '}' \uff0c '[' \uff0c ']' \u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002  \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a   \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002  \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002   \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \"()\" \u8f93\u51fa:  true  \u793a\u4f8b\u00a02:  \u8f93\u5165:  \"()[]{}\" \u8f93\u51fa:  true  \u793a\u4f8b\u00a03:  \u8f93\u5165:  \"(]\" \u8f93\u51fa:  false  \u793a\u4f8b\u00a04:  \u8f93\u5165:  \"([)]\" \u8f93\u51fa:  false  \u793a\u4f8b\u00a05:  \u8f93\u5165:  \"{[]}\" \u8f93\u51fa:  true     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 20. Valid Parentheses   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 20. \u6709\u6548\u7684\u62ec\u53f7   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0020-valid-parentheses/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/",
            "text": "21. Merge Two Sorted Lists\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002\u00a0\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165\uff1a\n1->2->4, 1->3->4\n\n\u8f93\u51fa\uff1a\n1->1->2->3->4->4\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n21. Merge Two Sorted Lists\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002\n\n\n\u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002\n\n\n\n\n\n\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709 \n\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummyNode = new ListNode(-1);\n        ListNode p1 = l1;\n        ListNode p2 = l2;\n        ListNode curNode = dummyNode;\n        while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83\n            if (p1.val < p2.val) {\n                curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p1 = p1.next;\n            } else {\n                curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p2 = p2.next;\n            }\n            curNode = curNode.next;\n        }\n        // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null\n        if (p1 == null) {\n            curNode.next = p2;\n        }\n        if (p2 == null) {\n            curNode.next = p1;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 3, 5, 7};\n        int[] nums2 = {2, 4, 6};\n\n        ListNode l1 = new ListNode(nums1);\n        ListNode l2 = new ListNode(nums2);\n\n        Solution solution = new Solution();\n        ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2);\n        System.out.println(mergeTwoLists);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\n// \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210\npublic class Solution2 {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\n        ListNode mergeNode;\n        if (l1.val < l2.val) {\n            mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1.next, l2);\n        } else {\n            mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1, l2.next);\n        }\n        return mergeNode;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "21. Merge Two Sorted Lists"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#21-merge-two-sorted-lists",
            "text": "",
            "title": "21. Merge Two Sorted Lists"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002\u00a0  \u793a\u4f8b\uff1a  \u8f93\u5165\uff1a 1->2->4, 1->3->4 \u8f93\u51fa\uff1a 1->1->2->3->4->4    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 21. Merge Two Sorted Lists   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002  \u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002    \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709  \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummyNode = new ListNode(-1);\n        ListNode p1 = l1;\n        ListNode p2 = l2;\n        ListNode curNode = dummyNode;\n        while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83\n            if (p1.val < p2.val) {\n                curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p1 = p1.next;\n            } else {\n                curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc\n                p2 = p2.next;\n            }\n            curNode = curNode.next;\n        }\n        // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null\n        if (p1 == null) {\n            curNode.next = p2;\n        }\n        if (p2 == null) {\n            curNode.next = p1;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 3, 5, 7};\n        int[] nums2 = {2, 4, 6};\n\n        ListNode l1 = new ListNode(nums1);\n        ListNode l2 = new ListNode(nums2);\n\n        Solution solution = new Solution();\n        ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2);\n        System.out.println(mergeTwoLists);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0021-merge-two-sorted-lists/#2",
            "text": "// \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210\npublic class Solution2 {\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\n        ListNode mergeNode;\n        if (l1.val < l2.val) {\n            mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1.next, l2);\n        } else {\n            mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762\n            mergeNode.next = mergeTwoLists(l1, l2.next);\n        }\n        return mergeNode;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/",
            "text": "22. Generate Parentheses\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u00a0\nn\n\u00a0\u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14\n\u6709\u6548\u7684\n\u62ec\u53f7\u7ec4\u5408\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u51fa\u00a0\nn \n=\n \n3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a\n\n\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n22. Generate Parentheses\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n22. \u62ec\u53f7\u751f\u6210\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u7801\u4f1a\u7b80\u6d01\u4e00\u4e9b\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u70b9\u7ed5\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<String> generateParenthesis(int n) {\n        List<String> res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n        help(\"\", n, n, res);\n        return res;\n    }\n\n    /**\n     * @param curString \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u7ed3\u679c\n     * @param left      \u5de6\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389\n     * @param right     \u53f3\u8fb9\u7684\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389\n     * @param res       \u7ed3\u679c\u96c6\n     */\n    private void help(String curString, int left, int right, List<String> res) {\n        if (left == 0 && right == 0) {\n            res.add(curString);\n            return;\n        }\n        // \u8fd8\u6709\u5de6\u62ec\u53f7\u6ca1\u6709\u7528\u6389\uff0c\u4e8e\u662f\u8003\u8651\u7528\u6389\u5de6\u62ec\u53f7\n        if (left > 0) {\n            help(curString + \"(\", left - 1, right, res);\n        }\n        // \u5de6\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u6bd4\u53f3\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u5c11\n        // \u4e5f\u5c31\u662f\u8bf4\uff0c\u5de6\u8fb9\u62ec\u53f7\u7528\u5f97\u591a\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u53f3\u8fb9\u62ec\u53f7\n        if (left < right) {\n            help(curString + \")\", left, right - 1, res);\n        }\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u56de\u6eaf\u7684\u8fc7\u7a0b\u8bed\u4e49\u660e\u786e\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    public List<String> generateParenthesis(int n) {\n        List<String> res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n        helper(\"\", 0, 0, n, res);\n        return res;\n    }\n\n    /**\n     * @param curString\n     * @param left      \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u5de6\u8fb9\u62ec\u53f7\u6570\u91cf\n     * @param right     \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u53f3\u8fb9\u62ec\u53f7\u6570\u91cf\n     * @param n\n     * @param res\n     */\n    private void helper(String curString, int left, int right, int n, List<String> res) {\n        if (left == n && right == n) {\n            res.add(curString);\n            return;\n        }\n        if (left < n) {\n            helper(curString + \"(\", left + 1, right, n, res);\n        }\n        // \u5982\u679c\u5de6\u8fb9\u62ec\u53f7\u6bd4\u53f3\u8fb9\u62ec\u53f7\u591a\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a\u53f3\u8fb9\u62ec\u53f7\n        if (left > right) {\n            helper(curString + \")\", left, right + 1, n, res);\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0022-generate-parentheses\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "22. Generate Parentheses"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#22-generate-parentheses",
            "text": "",
            "title": "22. Generate Parentheses"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u00a0 n \u00a0\u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002  \u4f8b\u5982\uff0c\u7ed9\u51fa\u00a0 n  =   3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a  [\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 22. Generate Parentheses   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 22. \u62ec\u53f7\u751f\u6210   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<String> generateParenthesis(int n) {\n        List<String> res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n        help(\"\", n, n, res);\n        return res;\n    }\n\n    /**\n     * @param curString \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u7ed3\u679c\n     * @param left      \u5de6\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389\n     * @param right     \u53f3\u8fb9\u7684\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389\n     * @param res       \u7ed3\u679c\u96c6\n     */\n    private void help(String curString, int left, int right, List<String> res) {\n        if (left == 0 && right == 0) {\n            res.add(curString);\n            return;\n        }\n        // \u8fd8\u6709\u5de6\u62ec\u53f7\u6ca1\u6709\u7528\u6389\uff0c\u4e8e\u662f\u8003\u8651\u7528\u6389\u5de6\u62ec\u53f7\n        if (left > 0) {\n            help(curString + \"(\", left - 1, right, res);\n        }\n        // \u5de6\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u6bd4\u53f3\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u5c11\n        // \u4e5f\u5c31\u662f\u8bf4\uff0c\u5de6\u8fb9\u62ec\u53f7\u7528\u5f97\u591a\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u53f3\u8fb9\u62ec\u53f7\n        if (left < right) {\n            help(curString + \")\", left, right - 1, res);\n        }\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u7801\u4f1a\u7b80\u6d01\u4e00\u4e9b\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u70b9\u7ed5\u3002"
        },
        {
            "location": "/leetcode-0022-generate-parentheses/#2",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    public List<String> generateParenthesis(int n) {\n        List<String> res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n        helper(\"\", 0, 0, n, res);\n        return res;\n    }\n\n    /**\n     * @param curString\n     * @param left      \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u5de6\u8fb9\u62ec\u53f7\u6570\u91cf\n     * @param right     \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u53f3\u8fb9\u62ec\u53f7\u6570\u91cf\n     * @param n\n     * @param res\n     */\n    private void helper(String curString, int left, int right, int n, List<String> res) {\n        if (left == n && right == n) {\n            res.add(curString);\n            return;\n        }\n        if (left < n) {\n            helper(curString + \"(\", left + 1, right, n, res);\n        }\n        // \u5982\u679c\u5de6\u8fb9\u62ec\u53f7\u6bd4\u53f3\u8fb9\u62ec\u53f7\u591a\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a\u53f3\u8fb9\u62ec\u53f7\n        if (left > right) {\n            helper(curString + \")\", left, right + 1, n, res);\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0022-generate-parentheses  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u56de\u6eaf\u7684\u8fc7\u7a0b\u8bed\u4e49\u660e\u786e\u3002"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/",
            "text": "23. Merge k Sorted Lists\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5408\u5e76\u00a0\nk\u00a0\n\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n\n[\n\u00a0 1->4->5,\n\u00a0 1->3->4,\n\u00a0 2->6\n]\n\n\u8f93\u51fa:\n 1->1->2->3->4->4->5->6\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n23. Merge k Sorted Lists\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u60f3\u51fa\u89e3\u51b3\u529e\u6cd5\u4e00\u70b9\u90fd\u4e0d\u96be\uff0c\u7531\u4e8e k \u4e2a\u94fe\u8868\u5df2\u7ecf\u662f\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u90a3\u4e48 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u5373\u5e94\u8be5\u6392\u5728\u7b2c 1 \u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u3002\u6211\u4eec\u62ff\u51fa\u8fd9\u4e2a\u7ed3\u70b9\u4ee5\u540e\uff0c\u6b64\u65f6 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u7b2c 2 \u5c0f\u7684\u7ed3\u70b9\uff0c\u5e94\u8be5\u653e\u5728\u7b2c 2 \u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u4f9d\u6b21\u62ff\u51fa\u7ed3\u70b9\uff0c\u5b8c\u6210\u5408\u5e76\u7684\u5de5\u4f5c\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\u3002\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\n\n\uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b\n\n\uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b\n\n\uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002  \n\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002\n\n\n\n\n\n\n\n\n\u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a\n\u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684\n\u5206\u6cbb\u601d\u60f3\n\u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002\n1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b\n2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002\n\n\n\u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002\n\n\n\u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val));\n        ListNode dummyNode = new ListNode(-1);\n        ListNode curNode = dummyNode;\n        for (ListNode list : lists) {\n            if (list != null) {\n                // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(list);\n            }\n        }\n        while (!priorityQueue.isEmpty()) {\n            // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f\n            ListNode node = priorityQueue.poll();\n            // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20\n            curNode.next = node;\n            // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20\n            curNode = curNode.next;\n            if (curNode.next != null) {\n                // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(curNode.next);\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        Integer[] nums1 = {1, 4, 5};\n        Integer[] nums2 = {1, 3, 4};\n        Integer[] nums3 = {2, 6};\n        ListNode head1 = new ListNode(nums1);\n        ListNode head2 = new ListNode(nums2);\n        ListNode head3 = new ListNode(nums3);\n        ListNode[] lists = new ListNode[3];\n        lists[0] = head1;\n        lists[1] = head2;\n        lists[2] = head3;\n        Solution solution = new Solution();\n        ListNode mergeKLists = solution.mergeKLists(lists);\n        System.out.println(mergeKLists);\n    }\n}\n\n\n\n\n\u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a\n\n\nComparator<ListNode> comparator = (a, b) -> a.val - b.val;\n\n\n\n\n\u4e0e\n\n\nComparator<ListNode> comparator = Comparator.comparingInt(a -> a.val);\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nclass Solution2 {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    private ListNode mergeKLists(ListNode[] lists, int l, int r) {\n        // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\n        if (l == r) {\n            return lists[l];\n        }\n        int mid = l + (r - l) / 2;\n        ListNode listNode1 = mergeKLists(lists, l, mid);\n        ListNode listNode2 = mergeKLists(lists, mid + 1, r);\n        // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c\n        // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c\n        // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684\n        return mergeOfTwoListNode(listNode1, listNode2);\n    }\n\n    private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) {\n        // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (listNode1 == null) {\n            return listNode2;\n        }\n        if (listNode2 == null) {\n            return listNode1;\n        }\n        if (listNode1.val < listNode2.val) {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2);\n            return listNode1;\n        } else {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next);\n            return listNode2;\n        }\n    }\n}",
            "title": "23. Merge k Sorted Lists"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#23-merge-k-sorted-lists",
            "text": "",
            "title": "23. Merge k Sorted Lists"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5408\u5e76\u00a0 k\u00a0 \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002  \u793a\u4f8b:  \u8f93\u5165: \n[\n\u00a0 1->4->5,\n\u00a0 1->3->4,\n\u00a0 2->6\n] \u8f93\u51fa:  1->1->2->3->4->4->5->6    \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 23. Merge k Sorted Lists   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u60f3\u51fa\u89e3\u51b3\u529e\u6cd5\u4e00\u70b9\u90fd\u4e0d\u96be\uff0c\u7531\u4e8e k \u4e2a\u94fe\u8868\u5df2\u7ecf\u662f\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u90a3\u4e48 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u5373\u5e94\u8be5\u6392\u5728\u7b2c 1 \u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u3002\u6211\u4eec\u62ff\u51fa\u8fd9\u4e2a\u7ed3\u70b9\u4ee5\u540e\uff0c\u6b64\u65f6 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u7b2c 2 \u5c0f\u7684\u7ed3\u70b9\uff0c\u5e94\u8be5\u653e\u5728\u7b2c 2 \u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u4f9d\u6b21\u62ff\u51fa\u7ed3\u70b9\uff0c\u5b8c\u6210\u5408\u5e76\u7684\u5de5\u4f5c\u3002  \u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\u3002\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \n\uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b \n\uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b \n\uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002    \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002     \u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a\n\u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684 \u5206\u6cbb\u601d\u60f3 \u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002\n1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b\n2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002  \u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002  \u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#1",
            "text": "import java.util.Comparator;\nimport java.util.PriorityQueue;\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val));\n        ListNode dummyNode = new ListNode(-1);\n        ListNode curNode = dummyNode;\n        for (ListNode list : lists) {\n            if (list != null) {\n                // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(list);\n            }\n        }\n        while (!priorityQueue.isEmpty()) {\n            // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f\n            ListNode node = priorityQueue.poll();\n            // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20\n            curNode.next = node;\n            // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20\n            curNode = curNode.next;\n            if (curNode.next != null) {\n                // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d\n                priorityQueue.add(curNode.next);\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        Integer[] nums1 = {1, 4, 5};\n        Integer[] nums2 = {1, 3, 4};\n        Integer[] nums3 = {2, 6};\n        ListNode head1 = new ListNode(nums1);\n        ListNode head2 = new ListNode(nums2);\n        ListNode head3 = new ListNode(nums3);\n        ListNode[] lists = new ListNode[3];\n        lists[0] = head1;\n        lists[1] = head2;\n        lists[2] = head3;\n        Solution solution = new Solution();\n        ListNode mergeKLists = solution.mergeKLists(lists);\n        System.out.println(mergeKLists);\n    }\n}  \u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a  Comparator<ListNode> comparator = (a, b) -> a.val - b.val;  \u4e0e  Comparator<ListNode> comparator = Comparator.comparingInt(a -> a.val);",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0023-merge-k-sorted-lists/#2",
            "text": "class Solution2 {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    private ListNode mergeKLists(ListNode[] lists, int l, int r) {\n        // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\n        if (l == r) {\n            return lists[l];\n        }\n        int mid = l + (r - l) / 2;\n        ListNode listNode1 = mergeKLists(lists, l, mid);\n        ListNode listNode2 = mergeKLists(lists, mid + 1, r);\n        // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c\n        // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c\n        // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684\n        return mergeOfTwoListNode(listNode1, listNode2);\n    }\n\n    private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) {\n        // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (listNode1 == null) {\n            return listNode2;\n        }\n        if (listNode2 == null) {\n            return listNode1;\n        }\n        if (listNode1.val < listNode2.val) {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2);\n            return listNode1;\n        } else {\n            // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\n            listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next);\n            return listNode2;\n        }\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/",
            "text": "24. Swap Nodes in Pairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002\n\n\n\u793a\u4f8b:\n\n\n\u7ed9\u5b9a \n1->2->3->4\n, \u4f60\u5e94\u8be5\u8fd4\u56de \n2->1->4->3\n.\n\n\n\u8bf4\u660e:\n\n\n\n\n\u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002\n\n\n\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\n\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n24. Swap Nodes in Pairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u867d\u7136\u8fd9\u9053\u95ee\u9898\u88ab\u6807\u6ce8\u4e3a\u201c\u4e2d\u7b49\u201d\uff0c\u4f46\u662f\u53ea\u8981\u662f\u94fe\u8868\u7684\u95ee\u9898\u505a\u591a\u4e86\u7684\u8bdd\uff0c\u5c31\u4f1a\u77e5\u9053\uff0c\u89e3\u8fd9\u7c7b\u94fe\u8868\u7684\u95ee\u9898\u6709\u4e24\u4e2a\u5957\u8def\u3002\n\n\n\n\n1\u3001\u9012\u5f52\n\n\n2\u3001\u7a7f\u9488\u5f15\u7ebf\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode first = head;\n        ListNode second = head.next;\n        first.next = swapPairs(second.next);\n        second.next = first;\n        return second;\n    }\n\n    public static void main(String[] args) {\n        // \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3.\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode swapPairs = solution.swapPairs(head);\n        System.out.println(swapPairs);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        // \u8fd9\u91cc\u8bbe\u7f6e dummyNode \u662f\u4e3a\u4e86\u5904\u7406\u5934\u7ed3\u70b9\u7684\u7279\u6b8a\u60c5\u51b5\n        // \u4f7f\u5f97\u5934\u7ed3\u70b9\u548c\u975e\u5934\u7ed3\u70b9\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n\n        while (curNode.next != null && curNode.next.next != null) {\n            ListNode first = curNode.next;\n            ListNode second = first.next;\n\n            ListNode third = second.next;\n\n            // \u4ea4\u6362\n            second.next = first;\n            first.next = third;\n\n            // \u548c\u4e4b\u524d swap \u7684\u94fe\u8868\u63a5\u4e0a\n            curNode.next = second;\n\n            // \u7ad9\u5728\u4e0b\u4e00\u8f6e\u4ea4\u6362\u7684\u7ed3\u70b9\u524d\u9762\n            curNode = first;\n        }\n        return dummyNode.next;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0024-swap-nodes-in-pairs\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "24. Swap Nodes in Pairs"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#24-swap-nodes-in-pairs",
            "text": "",
            "title": "24. Swap Nodes in Pairs"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002  \u793a\u4f8b:  \u7ed9\u5b9a  1->2->3->4 , \u4f60\u5e94\u8be5\u8fd4\u56de  2->1->4->3 .  \u8bf4\u660e:   \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002  \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 24. Swap Nodes in Pairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u867d\u7136\u8fd9\u9053\u95ee\u9898\u88ab\u6807\u6ce8\u4e3a\u201c\u4e2d\u7b49\u201d\uff0c\u4f46\u662f\u53ea\u8981\u662f\u94fe\u8868\u7684\u95ee\u9898\u505a\u591a\u4e86\u7684\u8bdd\uff0c\u5c31\u4f1a\u77e5\u9053\uff0c\u89e3\u8fd9\u7c7b\u94fe\u8868\u7684\u95ee\u9898\u6709\u4e24\u4e2a\u5957\u8def\u3002   1\u3001\u9012\u5f52  2\u3001\u7a7f\u9488\u5f15\u7ebf",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode first = head;\n        ListNode second = head.next;\n        first.next = swapPairs(second.next);\n        second.next = first;\n        return second;\n    }\n\n    public static void main(String[] args) {\n        // \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3.\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode swapPairs = solution.swapPairs(head);\n        System.out.println(swapPairs);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0024-swap-nodes-in-pairs/#2",
            "text": "public class Solution2 {\n\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        // \u8fd9\u91cc\u8bbe\u7f6e dummyNode \u662f\u4e3a\u4e86\u5904\u7406\u5934\u7ed3\u70b9\u7684\u7279\u6b8a\u60c5\u51b5\n        // \u4f7f\u5f97\u5934\u7ed3\u70b9\u548c\u975e\u5934\u7ed3\u70b9\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = dummyNode;\n\n        while (curNode.next != null && curNode.next.next != null) {\n            ListNode first = curNode.next;\n            ListNode second = first.next;\n\n            ListNode third = second.next;\n\n            // \u4ea4\u6362\n            second.next = first;\n            first.next = third;\n\n            // \u548c\u4e4b\u524d swap \u7684\u94fe\u8868\u63a5\u4e0a\n            curNode.next = second;\n\n            // \u7ad9\u5728\u4e0b\u4e00\u8f6e\u4ea4\u6362\u7684\u7ed3\u70b9\u524d\u9762\n            curNode = first;\n        }\n        return dummyNode.next;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0024-swap-nodes-in-pairs  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/",
            "text": "25. Reverse Nodes in k-Group\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u00a0\nk\u00a0\n\u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5e76\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002\n\n\nk\u00a0\n\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f\u00a0\nk\u00a0\n\u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u5c06\u6700\u540e\u5269\u4f59\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002\n\n\n\u793a\u4f8b :\n\n\n\u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a\n1->2->3->4->5\n\n\n\u5f53\u00a0\nk\u00a0\n= 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: \n2->1->4->3->5\n\n\n\u5f53\u00a0\nk\u00a0\n= 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: \n3->2->1->4->5\n\n\n\u8bf4\u660e :\n\n\n\n\n\u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002\n\n\n\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\n\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n25. Reverse Nodes in k-Group\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n25. k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0025-reverse-nodes-in-k-group\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "25. Reverse Nodes in k-Group"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/#25-reverse-nodes-in-k-group",
            "text": "",
            "title": "25. Reverse Nodes in k-Group"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u00a0 k\u00a0 \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5e76\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002  k\u00a0 \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f\u00a0 k\u00a0 \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u5c06\u6700\u540e\u5269\u4f59\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002  \u793a\u4f8b :  \u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a 1->2->3->4->5  \u5f53\u00a0 k\u00a0 = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de:  2->1->4->3->5  \u5f53\u00a0 k\u00a0 = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de:  3->2->1->4->5  \u8bf4\u660e :   \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002  \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 25. Reverse Nodes in k-Group   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 25. k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0025-reverse-nodes-in-k-group/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0025-reverse-nodes-in-k-group  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/",
            "text": "26. Remove Duplicates from Sorted Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\n\u539f\u5730\n\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\n\n\n\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\n\u539f\u5730\n\u4fee\u6539\u8f93\u5165\u6570\u7ec4\n\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u7ed9\u5b9a\u6570\u7ec4 \nnums\n = \n[1,1,2]\n,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 \n2\n, \u5e76\u4e14\u539f\u6570\u7ec4 \nnums \n\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a \n1\n, \n2\n\u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u7ed9\u5b9a\n nums \n= \n[0,0,1,1,1,2,2,3,3,4]\n,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 \n5\n, \u5e76\u4e14\u539f\u6570\u7ec4 \nnums \n\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a \n0\n, \n1\n, \n2\n, \n3\n, \n4\n\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?\n\n\n\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\n\u201c\u5f15\u7528\u201d\n\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n\n\n\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:\n\n\n// \nnums\n \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\n\u8be5\u957f\u5ea6\u8303\u56f4\u5185\n\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n26. Remove Duplicates from Sorted Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5f97\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e4b\u524d\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u7528\u4f5c\u6bd4\u8f83\u3002\n\n\n\u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002\n\u6ce8\u610f\uff1a\u5e94\u8be5\u6ce8\u610f\u5230\u4e00\u4e9b\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f8b\u5982 nums = [] \u7684\u65f6\u5019\u3002\u6ce8\u610f\uff0c\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u65b0\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n\u7f16\u7801\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\n// \u5e38\u89c4\u9898\u76ee\uff1a\u8fd9\u91cc\u5229\u7528\u5230\u6570\u7ec4\u7684\u6709\u5e8f\u6027\uff0c\u5982\u679c\u9047\u5230\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\u7684\u5143\u7d20\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\npublic class Solution {\n\n    // [1,1,2,3,4,4]\n    // [1,2,3,4,4]\n    public int removeDuplicates(int[] nums) {\n\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int pre = nums[0];\n        int j = 0;\n        for (int i = 1; i < len; i++) {\n            if (nums[i] != pre) {\n                pre = nums[i];\n                j++;\n                nums[j] = nums[i];\n            }\n        }\n        // \u6ce8\u610f j \u662f\u904d\u5386\u5230\u7684\u4e0e\u4e4b\u524d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u8981\u628a\u7b2c 1 \u4e2a\u5143\u7d20\u7b97\u8fdb\u53bb\uff0c\u6240\u4ee5\u8981\u52a0 1\n        return j + 1;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 2, 2, 3, 3, 4, 4, 4};\n        int ret = new Solution().removeDuplicates(nums);\n        System.out.println(ret);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.Arrays;\n\npublic class Solution2 {\n\n    public int removeDuplicates(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int j = 0;\n        int i = 1;\n        for (; i < len; i++) {\n            if (nums[i] == nums[j]) {\n                // \u4ec0\u4e48\u90fd\u4e0d\u505a\n            } else {\n                nums[++j] = nums[i];\n            }\n        }\n        // \u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8981 + 1\n        return j + 1;\n    }\n}\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0026-remove-duplicates-from-sorted-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "26. Remove Duplicates from Sorted Array"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#26-remove-duplicates-from-sorted-array",
            "text": "",
            "title": "26. Remove Duplicates from Sorted Array"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002  \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002  \u793a\u4f8b\u00a01:  \u7ed9\u5b9a\u6570\u7ec4  nums  =  [1,1,2] ,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6  2 , \u5e76\u4e14\u539f\u6570\u7ec4  nums  \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a  1 ,  2 \u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u793a\u4f8b\u00a02:  \u7ed9\u5b9a  nums  =  [0,0,1,1,1,2,2,3,3,4] ,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6  5 , \u5e76\u4e14\u539f\u6570\u7ec4  nums  \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a  0 ,  1 ,  2 ,  3 ,  4 \u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u8bf4\u660e:  \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?  \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002  \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:  //  nums  \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 26. Remove Duplicates from Sorted Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5f97\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e4b\u524d\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u7528\u4f5c\u6bd4\u8f83\u3002  \u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002\n\u6ce8\u610f\uff1a\u5e94\u8be5\u6ce8\u610f\u5230\u4e00\u4e9b\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f8b\u5982 nums = [] \u7684\u65f6\u5019\u3002\u6ce8\u610f\uff0c\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u65b0\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n\u7f16\u7801\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#1",
            "text": "import java.util.Arrays;\n\n// \u5e38\u89c4\u9898\u76ee\uff1a\u8fd9\u91cc\u5229\u7528\u5230\u6570\u7ec4\u7684\u6709\u5e8f\u6027\uff0c\u5982\u679c\u9047\u5230\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\u7684\u5143\u7d20\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\npublic class Solution {\n\n    // [1,1,2,3,4,4]\n    // [1,2,3,4,4]\n    public int removeDuplicates(int[] nums) {\n\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int pre = nums[0];\n        int j = 0;\n        for (int i = 1; i < len; i++) {\n            if (nums[i] != pre) {\n                pre = nums[i];\n                j++;\n                nums[j] = nums[i];\n            }\n        }\n        // \u6ce8\u610f j \u662f\u904d\u5386\u5230\u7684\u4e0e\u4e4b\u524d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u8981\u628a\u7b2c 1 \u4e2a\u5143\u7d20\u7b97\u8fdb\u53bb\uff0c\u6240\u4ee5\u8981\u52a0 1\n        return j + 1;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 2, 2, 3, 3, 4, 4, 4};\n        int ret = new Solution().removeDuplicates(nums);\n        System.out.println(ret);\n        System.out.println(Arrays.toString(nums));\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0026-remove-duplicates-from-sorted-array/#2",
            "text": "import java.util.Arrays;\n\npublic class Solution2 {\n\n    public int removeDuplicates(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int j = 0;\n        int i = 1;\n        for (; i < len; i++) {\n            if (nums[i] == nums[j]) {\n                // \u4ec0\u4e48\u90fd\u4e0d\u505a\n            } else {\n                nums[++j] = nums[i];\n            }\n        }\n        // \u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8981 + 1\n        return j + 1;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0026-remove-duplicates-from-sorted-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0027-remove-element/",
            "text": "27. Remove Element\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 \nnums\u00a0\n\u548c\u4e00\u4e2a\u503c \nval\n\uff0c\u4f60\u9700\u8981\n\u539f\u5730\n\u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e\u00a0\nval\u00a0\n\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\n\n\n\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\n\u539f\u5730\n\u4fee\u6539\u8f93\u5165\u6570\u7ec4\n\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002\n\n\n\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u7ed9\u5b9a \nnums\n = \n[3,2,2,3]\n, \nval\n = \n3\n,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 \n2\n, \u5e76\u4e14 \nnums \n\u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a \n2\n\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u7ed9\u5b9a \nnums\n = \n[0,1,2,2,3,0,4,2]\n, \nval\n = \n2\n,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 \n5\n, \u5e76\u4e14 \nnums \n\u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a \n0\n, \n1\n, \n3\n, \n0\n, \n4\n\u3002\n\n\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?\n\n\n\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\n\u201c\u5f15\u7528\u201d\n\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n\n\n\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:\n\n\n// \nnums\n \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d\nint len = removeElement(nums, val);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\n\u8be5\u957f\u5ea6\u8303\u56f4\u5185\n\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n27. Remove Element\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n27. \u79fb\u9664\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u601d\u8def1\uff1a\u9010\u4e2a\u8986\u76d6\u3002\n\n\n\u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u8def\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    // \u601d\u8def\uff1a\u5e38\u89c4\u9898\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\n    public int removeElement(int[] nums, int val) {\n        // \u5b9a\u4e49 [0,j) \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u6ee1\u8db3 \u4e0d\u7b49\u4e8e val\uff0c\u6240\u4ee5\u662f\u5148\u4ea4\u6362\uff0c\u518d ++\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != val) {\n                swap(nums, j, i);\n                j++;\n            }\n        }\n        return j;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}\n\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        j = 0\n        for i in range(len(nums)):\n            if nums[i] != val:\n                nums[j] = nums[i]\n                j += 1\n        return j\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution2 {\n\n    public int removeElement(int[] nums, int val) {\n        int i = 0;\n        int j = 0;\n        for (; i < nums.length; i++) {\n            if (nums[i] == val) {\n                continue;\n            }\n            nums[j] = nums[i];\n            // \u53ea\u8981\u9047\u5230\u4e0e val \u4e0d\u7b49\u7684\u5143\u7d20\uff0c\u5c31\u7d2f\u52a0 1\n            // \u6240\u4ee5\uff0c\u76f4\u63a5\u8fd4\u56de j \u5c31\u53ef\u4ee5\u4e86\n            j++;\n        }\n        return j;\n    }\n}\n\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        j = 0\n        for i in range(len(nums)):\n            if nums[i] != val:\n                # \u5c31\u79fb\u52a8\u5230\u524d\u9762\u53bb\n                nums[i], nums[j] = nums[j], nums[i]\n                j += 1\n        return j\n\n\nif __name__ == '__main__':\n    nums = [3, 2, 2, 3]\n    val = 3\n    s = Solution()\n    result = s.removeElement(nums, val)\n    print(nums)\n    print(result)\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0027-remove-element\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "27. Remove Element"
        },
        {
            "location": "/leetcode-0027-remove-element/#27-remove-element",
            "text": "",
            "title": "27. Remove Element"
        },
        {
            "location": "/leetcode-0027-remove-element/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4  nums\u00a0 \u548c\u4e00\u4e2a\u503c  val \uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e\u00a0 val\u00a0 \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002  \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002  \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u793a\u4f8b 1:  \u7ed9\u5b9a  nums  =  [3,2,2,3] ,  val  =  3 ,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6  2 , \u5e76\u4e14  nums  \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a  2 \u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u793a\u4f8b\u00a02:  \u7ed9\u5b9a  nums  =  [0,1,2,2,3,0,4,2] ,  val  =  2 ,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6  5 , \u5e76\u4e14  nums  \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a  0 ,  1 ,  3 ,  0 ,  4 \u3002\n\n\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u8bf4\u660e:  \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?  \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002  \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:  //  nums  \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d\nint len = removeElement(nums, val);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 27. Remove Element   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 27. \u79fb\u9664\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0027-remove-element/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u601d\u8def1\uff1a\u9010\u4e2a\u8986\u76d6\u3002  \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u8def\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0027-remove-element/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0027-remove-element/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\npublic class Solution {\n\n    // \u601d\u8def\uff1a\u5e38\u89c4\u9898\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\n    public int removeElement(int[] nums, int val) {\n        // \u5b9a\u4e49 [0,j) \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u6ee1\u8db3 \u4e0d\u7b49\u4e8e val\uff0c\u6240\u4ee5\u662f\u5148\u4ea4\u6362\uff0c\u518d ++\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != val) {\n                swap(nums, j, i);\n                j++;\n            }\n        }\n        return j;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        j = 0\n        for i in range(len(nums)):\n            if nums[i] != val:\n                nums[j] = nums[i]\n                j += 1\n        return j",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0027-remove-element/#2",
            "text": "Java \u5199\u6cd5\uff1a  public class Solution2 {\n\n    public int removeElement(int[] nums, int val) {\n        int i = 0;\n        int j = 0;\n        for (; i < nums.length; i++) {\n            if (nums[i] == val) {\n                continue;\n            }\n            nums[j] = nums[i];\n            // \u53ea\u8981\u9047\u5230\u4e0e val \u4e0d\u7b49\u7684\u5143\u7d20\uff0c\u5c31\u7d2f\u52a0 1\n            // \u6240\u4ee5\uff0c\u76f4\u63a5\u8fd4\u56de j \u5c31\u53ef\u4ee5\u4e86\n            j++;\n        }\n        return j;\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        j = 0\n        for i in range(len(nums)):\n            if nums[i] != val:\n                # \u5c31\u79fb\u52a8\u5230\u524d\u9762\u53bb\n                nums[i], nums[j] = nums[j], nums[i]\n                j += 1\n        return j\n\n\nif __name__ == '__main__':\n    nums = [3, 2, 2, 3]\n    val = 3\n    s = Solution()\n    result = s.removeElement(nums, val)\n    print(nums)\n    print(result)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0027-remove-element  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0028-implement-strstr/",
            "text": "28. Implement strStr()\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u00a0\nstrStr()\n\u00a0\u51fd\u6570\u3002\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u00a0haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u00a0 \n-1\n\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n haystack = \"hello\", needle = \"ll\"\n\n\n\u8f93\u51fa:\n 2\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n haystack = \"aaaaa\", needle = \"bba\"\n\n\n\u8f93\u51fa:\n -1\n\n\n\n\n\n\u8bf4\u660e:\n\n\n\n\u5f53\u00a0\nneedle\n\u00a0\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002\n\n\n\n\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53\u00a0\nneedle\n\u00a0\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684\u00a0\nstrstr()\n\u00a0\u4ee5\u53ca Java\u7684\u00a0\nindexOf()\n\u00a0\u5b9a\u4e49\u76f8\u7b26\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n28. Implement strStr()\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n28. \u5b9e\u73b0strStr()\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "28. Implement strStr()"
        },
        {
            "location": "/leetcode-0028-implement-strstr/#28-implement-strstr",
            "text": "",
            "title": "28. Implement strStr()"
        },
        {
            "location": "/leetcode-0028-implement-strstr/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u00a0 strStr() \u00a0\u51fd\u6570\u3002  \u7ed9\u5b9a\u4e00\u4e2a\u00a0haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u00a0  -1 \u3002  \u793a\u4f8b 1:  \u8f93\u5165:  haystack = \"hello\", needle = \"ll\" \u8f93\u51fa:  2  \u793a\u4f8b 2:  \u8f93\u5165:  haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa:  -1  \u8bf4\u660e:  \u5f53\u00a0 needle \u00a0\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002  \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53\u00a0 needle \u00a0\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684\u00a0 strstr() \u00a0\u4ee5\u53ca Java\u7684\u00a0 indexOf() \u00a0\u5b9a\u4e49\u76f8\u7b26\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 28. Implement strStr()   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 28. \u5b9e\u73b0strStr()   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0028-implement-strstr/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0028-implement-strstr/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0028-implement-strstr/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/",
            "text": "29. Divide Two Integers\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570\u00a0\ndividend\n\u00a0\u548c\u9664\u6570\u00a0\ndivisor\n\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002\n\n\n\n\u8fd4\u56de\u88ab\u9664\u6570\u00a0\ndividend\n\u00a0\u9664\u4ee5\u9664\u6570\u00a0\ndivisor\n\u00a0\u5f97\u5230\u7684\u5546\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n dividend = 10, divisor = 3\n\n\n\u8f93\u51fa:\n 3\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n dividend = 7, divisor = -3\n\n\n\u8f93\u51fa:\n -2\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\n\u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002\n\n\n\n\u9664\u6570\u4e0d\u4e3a\u00a00\u3002\n\n\n\n\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122\n31\n,\u00a0 2\n31\u00a0\n\u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2\n31\u00a0\n\u2212 1\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n29. Divide Two Integers\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n29. \u4e24\u6570\u76f8\u9664\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "29. Divide Two Integers"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/#29-divide-two-integers",
            "text": "",
            "title": "29. Divide Two Integers"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570\u00a0 dividend \u00a0\u548c\u9664\u6570\u00a0 divisor \u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002  \u8fd4\u56de\u88ab\u9664\u6570\u00a0 dividend \u00a0\u9664\u4ee5\u9664\u6570\u00a0 divisor \u00a0\u5f97\u5230\u7684\u5546\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  dividend = 10, divisor = 3 \u8f93\u51fa:  3  \u793a\u4f8b\u00a02:  \u8f93\u5165:  dividend = 7, divisor = -3 \u8f93\u51fa:  -2  \u8bf4\u660e:   \u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002  \u9664\u6570\u4e0d\u4e3a\u00a00\u3002  \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 ,\u00a0 2 31\u00a0 \u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2 31\u00a0 \u2212 1\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 29. Divide Two Integers   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 29. \u4e24\u6570\u76f8\u9664   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0029-divide-two-integers/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/",
            "text": "30. Substring with Concatenation of All Words\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0\ns\u00a0\n\u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd\u00a0\nwords\u3002\n\u5728\n s \n\u4e2d\u627e\u51fa\u53ef\u4ee5\u6070\u597d\u4e32\u8054\u00a0\nwords\u00a0\n\u4e2d\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n\n\n\n\u6ce8\u610f\u5b50\u4e32\u8981\u4e0e\u00a0\nwords \n\u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651\u00a0\nwords\u00a0\n\u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n\n  s =\n \"barfoothefoobarman\",\n\n\n  words = \n[\"foo\",\"bar\"]\n\n\n\u8f93\u51fa:\n \n[0,9]\n\n\n\n\u89e3\u91ca:\n \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoor\" \u548c \"foobar\" \u3002\n\n\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n\n  s =\n \"wordgoodstudentgoodword\",\n\n\n  words = \n[\"word\",\"student\"]\n\n\n\u8f93\u51fa:\n \n[]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n30. Substring with Concatenation of All Words\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n30. \u4e0e\u6240\u6709\u5355\u8bcd\u76f8\u5173\u8054\u7684\u5b57\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "30. Substring with Concatenation of All Words"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/#30-substring-with-concatenation-of-all-words",
            "text": "",
            "title": "30. Substring with Concatenation of All Words"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0 s\u00a0 \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd\u00a0 words\u3002 \u5728  s  \u4e2d\u627e\u51fa\u53ef\u4ee5\u6070\u597d\u4e32\u8054\u00a0 words\u00a0 \u4e2d\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002  \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e\u00a0 words  \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651\u00a0 words\u00a0 \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002  \u793a\u4f8b 1:  \u8f93\u5165:\n\n  s =  \"barfoothefoobarman\",   words =  [\"foo\",\"bar\"] \u8f93\u51fa:   [0,9]  \u89e3\u91ca:  \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoor\" \u548c \"foobar\" \u3002\n\n\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002  \u793a\u4f8b 2:  \u8f93\u5165:\n\n  s =  \"wordgoodstudentgoodword\",   words =  [\"word\",\"student\"] \u8f93\u51fa:   []      \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 30. Substring with Concatenation of All Words   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 30. \u4e0e\u6240\u6709\u5355\u8bcd\u76f8\u5173\u8054\u7684\u5b57\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0030-substring-with-concatenation-of-all-words/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0031-next-permutation/",
            "text": "31. Next Permutation\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002\n\n\n\n\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002\n\n\n\n\u5fc5\u987b\n\u539f\u5730\n\u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002\n\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002\n\n\n\n1,2,3\n \u2192 \n1,3,2\n\n\n\n3,2,1\n \u2192 \n1,2,3\n\n\n\n1,1,5\n \u2192 \n1,5,1\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n31. Next Permutation\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n31. \u4e0b\u4e00\u4e2a\u6392\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "31. Next Permutation"
        },
        {
            "location": "/leetcode-0031-next-permutation/#31-next-permutation",
            "text": "",
            "title": "31. Next Permutation"
        },
        {
            "location": "/leetcode-0031-next-permutation/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002  \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002  \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002  \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002  1,2,3  \u2192  1,3,2  3,2,1  \u2192  1,2,3  1,1,5  \u2192  1,5,1     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 31. Next Permutation   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 31. \u4e0b\u4e00\u4e2a\u6392\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0031-next-permutation/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0031-next-permutation/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0031-next-permutation/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/",
            "text": "32. Longest Valid Parentheses\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b \n'('\n\u00a0\u548c \n')'\n\u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n \"(()\"\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \n\"()\"\n\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n \"\n)()())\n\"\n\n\n\u8f93\u51fa:\n 4\n\n\n\u89e3\u91ca:\n \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \n\"()()\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n32. Longest Valid Parentheses\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n32. \u6700\u957f\u6709\u6548\u62ec\u53f7\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "32. Longest Valid Parentheses"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/#32-longest-valid-parentheses",
            "text": "",
            "title": "32. Longest Valid Parentheses"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b  '(' \u00a0\u548c  ')' \u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  \"(()\" \u8f93\u51fa:  2 \u89e3\u91ca:  \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a  \"()\"   \u793a\u4f8b 2:  \u8f93\u5165:  \" )()()) \" \u8f93\u51fa:  4 \u89e3\u91ca:  \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a  \"()()\"      \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 32. Longest Valid Parentheses   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 32. \u6700\u957f\u6709\u6548\u62ec\u53f7   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0032-longest-valid-parentheses/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/",
            "text": "33. Search in Rotated Sorted Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002\n\n\n( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0\n[0,1,2,4,5,6,7]\n\u00a0\u53ef\u80fd\u53d8\u4e3a\u00a0\n[4,5,6,7,0,1,2]\n\u00a0)\u3002\n\n\n\u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de\u00a0\n-1\n\u00a0\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002\n\n\n\u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f\u00a0\nO\n(log\u00a0\nn\n) \u7ea7\u522b\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n nums = [\n4,5,6,7,0,1,2]\n, target = 0\n\n\u8f93\u51fa:\n 4\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n nums = [\n4,5,6,7,0,1,2]\n, target = 3\n\n\u8f93\u51fa:\n -1\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n33. Search in Rotated Sorted Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u610f\u601d\u7684\uff0c\u5b8c\u6210\u8fd9\u9053\u9898\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u660e\u786e\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\n\u867d\u7136\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u662f\u201c\u90e8\u5206\u6709\u5e8f\u201d\u7684\uff0c\u53ea\u6709 1 \u4e2a\u95f4\u65ad\u70b9\uff0c\u6240\u4ee5\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002\n\n\n\n\n\u201c\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u201d\u8fd9\u53e5\u8bdd\u5f88\u5173\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c11\u8003\u8651\u4e0b\u9762\u4e24\u79cd\u7279\u6b8a\u7684\u7528\u4f8b\u3002\n\n\n\n\n\u7528\u4f8b1\uff1a1 2 1 1 1 1  \u627e 2\u3002\n\n\n\u7528\u4f8b2\uff1a1 1 1 1 2 1  \u627e 2\u3002\n\n\n\n\n\u4e8c\u5206\u6cd5\u603b\u662f\u671f\u671b\u901a\u8fc7\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u80fd\u591f\u5c11\u8003\u8651\u4e00\u90e8\u5206\u7684\u60c5\u5f62\u3002\u8003\u8651\u5b8c\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4f59\u7684\u5c31\u4ea4\u7ed9 else\u3002\n\n\n\n\n\u6709\u90e8\u5206\u89e3\u91ca\u653e\u5728\u4e86\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u4e0d\u7ba1\u600e\u4e48\u5206\uff0c\u90fd\u4e00\u5b9a\u6709\u4e00\u8fb9\u662f\u9012\u589e\u5e8f\u5217\n    // \u53e6\u4e00\u8fb9\u662f\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u65cb\u8f6c\u6570\u7ec4\n\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n\n        int left = 0;\n        int right = len - 1;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            // \u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\uff0c\u90a3\u5c31\u662f\n            // mid \u6709\u53ef\u80fd\u548c left \u76f8\u7b49\uff0c\u6240\u4ee5\u5206\u7c7b\u6807\u51c6\u8fd9\u6837\n            // nums[left] < nums[mid] \u4e0d\u80fd\u7528\u8fd9\u4e2a\u5224\u65ad\n            if (nums[mid] > nums[right]) {\n                // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u53f3\u8fb9\n                // 6 7 8 9 1 2\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u5de6\u8fb9\n                // 6 7 1 2 3 4 5 6\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 5, 6, 7, 0, 1, 2};\n        int target = 3;\n        Solution solution = new Solution();\n        int search = solution.search(nums, target);\n        System.out.println(search);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n        int left = 0;\n        int right = len - 1;\n        // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        while (left <= right) {\n            // \u8fd9\u91cc\u53d6 right - left + 1 \u8bf4\u660e\u662f\u5411\u4e0a\u53d6\u6574\n            int mid = left + (right - left + 1) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[left] < nums[mid]) {\n                // 6 7 8 9 1 2\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                assert nums[left] >= nums[mid];\n                // 6 7 1 2 3 4 5\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0033-search-in-rotated-sorted-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "33. Search in Rotated Sorted Array"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#33-search-in-rotated-sorted-array",
            "text": "",
            "title": "33. Search in Rotated Sorted Array"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002  ( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0 [0,1,2,4,5,6,7] \u00a0\u53ef\u80fd\u53d8\u4e3a\u00a0 [4,5,6,7,0,1,2] \u00a0)\u3002  \u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de\u00a0 -1 \u00a0\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002  \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f\u00a0 O (log\u00a0 n ) \u7ea7\u522b\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  nums = [ 4,5,6,7,0,1,2] , target = 0 \u8f93\u51fa:  4  \u793a\u4f8b\u00a02:  \u8f93\u5165:  nums = [ 4,5,6,7,0,1,2] , target = 3 \u8f93\u51fa:  -1    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 33. Search in Rotated Sorted Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u610f\u601d\u7684\uff0c\u5b8c\u6210\u8fd9\u9053\u9898\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u660e\u786e\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\n\u867d\u7136\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u662f\u201c\u90e8\u5206\u6709\u5e8f\u201d\u7684\uff0c\u53ea\u6709 1 \u4e2a\u95f4\u65ad\u70b9\uff0c\u6240\u4ee5\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002   \u201c\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u201d\u8fd9\u53e5\u8bdd\u5f88\u5173\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c11\u8003\u8651\u4e0b\u9762\u4e24\u79cd\u7279\u6b8a\u7684\u7528\u4f8b\u3002   \u7528\u4f8b1\uff1a1 2 1 1 1 1  \u627e 2\u3002  \u7528\u4f8b2\uff1a1 1 1 1 2 1  \u627e 2\u3002   \u4e8c\u5206\u6cd5\u603b\u662f\u671f\u671b\u901a\u8fc7\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u80fd\u591f\u5c11\u8003\u8651\u4e00\u90e8\u5206\u7684\u60c5\u5f62\u3002\u8003\u8651\u5b8c\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4f59\u7684\u5c31\u4ea4\u7ed9 else\u3002   \u6709\u90e8\u5206\u89e3\u91ca\u653e\u5728\u4e86\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#1",
            "text": "public class Solution {\n\n    // \u4e0d\u7ba1\u600e\u4e48\u5206\uff0c\u90fd\u4e00\u5b9a\u6709\u4e00\u8fb9\u662f\u9012\u589e\u5e8f\u5217\n    // \u53e6\u4e00\u8fb9\u662f\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u65cb\u8f6c\u6570\u7ec4\n\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n\n        int left = 0;\n        int right = len - 1;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            // \u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\uff0c\u90a3\u5c31\u662f\n            // mid \u6709\u53ef\u80fd\u548c left \u76f8\u7b49\uff0c\u6240\u4ee5\u5206\u7c7b\u6807\u51c6\u8fd9\u6837\n            // nums[left] < nums[mid] \u4e0d\u80fd\u7528\u8fd9\u4e2a\u5224\u65ad\n            if (nums[mid] > nums[right]) {\n                // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u53f3\u8fb9\n                // 6 7 8 9 1 2\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u5de6\u8fb9\n                // 6 7 1 2 3 4 5 6\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 5, 6, 7, 0, 1, 2};\n        int target = 3;\n        Solution solution = new Solution();\n        int search = solution.search(nums, target);\n        System.out.println(search);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0033-search-in-rotated-sorted-array/#2",
            "text": "public class Solution2 {\n\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n        int left = 0;\n        int right = len - 1;\n        // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e\n        while (left <= right) {\n            // \u8fd9\u91cc\u53d6 right - left + 1 \u8bf4\u660e\u662f\u5411\u4e0a\u53d6\u6574\n            int mid = left + (right - left + 1) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[left] < nums[mid]) {\n                // 6 7 8 9 1 2\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                assert nums[left] >= nums[mid];\n                // 6 7 1 2 3 4 5\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0033-search-in-rotated-sorted-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/",
            "text": "34. Search for a Range\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 \nnums\n\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c \ntarget\n\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\n\n\n\n\u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f\u00a0\nO\n(log \nn\n) \u7ea7\u522b\u3002\n\n\n\n\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de\u00a0\n[-1, -1]\n\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n nums = [\n5,7,7,8,8,10]\n, target = 8\n\n\n\u8f93\u51fa:\n [3,4]\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n nums = [\n5,7,7,8,8,10]\n, target = 6\n\n\n\u8f93\u51fa:\n [-1,-1]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n34. Search for a Range\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n34. \u641c\u7d22\u8303\u56f4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "34. Search for a Range"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/#34-search-for-a-range",
            "text": "",
            "title": "34. Search for a Range"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4  nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c  target \u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002  \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f\u00a0 O (log  n ) \u7ea7\u522b\u3002  \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de\u00a0 [-1, -1] \u3002  \u793a\u4f8b 1:  \u8f93\u5165:  nums = [ 5,7,7,8,8,10] , target = 8 \u8f93\u51fa:  [3,4]  \u793a\u4f8b\u00a02:  \u8f93\u5165:  nums = [ 5,7,7,8,8,10] , target = 6 \u8f93\u51fa:  [-1,-1]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 34. Search for a Range   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 34. \u641c\u7d22\u8303\u56f4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0034-search-for-a-range/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0035-search-insert-position/",
            "text": "35. Search Insert Position\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [1,3,5,6], 5\n\n\u8f93\u51fa:\n 2\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [1,3,5,6], 2\n\n\u8f93\u51fa:\n 1\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n [1,3,5,6], 7\n\n\u8f93\u51fa:\n 4\n\n\n\n\u793a\u4f8b 4:\n\n\n\u8f93\u5165:\n [1,3,5,6], 0\n\n\u8f93\u51fa:\n 0\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n35. Search Insert Position\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u4e86\uff0c\u4e5f\u662f LeetCode \u7b2c 300 \u9898\uff08\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\uff09 \nO(logn)\n \u590d\u6742\u5ea6\u89e3\u6cd5\u7684\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u3002\n\n\n\n\n\u4e3b\u8981\u7684\u601d\u60f3\u8fd8\u662f\u4e8c\u5206\u6cd5\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u4ed4\u7ec6\u8003\u5bdf\u8fb9\u754c\u7684\u60c5\u51b5\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u53ea\u4f1a\u628a\u6bd4\u81ea\u5df1\u5927\u7684\u8986\u76d6\u6210\u5c0f\u7684\n    // \u5982\u679c\u6709\u4e00\u8fde\u4e32\u6570\u8ddf target \u76f8\u540c\uff0c\u5219\u8fd4\u56de\u7d22\u5f15\u6700\u9760\u524d\u7684\n\n    // \u7279\u4f8b\uff1a 3 5 5 5 5 5 5 5 5 5\n    // \u7279\u4f8b\uff1a 3 6 7 8\n\n    public int searchInsert(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n        if (nums[len - 1] < target) {\n            return len;\n        }\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] < target) {\n                // nums[mid] \u7684\u503c\u53ef\u4ee5\u820d\u5f03\n                left = mid + 1;\n            } else {\n                // nums[mid] \u4e0d\u80fd\u820d\u5f03\n                right = mid;\n            }\n        }\n        return right;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6};\n        int target = 4;\n        Solution2 solution2 = new Solution2();\n        int searchInsert = solution2.searchInsert(nums, target);\n        System.out.println(searchInsert);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0035-search-insert-position\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "35. Search Insert Position"
        },
        {
            "location": "/leetcode-0035-search-insert-position/#35-search-insert-position",
            "text": "",
            "title": "35. Search Insert Position"
        },
        {
            "location": "/leetcode-0035-search-insert-position/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [1,3,5,6], 5 \u8f93\u51fa:  2  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [1,3,5,6], 2 \u8f93\u51fa:  1  \u793a\u4f8b 3:  \u8f93\u5165:  [1,3,5,6], 7 \u8f93\u51fa:  4  \u793a\u4f8b 4:  \u8f93\u5165:  [1,3,5,6], 0 \u8f93\u51fa:  0    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 35. Search Insert Position   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0035-search-insert-position/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u4e86\uff0c\u4e5f\u662f LeetCode \u7b2c 300 \u9898\uff08\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\uff09  O(logn)  \u590d\u6742\u5ea6\u89e3\u6cd5\u7684\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u3002   \u4e3b\u8981\u7684\u601d\u60f3\u8fd8\u662f\u4e8c\u5206\u6cd5\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u4ed4\u7ec6\u8003\u5bdf\u8fb9\u754c\u7684\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0035-search-insert-position/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0035-search-insert-position/#1",
            "text": "public class Solution {\n\n    // \u53ea\u4f1a\u628a\u6bd4\u81ea\u5df1\u5927\u7684\u8986\u76d6\u6210\u5c0f\u7684\n    // \u5982\u679c\u6709\u4e00\u8fde\u4e32\u6570\u8ddf target \u76f8\u540c\uff0c\u5219\u8fd4\u56de\u7d22\u5f15\u6700\u9760\u524d\u7684\n\n    // \u7279\u4f8b\uff1a 3 5 5 5 5 5 5 5 5 5\n    // \u7279\u4f8b\uff1a 3 6 7 8\n\n    public int searchInsert(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return -1;\n        }\n        if (nums[len - 1] < target) {\n            return len;\n        }\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] < target) {\n                // nums[mid] \u7684\u503c\u53ef\u4ee5\u820d\u5f03\n                left = mid + 1;\n            } else {\n                // nums[mid] \u4e0d\u80fd\u820d\u5f03\n                right = mid;\n            }\n        }\n        return right;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6};\n        int target = 4;\n        Solution2 solution2 = new Solution2();\n        int searchInsert = solution2.searchInsert(nums, target);\n        System.out.println(searchInsert);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0035-search-insert-position  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/",
            "text": "36. Valid Sudoku\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5224\u65ad\u4e00\u4e2a\u00a09x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\n\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\n\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002\n\n\n\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684\u00a0\n3x3\n\u00a0\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\n\n\n\n\n\n\u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002\n\n\n\n\u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528\u00a0\n'.'\n\u00a0\u8868\u793a\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n\n]\n\n\n\u8f93\u51fa:\n true\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n\u00a0 [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n\n\u00a0 [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n\n\u00a0 [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n\n\u00a0 [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n\n\u00a0 [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n\n\u00a0 [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n\n\u00a0 [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n\n\u00a0 [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n\n\u00a0 [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n\n]\n\n\n\u8f93\u51fa:\n false\n\n\n\u89e3\u91ca:\n \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece\n 5\n \u6539\u4e3a \n8 \n\u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002\n\n     \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\n\u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002\n\n\n\n\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002\n\n\n\n\u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57\u00a0\n1-9\n\u00a0\u548c\u5b57\u7b26\u00a0\n'.'\n\u00a0\u3002\n\n\n\n\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f\u00a0\n9x9\n\u00a0\u5f62\u5f0f\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n36. Valid Sudoku\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n36. \u6709\u6548\u7684\u6570\u72ec\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "36. Valid Sudoku"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/#36-valid-sudoku",
            "text": "",
            "title": "36. Valid Sudoku"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5224\u65ad\u4e00\u4e2a\u00a09x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219 \uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002   \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002  \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002  \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684\u00a0 3x3 \u00a0\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002    \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002  \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528\u00a0 '.' \u00a0\u8868\u793a\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: \n\n[\n\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n\n] \u8f93\u51fa:  true  \u793a\u4f8b\u00a02:  \u8f93\u5165: \n\n[\n\n\u00a0 [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n\n\u00a0 [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n\n\u00a0 [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n\n\u00a0 [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n\n\u00a0 [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n\n\u00a0 [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n\n\u00a0 [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n\n\u00a0 [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n\n\u00a0 [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n\n] \u8f93\u51fa:  false \u89e3\u91ca:  \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece  5  \u6539\u4e3a  8  \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002\n\n     \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002  \u8bf4\u660e:   \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002  \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002  \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57\u00a0 1-9 \u00a0\u548c\u5b57\u7b26\u00a0 '.' \u00a0\u3002  \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f\u00a0 9x9 \u00a0\u5f62\u5f0f\u7684\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 36. Valid Sudoku   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 36. \u6709\u6548\u7684\u6570\u72ec   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0036-valid-sudoku/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/",
            "text": "37. Sudoku Solver\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5df2\u586b\u5145\u7684\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002\n\n\n\n\u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700\n\u9075\u5faa\u5982\u4e0b\u89c4\u5219\n\uff1a\n\n\n\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\u6570\u5b57\u00a0\n1-9\n\u00a0\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684\u00a0\n3x3\n\u00a0\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\n\n\n\u7a7a\u767d\u683c\u7528\u00a0\n'.'\n\u00a0\u8868\u793a\u3002\n\n\n\n\n\n\n\u4e00\u4e2a\u6570\u72ec\u3002\n\n\n\n\n\n\n\u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002\n\n\n\nNote:\n\n\n\n\n\n\n\u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57\u00a0\n1-9\n\u00a0\u548c\u5b57\u7b26\u00a0\n'.'\n\u00a0\u3002\n\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002\n\n\n\n\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f\u00a0\n9x9\n\u00a0\u5f62\u5f0f\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n37. Sudoku Solver\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n37. \u89e3\u6570\u72ec\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "37. Sudoku Solver"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/#37-sudoku-solver",
            "text": "",
            "title": "37. Sudoku Solver"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5df2\u586b\u5145\u7684\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002  \u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700 \u9075\u5faa\u5982\u4e0b\u89c4\u5219 \uff1a   \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002  \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002  \u6570\u5b57\u00a0 1-9 \u00a0\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684\u00a0 3x3 \u00a0\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002   \u7a7a\u767d\u683c\u7528\u00a0 '.' \u00a0\u8868\u793a\u3002   \u4e00\u4e2a\u6570\u72ec\u3002   \u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002  Note:   \u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57\u00a0 1-9 \u00a0\u548c\u5b57\u7b26\u00a0 '.' \u00a0\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002  \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f\u00a0 9x9 \u00a0\u5f62\u5f0f\u7684\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 37. Sudoku Solver   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 37. \u89e3\u6570\u72ec   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0037-sudoku-solver/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0038-count-and-say/",
            "text": "38. Count and Say\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u62a5\u6570\u5e8f\u5217\u662f\u6307\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a\n\n\n\n1.     1\n\n2.     11\n\n3.     21\n\n4.     1211\n\n5.     111221\n\n\n\n\n\n1\n\u00a0\u88ab\u8bfb\u4f5c\u00a0\u00a0\n\"one 1\"\n\u00a0\u00a0(\n\"\u4e00\u4e2a\u4e00\"\n) , \u5373\u00a0\n11\n\u3002\n\n\n\n11\n \u88ab\u8bfb\u4f5c\u00a0\n\"two 1s\"\n\u00a0(\n\"\u4e24\u4e2a\u4e00\"\n\uff09, \u5373\u00a0\n21\n\u3002\n\n\n\n21\n \u88ab\u8bfb\u4f5c\u00a0\n\"one 2\"\n, \u00a0\"\none 1\"\n\u00a0\uff08\n\"\u4e00\u4e2a\u4e8c\"\n\u00a0,\u00a0\u00a0\n\"\u4e00\u4e2a\u4e00\"\n)\u00a0, \u5373\u00a0\n1211\n\u3002\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \nn\n \uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c \nn\n \u9879\u3002\n\n\n\n\u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n 1\n\n\n\u8f93\u51fa:\n \"1\"\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n 4\n\n\n\u8f93\u51fa:\n \"1211\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n38. Count and Say\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n38. \u62a5\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "38. Count and Say"
        },
        {
            "location": "/leetcode-0038-count-and-say/#38-count-and-say",
            "text": "",
            "title": "38. Count and Say"
        },
        {
            "location": "/leetcode-0038-count-and-say/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u62a5\u6570\u5e8f\u5217\u662f\u6307\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a  1.     1\n\n2.     11\n\n3.     21\n\n4.     1211\n\n5.     111221  1 \u00a0\u88ab\u8bfb\u4f5c\u00a0\u00a0 \"one 1\" \u00a0\u00a0( \"\u4e00\u4e2a\u4e00\" ) , \u5373\u00a0 11 \u3002  11  \u88ab\u8bfb\u4f5c\u00a0 \"two 1s\" \u00a0( \"\u4e24\u4e2a\u4e00\" \uff09, \u5373\u00a0 21 \u3002  21  \u88ab\u8bfb\u4f5c\u00a0 \"one 2\" , \u00a0\" one 1\" \u00a0\uff08 \"\u4e00\u4e2a\u4e8c\" \u00a0,\u00a0\u00a0 \"\u4e00\u4e2a\u4e00\" )\u00a0, \u5373\u00a0 1211 \u3002  \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570  n  \uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c  n  \u9879\u3002  \u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1 \u8f93\u51fa:  \"1\"  \u793a\u4f8b 2:  \u8f93\u5165:  4 \u8f93\u51fa:  \"1211\"     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 38. Count and Say   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 38. \u62a5\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0038-count-and-say/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0038-count-and-say/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0038-count-and-say/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0039-combination-sum/",
            "text": "39. Combination Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n39. Combination Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n39. \u7ec4\u5408\u603b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a\n\uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b\n\n\uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b\n\n\uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0\n        if (residue < 0) {\n            return;\n        }\n        // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        for (int i = start; i < len; i++) {\n            // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 3, 6, 7};\n        int target = 7;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum = solution.combinationSum(candidates, target);\n        System.out.println(combinationSum);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution2 {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6\n        // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86\n        // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n        for (int i = start; i < len && residue - candidates[i] >= 0; i++) {\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad\n        Arrays.sort(candidates);\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n}",
            "title": "39. Combination Sum"
        },
        {
            "location": "/leetcode-0039-combination-sum/#39-combination-sum",
            "text": "",
            "title": "39. Combination Sum"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002   \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 39. Combination Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 39. \u7ec4\u5408\u603b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a\n\uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b \n\uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b \n\uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0039-combination-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0039-combination-sum/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0\n        if (residue < 0) {\n            return;\n        }\n        // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        for (int i = start; i < len; i++) {\n            // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 3, 6, 7};\n        int target = 7;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum = solution.combinationSum(candidates, target);\n        System.out.println(combinationSum);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09"
        },
        {
            "location": "/leetcode-0039-combination-sum/#2",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution2 {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    private void findCombinationSum(int residue, int start, Stack<Integer> pre) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(pre));\n            return;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6\n        // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86\n        // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n        for (int i = start; i < len && residue - candidates[i] >= 0; i++) {\n            pre.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1\n            findCombinationSum(residue - candidates[i], i, pre);\n            pre.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad\n        Arrays.sort(candidates);\n        this.len = len;\n        this.candidates = candidates;\n        findCombinationSum(target, 0, new Stack<>());\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/",
            "text": "40. Combination Sum II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u00a0\ncandidates\n\u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u6570\u00a0\ntarget\n\u00a0\uff0c\u627e\u51fa\u00a0\ncandidates\n\u00a0\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u00a0\ntarget\n\u00a0\u7684\u7ec4\u5408\u3002\n\n\ncandidates\n\u00a0\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\n\n\n\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002\u00a0\n\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n candidates =\u00a0\n[10,1,2,7,6,1,5]\n, target =\u00a0\n8\n,\n\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n candidates =\u00a0[2,5,2,1,2], target =\u00a05,\n\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n\n[\n\u00a0 [1,2,2],\n\u00a0 [5]\n]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n40. Combination Sum II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n40. \u7ec4\u5408\u603b\u548c II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002\n\uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b\n\n\uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6\n    // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = begin; i < len && residue - candidates[i] >= 0; i++) {\n            // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a\n            // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002\n            // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b\n            if (i > begin && candidates[i] == candidates[i - 1]) {\n                continue;\n            }\n            stack.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i\n            findCombinationSum2(residue - candidates[i], i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\n        Arrays.sort(candidates);\n        this.candidates = candidates;\n        findCombinationSum2(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 5, 2, 1, 2};\n        int target = 5;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target);\n        System.out.println(combinationSum2);\n    }\n}",
            "title": "40. Combination Sum II"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#40-combination-sum-ii",
            "text": "",
            "title": "40. Combination Sum II"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u00a0 candidates \u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u6570\u00a0 target \u00a0\uff0c\u627e\u51fa\u00a0 candidates \u00a0\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u00a0 target \u00a0\u7684\u7ec4\u5408\u3002  candidates \u00a0\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002  \u8bf4\u660e\uff1a   \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002  \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002\u00a0   \u793a\u4f8b\u00a01:  \u8f93\u5165:  candidates =\u00a0 [10,1,2,7,6,1,5] , target =\u00a0 8 , \u6240\u6c42\u89e3\u96c6\u4e3a: \n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]  \u793a\u4f8b\u00a02:  \u8f93\u5165:  candidates =\u00a0[2,5,2,1,2], target =\u00a05, \u6240\u6c42\u89e3\u96c6\u4e3a: \n[\n\u00a0 [1,2,2],\n\u00a0 [5]\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 40. Combination Sum II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 40. \u7ec4\u5408\u603b\u548c II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002\n\uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b \n\uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0040-combination-sum-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private int[] candidates;\n    private int len;\n\n    // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6\n    // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f\n    private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) {\n        if (residue == 0) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = begin; i < len && residue - candidates[i] >= 0; i++) {\n            // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a\n            // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002\n            // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b\n            if (i > begin && candidates[i] == candidates[i - 1]) {\n                continue;\n            }\n            stack.add(candidates[i]);\n            // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i\n            findCombinationSum2(residue - candidates[i], i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        int len = candidates.length;\n        if (len == 0) {\n            return res;\n        }\n        this.len = len;\n        // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\n        Arrays.sort(candidates);\n        this.candidates = candidates;\n        findCombinationSum2(target, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] candidates = {2, 5, 2, 1, 2};\n        int target = 5;\n        Solution solution = new Solution();\n        List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target);\n        System.out.println(combinationSum2);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/",
            "text": "41. First Missing Positive\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165: [1,2,0]\n\u8f93\u51fa: 3\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165: [3,4,-1,1]\n\u8f93\u51fa: 2\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165: [7,8,9,11,12]\n\u8f93\u51fa: 1\n\n\n\n\u8bf4\u660e:\n\n\n\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO(\nn\n)\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n41. First Missing Positive\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u7406\u89e3\u201c\u6876\u6392\u5e8f\u201d\uff0c\u5143\u7d20\u653e\u5728\u5b83\u5e94\u8be5\u653e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5176\u5b83\u4f4d\u7f6e\u5b81\u53ef\u7a7a\u7740\u3002\n\u53ef\u4ee5\u627e\u5176\u5b83\u76f8\u5173\u7684\u6876\u6392\u5e8f\u7684\u95ee\u9898\u6765\u505a\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    // \u5173\u952e\u5b57\uff1a\u6876\u6392\u5e8f\uff0c\u4ec0\u4e48\u6570\u5b57\u5c31\u8981\u653e\u5728\u5bf9\u5e94\u7684\u7d22\u5f15\u4e0a\uff0c\u5176\u5b83\u7a7a\u7740\u5c31\u7a7a\u7740\n    // \u6700\u597d\u7684\u4f8b\u5b50\uff1a[3,4,-1,1]\n    // \u6574\u7406\u597d\u5e94\u8be5\u662f\u8fd9\u6837\uff1a[1,-1,3,4]\uff0c\n    // \u8fd9\u91cc 1\uff0c3\uff0c4 \u90fd\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\n    // -1 \u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u7d22\u5f15\u662f 1 \uff0c\u6240\u4ee5\u8fd4\u56de 2\n\n    // [4,3,2,1] \u8981\u53d8\u6210 [1,2,3,4]\uff0c\u5251\u6307 Offer \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\n\n    // \u8fd9\u91cc\u8d1f\u6570\u548c\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u90fd\u662f\"\u6363\u4e71\u9879\"\u3002\n\n    public int firstMissingPositive(int[] nums) {\n        int len = nums.length;\n\n        for (int i = 0; i < len; i++) {\n            // \u524d\u4e24\u4e2a\u662f\u5728\u5224\u65ad\u662f\u5426\u6210\u4e3a\u7d22\u5f15\n            // \u540e\u4e00\u4e2a\u662f\u5728\u5224\u65ad\uff0c\u4f8b\u5982 3 \u5728\u4e0d\u5728\u7d22\u5f15 2 \u4e0a\n            // \u5373 nums[i] ?= nums[nums[i]-1] \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\n            while (nums[i] > 0 && nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                // \u7b2c 3 \u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u7d22\u5f15\u7684\u90e8\u5206\u662f i \u548c nums[i]-1\n                swap(nums, nums[i] - 1, i);\n            }\n        }\n\n        // \u8c03\u8bd5\u4ee3\u7801\n        // System.out.println(Arrays.toString(nums));\n\n        for (int i = 0; i < len; i++) {\n            // [1,-2,3,4]\n            // \u9664\u4e86 -2 \u5176\u5b83\u90fd\u6ee1\u8db3\uff1a i+1 = num[i]\n            if (nums[i] - 1 != i) {\n                return i + 1;\n            }\n        }\n\n        return len + 1;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // int[] nums = {3, 4, -1, 5};\n        int[] nums = {4, 3, 2, 1};\n        int firstMissingPositive = solution.firstMissingPositive(nums);\n        System.out.println(firstMissingPositive);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n        # \u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50\n        # [3,4,-1,1]\n        # [-1,4,3,1]\n        # [-1,1,3,4]\n        # 3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\n        # 4 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 3 \u7684\u5730\u65b9\n\n        for i in range(len(nums)):\n\n            # nums[i] > 0 and nums[i] <= len(nums) \u7684\u610f\u601d\u662f\uff1a\u53ea\u8981\u662f\u7b26\u5408\u7d22\u5f15\u7684\u6570\u5b57\n            # \u8fd9\u91cc\u7684\u7d22\u5f15\u5e94\u8be5\u8ba4\u4e3a\u4ece 1 \u5f00\u59cb\n            # \u5c31\u8981\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u5730\u65b9\u4e0a\u53bb\uff0c\u8fd9\u4e00\u6b65\u53eb hash\n            # nums[i] == nums[nums[i]-1]\uff0c\u53eb\u653e\u5230\u4e86\u6b63\u786e\u7684\u5730\u65b9\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n\n            # \u6240\u4ee5\uff0c\u5148\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u7d22\u5f15\n            # \u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u653e\u5728\u4e86\u6b63\u786e\u7684\u5730\u65b9\n\n            while 1 <= nums[i] <= len(nums) and nums[i] != nums[nums[i] - 1]:\n                # \u4ea4\u6362\n                self.__swap(nums, i, nums[i] - 1)\n\n        # \u518d\u904d\u5386\u4e00\u6b21\uff0c\u6ca1\u6709\u653e\u5bf9\u7684\u5c31\u662f\u4f60\u8981\u627e\u7684\n\n        for i in range(len(nums)):\n            # value\uff1a [1,2,3,4]\n            # index\uff1a [0,1,2,3]\n            if i + 1 != nums[i]:\n                return i + 1\n\n        return len(nums) + 1\n\n    def __swap(self, nums, index1, index2):\n        nums[index1], nums[index2] = nums[index2], nums[index1]\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0041-first-missing-positive\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "41. First Missing Positive"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/#41-first-missing-positive",
            "text": "",
            "title": "41. First Missing Positive"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: [1,2,0]\n\u8f93\u51fa: 3  \u793a\u4f8b\u00a02:  \u8f93\u5165: [3,4,-1,1]\n\u8f93\u51fa: 2  \u793a\u4f8b\u00a03:  \u8f93\u5165: [7,8,9,11,12]\n\u8f93\u51fa: 1  \u8bf4\u660e:  \u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO( n )\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 41. First Missing Positive   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u7406\u89e3\u201c\u6876\u6392\u5e8f\u201d\uff0c\u5143\u7d20\u653e\u5728\u5b83\u5e94\u8be5\u653e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5176\u5b83\u4f4d\u7f6e\u5b81\u53ef\u7a7a\u7740\u3002 \u53ef\u4ee5\u627e\u5176\u5b83\u76f8\u5173\u7684\u6876\u6392\u5e8f\u7684\u95ee\u9898\u6765\u505a\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0041-first-missing-positive/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\npublic class Solution {\n\n    // \u5173\u952e\u5b57\uff1a\u6876\u6392\u5e8f\uff0c\u4ec0\u4e48\u6570\u5b57\u5c31\u8981\u653e\u5728\u5bf9\u5e94\u7684\u7d22\u5f15\u4e0a\uff0c\u5176\u5b83\u7a7a\u7740\u5c31\u7a7a\u7740\n    // \u6700\u597d\u7684\u4f8b\u5b50\uff1a[3,4,-1,1]\n    // \u6574\u7406\u597d\u5e94\u8be5\u662f\u8fd9\u6837\uff1a[1,-1,3,4]\uff0c\n    // \u8fd9\u91cc 1\uff0c3\uff0c4 \u90fd\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\n    // -1 \u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u7d22\u5f15\u662f 1 \uff0c\u6240\u4ee5\u8fd4\u56de 2\n\n    // [4,3,2,1] \u8981\u53d8\u6210 [1,2,3,4]\uff0c\u5251\u6307 Offer \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\n\n    // \u8fd9\u91cc\u8d1f\u6570\u548c\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u90fd\u662f\"\u6363\u4e71\u9879\"\u3002\n\n    public int firstMissingPositive(int[] nums) {\n        int len = nums.length;\n\n        for (int i = 0; i < len; i++) {\n            // \u524d\u4e24\u4e2a\u662f\u5728\u5224\u65ad\u662f\u5426\u6210\u4e3a\u7d22\u5f15\n            // \u540e\u4e00\u4e2a\u662f\u5728\u5224\u65ad\uff0c\u4f8b\u5982 3 \u5728\u4e0d\u5728\u7d22\u5f15 2 \u4e0a\n            // \u5373 nums[i] ?= nums[nums[i]-1] \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\n            while (nums[i] > 0 && nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                // \u7b2c 3 \u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u7d22\u5f15\u7684\u90e8\u5206\u662f i \u548c nums[i]-1\n                swap(nums, nums[i] - 1, i);\n            }\n        }\n\n        // \u8c03\u8bd5\u4ee3\u7801\n        // System.out.println(Arrays.toString(nums));\n\n        for (int i = 0; i < len; i++) {\n            // [1,-2,3,4]\n            // \u9664\u4e86 -2 \u5176\u5b83\u90fd\u6ee1\u8db3\uff1a i+1 = num[i]\n            if (nums[i] - 1 != i) {\n                return i + 1;\n            }\n        }\n\n        return len + 1;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // int[] nums = {3, 4, -1, 5};\n        int[] nums = {4, 3, 2, 1};\n        int firstMissingPositive = solution.firstMissingPositive(nums);\n        System.out.println(firstMissingPositive);\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n        # \u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50\n        # [3,4,-1,1]\n        # [-1,4,3,1]\n        # [-1,1,3,4]\n        # 3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\n        # 4 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 3 \u7684\u5730\u65b9\n\n        for i in range(len(nums)):\n\n            # nums[i] > 0 and nums[i] <= len(nums) \u7684\u610f\u601d\u662f\uff1a\u53ea\u8981\u662f\u7b26\u5408\u7d22\u5f15\u7684\u6570\u5b57\n            # \u8fd9\u91cc\u7684\u7d22\u5f15\u5e94\u8be5\u8ba4\u4e3a\u4ece 1 \u5f00\u59cb\n            # \u5c31\u8981\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u5730\u65b9\u4e0a\u53bb\uff0c\u8fd9\u4e00\u6b65\u53eb hash\n            # nums[i] == nums[nums[i]-1]\uff0c\u53eb\u653e\u5230\u4e86\u6b63\u786e\u7684\u5730\u65b9\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n            # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d\n\n            # \u6240\u4ee5\uff0c\u5148\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u7d22\u5f15\n            # \u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u653e\u5728\u4e86\u6b63\u786e\u7684\u5730\u65b9\n\n            while 1 <= nums[i] <= len(nums) and nums[i] != nums[nums[i] - 1]:\n                # \u4ea4\u6362\n                self.__swap(nums, i, nums[i] - 1)\n\n        # \u518d\u904d\u5386\u4e00\u6b21\uff0c\u6ca1\u6709\u653e\u5bf9\u7684\u5c31\u662f\u4f60\u8981\u627e\u7684\n\n        for i in range(len(nums)):\n            # value\uff1a [1,2,3,4]\n            # index\uff1a [0,1,2,3]\n            if i + 1 != nums[i]:\n                return i + 1\n\n        return len(nums) + 1\n\n    def __swap(self, nums, index1, index2):\n        nums[index1], nums[index2] = nums[index2], nums[index1]  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0041-first-missing-positive  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/",
            "text": "42. Trapping Rain Water\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u00a0\nn\n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002\n\n\n\n\n\n\n\u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002\u00a0\n\u611f\u8c22 Marcos\n \u8d21\u732e\u6b64\u56fe\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n [0,1,0,2,1,0,1,3,2,1,2,1]\n\n\n\u8f93\u51fa:\n 6\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n42. Trapping Rain Water\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n42. \u63a5\u96e8\u6c34\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "42. Trapping Rain Water"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/#42-trapping-rain-water",
            "text": "",
            "title": "42. Trapping Rain Water"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u00a0 n  \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002   \u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002\u00a0 \u611f\u8c22 Marcos  \u8d21\u732e\u6b64\u56fe\u3002  \u793a\u4f8b:  \u8f93\u5165:  [0,1,0,2,1,0,1,3,2,1,2,1] \u8f93\u51fa:  6     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 42. Trapping Rain Water   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 42. \u63a5\u96e8\u6c34   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0042-trapping-rain-water/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0043-multiply-strings/",
            "text": "43. Multiply Strings\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\u00a0\nnum1\n\u00a0\u548c\u00a0\nnum2\n\uff0c\u8fd4\u56de\u00a0\nnum1\n\u00a0\u548c\u00a0\nnum2\n\u00a0\u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n num1 = \"2\", num2 = \"3\"\n\n\n\u8f93\u51fa:\n \"6\"\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n num1 = \"123\", num2 = \"456\"\n\n\n\u8f93\u51fa:\n \"56088\"\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\n\nnum1\n\u00a0\u548c\u00a0\nnum2\n\u00a0\u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002\n\n\n\nnum1\n \u548c\u00a0\nnum2\n \u53ea\u5305\u542b\u6570\u5b57\u00a0\n0-9\n\u3002\n\n\n\nnum1\n \u548c\u00a0\nnum2\n\u00a0\u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002\n\n\n\n\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09\n\u6216\n\u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406\n\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n43. Multiply Strings\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n43. \u5b57\u7b26\u4e32\u76f8\u4e58\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "43. Multiply Strings"
        },
        {
            "location": "/leetcode-0043-multiply-strings/#43-multiply-strings",
            "text": "",
            "title": "43. Multiply Strings"
        },
        {
            "location": "/leetcode-0043-multiply-strings/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\u00a0 num1 \u00a0\u548c\u00a0 num2 \uff0c\u8fd4\u56de\u00a0 num1 \u00a0\u548c\u00a0 num2 \u00a0\u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  num1 = \"2\", num2 = \"3\" \u8f93\u51fa:  \"6\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  num1 = \"123\", num2 = \"456\" \u8f93\u51fa:  \"56088\"  \u8bf4\u660e\uff1a   num1 \u00a0\u548c\u00a0 num2 \u00a0\u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002  num1  \u548c\u00a0 num2  \u53ea\u5305\u542b\u6570\u5b57\u00a0 0-9 \u3002  num1  \u548c\u00a0 num2 \u00a0\u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002  \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09 \u6216 \u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406 \u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 43. Multiply Strings   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 43. \u5b57\u7b26\u4e32\u76f8\u4e58   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0043-multiply-strings/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0043-multiply-strings/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0043-multiply-strings/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/",
            "text": "44. Wildcard Matching\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0(\ns\n) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f\u00a0(\np\n) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u00a0\n'?'\n\u00a0\u548c\u00a0\n'*'\n\u00a0\u7684\u901a\u914d\u7b26\u5339\u914d\u3002\n\n\n\n'?' \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002\n\n'*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\n\n\n\n\n\n\u4e24\u4e2a\u5b57\u7b26\u4e32\n\u5b8c\u5168\u5339\u914d\n\u624d\u7b97\u5339\u914d\u6210\u529f\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\ns\n\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0\na-z\n\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\np\n\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0\na-z\n\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26\u00a0\n?\n\u00a0\u548c\u00a0\n*\n\u3002\n\n\n\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n\n\ns = \"aa\"\n\np = \"a\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u89e3\u91ca:\n \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n\n\ns = \"aa\"\n\np = \"*\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n\u00a0'*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n\n\ns = \"cb\"\n\np = \"?a\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u89e3\u91ca:\n\u00a0'?' \u53ef\u4ee5\u5339\u914d 'c', \u4f46\u7b2c\u4e8c\u4e2a 'a' \u65e0\u6cd5\u5339\u914d 'b'\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a04:\n\n\n\n\u8f93\u5165:\n\n\ns = \"adceb\"\n\np = \"*a*b\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n\u00a0\u7b2c\u4e00\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"dce\".\n\n\n\n\n\n\u793a\u4f8b\u00a05:\n\n\n\n\u8f93\u5165:\n\n\ns = \"acdcb\"\n\np = \"a*c?b\"\n\n\n\u8f93\u5165:\n false\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n44. Wildcard Matching\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n44. \u901a\u914d\u7b26\u5339\u914d\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "44. Wildcard Matching"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/#44-wildcard-matching",
            "text": "",
            "title": "44. Wildcard Matching"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f\u00a0( p ) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u00a0 '?' \u00a0\u548c\u00a0 '*' \u00a0\u7684\u901a\u914d\u7b26\u5339\u914d\u3002  '?' \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002\n\n'*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002  \u4e24\u4e2a\u5b57\u7b26\u4e32 \u5b8c\u5168\u5339\u914d \u624d\u7b97\u5339\u914d\u6210\u529f\u3002  \u8bf4\u660e:   s \u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0 a-z \u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\u3002  p \u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0 a-z \u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26\u00a0 ? \u00a0\u548c\u00a0 * \u3002   \u793a\u4f8b\u00a01:  \u8f93\u5165: \n\ns = \"aa\"\n\np = \"a\" \u8f93\u51fa:  false \u89e3\u91ca:  \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165: \n\ns = \"aa\"\n\np = \"*\" \u8f93\u51fa:  true \u89e3\u91ca: \u00a0'*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b\u00a03:  \u8f93\u5165: \n\ns = \"cb\"\n\np = \"?a\" \u8f93\u51fa:  false \u89e3\u91ca: \u00a0'?' \u53ef\u4ee5\u5339\u914d 'c', \u4f46\u7b2c\u4e8c\u4e2a 'a' \u65e0\u6cd5\u5339\u914d 'b'\u3002  \u793a\u4f8b\u00a04:  \u8f93\u5165: \n\ns = \"adceb\"\n\np = \"*a*b\" \u8f93\u51fa:  true \u89e3\u91ca: \u00a0\u7b2c\u4e00\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"dce\".  \u793a\u4f8b\u00a05:  \u8f93\u5165: \n\ns = \"acdcb\"\n\np = \"a*c?b\" \u8f93\u5165:  false     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 44. Wildcard Matching   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 44. \u901a\u914d\u7b26\u5339\u914d   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0044-wildcard-matching/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/",
            "text": "45. Jump Game II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002\n\n\n\n\u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n [2,3,1,1,4]\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f \n2\n\u3002\n\n\u00a0    \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3\u00a0\n1\n\u00a0\u6b65\uff0c\u7136\u540e\u8df3\u00a0\n3\n\u00a0\u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\n\n\u8bf4\u660e:\n\n\n\n\u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n45. Jump Game II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n45. \u8df3\u8dc3\u6e38\u620f II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "45. Jump Game II"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/#45-jump-game-ii",
            "text": "",
            "title": "45. Jump Game II"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002  \u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u793a\u4f8b:  \u8f93\u5165:  [2,3,1,1,4] \u8f93\u51fa:  2 \u89e3\u91ca:  \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f  2 \u3002\n\n\u00a0    \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3\u00a0 1 \u00a0\u6b65\uff0c\u7136\u540e\u8df3\u00a0 3 \u00a0\u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u8bf4\u660e:  \u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 45. Jump Game II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 45. \u8df3\u8dc3\u6e38\u620f II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0045-jump-game-ii/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0046-permutations/",
            "text": "46. Permutations\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\n\u6ca1\u6709\u91cd\u590d\n\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,2,3]\n\n\u8f93\u51fa:\n\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n46. Permutations\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n46. \u5168\u6392\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/permutations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86\n    private int[] nums;\n    private boolean[] marked;\n\n    // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\n    private void findPermutions(int hasUsedCount, Stack<Integer> stack) {\n        // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\n        // System.out.println(Arrays.toString(used));\n        if (hasUsedCount == nums.length) {\n            // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                marked[i] = true;\n                stack.push(nums[i]);\n                findPermutions(hasUsedCount + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        this.nums = nums;\n        marked = new boolean[len];\n        findPermutions(0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3};\n        Solution solution = new Solution();\n        List<List<Integer>> permute = solution.permute(nums);\n        System.out.println(permute);\n    }\n}",
            "title": "46. Permutations"
        },
        {
            "location": "/leetcode-0046-permutations/#46-permutations",
            "text": "",
            "title": "46. Permutations"
        },
        {
            "location": "/leetcode-0046-permutations/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002  \u793a\u4f8b:  \u8f93\u5165:  [1,2,3] \u8f93\u51fa: \n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 46. Permutations   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 46. \u5168\u6392\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0046-permutations/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0046-permutations/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0046-permutations/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/permutations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86\n    private int[] nums;\n    private boolean[] marked;\n\n    // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\n    private void findPermutions(int hasUsedCount, Stack<Integer> stack) {\n        // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\n        // System.out.println(Arrays.toString(used));\n        if (hasUsedCount == nums.length) {\n            // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                marked[i] = true;\n                stack.push(nums[i]);\n                findPermutions(hasUsedCount + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        this.nums = nums;\n        marked = new boolean[len];\n        findPermutions(0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3};\n        Solution solution = new Solution();\n        List<List<Integer>> permute = solution.permute(nums);\n        System.out.println(permute);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0047-permutations-ii/",
            "text": "47. Permutations II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,1,2]\n\n\u8f93\u51fa:\n\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n47. Permutations II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n47. \u5168\u6392\u5217 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002\n1\u3001\n\u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\n\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b\n2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09 \ni > 0\n \uff0c\uff082\uff09 \nnums[i] == nums[i - 1]\n \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373 \nmarked[i-1] = false\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private boolean[] marked;\n\n    private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) {\n        if (depth == nums.length) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684\n                // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86\n                if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) {\n                    continue;\n                }\n                marked[i] = true;\n                stack.add(nums[i]);\n                findPermuteUnique(nums, depth + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\n        Arrays.sort(nums);\n        marked = new boolean[len];\n        findPermuteUnique(nums, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2};\n        Solution solution = new Solution();\n        List<List<Integer>> permuteUnique = solution.permuteUnique(nums);\n        System.out.println(permuteUnique);\n    }\n}",
            "title": "47. Permutations II"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#47-permutations-ii",
            "text": "",
            "title": "47. Permutations II"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002  \u793a\u4f8b:  \u8f93\u5165:  [1,1,2] \u8f93\u51fa: \n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 47. Permutations II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 47. \u5168\u6392\u5217 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002\n1\u3001 \u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f \uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b\n2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09  i > 0  \uff0c\uff082\uff09  nums[i] == nums[i - 1]  \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373  marked[i-1] = false \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0047-permutations-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n    private boolean[] marked;\n\n    private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) {\n        if (depth == nums.length) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (!marked[i]) {\n                // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684\n                // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86\n                if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) {\n                    continue;\n                }\n                marked[i] = true;\n                stack.add(nums[i]);\n                findPermuteUnique(nums, depth + 1, stack);\n                stack.pop();\n                marked[i] = false;\n            }\n        }\n    }\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\n        Arrays.sort(nums);\n        marked = new boolean[len];\n        findPermuteUnique(nums, 0, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2};\n        Solution solution = new Solution();\n        List<List<Integer>> permuteUnique = solution.permuteUnique(nums);\n        System.out.println(permuteUnique);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0048-rotate-image/",
            "text": "48. Rotate Image\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a \nn\u00a0\n\u00d7\u00a0\nn\n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002\n\n\n\n\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\u4f60\u5fc5\u987b\u5728\n\u539f\u5730\n\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\n\u8bf7\u4e0d\u8981\n\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u7ed9\u5b9a \nmatrix\n = \n\n[\n\n  [1,2,3],\n\n  [4,5,6],\n\n  [7,8,9]\n\n],\n\n\n\n\n\u539f\u5730\n\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n\n[\n\n  [7,4,1],\n\n  [8,5,2],\n\n  [9,6,3]\n\n]\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u7ed9\u5b9a \nmatrix\n =\n\n[\n\n  [ 5, 1, 9,11],\n\n  [ 2, 4, 8,10],\n\n  [13, 3, 6, 7],\n\n  [15,14,12,16]\n\n], \n\n\n\n\n\u539f\u5730\n\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n\n[\n\n  [15,13, 2, 5],\n\n  [14, 3, 4, 1],\n\n  [12, 6, 8, 9],\n\n  [16, 7,10,11]\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n48. Rotate Image\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n48. \u65cb\u8f6c\u56fe\u50cf\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "48. Rotate Image"
        },
        {
            "location": "/leetcode-0048-rotate-image/#48-rotate-image",
            "text": "",
            "title": "48. Rotate Image"
        },
        {
            "location": "/leetcode-0048-rotate-image/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a  n\u00a0 \u00d7\u00a0 n  \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002  \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002  \u8bf4\u660e\uff1a  \u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002 \u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002  \u793a\u4f8b 1:  \u7ed9\u5b9a  matrix  = \n\n[\n\n  [1,2,3],\n\n  [4,5,6],\n\n  [7,8,9]\n\n], \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n\n[\n\n  [7,4,1],\n\n  [8,5,2],\n\n  [9,6,3]\n\n]  \u793a\u4f8b 2:  \u7ed9\u5b9a  matrix  =\n\n[\n\n  [ 5, 1, 9,11],\n\n  [ 2, 4, 8,10],\n\n  [13, 3, 6, 7],\n\n  [15,14,12,16]\n\n],  \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n\n[\n\n  [15,13, 2, 5],\n\n  [14, 3, 4, 1],\n\n  [12, 6, 8, 9],\n\n  [16, 7,10,11]\n\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 48. Rotate Image   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 48. \u65cb\u8f6c\u56fe\u50cf   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0048-rotate-image/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0048-rotate-image/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0048-rotate-image/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0049-group-anagrams/",
            "text": "49. Group Anagrams\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n \n[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n,\n\n\n\u8f93\u51fa:\n\n\n[\n\n  [\"ate\",\"eat\",\"tea\"],\n\n  [\"nat\",\"tan\"],\n\n  [\"bat\"]\n\n]\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\n\n\u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\n\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n49. Group Anagrams\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "49. Group Anagrams"
        },
        {
            "location": "/leetcode-0049-group-anagrams/#49-group-anagrams",
            "text": "",
            "title": "49. Group Anagrams"
        },
        {
            "location": "/leetcode-0049-group-anagrams/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b:  \u8f93\u5165:   [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"] , \u8f93\u51fa: \n\n[\n\n  [\"ate\",\"eat\",\"tea\"],\n\n  [\"nat\",\"tan\"],\n\n  [\"bat\"]\n\n]  \u8bf4\u660e\uff1a   \u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002  \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 49. Group Anagrams   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0049-group-anagrams/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0049-group-anagrams/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0049-group-anagrams/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0050-powx-n/",
            "text": "50. Pow(x, n)\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u00a0\npow(\nx\n, \nn\n)\n\u00a0\uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n 2.00000, 10\n\n\n\u8f93\u51fa:\n 1024.00000\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n 2.10000, 3\n\n\n\u8f93\u51fa:\n 9.26100\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n 2.00000, -2\n\n\n\u8f93\u51fa:\n 0.25000\n\n\n\u89e3\u91ca:\n 2\n-2\n = 1/2\n2\n = 1/4 = 0.25\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\n-100.0 <\u00a0\nx\n\u00a0< 100.0\n\n\n\nn\n\u00a0\u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f\u00a0[\u22122\n31\n,\u00a02\n31\u00a0\n\u2212 1] \u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n50. Pow(x, n)\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n50. Pow(x, n)\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "50. Pow(x, n)"
        },
        {
            "location": "/leetcode-0050-powx-n/#50-powx-n",
            "text": "",
            "title": "50. Pow(x, n)"
        },
        {
            "location": "/leetcode-0050-powx-n/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u00a0 pow( x ,  n ) \u00a0\uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  2.00000, 10 \u8f93\u51fa:  1024.00000  \u793a\u4f8b\u00a02:  \u8f93\u5165:  2.10000, 3 \u8f93\u51fa:  9.26100  \u793a\u4f8b\u00a03:  \u8f93\u5165:  2.00000, -2 \u8f93\u51fa:  0.25000 \u89e3\u91ca:  2 -2  = 1/2 2  = 1/4 = 0.25  \u8bf4\u660e:   -100.0 <\u00a0 x \u00a0< 100.0  n \u00a0\u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f\u00a0[\u22122 31 ,\u00a02 31\u00a0 \u2212 1] \u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 50. Pow(x, n)   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 50. Pow(x, n)   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0050-powx-n/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0050-powx-n/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0050-powx-n/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0051-n-queens/",
            "text": "51. N-Queens\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\nn\u00a0\n\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 \nn\n\u00a0\u4e2a\u7687\u540e\u653e\u7f6e\u5728 \nn\n\u00d7\nn\n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002\n\n\n\n\n\n\n\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 \nn\n\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684\u00a0\nn\u00a0\n\u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\n\n\n\u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684\u00a0\nn\n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d \n'Q'\n \u548c \n'.'\n \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n 4\n\n\n\u8f93\u51fa:\n [\n\n [\".Q..\",  // \u89e3\u6cd5 1\n\n  \"...Q\",\n\n  \"Q...\",\n\n  \"..Q.\"],\n\n\n\n [\"..Q.\",  // \u89e3\u6cd5 2\n\n  \"Q...\",\n\n  \"...Q\",\n\n  \".Q..\"]\n\n]\n\n\n\u89e3\u91ca:\n 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n51. N-Queens\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n51. N\u7687\u540e\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "51. N-Queens"
        },
        {
            "location": "/leetcode-0051-n-queens/#51-n-queens",
            "text": "",
            "title": "51. N-Queens"
        },
        {
            "location": "/leetcode-0051-n-queens/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   n\u00a0 \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06  n \u00a0\u4e2a\u7687\u540e\u653e\u7f6e\u5728  n \u00d7 n  \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002   \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002  \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570  n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684\u00a0 n\u00a0 \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002  \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684\u00a0 n  \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d  'Q'  \u548c  '.'  \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002  \u793a\u4f8b:  \u8f93\u5165:  4 \u8f93\u51fa:  [\n\n [\".Q..\",  // \u89e3\u6cd5 1\n\n  \"...Q\",\n\n  \"Q...\",\n\n  \"..Q.\"],\n\n\n\n [\"..Q.\",  // \u89e3\u6cd5 2\n\n  \"Q...\",\n\n  \"...Q\",\n\n  \".Q..\"]\n\n] \u89e3\u91ca:  4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 51. N-Queens   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 51. N\u7687\u540e   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0051-n-queens/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0051-n-queens/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0051-n-queens/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/",
            "text": "52. N-Queens II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\nn\u00a0\n\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 \nn\n\u00a0\u4e2a\u7687\u540e\u653e\u7f6e\u5728 \nn\n\u00d7\nn\n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002\n\n\n\n\n\n\n\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 \nn\n\uff0c\u8fd4\u56de \nn\n \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n 4\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n\n[\n\n\u00a0[\".Q..\", \u00a0// \u89e3\u6cd5 1\n\n\u00a0 \"...Q\",\n\n\u00a0 \"Q...\",\n\n\u00a0 \"..Q.\"],\n\n\n\n\u00a0[\"..Q.\", \u00a0// \u89e3\u6cd5 2\n\n\u00a0 \"Q...\",\n\n\u00a0 \"...Q\",\n\n\u00a0 \".Q..\"]\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n52. N-Queens II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n52. N\u7687\u540e II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "52. N-Queens II"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/#52-n-queens-ii",
            "text": "",
            "title": "52. N-Queens II"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   n\u00a0 \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06  n \u00a0\u4e2a\u7687\u540e\u653e\u7f6e\u5728  n \u00d7 n  \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002   \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002  \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570  n \uff0c\u8fd4\u56de  n  \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002  \u793a\u4f8b:  \u8f93\u5165:  4 \u8f93\u51fa:  2 \u89e3\u91ca:  4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n\n[\n\n\u00a0[\".Q..\", \u00a0// \u89e3\u6cd5 1\n\n\u00a0 \"...Q\",\n\n\u00a0 \"Q...\",\n\n\u00a0 \"..Q.\"],\n\n\n\n\u00a0[\"..Q.\", \u00a0// \u89e3\u6cd5 2\n\n\u00a0 \"Q...\",\n\n\u00a0 \"...Q\",\n\n\u00a0 \".Q..\"]\n\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 52. N-Queens II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 52. N\u7687\u540e II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0052-n-queens-ii/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/",
            "text": "53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 \nnums\n\u00a0\uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [-2,1,-3,4,-1,2,1,-5,4],\n\n\u8f93\u51fa:\n 6\n\n\u89e3\u91ca:\n\u00a0\u8fde\u7eed\u5b50\u6570\u7ec4\u00a0[4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a\u00a06\u3002\n\n\n\n\u8fdb\u9636:\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O(\nn\n) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n53. Maximum Subarray\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n53. \u6700\u5927\u5b50\u5e8f\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6211\u4eec\u7740\u773c\u4e8e\u4ee5\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7ed3\u5c3e\u7684\u90a3\u4e2a\u5b50\u6570\u7ec4\uff0c\u8fd9\u6837\u505a\u5206\u6790\u4f1a\u7b80\u5316\u95ee\u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002\n\n    /**\n     * \u5b9a\u4e49\u72b6\u6001\uff1a\n     * dp[i] \uff1a \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\n     * <p>\n     * \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n     * dp[i] = max{num[i],dp[i-1] + num[i]}\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int[] dp = new int[len];\n        dp[0] = nums[0];\n        for (int i = 1; i < len; i++) {\n            dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);\n        }\n        // \u6700\u540e\u8fd9\u4e00\u6b65\uff0c\u662f\u6c42\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u4f18\u503c\n        int res = dp[0];\n        for (int i = 1; i < len; i++) {\n            res = Math.max(res,dp[i]);\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542 \uff1a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u628a\u6700\u4f18\u89e3\u89e3\u6c42\u51fa\u6765\u4e86\u3002\n\n\npublic class Solution2 {\n\n    /**\n     * \u548c Solution \u4e00\u6837\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u5c0f\n     * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n     * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int segmentSum = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < len; i++) {\n            segmentSum = Math.max(nums[i], segmentSum + nums[i]);\n            res = Math.max(res, segmentSum);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n        Solution2 solution = new Solution2();\n        int maxSubArray = solution.maxSubArray(nums);\n        System.out.println(maxSubArray);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u4e2a\u4eba\u89c9\u5f97\u7a0d\u663e\u7e41\u7410\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4e86\u89e3\u5206\u6cbb\u601d\u60f3\u3002\n\n\npublic class Solution3 {\n\n    /**\n     * \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5\u5b8c\u6210\u8ba1\u7b97\n     * https://www.geeksforgeeks.org/divide-and-conquer-maximum-sum-subarray/\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        return maxSubArraySum(nums, 0, len - 1);\n    }\n\n    /**\n     * \u4e00\u5b9a\u4f1a\u5305\u542b nums[mid] \u8fd9\u4e2a\u5143\u7d20\n     *\n     * @param nums\n     * @param l\n     * @param m\n     * @param r\n     * @return\n     */\n    private int maxCrossingSum(int[] nums, int l, int m, int r) {\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // \u5de6\u534a\u8fb9\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9\n        // \u8d70\u5230\u6700\u8fb9\u754c\uff0c\u770b\u770b\u6700\u503c\u662f\u4ec0\u4e48\n        // \u8ba1\u7b97\u4ee5 mid \u7ed3\u5c3e\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c\n        for (int i = m; i >= l; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // \u53f3\u534a\u8fb9\u4e0d\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9\n        // \u8ba1\u7b97\u4ee5 mid+1 \u5f00\u59cb\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c\n        for (int i = m + 1; i <= r; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n\n    }\n\n    /**\n     * @param nums\n     * @param l\n     * @param r\n     * @return\n     */\n    private int maxSubArraySum(int[] nums, int l, int r) {\n        if (l == r) {\n            return nums[l];\n        }\n        int mid = l + (r - l) / 2;\n        return max3(maxSubArraySum(nums, l, mid),\n                maxSubArraySum(nums, mid + 1, r),\n                maxCrossingSum(nums, l, mid, r));\n    }\n\n    private int max3(int num1, int num2, int num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0053-maximum-subarray\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#53-maximum-subarray",
            "text": "",
            "title": "53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4  nums \u00a0\uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002  \u793a\u4f8b:  \u8f93\u5165:  [-2,1,-3,4,-1,2,1,-5,4], \u8f93\u51fa:  6 \u89e3\u91ca: \u00a0\u8fde\u7eed\u5b50\u6570\u7ec4\u00a0[4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a\u00a06\u3002  \u8fdb\u9636:  \u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O( n ) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 53. Maximum Subarray   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 53. \u6700\u5927\u5b50\u5e8f\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6211\u4eec\u7740\u773c\u4e8e\u4ee5\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7ed3\u5c3e\u7684\u90a3\u4e2a\u5b50\u6570\u7ec4\uff0c\u8fd9\u6837\u505a\u5206\u6790\u4f1a\u7b80\u5316\u95ee\u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#1",
            "text": "public class Solution {\n\n    // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002\n\n    /**\n     * \u5b9a\u4e49\u72b6\u6001\uff1a\n     * dp[i] \uff1a \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\n     * <p>\n     * \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n     * dp[i] = max{num[i],dp[i-1] + num[i]}\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int[] dp = new int[len];\n        dp[0] = nums[0];\n        for (int i = 1; i < len; i++) {\n            dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);\n        }\n        // \u6700\u540e\u8fd9\u4e00\u6b65\uff0c\u662f\u6c42\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u4f18\u503c\n        int res = dp[0];\n        for (int i = 1; i < len; i++) {\n            res = Math.max(res,dp[i]);\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#2-1",
            "text": "public class Solution2 {\n\n    /**\n     * \u548c Solution \u4e00\u6837\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u5c0f\n     * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n     * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int segmentSum = nums[0];\n        int res = nums[0];\n        for (int i = 1; i < len; i++) {\n            segmentSum = Math.max(nums[i], segmentSum + nums[i]);\n            res = Math.max(res, segmentSum);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n        Solution2 solution = new Solution2();\n        int maxSubArray = solution.maxSubArray(nums);\n        System.out.println(maxSubArray);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542 \uff1a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u628a\u6700\u4f18\u89e3\u89e3\u6c42\u51fa\u6765\u4e86\u3002"
        },
        {
            "location": "/leetcode-0053-maximum-subarray/#3",
            "text": "public class Solution3 {\n\n    /**\n     * \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5\u5b8c\u6210\u8ba1\u7b97\n     * https://www.geeksforgeeks.org/divide-and-conquer-maximum-sum-subarray/\n     *\n     * @param nums\n     * @return\n     */\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        return maxSubArraySum(nums, 0, len - 1);\n    }\n\n    /**\n     * \u4e00\u5b9a\u4f1a\u5305\u542b nums[mid] \u8fd9\u4e2a\u5143\u7d20\n     *\n     * @param nums\n     * @param l\n     * @param m\n     * @param r\n     * @return\n     */\n    private int maxCrossingSum(int[] nums, int l, int m, int r) {\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // \u5de6\u534a\u8fb9\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9\n        // \u8d70\u5230\u6700\u8fb9\u754c\uff0c\u770b\u770b\u6700\u503c\u662f\u4ec0\u4e48\n        // \u8ba1\u7b97\u4ee5 mid \u7ed3\u5c3e\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c\n        for (int i = m; i >= l; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // \u53f3\u534a\u8fb9\u4e0d\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9\n        // \u8ba1\u7b97\u4ee5 mid+1 \u5f00\u59cb\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c\n        for (int i = m + 1; i <= r; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n\n    }\n\n    /**\n     * @param nums\n     * @param l\n     * @param r\n     * @return\n     */\n    private int maxSubArraySum(int[] nums, int l, int r) {\n        if (l == r) {\n            return nums[l];\n        }\n        int mid = l + (r - l) / 2;\n        return max3(maxSubArraySum(nums, l, mid),\n                maxSubArraySum(nums, mid + 1, r),\n                maxCrossingSum(nums, l, mid, r));\n    }\n\n    private int max3(int num1, int num2, int num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0053-maximum-subarray  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u4e2a\u4eba\u89c9\u5f97\u7a0d\u663e\u7e41\u7410\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4e86\u89e3\u5206\u6cbb\u601d\u60f3\u3002"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/",
            "text": "54. Spiral Matrix\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u00a0\nm\n x \nn\n\u00a0\u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08\nm\n \u884c, \nn\n \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n [ 1, 2, 3 ],\n\n [ 4, 5, 6 ],\n\n [ 7, 8, 9 ]\n\n]\n\n\n\u8f93\u51fa:\n [1,2,3,6,9,8,7,4,5]\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n  [1, 2, 3, 4],\n\n  [5, 6, 7, 8],\n\n  [9,10,11,12]\n\n]\n\n\n\u8f93\u51fa:\n [1,2,3,4,8,12,11,10,9,5,6,7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n54. Spiral Matrix\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n54. \u87ba\u65cb\u77e9\u9635\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "54. Spiral Matrix"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/#54-spiral-matrix",
            "text": "",
            "title": "54. Spiral Matrix"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u00a0 m  x  n \u00a0\u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08 m  \u884c,  n  \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: \n\n[\n\n [ 1, 2, 3 ],\n\n [ 4, 5, 6 ],\n\n [ 7, 8, 9 ]\n\n] \u8f93\u51fa:  [1,2,3,6,9,8,7,4,5]  \u793a\u4f8b\u00a02:  \u8f93\u5165: \n\n[\n\n  [1, 2, 3, 4],\n\n  [5, 6, 7, 8],\n\n  [9,10,11,12]\n\n] \u8f93\u51fa:  [1,2,3,4,8,12,11,10,9,5,6,7]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 54. Spiral Matrix   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 54. \u87ba\u65cb\u77e9\u9635   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0054-spiral-matrix/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0055-jump-game/",
            "text": "55. Jump Game\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002\n\n\n\n\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n [2,3,1,1,4]\n\n\n\u8f93\u51fa:\n true\n\n\n\u89e3\u91ca:\n \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n [3,2,1,0,4]\n\n\n\u8f93\u51fa:\n false\n\n\n\u89e3\u91ca:\n \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n55. Jump Game\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n55. \u8df3\u8dc3\u6e38\u620f\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "55. Jump Game"
        },
        {
            "location": "/leetcode-0055-jump-game/#55-jump-game",
            "text": "",
            "title": "55. Jump Game"
        },
        {
            "location": "/leetcode-0055-jump-game/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002  \u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  [2,3,1,1,4] \u8f93\u51fa:  true \u89e3\u91ca:  \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [3,2,1,0,4] \u8f93\u51fa:  false \u89e3\u91ca:  \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 55. Jump Game   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 55. \u8df3\u8dc3\u6e38\u620f   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0055-jump-game/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0055-jump-game/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0055-jump-game/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0056-merge-intervals/",
            "text": "56. Merge Intervals\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [[1,3],[2,6],[8,10],[15,18]]\n\n\u8f93\u51fa:\n [[1,6],[8,10],[15,18]]\n\n\u89e3\u91ca:\n \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6].\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [[1,4],[4,5]]\n\n\u8f93\u51fa:\n [[1,5]]\n\n\u89e3\u91ca:\n \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n56. Merge Intervals\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n56. \u5408\u5e76\u533a\u95f4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u5c06\u80fd\u591f\u5408\u5e76\u7684\u201c\u533a\u95f4\u201d\u90fd\u5408\u5e76\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u8981\u5148\u5c06\u201c\u533a\u95f4\u201d\u96c6\u5408\u6309\u7167\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u8d77\u59cb\u7aef\u70b9\u5c0f\u7684\u533a\u95f4\u9760\u524d\u3002\n+ \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u6bd4\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u8fd8\u5927\uff08\u4e25\u683c\u5927\uff0c\u4e0d\u7b49\u4e8e\uff09\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e0d\u80fd\u5408\u5e76\u3002\n+ \u5426\u5219\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u533a\u95f4\u7ec8\u6b62\u7aef\u70b9\u53d6\u5f53\u524d\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u548c\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u4e2d\u7684\u6700\u5927\u8005\u3002\n\n\n\u5982\u679c\u89c9\u5f97 \nCollections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start));\n \u8fd9\u79cd lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u6bd4\u8f83\u602a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4e24\u79cd\u7b49\u4ef7\u7684\u5199\u6cd5\u3002\n\n\nCollections.sort(intervals, (a, b) -> a.start - b.start);\n\n\n\n\nCollections.sort(intervals, new Comparator<Interval>() {\n    @Override\n    public int compare(Interval o1, Interval o2) {\n        return o1.start - o2.start;\n    }\n});\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.*;\n\nclass Interval {\n    int start;\n    int end;\n\n    Interval() {\n        start = 0;\n        end = 0;\n    }\n\n    Interval(int s, int e) {\n        start = s;\n        end = e;\n    }\n}\n\npublic class Solution {\n\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u8981\u5bf9\u96c6\u5408\u6392\u5e8f\n    // \u626b\u63cf\u7ebf\u6cd5\n\n    public List<Interval> merge(List<Interval> intervals) {\n        int len = intervals.size();\n        if (len < 2) {\n            return intervals;\n        }\n\n        Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start));\n\n        // \u56e0\u4e3a\u6bcf\u6b21\u6211\u4eec\u90fd\u62ff\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u7528\u6808\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\n        Stack<Interval> stack = new Stack<>();\n        stack.push(intervals.get(0));\n        for (int i = 1; i < len; i++) {\n            Interval curInterval = intervals.get(i);\n            Interval peek = stack.peek();\n            if (curInterval.start > peek.end) {\n                stack.add(curInterval);\n            } else {\n                // \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e94\u8be5\u53d6\u6700\u5927\n                peek.end = Math.max(curInterval.end, peek.end);\n            }\n        }\n        return stack;\n    }\n\n    public static void main(String[] args) {\n        List<Interval> intervals = new ArrayList<>();\n\n        Interval interval1 = new Interval(1, 3);\n        Interval interval2 = new Interval(2, 6);\n        Interval interval3 = new Interval(8, 10);\n        Interval interval4 = new Interval(15, 18);\n\n        intervals.add(interval1);\n        intervals.add(interval2);\n        intervals.add(interval3);\n        intervals.add(interval4);\n\n        Solution solution = new Solution();\n        List<Interval> merge = solution.merge(intervals);\n        for (Interval interval : merge) {\n            System.out.println(\"[\" + interval.start + \", \" + interval.end + \"]\");\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0056-merge-intervals\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "56. Merge Intervals"
        },
        {
            "location": "/leetcode-0056-merge-intervals/#56-merge-intervals",
            "text": "",
            "title": "56. Merge Intervals"
        },
        {
            "location": "/leetcode-0056-merge-intervals/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [[1,3],[2,6],[8,10],[15,18]] \u8f93\u51fa:  [[1,6],[8,10],[15,18]] \u89e3\u91ca:  \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6].  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [[1,4],[4,5]] \u8f93\u51fa:  [[1,5]] \u89e3\u91ca:  \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 56. Merge Intervals   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 56. \u5408\u5e76\u533a\u95f4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0056-merge-intervals/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u5c06\u80fd\u591f\u5408\u5e76\u7684\u201c\u533a\u95f4\u201d\u90fd\u5408\u5e76\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u8981\u5148\u5c06\u201c\u533a\u95f4\u201d\u96c6\u5408\u6309\u7167\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u8d77\u59cb\u7aef\u70b9\u5c0f\u7684\u533a\u95f4\u9760\u524d\u3002\n+ \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u6bd4\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u8fd8\u5927\uff08\u4e25\u683c\u5927\uff0c\u4e0d\u7b49\u4e8e\uff09\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e0d\u80fd\u5408\u5e76\u3002\n+ \u5426\u5219\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u533a\u95f4\u7ec8\u6b62\u7aef\u70b9\u53d6\u5f53\u524d\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u548c\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u4e2d\u7684\u6700\u5927\u8005\u3002  \u5982\u679c\u89c9\u5f97  Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start));  \u8fd9\u79cd lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u6bd4\u8f83\u602a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4e24\u79cd\u7b49\u4ef7\u7684\u5199\u6cd5\u3002  Collections.sort(intervals, (a, b) -> a.start - b.start);  Collections.sort(intervals, new Comparator<Interval>() {\n    @Override\n    public int compare(Interval o1, Interval o2) {\n        return o1.start - o2.start;\n    }\n});",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0056-merge-intervals/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0056-merge-intervals/#1",
            "text": "import java.util.*;\n\nclass Interval {\n    int start;\n    int end;\n\n    Interval() {\n        start = 0;\n        end = 0;\n    }\n\n    Interval(int s, int e) {\n        start = s;\n        end = e;\n    }\n}\n\npublic class Solution {\n\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u8981\u5bf9\u96c6\u5408\u6392\u5e8f\n    // \u626b\u63cf\u7ebf\u6cd5\n\n    public List<Interval> merge(List<Interval> intervals) {\n        int len = intervals.size();\n        if (len < 2) {\n            return intervals;\n        }\n\n        Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start));\n\n        // \u56e0\u4e3a\u6bcf\u6b21\u6211\u4eec\u90fd\u62ff\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u7528\u6808\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\n        Stack<Interval> stack = new Stack<>();\n        stack.push(intervals.get(0));\n        for (int i = 1; i < len; i++) {\n            Interval curInterval = intervals.get(i);\n            Interval peek = stack.peek();\n            if (curInterval.start > peek.end) {\n                stack.add(curInterval);\n            } else {\n                // \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e94\u8be5\u53d6\u6700\u5927\n                peek.end = Math.max(curInterval.end, peek.end);\n            }\n        }\n        return stack;\n    }\n\n    public static void main(String[] args) {\n        List<Interval> intervals = new ArrayList<>();\n\n        Interval interval1 = new Interval(1, 3);\n        Interval interval2 = new Interval(2, 6);\n        Interval interval3 = new Interval(8, 10);\n        Interval interval4 = new Interval(15, 18);\n\n        intervals.add(interval1);\n        intervals.add(interval2);\n        intervals.add(interval3);\n        intervals.add(interval4);\n\n        Solution solution = new Solution();\n        List<Interval> merge = solution.merge(intervals);\n        for (Interval interval : merge) {\n            System.out.println(\"[\" + interval.start + \", \" + interval.end + \"]\");\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0056-merge-intervals  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0057-insert-interval/",
            "text": "57. Insert Interval\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u4e00\u4e2a\n\u65e0\u91cd\u53e0\u7684 \uff0c\n\u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002\n\n\n\n\u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n intervals = [[1,3],[6,9]], newInterval = [2,5]\n\n\n\u8f93\u51fa:\n [[1,5],[6,9]]\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n intervals = \n[[1,2],[3,5],[6,7],[8,10],[12,16]]\n, newInterval = \n[4,8]\n\n\n\n\u8f93\u51fa:\n [[1,2],[3,10],[12,16]]\n\n\n\u89e3\u91ca:\n \u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4 \n[4,8]\n \u4e0e \n[3,5],[6,7],[8,10]\n\u00a0\u91cd\u53e0\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n57. Insert Interval\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n57. \u63d2\u5165\u533a\u95f4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "57. Insert Interval"
        },
        {
            "location": "/leetcode-0057-insert-interval/#57-insert-interval",
            "text": "",
            "title": "57. Insert Interval"
        },
        {
            "location": "/leetcode-0057-insert-interval/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u4e00\u4e2a \u65e0\u91cd\u53e0\u7684 \uff0c \u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002  \u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  intervals = [[1,3],[6,9]], newInterval = [2,5] \u8f93\u51fa:  [[1,5],[6,9]]  \u793a\u4f8b\u00a02:  \u8f93\u5165:  intervals =  [[1,2],[3,5],[6,7],[8,10],[12,16]] , newInterval =  [4,8]  \u8f93\u51fa:  [[1,2],[3,10],[12,16]] \u89e3\u91ca:  \u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4  [4,8]  \u4e0e  [3,5],[6,7],[8,10] \u00a0\u91cd\u53e0\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 57. Insert Interval   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 57. \u63d2\u5165\u533a\u95f4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0057-insert-interval/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0057-insert-interval/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0057-insert-interval/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/",
            "text": "58. Length of Last Word\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u00a0\n' '\n\u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\n\n\n\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0\u00a0\u3002\n\n\n\u8bf4\u660e\uff1a\n\u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \"Hello World\"\n\n\u8f93\u51fa:\n 5\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n58. Length of Last Word\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u662f\u6211\u4e00\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\u3002\n\n\npublic class Solution {\n\n    public int lengthOfLastWord(String s) {\n        int len = s.length();\n        // \u7279\u522b\u6ce8\u610f \"a \" \u8fd9\u79cd\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\n        // \u7279\u522b\u6ce8\u610f \"b   a    \"\uff0c\u56e0\u6b64\uff0c\u8981\u4f7f\u7528 while\n        while (len > 0 && s.charAt(len - 1) == ' ') {\n            len--;\n        }\n        if (len == 0) {\n            return 0;\n        }\n\n        int begin = -1;\n        int index = 0;\n        while (index < len) {\n            char curC = s.charAt(index);\n            if (curC == ' ') {\n                begin = index;\n            }\n            index++;\n        }\n        return len - 1 - begin;\n    }\n\n    public static void main(String[] args) {\n        String s = \"a \";\n        Solution solution = new Solution();\n        int lengthOfLastWord = solution.lengthOfLastWord(s);\n        System.out.println(lengthOfLastWord);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u4ece\u540e\u5411\u524d\u904d\u5386\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002\n\n\npublic class Solution2 {\n\n    public int lengthOfLastWord(String s) {\n        int len = s.length();\n        while (len > 0 && s.charAt(len - 1) == ' ') {\n            len--;\n        }\n        if (len == 0) {\n            return 0;\n        }\n        int res = 0;\n        while (len > 0 && s.charAt(len - 1) != ' ') {\n            res++;\n            len--;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"a \";\n        Solution2 solution2 = new Solution2();\n        int lengthOfLastWord = solution2.lengthOfLastWord(s);\n        System.out.println(lengthOfLastWord);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0058-length-of-last-word\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "58. Length of Last Word"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#58-length-of-last-word",
            "text": "",
            "title": "58. Length of Last Word"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u00a0 ' ' \u00a0\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002  \u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0\u00a0\u3002  \u8bf4\u660e\uff1a \u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b:  \u8f93\u5165:  \"Hello World\" \u8f93\u51fa:  5    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 58. Length of Last Word   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#1",
            "text": "public class Solution {\n\n    public int lengthOfLastWord(String s) {\n        int len = s.length();\n        // \u7279\u522b\u6ce8\u610f \"a \" \u8fd9\u79cd\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\n        // \u7279\u522b\u6ce8\u610f \"b   a    \"\uff0c\u56e0\u6b64\uff0c\u8981\u4f7f\u7528 while\n        while (len > 0 && s.charAt(len - 1) == ' ') {\n            len--;\n        }\n        if (len == 0) {\n            return 0;\n        }\n\n        int begin = -1;\n        int index = 0;\n        while (index < len) {\n            char curC = s.charAt(index);\n            if (curC == ' ') {\n                begin = index;\n            }\n            index++;\n        }\n        return len - 1 - begin;\n    }\n\n    public static void main(String[] args) {\n        String s = \"a \";\n        Solution solution = new Solution();\n        int lengthOfLastWord = solution.lengthOfLastWord(s);\n        System.out.println(lengthOfLastWord);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u662f\u6211\u4e00\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\u3002"
        },
        {
            "location": "/leetcode-0058-length-of-last-word/#2",
            "text": "public class Solution2 {\n\n    public int lengthOfLastWord(String s) {\n        int len = s.length();\n        while (len > 0 && s.charAt(len - 1) == ' ') {\n            len--;\n        }\n        if (len == 0) {\n            return 0;\n        }\n        int res = 0;\n        while (len > 0 && s.charAt(len - 1) != ' ') {\n            res++;\n            len--;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"a \";\n        Solution2 solution2 = new Solution2();\n        int lengthOfLastWord = solution2.lengthOfLastWord(s);\n        System.out.println(lengthOfLastWord);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0058-length-of-last-word  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u4ece\u540e\u5411\u524d\u904d\u5386\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/",
            "text": "59. Spiral Matrix II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u00a0\nn\n\uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230\u00a0\nn\n2\n\u00a0\u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n 3\n\n\n\u8f93\u51fa:\n\n\n[\n\n [ 1, 2, 3 ],\n\n [ 8, 9, 4 ],\n\n [ 7, 6, 5 ]\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n59. Spiral Matrix II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n59. \u87ba\u65cb\u77e9\u9635 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "59. Spiral Matrix II"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/#59-spiral-matrix-ii",
            "text": "",
            "title": "59. Spiral Matrix II"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u00a0 n \uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230\u00a0 n 2 \u00a0\u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002  \u793a\u4f8b:  \u8f93\u5165:  3 \u8f93\u51fa: \n\n[\n\n [ 1, 2, 3 ],\n\n [ 8, 9, 4 ],\n\n [ 7, 6, 5 ]\n\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 59. Spiral Matrix II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 59. \u87ba\u65cb\u77e9\u9635 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0059-spiral-matrix-ii/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/",
            "text": "60. Permutation Sequence\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u96c6\u5408\u00a0\n[1,2,3,\u2026,\nn\n]\n\uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709\u00a0\nn\n! \u79cd\u6392\u5217\u3002\n\n\n\n\u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53\u00a0\nn \n= 3 \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\"123\"\n\n\n\n\"132\"\n\n\n\n\"213\"\n\n\n\n\"231\"\n\n\n\n\"312\"\n\n\n\n\"321\"\n\n\n\n\n\n\n\u7ed9\u5b9a\u00a0\nn\n \u548c\u00a0\nk\n\uff0c\u8fd4\u56de\u7b2c\u00a0\nk\n\u00a0\u4e2a\u6392\u5217\u3002\n\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\n\n\u7ed9\u5b9a\n n\n\u00a0\u7684\u8303\u56f4\u662f [1, 9]\u3002\n\n\n\n\u7ed9\u5b9a \nk\u00a0\n\u7684\u8303\u56f4\u662f[1, \u00a0\nn\n!]\u3002\n\n\n\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n n = 3, k = 3\n\n\n\u8f93\u51fa:\n \"213\"\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n n = 4, k = 9\n\n\n\u8f93\u51fa:\n \"2314\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n60. Permutation Sequence\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n60. \u7b2ck\u4e2a\u6392\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "60. Permutation Sequence"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/#60-permutation-sequence",
            "text": "",
            "title": "60. Permutation Sequence"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u96c6\u5408\u00a0 [1,2,3,\u2026, n ] \uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709\u00a0 n ! \u79cd\u6392\u5217\u3002  \u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53\u00a0 n  = 3 \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a   \"123\"  \"132\"  \"213\"  \"231\"  \"312\"  \"321\"   \u7ed9\u5b9a\u00a0 n  \u548c\u00a0 k \uff0c\u8fd4\u56de\u7b2c\u00a0 k \u00a0\u4e2a\u6392\u5217\u3002  \u8bf4\u660e\uff1a   \u7ed9\u5b9a  n \u00a0\u7684\u8303\u56f4\u662f [1, 9]\u3002  \u7ed9\u5b9a  k\u00a0 \u7684\u8303\u56f4\u662f[1, \u00a0 n !]\u3002   \u793a\u4f8b\u00a01:  \u8f93\u5165:  n = 3, k = 3 \u8f93\u51fa:  \"213\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  n = 4, k = 9 \u8f93\u51fa:  \"2314\"     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 60. Permutation Sequence   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 60. \u7b2ck\u4e2a\u6392\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0060-permutation-sequence/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0061-rotate-list/",
            "text": "61. Rotate List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8\u00a0\nk\u00a0\n\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u00a0\nk\u00a0\n\u662f\u975e\u8d1f\u6570\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n 1->2->3->4->5->NULL, k = 2\n\n\n\u8f93\u51fa:\n 4->5->1->2->3->NULL\n\n\n\u89e3\u91ca:\n\n\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL\n\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n 0->1->2->NULL, k = 4\n\n\n\u8f93\u51fa:\n \n2->0->1->NULL\n\n\n\n\u89e3\u91ca:\n\n\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL\n\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL\n\n\u5411\u53f3\u65cb\u8f6c 3 \u6b65:\u00a0\n0->1->2->NULL\n\n\n\u5411\u53f3\u65cb\u8f6c 4 \u6b65:\u00a0\n2->0->1->NULL\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n61. Rotate List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n61. \u65cb\u8f6c\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "61. Rotate List"
        },
        {
            "location": "/leetcode-0061-rotate-list/#61-rotate-list",
            "text": "",
            "title": "61. Rotate List"
        },
        {
            "location": "/leetcode-0061-rotate-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8\u00a0 k\u00a0 \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u00a0 k\u00a0 \u662f\u975e\u8d1f\u6570\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1->2->3->4->5->NULL, k = 2 \u8f93\u51fa:  4->5->1->2->3->NULL \u89e3\u91ca: \n\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL\n\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL  \u793a\u4f8b\u00a02:  \u8f93\u5165:  0->1->2->NULL, k = 4 \u8f93\u51fa:   2->0->1->NULL  \u89e3\u91ca: \n\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL\n\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL\n\n\u5411\u53f3\u65cb\u8f6c 3 \u6b65:\u00a0 0->1->2->NULL \n\n\u5411\u53f3\u65cb\u8f6c 4 \u6b65:\u00a0 2->0->1->NULL     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 61. Rotate List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 61. \u65cb\u8f6c\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0061-rotate-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0061-rotate-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0061-rotate-list/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0062-unique-paths/",
            "text": "62. Unique Paths\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a \nm x n \n\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002\n\n\n\n\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002\n\n\n\n\u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f\n\n\n\n\n\n\n\u4f8b\u5982\uff0c\u4e0a\u56fe\u662f\u4e00\u4e2a7 x 3 \u7684\u7f51\u683c\u3002\u6709\u591a\u5c11\u53ef\u80fd\u7684\u8def\u5f84\uff1f\n\n\n\n\u8bf4\u660e\uff1a\nm\n\u00a0\u548c \nn \n\u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n m = 3, n = 2\n\n\n\u8f93\u51fa:\n 3\n\n\n\u89e3\u91ca:\n\n\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b\n\n2. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u53f3\n\n3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n m = 7, n = 3\n\n\n\u8f93\u51fa:\n 28\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n62. Unique Paths\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n62. \u4e0d\u540c\u8def\u5f84\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "62. Unique Paths"
        },
        {
            "location": "/leetcode-0062-unique-paths/#62-unique-paths",
            "text": "",
            "title": "62. Unique Paths"
        },
        {
            "location": "/leetcode-0062-unique-paths/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a  m x n  \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002  \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002  \u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f   \u4f8b\u5982\uff0c\u4e0a\u56fe\u662f\u4e00\u4e2a7 x 3 \u7684\u7f51\u683c\u3002\u6709\u591a\u5c11\u53ef\u80fd\u7684\u8def\u5f84\uff1f  \u8bf4\u660e\uff1a m \u00a0\u548c  n  \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  m = 3, n = 2 \u8f93\u51fa:  3 \u89e3\u91ca: \n\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b\n\n2. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u53f3\n\n3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3  \u793a\u4f8b\u00a02:  \u8f93\u5165:  m = 7, n = 3 \u8f93\u51fa:  28     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 62. Unique Paths   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 62. \u4e0d\u540c\u8def\u5f84   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0062-unique-paths/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0062-unique-paths/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0062-unique-paths/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/",
            "text": "63. Unique Paths II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a \nm x n \n\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002\n\n\n\n\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002\n\n\n\n\u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f\n\n\n\n\n\n\n\u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528 \n1\n \u548c \n0\n \u6765\u8868\u793a\u3002\n\n\n\n\u8bf4\u660e\uff1a\nm\n\u00a0\u548c \nn \n\u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n\u00a0 [0,0,0],\n\n\u00a0 [0,1,0],\n\n\u00a0 [0,0,0]\n\n]\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n\n\n3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002\n\n\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709 \n2\n \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a\n\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b\n\n2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n63. Unique Paths II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n63. \u4e0d\u540c\u8def\u5f84 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "63. Unique Paths II"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/#63-unique-paths-ii",
            "text": "",
            "title": "63. Unique Paths II"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a  m x n  \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002  \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002  \u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f   \u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528  1  \u548c  0  \u6765\u8868\u793a\u3002  \u8bf4\u660e\uff1a m \u00a0\u548c  n  \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: [\n\n\u00a0 [0,0,0],\n\n\u00a0 [0,1,0],\n\n\u00a0 [0,0,0]\n\n] \u8f93\u51fa:  2 \u89e3\u91ca: \n\n3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002\n\n\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709  2  \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a\n\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b\n\n2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 63. Unique Paths II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 63. \u4e0d\u540c\u8def\u5f84 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0063-unique-paths-ii/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/",
            "text": "64. Minimum Path Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 \nm\n\u00a0x\u00a0\nn\n\u00a0\u7f51\u683c\uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002\n\n\n\n\u8bf4\u660e\uff1a\n\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n\n\n[\n\n\u00a0 [1,3,1],\n\n  [1,5,1],\n\n  [4,2,1]\n\n]\n\n\n\u8f93\u51fa:\n 7\n\n\n\u89e3\u91ca:\n \u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n64. Minimum Path Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n64. \u6700\u5c0f\u8def\u5f84\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "64. Minimum Path Sum"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/#64-minimum-path-sum",
            "text": "",
            "title": "64. Minimum Path Sum"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684  m \u00a0x\u00a0 n \u00a0\u7f51\u683c\uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002  \u8bf4\u660e\uff1a \u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002  \u793a\u4f8b:  \u8f93\u5165: \n\n[\n\n\u00a0 [1,3,1],\n\n  [1,5,1],\n\n  [4,2,1]\n\n] \u8f93\u51fa:  7 \u89e3\u91ca:  \u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 64. Minimum Path Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 64. \u6700\u5c0f\u8def\u5f84\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0064-minimum-path-sum/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0065-valid-number/",
            "text": "65. Valid Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\u3002\n\n\n\n\u4f8b\u5982:\n\n\n\n\"0\"\n => \ntrue\n\n\n\n\" 0.1 \"\n => \ntrue\n\n\n\n\"abc\"\n => \nfalse\n\n\n\n\"1 a\"\n => \nfalse\n\n\n\n\"2e10\"\n => \ntrue\n\n\n\n\u8bf4\u660e:\n\u00a0\u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\n\n\n\n\u66f4\u65b0\u4e8e 2015-02-10:\n\n\n\nC++\n\u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536\u00a0\nconst char *\n \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n65. Valid Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n65. \u6709\u6548\u6570\u5b57\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "65. Valid Number"
        },
        {
            "location": "/leetcode-0065-valid-number/#65-valid-number",
            "text": "",
            "title": "65. Valid Number"
        },
        {
            "location": "/leetcode-0065-valid-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\u3002  \u4f8b\u5982:  \"0\"  =>  true  \" 0.1 \"  =>  true  \"abc\"  =>  false  \"1 a\"  =>  false  \"2e10\"  =>  true  \u8bf4\u660e: \u00a0\u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002  \u66f4\u65b0\u4e8e 2015-02-10:  C++ \u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536\u00a0 const char *  \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 65. Valid Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 65. \u6709\u6548\u6570\u5b57   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0065-valid-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0065-valid-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0065-valid-number/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0066-plus-one/",
            "text": "66. Plus One\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\n\u975e\u8d1f\u6574\u6570\n\u7ec4\u6210\u7684\n\u975e\u7a7a\n\u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002\n\n\n\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n [1,2,3]\n\n\u8f93\u51fa:\n [1,2,4]\n\n\u89e3\u91ca:\n \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [4,3,2,1]\n\n\u8f93\u51fa:\n [4,3,2,2]\n\n\u89e3\u91ca:\n \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n66. Plus One\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n66. \u52a0\u4e00\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u8fdb\u4f4d\u7684\u5199\u6cd5\uff0c\u662f\u6bd4\u8f83\u901a\u7528\u7684\uff0c\u6211\u5148\u5199\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u9898\u76ee\u53ea\u662f\u8ba9\u6211\u4eec\u52a0 1\uff0c\u5982\u679c\u52a0 1 \u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u4e0b\u53bb\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\n\n\nPython \u5199\u6cd5\uff1a\uff08\u63a8\u8350\u5199\u6cd5\uff09\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        n = len(digits)\n        if n == 0:\n            return None\n        # \u4ece\u540e\u5411\u524d\n        for index in range(n - 1, -1, -1):\n            if digits[index] < 9:\n                digits[index] += 1\n                return digits\n            else:\n                digits[index] = 0\n        return [1] + digits\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nJava \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        if (len == 0) {\n            return new int[0];\n        }\n        int carry = 1;\n        // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\n        for (int i = len - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n            // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n            // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86\n            if (carry == 0) {\n                return digits;\n            }\n        }\n        if (carry == 1) {\n            int[] res = new int[len + 1];\n            res[0] = 1;\n            for (int i = 1; i < len + 1; i++) {\n                res[i] = digits[i - 1];\n            }\n            return res;\n        }\n        return digits;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {9, 9, 9, 9};\n        Solution solution = new Solution();\n        int[] plusOne = solution.plusOne(nums);\n        System.out.println(Arrays.toString(plusOne));\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        if len(digits) == 0:\n            return []\n        # \u8fdb\u4f4d\u6807\u8bc6\n        carry = 1\n\n        for i in range(len(digits) - 1, -1, -1):\n\n            s = digits[i] + carry\n            digits[i] = s % 10\n            # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 //\n            carry = s // 10\n\n            if carry == 0:\n                return digits\n        print(digits, carry)\n\n        if carry == 1:\n            return [1] + digits\n\n\nif __name__ == '__main__':\n    digits = [9, 9, 9, 9]\n    solution = Solution()\n    result = solution.plusOne(digits)\n    print(result)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "66. Plus One"
        },
        {
            "location": "/leetcode-0066-plus-one/#66-plus-one",
            "text": "",
            "title": "66. Plus One"
        },
        {
            "location": "/leetcode-0066-plus-one/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a \u975e\u8d1f\u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002  \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  [1,2,3] \u8f93\u51fa:  [1,2,4] \u89e3\u91ca:  \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [4,3,2,1] \u8f93\u51fa:  [4,3,2,2] \u89e3\u91ca:  \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 66. Plus One   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 66. \u52a0\u4e00   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0066-plus-one/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u8fdb\u4f4d\u7684\u5199\u6cd5\uff0c\u662f\u6bd4\u8f83\u901a\u7528\u7684\uff0c\u6211\u5148\u5199\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u9898\u76ee\u53ea\u662f\u8ba9\u6211\u4eec\u52a0 1\uff0c\u5982\u679c\u52a0 1 \u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u4e0b\u53bb\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0066-plus-one/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0066-plus-one/#1",
            "text": "Python \u5199\u6cd5\uff1a\uff08\u63a8\u8350\u5199\u6cd5\uff09  class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        n = len(digits)\n        if n == 0:\n            return None\n        # \u4ece\u540e\u5411\u524d\n        for index in range(n - 1, -1, -1):\n            if digits[index] < 9:\n                digits[index] += 1\n                return digits\n            else:\n                digits[index] = 0\n        return [1] + digits",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a"
        },
        {
            "location": "/leetcode-0066-plus-one/#2",
            "text": "Java \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09  import java.util.Arrays;\n\npublic class Solution {\n\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        if (len == 0) {\n            return new int[0];\n        }\n        int carry = 1;\n        // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\n        for (int i = len - 1; i >= 0; i--) {\n            int sum = digits[i] + carry;\n            digits[i] = sum % 10;\n            carry = sum / 10;\n            // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n            // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86\n            if (carry == 0) {\n                return digits;\n            }\n        }\n        if (carry == 1) {\n            int[] res = new int[len + 1];\n            res[0] = 1;\n            for (int i = 1; i < len + 1; i++) {\n                res[i] = digits[i - 1];\n            }\n            return res;\n        }\n        return digits;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {9, 9, 9, 9};\n        Solution solution = new Solution();\n        int[] plusOne = solution.plusOne(nums);\n        System.out.println(Arrays.toString(plusOne));\n    }\n}  Python \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09  class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        if len(digits) == 0:\n            return []\n        # \u8fdb\u4f4d\u6807\u8bc6\n        carry = 1\n\n        for i in range(len(digits) - 1, -1, -1):\n\n            s = digits[i] + carry\n            digits[i] = s % 10\n            # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 //\n            carry = s // 10\n\n            if carry == 0:\n                return digits\n        print(digits, carry)\n\n        if carry == 1:\n            return [1] + digits\n\n\nif __name__ == '__main__':\n    digits = [9, 9, 9, 9]\n    solution = Solution()\n    result = solution.plusOne(digits)\n    print(result)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0067-add-binary/",
            "text": "67. Add Binary\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002\n\n\n\u8f93\u5165\u4e3a\n\u975e\u7a7a\n\u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57\u00a0\n1\n\u00a0\u548c\u00a0\n0\n\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n a = \"11\", b = \"1\"\n\n\u8f93\u51fa:\n \"100\"\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n a = \"1010\", b = \"1011\"\n\n\u8f93\u51fa:\n \"10101\"\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n67. Add Binary\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n67. \u4e8c\u8fdb\u5236\u6c42\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        # \u5206\u522b\u8868\u793a\u4e24\u4e2a\u6570\u4ece\u540e\u5411\u524d\u7684\u7d22\u5f15\uff0c\u540e\u5bf9\u9f50\n        i = len(a) - 1\n        j = len(b) - 1\n        # \u8868\u793a\u8fdb\u4f4d\u6807\u5fd7\n        carry = 0\n        while i >= 0 or j >= 0:\n            s = carry\n            if i >= 0:\n                s += ord(a[i]) - ord('0')\n                i -= 1\n            if j >= 0:\n                s += ord(b[j]) - ord('0')\n                j -= 1\n\n            res = str(s % 2) + res\n            carry = s // 2\n        if carry == 1:\n            return '1' + res\n        return res\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution {\n\n    public String addBinary(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int maxLen = Math.max(aLen, bLen);\n\n        StringBuilder sa = new StringBuilder(a).reverse();\n        StringBuilder sb = new StringBuilder(b).reverse();\n        while (sa.length() < maxLen) {\n            sa.append(\"0\");\n        }\n        while (sb.length() < maxLen) {\n            sb.append(\"0\");\n        }\n        StringBuilder res = new StringBuilder();\n        int sum = 0;\n        int num1;\n        int num2;\n        for (int i = 0; i < maxLen; i++) {\n            num1 = sa.charAt(i) - '0';\n            num2 = sb.charAt(i) - '0';\n            if (sum + num1 + num2 > 1) {\n                res.append(sum + num1 + num2 - 2);\n                sum = 1;\n            } else {\n                res.append(sum + num1 + num2);\n                sum = 0;\n            }\n        }\n        if (sum == 1) {\n            res.append(\"1\");\n        }\n        return res.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String a = \"1010\";\n        String b = \"1011\";\n        Solution solution = new Solution();\n        String addBinary = solution.addBinary(a, b);\n        System.out.println(addBinary);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        alen = len(a)\n        blen = len(b)\n        maxlen = max(alen, blen)\n        ra = list(reversed(a))\n        rb = list(reversed(b))\n        while len(ra) < maxlen:\n            ra.append('0')\n        while len(rb) < maxlen:\n            rb.append('0')\n\n        result = []\n        s = 0\n        zero = ord('0')\n        for i in range(maxlen):\n            num1 = ord(ra[i]) - zero\n            num2 = ord(rb[i]) - zero\n            if s + num1 + num2 > 1:\n                result.append(str(s + num1 + num2 - 2))\n                s = 1\n            else:\n                result.append(str(s + num1 + num2))\n                s = 0\n        if s == 1:\n            result.append(str(1))\n        return ''.join(list(reversed(result)))\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n    result1 = int(a, 2)\n    result2 = int(b, 2)\n    print(result1)\n    print(result2)\n\n    print(bin(result1 + result2))\n    print(bin(result1 + result2)[2:])\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "67. Add Binary"
        },
        {
            "location": "/leetcode-0067-add-binary/#67-add-binary",
            "text": "",
            "title": "67. Add Binary"
        },
        {
            "location": "/leetcode-0067-add-binary/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002  \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57\u00a0 1 \u00a0\u548c\u00a0 0 \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  a = \"11\", b = \"1\" \u8f93\u51fa:  \"100\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  a = \"1010\", b = \"1011\" \u8f93\u51fa:  \"10101\"    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 67. Add Binary   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 67. \u4e8c\u8fdb\u5236\u6c42\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0067-add-binary/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0067-add-binary/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0067-add-binary/#1",
            "text": "Python \u5199\u6cd5\uff1a  class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        # \u5206\u522b\u8868\u793a\u4e24\u4e2a\u6570\u4ece\u540e\u5411\u524d\u7684\u7d22\u5f15\uff0c\u540e\u5bf9\u9f50\n        i = len(a) - 1\n        j = len(b) - 1\n        # \u8868\u793a\u8fdb\u4f4d\u6807\u5fd7\n        carry = 0\n        while i >= 0 or j >= 0:\n            s = carry\n            if i >= 0:\n                s += ord(a[i]) - ord('0')\n                i -= 1\n            if j >= 0:\n                s += ord(b[j]) - ord('0')\n                j -= 1\n\n            res = str(s % 2) + res\n            carry = s // 2\n        if carry == 1:\n            return '1' + res\n        return res",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0067-add-binary/#2",
            "text": "Java \u5199\u6cd5\uff1a  public class Solution {\n\n    public String addBinary(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int maxLen = Math.max(aLen, bLen);\n\n        StringBuilder sa = new StringBuilder(a).reverse();\n        StringBuilder sb = new StringBuilder(b).reverse();\n        while (sa.length() < maxLen) {\n            sa.append(\"0\");\n        }\n        while (sb.length() < maxLen) {\n            sb.append(\"0\");\n        }\n        StringBuilder res = new StringBuilder();\n        int sum = 0;\n        int num1;\n        int num2;\n        for (int i = 0; i < maxLen; i++) {\n            num1 = sa.charAt(i) - '0';\n            num2 = sb.charAt(i) - '0';\n            if (sum + num1 + num2 > 1) {\n                res.append(sum + num1 + num2 - 2);\n                sum = 1;\n            } else {\n                res.append(sum + num1 + num2);\n                sum = 0;\n            }\n        }\n        if (sum == 1) {\n            res.append(\"1\");\n        }\n        return res.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String a = \"1010\";\n        String b = \"1011\";\n        Solution solution = new Solution();\n        String addBinary = solution.addBinary(a, b);\n        System.out.println(addBinary);\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        alen = len(a)\n        blen = len(b)\n        maxlen = max(alen, blen)\n        ra = list(reversed(a))\n        rb = list(reversed(b))\n        while len(ra) < maxlen:\n            ra.append('0')\n        while len(rb) < maxlen:\n            rb.append('0')\n\n        result = []\n        s = 0\n        zero = ord('0')\n        for i in range(maxlen):\n            num1 = ord(ra[i]) - zero\n            num2 = ord(rb[i]) - zero\n            if s + num1 + num2 > 1:\n                result.append(str(s + num1 + num2 - 2))\n                s = 1\n            else:\n                result.append(str(s + num1 + num2))\n                s = 0\n        if s == 1:\n            result.append(str(1))\n        return ''.join(list(reversed(result)))\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0067-add-binary/#2_1",
            "text": "Python \u5199\u6cd5\uff1a  class Solution:\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]\n\n\nif __name__ == '__main__':\n    a = \"11\"\n    b = \"1\"\n    solution = Solution()\n    result = solution.addBinary(a, b)\n    print(result)\n\n    result1 = int(a, 2)\n    result2 = int(b, 2)\n    print(result1)\n    print(result2)\n\n    print(bin(result1 + result2))\n    print(bin(result1 + result2)[2:])  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0068-text-justification/",
            "text": "68. Text Justification\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6\u00a0\nmaxWidth\n\uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709\u00a0\nmaxWidth\n\u00a0\u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002\n\n\n\n\u4f60\u5e94\u8be5\u4f7f\u7528\u201c\u8d2a\u5fc3\u7b97\u6cd5\u201d\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c\u00a0\n' '\n\u00a0\u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709 \nmaxWidth\n\u00a0\u4e2a\u5b57\u7b26\u3002\n\n\n\n\u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002\n\n\n\n\u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165\n\u989d\u5916\u7684\n\u7a7a\u683c\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\n\n\u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002\n\n\n\n\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u00a0\nmaxWidth\n\u3002\n\n\n\n\u8f93\u5165\u5355\u8bcd\u6570\u7ec4 \nwords\n\u00a0\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002\n\n\n\n\n\n\n\u793a\u4f8b:\n\n\n\n\u8f93\u5165:\n\n\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n\nmaxWidth = 16\n\n\n\u8f93\u51fa:\n\n\n[\n\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\n\u00a0 \u00a0\"example \u00a0of text\",\n\n\u00a0 \u00a0\"justification. \u00a0\"\n\n]\n\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\n\u8f93\u5165:\n\n\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n\nmaxWidth = 16\n\n\n\u8f93\u51fa:\n\n\n[\n\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\n\u00a0 \"acknowledgment \u00a0\",\n\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n\n]\n\n\n\u89e3\u91ca: \n\u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a \"shall be    \" \u800c\u4e0d\u662f \"shall     be\",\n\n\u00a0    \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002       \n\n     \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002\n\n\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\n\u8f93\u5165:\n\n\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n\n\u00a0        \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n\nmaxWidth = 20\n\n\n\u8f93\u51fa:\n\n\n[\n\n\u00a0 \"Science \u00a0is \u00a0what we\",\n\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\n\u00a0 \"enough to explain to\",\n\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\n\u00a0 \"everything \u00a0else \u00a0we\",\n\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n68. Text Justification\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n68. \u6587\u672c\u5de6\u53f3\u5bf9\u9f50\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "68. Text Justification"
        },
        {
            "location": "/leetcode-0068-text-justification/#68-text-justification",
            "text": "",
            "title": "68. Text Justification"
        },
        {
            "location": "/leetcode-0068-text-justification/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6\u00a0 maxWidth \uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709\u00a0 maxWidth \u00a0\u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002  \u4f60\u5e94\u8be5\u4f7f\u7528\u201c\u8d2a\u5fc3\u7b97\u6cd5\u201d\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c\u00a0 ' ' \u00a0\u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709  maxWidth \u00a0\u4e2a\u5b57\u7b26\u3002  \u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002  \u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165 \u989d\u5916\u7684 \u7a7a\u683c\u3002  \u8bf4\u660e:   \u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002  \u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u00a0 maxWidth \u3002  \u8f93\u5165\u5355\u8bcd\u6570\u7ec4  words \u00a0\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002   \u793a\u4f8b:  \u8f93\u5165: \n\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n\nmaxWidth = 16 \u8f93\u51fa: \n\n[\n\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\n\u00a0 \u00a0\"example \u00a0of text\",\n\n\u00a0 \u00a0\"justification. \u00a0\"\n\n]  \u793a\u4f8b\u00a02:  \u8f93\u5165: \n\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n\nmaxWidth = 16 \u8f93\u51fa: \n\n[\n\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\n\u00a0 \"acknowledgment \u00a0\",\n\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n\n] \u89e3\u91ca:  \u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a \"shall be    \" \u800c\u4e0d\u662f \"shall     be\",\n\n\u00a0    \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002       \n\n     \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002  \u793a\u4f8b\u00a03:  \u8f93\u5165: \n\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n\n\u00a0        \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n\nmaxWidth = 20 \u8f93\u51fa: \n\n[\n\n\u00a0 \"Science \u00a0is \u00a0what we\",\n\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\n\u00a0 \"enough to explain to\",\n\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\n\u00a0 \"everything \u00a0else \u00a0we\",\n\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n\n]     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 68. Text Justification   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 68. \u6587\u672c\u5de6\u53f3\u5bf9\u9f50   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0068-text-justification/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0068-text-justification/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0068-text-justification/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0069-sqrtx/",
            "text": "69. Sqrt(x)\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u00a0\nint sqrt(int x)\n\u00a0\u51fd\u6570\u3002\n\n\n\n\u8ba1\u7b97\u5e76\u8fd4\u56de\u00a0\nx\n\u00a0\u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d\u00a0\nx \n\u662f\u975e\u8d1f\u6574\u6570\u3002\n\n\n\n\u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002\n\n\n\n\u793a\u4f8b 1:\n\n\n\n\u8f93\u5165:\n 4\n\n\n\u8f93\u51fa:\n 2\n\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\n\u8f93\u5165:\n 8\n\n\n\u8f93\u51fa:\n 2\n\n\n\u8bf4\u660e:\n 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \n\n\u00a0    \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n69. Sqrt(x)\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n69. x \u7684\u5e73\u65b9\u6839\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5e94\u8be5\u8fd4\u56de\u53f3\u8fb9\u7aef\u70b9\u3002\n\n\nclass Solution:\n    # \u4e8c\u5206\u6cd5\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        l = 0\n        r = x // 2 + 1\n        while l <= r:\n            m = l + (r - l) // 2\n            s = m * m\n            if s == x:\n                return m\n            elif s < x:\n                l = m + 1\n            else:\n                r = m - 1\n        # \u6ce8\u610f\u8fd4\u56de l \u548c\u8fd4\u56de r \u7684\u533a\u522b\uff0c\u5e94\u8be5\u8fd4\u56de r\n        # \u3010\u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u8981\u628a\u53f3\u8fb9\u754c\u8fd4\u56de\u56de\u53bb\u3011\n        return r\n\n\n\n\nclass Solution:\n    # \u4e8c\u5206\u6cd5\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 1:\n            return 1\n        l = 0\n        r = x // 2\n        while l <= r:\n            m = l + (r - l) // 2\n            s = m * m\n            if s == x:\n                return m\n            elif s < x:\n                l = m + 1\n            else:\n                r = m - 1\n        return r\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u725b\u987f\u6cd5\uff0c\u6211\u4e2a\u4eba\u6bd4\u8f83\u63a8\u8350\u725b\u987f\u6cd5\uff0c\u66f4\u7b80\u5355\uff0c\u8fd4\u56de\u503c\u5411\u4e0b\u53d6\u6574\uff0c\u5c31\u80fd\u7b26\u5408\u9898\u8981\u6c42\u3002\n\n\nclass Solution:\n    # \u725b\u987f\u6cd5\n    # \u4e0e\u7cfb\u7edf\u51fd\u6570\u4f5c\u6bd4\u8f83\n\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 0:\n            raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570')\n        if x == 0:\n            return 0\n\n        cur = 1\n        while True:\n            pre = cur\n            cur = (cur + x / cur) / 2\n            if abs(cur - pre) < 1e-6:\n                return cur\n\n    # \u8fd9\u4e2a\u89e3\u76f4\u63a5\u63d0\u4ea4\u5230 LeetCode \u4e0a\u5c31\u53ef\u4ee5\u4e86\n    def mySqrt1(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 0:\n            raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570')\n        if x == 0:\n            return 0\n        # \u8d77\u59cb\u7684\u65f6\u5019\u5728 1 \uff0c\u8fd9\u53ef\u4ee5\u6bd4\u8f83\u968f\u610f\u8bbe\u7f6e\n        cur = 1\n        while True:\n            pre = cur\n            cur = (cur + x / cur) / 2\n            if abs(cur - pre) < 1e-6:\n                return int(cur)\n\n\nif __name__ == '__main__':\n    import numpy as np\n\n    nums = np.linspace(0, 999, 100)\n    solution = Solution()\n    for num in nums:\n        a = solution.mySqrt(num)\n        b = np.sqrt(num)\n        print(\"\u725b\u987f\u6cd5\uff1a{} \\t NumPy\uff1a{}\\t \u5dee\u8ddd\uff1a{}\".format(a, b, a - b))",
            "title": "69. Sqrt(x)"
        },
        {
            "location": "/leetcode-0069-sqrtx/#69-sqrtx",
            "text": "",
            "title": "69. Sqrt(x)"
        },
        {
            "location": "/leetcode-0069-sqrtx/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u00a0 int sqrt(int x) \u00a0\u51fd\u6570\u3002  \u8ba1\u7b97\u5e76\u8fd4\u56de\u00a0 x \u00a0\u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d\u00a0 x  \u662f\u975e\u8d1f\u6574\u6570\u3002  \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  4 \u8f93\u51fa:  2  \u793a\u4f8b 2:  \u8f93\u5165:  8 \u8f93\u51fa:  2 \u8bf4\u660e:  8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \n\n\u00a0    \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 69. Sqrt(x)   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 69. x \u7684\u5e73\u65b9\u6839   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0069-sqrtx/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0069-sqrtx/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0069-sqrtx/#1",
            "text": "class Solution:\n    # \u4e8c\u5206\u6cd5\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        l = 0\n        r = x // 2 + 1\n        while l <= r:\n            m = l + (r - l) // 2\n            s = m * m\n            if s == x:\n                return m\n            elif s < x:\n                l = m + 1\n            else:\n                r = m - 1\n        # \u6ce8\u610f\u8fd4\u56de l \u548c\u8fd4\u56de r \u7684\u533a\u522b\uff0c\u5e94\u8be5\u8fd4\u56de r\n        # \u3010\u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u8981\u628a\u53f3\u8fb9\u754c\u8fd4\u56de\u56de\u53bb\u3011\n        return r  class Solution:\n    # \u4e8c\u5206\u6cd5\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 1:\n            return 1\n        l = 0\n        r = x // 2\n        while l <= r:\n            m = l + (r - l) // 2\n            s = m * m\n            if s == x:\n                return m\n            elif s < x:\n                l = m + 1\n            else:\n                r = m - 1\n        return r",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5e94\u8be5\u8fd4\u56de\u53f3\u8fb9\u7aef\u70b9\u3002"
        },
        {
            "location": "/leetcode-0069-sqrtx/#2",
            "text": "class Solution:\n    # \u725b\u987f\u6cd5\n    # \u4e0e\u7cfb\u7edf\u51fd\u6570\u4f5c\u6bd4\u8f83\n\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 0:\n            raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570')\n        if x == 0:\n            return 0\n\n        cur = 1\n        while True:\n            pre = cur\n            cur = (cur + x / cur) / 2\n            if abs(cur - pre) < 1e-6:\n                return cur\n\n    # \u8fd9\u4e2a\u89e3\u76f4\u63a5\u63d0\u4ea4\u5230 LeetCode \u4e0a\u5c31\u53ef\u4ee5\u4e86\n    def mySqrt1(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 0:\n            raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570')\n        if x == 0:\n            return 0\n        # \u8d77\u59cb\u7684\u65f6\u5019\u5728 1 \uff0c\u8fd9\u53ef\u4ee5\u6bd4\u8f83\u968f\u610f\u8bbe\u7f6e\n        cur = 1\n        while True:\n            pre = cur\n            cur = (cur + x / cur) / 2\n            if abs(cur - pre) < 1e-6:\n                return int(cur)\n\n\nif __name__ == '__main__':\n    import numpy as np\n\n    nums = np.linspace(0, 999, 100)\n    solution = Solution()\n    for num in nums:\n        a = solution.mySqrt(num)\n        b = np.sqrt(num)\n        print(\"\u725b\u987f\u6cd5\uff1a{} \\t NumPy\uff1a{}\\t \u5dee\u8ddd\uff1a{}\".format(a, b, a - b))",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u725b\u987f\u6cd5\uff0c\u6211\u4e2a\u4eba\u6bd4\u8f83\u63a8\u8350\u725b\u987f\u6cd5\uff0c\u66f4\u7b80\u5355\uff0c\u8fd4\u56de\u503c\u5411\u4e0b\u53d6\u6574\uff0c\u5c31\u80fd\u7b26\u5408\u9898\u8981\u6c42\u3002"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/",
            "text": "70. Climbing Stairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 \nn\n \u6b65\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002\n\n\n\n\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f\n\n\n\n\u6ce8\u610f\uff1a\n\u7ed9\u5b9a \nn\n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002\n\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\n\u8f93\u5165\uff1a\n 2\n\n\n\u8f93\u51fa\uff1a\n 2\n\n\n\u89e3\u91ca\uff1a\n \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n\n1.  1 \u6b65 + 1 \u6b65\n\n2.  2 \u6b65\n\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\n\u8f93\u5165\uff1a\n 3\n\n\n\u8f93\u51fa\uff1a\n 3\n\n\n\u89e3\u91ca\uff1a\n \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n\n1.  1 \u6b65 + 1 \u6b65 + 1 \u6b65\n\n2.  1 \u6b65 + 2 \u6b65\n\n3.  2 \u6b65 + 1 \u6b65\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n70. Climbing Stairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n70. \u722c\u697c\u68af\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u89e3\u91ca\uff1a\u722c\u697c\u68af\u95ee\u9898\uff0c\u8fd4\u56de\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u722c\u5b8c\u8fd9 n \u4e2a\u53f0\u9636\uff0cEach time you can either climb 1 or 2 steps. \u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002\n\u601d\u8003\uff1a\u5206\u6790\u95ee\u9898\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u8fdb\u800c\u53d1\u73b0\u8fd9\u4e2a\u9012\u5f52\u7ed3\u6784\u4e2d\u5b58\u5728\u8bb8\u591a\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6700\u7ec8\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u95ee\u9898\u5b8c\u5168\u7b49\u4ef7\u3002\n\n\n\u7248\u672c1\uff1a\u4e0d\u5408\u683c\u7684\u9012\u5f52\u7248\u672c\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7248\u672c\u7684\u601d\u8003\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u753b\u51fa\u9012\u5f52\u7ed3\u6784\u6811\uff0c\u4ece\u800c\u53d1\u73b0\u91cd\u53e0\u5b50\u95ee\u9898\u3002\n\n\n\uff08\u63d2\u56fe\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u7684\u9012\u5f52\u5b50\u7ed3\u6784\u6570\uff0c\u6807\u51fa\u91cd\u53e0\u5b50\u95ee\u9898\u3002\uff09\n\n\nclass Solution:\n\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return self.climbStairs(n - 1) + self.climbStairs(n - 2)\n\n\n\n\n\u7248\u672c2\uff1a\u52a0\u5165\u4e86\u7f13\u5b58\u7684\u9012\u5f52\u7248\u672c\n\n\nclass Solution:\n    memo = None\n\n    def _climbStairs(self, n):\n        if Solution.memo[n] != -1:\n            return Solution.memo[n]\n\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        Solution.memo[n] = self._climbStairs(n - 1) + self._climbStairs(n - 2)\n        return Solution.memo[n]\n\n    def climbStairs(self, n):\n        Solution.memo = [-1] * (n + 1)\n        return self._climbStairs(n)\n\n\n\n\n\u7248\u672c3\uff1a\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u5206\u6790\u601d\u8def\u4e0b\uff0c\u5199\u51fa\u7684\u52a8\u6001\u89c4\u5212\u7248\u672c\u3002\n\n\n\u601d\u8003\u8fc7\u7a0b\uff1a\u722c 0 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b\n\u722c 1 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b\n\u722c 2 \u4e2a\u53f0\u9636\uff0c\u6709 2 \u79cd\u722c\u6cd5\uff1b\n\u722c 3 \u4e2a\u53f0\u9636\uff0c\uff082\uff0c1\uff09 + \uff081\uff0c2\uff09\uff1b\n\u722c 4 \u4e2a\u53f0\u9636\uff0c\uff083\uff0c1\uff09 + \uff082\uff0c2\uff09\uff1b\n\u722c 5 \u4e2a\u53f0\u9636\uff0c\uff084\uff0c1\uff09 + \uff083\uff0c2\uff09\uff1b\n\u722c 6 \u4e2a\u8c03\u8282\uff0c\uff085\uff0c1\uff09 + \uff084\uff0c2\uff09\uff1b\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5176\u4e2d\uff0c\uff08i\uff0cj\uff09\u8868\u793a\u9996\u5148\u722c i \u4e2a\u53f0\u9636\u7684\u6240\u6709\u4e0d\u540c\u722c\u6cd5\uff0c\u7136\u540e\u518d\u722c j \u4e2a\u53f0\u9636\u7684\u4e0d\u540c\u722c\u6cd5\u3002\n\n\nclass Solution:\n\n    def climbStairs(self, n):\n        if n == 0:\n            return 1\n        memo = [-1] * (n + 1)\n        memo[0] = 1\n        memo[1] = 1\n        for i in range(2, n + 1):\n            memo[i] = memo[i - 1] + memo[i - 2]\n        return memo[n]\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "70. Climbing Stairs"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/#70-climbing-stairs",
            "text": "",
            "title": "70. Climbing Stairs"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981  n  \u6b65\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002  \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f  \u6ce8\u610f\uff1a \u7ed9\u5b9a  n  \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002  \u793a\u4f8b 1\uff1a  \u8f93\u5165\uff1a  2 \u8f93\u51fa\uff1a  2 \u89e3\u91ca\uff1a  \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n\n1.  1 \u6b65 + 1 \u6b65\n\n2.  2 \u6b65  \u793a\u4f8b 2\uff1a  \u8f93\u5165\uff1a  3 \u8f93\u51fa\uff1a  3 \u89e3\u91ca\uff1a  \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n\n1.  1 \u6b65 + 1 \u6b65 + 1 \u6b65\n\n2.  1 \u6b65 + 2 \u6b65\n\n3.  2 \u6b65 + 1 \u6b65     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 70. Climbing Stairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 70. \u722c\u697c\u68af   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u89e3\u91ca\uff1a\u722c\u697c\u68af\u95ee\u9898\uff0c\u8fd4\u56de\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u722c\u5b8c\u8fd9 n \u4e2a\u53f0\u9636\uff0cEach time you can either climb 1 or 2 steps. \u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002\n\u601d\u8003\uff1a\u5206\u6790\u95ee\u9898\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u8fdb\u800c\u53d1\u73b0\u8fd9\u4e2a\u9012\u5f52\u7ed3\u6784\u4e2d\u5b58\u5728\u8bb8\u591a\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6700\u7ec8\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u95ee\u9898\u5b8c\u5168\u7b49\u4ef7\u3002  \u7248\u672c1\uff1a\u4e0d\u5408\u683c\u7684\u9012\u5f52\u7248\u672c\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7248\u672c\u7684\u601d\u8003\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u753b\u51fa\u9012\u5f52\u7ed3\u6784\u6811\uff0c\u4ece\u800c\u53d1\u73b0\u91cd\u53e0\u5b50\u95ee\u9898\u3002  \uff08\u63d2\u56fe\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u7684\u9012\u5f52\u5b50\u7ed3\u6784\u6570\uff0c\u6807\u51fa\u91cd\u53e0\u5b50\u95ee\u9898\u3002\uff09  class Solution:\n\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return self.climbStairs(n - 1) + self.climbStairs(n - 2)  \u7248\u672c2\uff1a\u52a0\u5165\u4e86\u7f13\u5b58\u7684\u9012\u5f52\u7248\u672c  class Solution:\n    memo = None\n\n    def _climbStairs(self, n):\n        if Solution.memo[n] != -1:\n            return Solution.memo[n]\n\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        Solution.memo[n] = self._climbStairs(n - 1) + self._climbStairs(n - 2)\n        return Solution.memo[n]\n\n    def climbStairs(self, n):\n        Solution.memo = [-1] * (n + 1)\n        return self._climbStairs(n)  \u7248\u672c3\uff1a\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u5206\u6790\u601d\u8def\u4e0b\uff0c\u5199\u51fa\u7684\u52a8\u6001\u89c4\u5212\u7248\u672c\u3002  \u601d\u8003\u8fc7\u7a0b\uff1a\u722c 0 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b\n\u722c 1 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b\n\u722c 2 \u4e2a\u53f0\u9636\uff0c\u6709 2 \u79cd\u722c\u6cd5\uff1b\n\u722c 3 \u4e2a\u53f0\u9636\uff0c\uff082\uff0c1\uff09 + \uff081\uff0c2\uff09\uff1b\n\u722c 4 \u4e2a\u53f0\u9636\uff0c\uff083\uff0c1\uff09 + \uff082\uff0c2\uff09\uff1b\n\u722c 5 \u4e2a\u53f0\u9636\uff0c\uff084\uff0c1\uff09 + \uff083\uff0c2\uff09\uff1b\n\u722c 6 \u4e2a\u8c03\u8282\uff0c\uff085\uff0c1\uff09 + \uff084\uff0c2\uff09\uff1b\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5176\u4e2d\uff0c\uff08i\uff0cj\uff09\u8868\u793a\u9996\u5148\u722c i \u4e2a\u53f0\u9636\u7684\u6240\u6709\u4e0d\u540c\u722c\u6cd5\uff0c\u7136\u540e\u518d\u722c j \u4e2a\u53f0\u9636\u7684\u4e0d\u540c\u722c\u6cd5\u3002  class Solution:\n\n    def climbStairs(self, n):\n        if n == 0:\n            return 1\n        memo = [-1] * (n + 1)\n        memo[0] = 1\n        memo[1] = 1\n        for i in range(2, n + 1):\n            memo[i] = memo[i - 1] + memo[i - 2]\n        return memo[n]",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0070-climbing-stairs/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/",
            "text": "76. Minimum Window Substring\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 T\uff0c\u8bf7\u5728 S \u4e2d\u627e\u51fa\u5305\u542b T \u6240\u6709\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165: S\n = \"ADOBECODEBANC\", \nT\n = \"ABC\"\n\n\u8f93\u51fa:\n \"BANC\"\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\u5982\u679c S \u4e2d\u4e0d\u5b58\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \n\"\"\n\u3002\n\n\n\u5982\u679c S \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n76. Minimum Window Substring\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u5e76\u4e14\u4f7f\u7528\u4e24\u4e2a\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u3002\u5148\u590d\u4e60\u7b2c 438 \u9898\u518d\u505a\u8fd9\u9898\u53ef\u80fd\u4f1a\u597d\u4e9b\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\u3002\n\n\n\n\nS \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5305\u62ec\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\n\n\nT \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5b57\u7b26\u4e32 T \u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u626b\u63cf\u8fc7\u4e00\u6b21\u4ee5\u540e\u8fd9\u4e2a\u6570\u7ec4\u6211\u4eec\u4e0d\u53bb\u52a8\u5b83\uff0c\u7528\u6765\u548c S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8fdb\u884c\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6bd4\u8f83\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution {\n\n    public String minWindow(String s, String t) {\n        int[] cntS = new int[256];\n        int[] cntT = new int[256];\n\n        Set<Character> set = new HashSet<>();\n        // cntT \u8d4b\u503c\u4e86\u4ee5\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u7528\u4e8e\u6bd4\u5bf9\u7684\u5bf9\u8c61\uff0c\u4e0d\u66f4\u65b0\n        for (char ct : t.toCharArray()) {\n            cntT[ct]++;\n            set.add(ct);\n        }\n\n        int minSub = s.length() + 1;\n        String res = \"\";\n        int left = 0;\n        int right = 0;\n        int count = 0;\n        while (right < s.length()) {\n            char rc = s.charAt(right);\n            if (!set.contains(rc)) {\n                // \u4e0d\u5728\u5b57\u5178\u91cc\u9762\uff0c\u4f46\u662f\u53f3\u8fb9\u754c\u540c\u6837\u8981\u6269\u5145\uff0c\u6240\u4ee5 right++\n                right++;\n                continue;\n            }\n            cntS[rc]++;\n            right++;\n            // \u7406\u89e3\u8fd9\u91cc\u662f\u5173\u952e\uff1a\u52a0\u4e0a\u4ee5\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8e\uff0ccount \u624d ++\uff0c\n            if (cntS[rc] <= cntT[rc]) {\n                // count++; \u8fd9\u4ef6\u4e8b\u60c5\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u91cc\u9762\u7684\u6709\u6548\u5b57\u7b26\uff0c\u5411\u76ee\u6807\u5b57\u7b26\u53c8\u8fd1\u4e86\u4e00\u6b65\n                count++;\n            }\n\n            // \u4e0b\u9762\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u5199\u5f97\u66f4\u7cbe\u7b80\u4e00\u4e9b\uff0c\u4f46\u662f\u4e3a\u4e86\u8bed\u4e49\u4e0a\u7684\u6e05\u6670\uff0c\u6211\u5c31\u5199\u5f97\u5197\u957f\u4e00\u4e9b\n            if (count == t.length()) {\n                // \u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5de6\u8fb9\u754c\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3\n                // \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6216\u8005\u591a\u4e86\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5212\u6389\u5c31\u53ef\u4ee5\u4e86\n                while (true) {\n                    char deleteChar = s.charAt(left);\n                    if (!set.contains(deleteChar)) {\n                        left++;\n                        continue;\n                    }\n                    if (cntS[deleteChar] > cntT[deleteChar]) {\n                        cntS[deleteChar]--;\n                        left++;\n                        continue;\n                    }\n                    break;\n                }\n                if (right - left < minSub) {\n                    minSub = right - left;\n                    res = s.substring(left, right);\n                }\n            }\n        }\n        if (minSub == s.length() + 1) {\n            return \"\";\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String S = \"ADOBECODEBANC\";\n        String T = \"ABC\";\n        String minWindow = solution.minWindow(S, T);\n        System.out.println(minWindow);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0076-minimum-window-substring\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "76. Minimum Window Substring"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/#76-minimum-window-substring",
            "text": "",
            "title": "76. Minimum Window Substring"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 T\uff0c\u8bf7\u5728 S \u4e2d\u627e\u51fa\u5305\u542b T \u6240\u6709\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u3002  \u793a\u4f8b\uff1a  \u8f93\u5165: S  = \"ADOBECODEBANC\",  T  = \"ABC\" \u8f93\u51fa:  \"BANC\"  \u8bf4\u660e\uff1a   \u5982\u679c S \u4e2d\u4e0d\u5b58\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32  \"\" \u3002  \u5982\u679c S \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 76. Minimum Window Substring   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u5e76\u4e14\u4f7f\u7528\u4e24\u4e2a\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u3002\u5148\u590d\u4e60\u7b2c 438 \u9898\u518d\u505a\u8fd9\u9898\u53ef\u80fd\u4f1a\u597d\u4e9b\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\u3002   S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5305\u62ec\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002  T \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5b57\u7b26\u4e32 T \u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u626b\u63cf\u8fc7\u4e00\u6b21\u4ee5\u540e\u8fd9\u4e2a\u6570\u7ec4\u6211\u4eec\u4e0d\u53bb\u52a8\u5b83\uff0c\u7528\u6765\u548c S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8fdb\u884c\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6bd4\u8f83\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0076-minimum-window-substring/#1",
            "text": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution {\n\n    public String minWindow(String s, String t) {\n        int[] cntS = new int[256];\n        int[] cntT = new int[256];\n\n        Set<Character> set = new HashSet<>();\n        // cntT \u8d4b\u503c\u4e86\u4ee5\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u7528\u4e8e\u6bd4\u5bf9\u7684\u5bf9\u8c61\uff0c\u4e0d\u66f4\u65b0\n        for (char ct : t.toCharArray()) {\n            cntT[ct]++;\n            set.add(ct);\n        }\n\n        int minSub = s.length() + 1;\n        String res = \"\";\n        int left = 0;\n        int right = 0;\n        int count = 0;\n        while (right < s.length()) {\n            char rc = s.charAt(right);\n            if (!set.contains(rc)) {\n                // \u4e0d\u5728\u5b57\u5178\u91cc\u9762\uff0c\u4f46\u662f\u53f3\u8fb9\u754c\u540c\u6837\u8981\u6269\u5145\uff0c\u6240\u4ee5 right++\n                right++;\n                continue;\n            }\n            cntS[rc]++;\n            right++;\n            // \u7406\u89e3\u8fd9\u91cc\u662f\u5173\u952e\uff1a\u52a0\u4e0a\u4ee5\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8e\uff0ccount \u624d ++\uff0c\n            if (cntS[rc] <= cntT[rc]) {\n                // count++; \u8fd9\u4ef6\u4e8b\u60c5\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u91cc\u9762\u7684\u6709\u6548\u5b57\u7b26\uff0c\u5411\u76ee\u6807\u5b57\u7b26\u53c8\u8fd1\u4e86\u4e00\u6b65\n                count++;\n            }\n\n            // \u4e0b\u9762\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u5199\u5f97\u66f4\u7cbe\u7b80\u4e00\u4e9b\uff0c\u4f46\u662f\u4e3a\u4e86\u8bed\u4e49\u4e0a\u7684\u6e05\u6670\uff0c\u6211\u5c31\u5199\u5f97\u5197\u957f\u4e00\u4e9b\n            if (count == t.length()) {\n                // \u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5de6\u8fb9\u754c\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3\n                // \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6216\u8005\u591a\u4e86\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5212\u6389\u5c31\u53ef\u4ee5\u4e86\n                while (true) {\n                    char deleteChar = s.charAt(left);\n                    if (!set.contains(deleteChar)) {\n                        left++;\n                        continue;\n                    }\n                    if (cntS[deleteChar] > cntT[deleteChar]) {\n                        cntS[deleteChar]--;\n                        left++;\n                        continue;\n                    }\n                    break;\n                }\n                if (right - left < minSub) {\n                    minSub = right - left;\n                    res = s.substring(left, right);\n                }\n            }\n        }\n        if (minSub == s.length() + 1) {\n            return \"\";\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String S = \"ADOBECODEBANC\";\n        String T = \"ABC\";\n        String minWindow = solution.minWindow(S, T);\n        System.out.println(minWindow);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0076-minimum-window-substring  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0077-combinations/",
            "text": "77. Combinations\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n77. Combinations\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n77. \u7ec4\u5408\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f \nn - (k - stack.size()) + 1\n\u3002\n\n\n\n\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d \ni\n \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/combinations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n\n    private void findCombinations(int n, int k, int begin, Stack<Integer> stack) {\n        if (stack.size() == k) {\n            // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\n        // for (int i = index; i <= n; i++) {\n        // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c\n        for (int i = begin; i <= n - (k - stack.size()) + 1; i++) {\n            stack.add(i);\n            findCombinations(n, k, i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combine(int n, int k) {\n        if (n <= 0 || k <= 0 || n < k) {\n            return res;\n        }\n        // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a\n        findCombinations(n, k, 1, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> combine = solution.combine(4, 2);\n        System.out.println(combine);\n    }\n}",
            "title": "77. Combinations"
        },
        {
            "location": "/leetcode-0077-combinations/#77-combinations",
            "text": "",
            "title": "77. Combinations"
        },
        {
            "location": "/leetcode-0077-combinations/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 77. Combinations   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 77. \u7ec4\u5408   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0077-combinations/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f  n - (k - stack.size()) + 1 \u3002   \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d  i  \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0077-combinations/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0077-combinations/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n// https://leetcode-cn.com/problems/combinations/description/\npublic class Solution {\n\n    private List<List<Integer>> res = new ArrayList<>();\n\n    private void findCombinations(int n, int k, int begin, Stack<Integer> stack) {\n        if (stack.size() == k) {\n            // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\n        // for (int i = index; i <= n; i++) {\n        // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c\n        for (int i = begin; i <= n - (k - stack.size()) + 1; i++) {\n            stack.add(i);\n            findCombinations(n, k, i + 1, stack);\n            stack.pop();\n        }\n    }\n\n    public List<List<Integer>> combine(int n, int k) {\n        if (n <= 0 || k <= 0 || n < k) {\n            return res;\n        }\n        // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a\n        findCombinations(n, k, 1, new Stack<>());\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> combine = solution.combine(4, 2);\n        System.out.println(combine);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0078-subsets/",
            "text": "78. Subsets\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u7ec4\n\u4e0d\u542b\u91cd\u590d\u5143\u7d20\n\u7684\u6574\u6570\u6570\u7ec4\u00a0\nnums\n\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\n\n\n\u8bf4\u660e\uff1a\n\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n nums = [1,2,3]\n\n\u8f93\u51fa:\n\n[\n  [3],\n\u00a0 [1],\n\u00a0 [2],\n\u00a0 [1,2,3],\n\u00a0 [1,3],\n\u00a0 [2,3],\n\u00a0 [1,2],\n\u00a0 []\n]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n78. Subsets\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n78. \u5b50\u96c6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0078-subsets\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "78. Subsets"
        },
        {
            "location": "/leetcode-0078-subsets/#78-subsets",
            "text": "",
            "title": "78. Subsets"
        },
        {
            "location": "/leetcode-0078-subsets/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u7ec4 \u4e0d\u542b\u91cd\u590d\u5143\u7d20 \u7684\u6574\u6570\u6570\u7ec4\u00a0 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002  \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002  \u793a\u4f8b:  \u8f93\u5165:  nums = [1,2,3] \u8f93\u51fa: \n[\n  [3],\n\u00a0 [1],\n\u00a0 [2],\n\u00a0 [1,2,3],\n\u00a0 [1,3],\n\u00a0 [2,3],\n\u00a0 [1,2],\n\u00a0 []\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 78. Subsets   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 78. \u5b50\u96c6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0078-subsets/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0078-subsets/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0078-subsets/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0078-subsets  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/",
            "text": "80. Remove Duplicates from Sorted Array II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\n\u539f\u5730\n\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\n\n\n\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\n\u539f\u5730\n\u4fee\u6539\u8f93\u5165\u6570\u7ec4\n\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u7ed9\u5b9a \nnums\n = \n[1,1,1,2,2,3]\n,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = \n5\n, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a \n1, 1, 2, 2,\n \n3 \n\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u7ed9\u5b9a \nnums\n = \n[0,0,1,1,1,1,2,3,3]\n,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = \n7\n, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a\u00a0\n0\n, \n0\n, \n1\n, \n1\n, \n2\n, \n3\n, \n3 \u3002\n\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\n\u8bf4\u660e:\n\n\n\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?\n\n\n\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\n\u201c\u5f15\u7528\u201d\n\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n\n\n\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:\n\n\n// \nnums\n \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\n\u8be5\u957f\u5ea6\u8303\u56f4\u5185\n\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n80. Remove Duplicates from Sorted Array II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n80. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u5206\u7c7b\u8ba8\u8bba\uff0c\u4e34\u754c\u503c\u5224\u65ad\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\n// https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/\n// \u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u51fa\u73b0 2 \u6b21\n// \u89e3\u91ca\uff1a\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8981\u6c42\u91cd\u590d\u7684\u5143\u7d20\u81f3\u591a\u4fdd\u7559\u4e24\u4e2a\u3002\n// \u601d\u8003\uff1a\u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002\n// \u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u4e8e\u6bd4\u8f83\u548c\u4e4b\u524d\u7684\u503c\u662f\u5426\u91cd\u590d\uff0c\u8fd8\u8981\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u91cd\u590d\u6b21\u6570\u3002\n// \u6ce8\u610f\uff1a\u540c\u6837\u8981\u6ce8\u610f\u5230 nums = [] \u7684\u60c5\u51b5\u3002\n// \u8fd9\u9053\u9898\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0c\u6700\u7ec8\u8fd8\u662f\u72ec\u7acb\u89e3\u51fa\u6765\u4e86\uff0c\n// \u4e3b\u8981\u662f\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5728\u91cd\u590d\u6b21\u6570\u4e3a 1 \u7684\u65f6\u5019\uff0c\u632a\u52a8\u6307\u9488\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u8981\u8d4b\u503c\uff0c\u4e00\u5f00\u59cb\u6211\u5fd8\u8bb0\u8d4b\u503c\u4e86\u3002\n\npublic class Solution {\n\n\n    // \u91cd\u590d\u51fa\u73b0 1 \u6b21\u548c 2 \u6b21\u7684\u65f6\u5019\u4ec0\u4e48\u90fd\u4e0d\u505a\n    // [0,1,1,1,2,2,2,2,3,3,4]\n\n    public int removeDuplicates(int[] nums) {\n        // [1,1] \u6700\u591a 2 \u4e2a\u5143\u7d20\u5c31\u80fd\u591f\u4e0d\u7528\u5224\u65ad\n        int len = nums.length;\n\n        if (len <= 2) {\n            return len;\n        }\n        int pre = nums[0];\n        int duplicateTimes = 0;\n\n        // \u7b2c 1 \u4e2a\u5143\u7d20\u80af\u5b9a\u88ab\u4fdd\u7559\uff0c\u6240\u4ee5\u76f4\u63a5\u5199 1\n        // j \u8868\u793a\u6211\u6bcf\u4e00\u6b21\u904d\u5386\uff0c\u5373\u5c06\u88ab\u8986\u76d6\u7684\u90a3\u4e2a\u7d22\u5f15\n        int j = 1;\n        for (int i = 1; i < len; i++) {\n            if (nums[i] == pre) {\n                // \u53ea\u8981\u6709\u91cd\u590d\uff0c\u6b21\u6570\u5c31\u8981\u52a0 1\n                duplicateTimes++;\n                // \u91cd\u590d 1 \u6b21\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u8d4b\u503c\n                if (duplicateTimes == 1) {\n                    nums[j] = pre;\n                    j++;\n                }\n                // \u91cd\u590d 1 \u6b21\u4ee5\u4e0a\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u5143\u7d20\n            } else {\n                // \u91cd\u7f6e\u6b21\u6570\u548c\u4e4b\u524d\u7684\u90a3\u4e2a\u503c\n                pre = nums[i];\n                duplicateTimes = 0;\n\n                nums[j] = nums[i];\n                j++;\n            }\n        }\n        return j;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4};\n        int ret = new Solution().removeDuplicates(nums);\n        System.out.println(ret);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n\n        if len(nums) == 0 or k <= 0:\n            return\n\n        k = k % len(nums)\n\n        # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n        # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50\n        self.__reverse(nums, 0, len(nums) - 1)\n        self.__reverse(nums, 0, k - 1)\n        self.__reverse(nums, k, len(nums) - 1)\n\n    def __reverse(self, nums, index1, index2):\n        \"\"\"\n        \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c\n        :param nums:\n        :param index1:\n        :param index2:\n        :return:\n        \"\"\"\n\n        while index1 < index2:\n            nums[index1], nums[index2] = nums[index2], nums[index1]\n            index1 += 1\n            index2 -= 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    s = Solution()\n    s.rotate(nums, k)\n    print(nums)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0080-remove-duplicates-from-sorted-array-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "80. Remove Duplicates from Sorted Array II"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/#80-remove-duplicates-from-sorted-array-ii",
            "text": "",
            "title": "80. Remove Duplicates from Sorted Array II"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002  \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002  \u793a\u4f8b\u00a01:  \u7ed9\u5b9a  nums  =  [1,1,1,2,2,3] ,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length =  5 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a  1, 1, 2, 2,   3  \u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u793a\u4f8b\u00a02:  \u7ed9\u5b9a  nums  =  [0,0,1,1,1,1,2,3,3] ,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length =  7 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a\u00a0 0 ,  0 ,  1 ,  1 ,  2 ,  3 ,  3 \u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002  \u8bf4\u660e:  \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?  \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002  \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:  //  nums  \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 80. Remove Duplicates from Sorted Array II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 80. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u5206\u7c7b\u8ba8\u8bba\uff0c\u4e34\u754c\u503c\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0080-remove-duplicates-from-sorted-array-ii/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\n// https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/\n// \u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u51fa\u73b0 2 \u6b21\n// \u89e3\u91ca\uff1a\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8981\u6c42\u91cd\u590d\u7684\u5143\u7d20\u81f3\u591a\u4fdd\u7559\u4e24\u4e2a\u3002\n// \u601d\u8003\uff1a\u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002\n// \u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u4e8e\u6bd4\u8f83\u548c\u4e4b\u524d\u7684\u503c\u662f\u5426\u91cd\u590d\uff0c\u8fd8\u8981\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u91cd\u590d\u6b21\u6570\u3002\n// \u6ce8\u610f\uff1a\u540c\u6837\u8981\u6ce8\u610f\u5230 nums = [] \u7684\u60c5\u51b5\u3002\n// \u8fd9\u9053\u9898\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0c\u6700\u7ec8\u8fd8\u662f\u72ec\u7acb\u89e3\u51fa\u6765\u4e86\uff0c\n// \u4e3b\u8981\u662f\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5728\u91cd\u590d\u6b21\u6570\u4e3a 1 \u7684\u65f6\u5019\uff0c\u632a\u52a8\u6307\u9488\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u8981\u8d4b\u503c\uff0c\u4e00\u5f00\u59cb\u6211\u5fd8\u8bb0\u8d4b\u503c\u4e86\u3002\n\npublic class Solution {\n\n\n    // \u91cd\u590d\u51fa\u73b0 1 \u6b21\u548c 2 \u6b21\u7684\u65f6\u5019\u4ec0\u4e48\u90fd\u4e0d\u505a\n    // [0,1,1,1,2,2,2,2,3,3,4]\n\n    public int removeDuplicates(int[] nums) {\n        // [1,1] \u6700\u591a 2 \u4e2a\u5143\u7d20\u5c31\u80fd\u591f\u4e0d\u7528\u5224\u65ad\n        int len = nums.length;\n\n        if (len <= 2) {\n            return len;\n        }\n        int pre = nums[0];\n        int duplicateTimes = 0;\n\n        // \u7b2c 1 \u4e2a\u5143\u7d20\u80af\u5b9a\u88ab\u4fdd\u7559\uff0c\u6240\u4ee5\u76f4\u63a5\u5199 1\n        // j \u8868\u793a\u6211\u6bcf\u4e00\u6b21\u904d\u5386\uff0c\u5373\u5c06\u88ab\u8986\u76d6\u7684\u90a3\u4e2a\u7d22\u5f15\n        int j = 1;\n        for (int i = 1; i < len; i++) {\n            if (nums[i] == pre) {\n                // \u53ea\u8981\u6709\u91cd\u590d\uff0c\u6b21\u6570\u5c31\u8981\u52a0 1\n                duplicateTimes++;\n                // \u91cd\u590d 1 \u6b21\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u8d4b\u503c\n                if (duplicateTimes == 1) {\n                    nums[j] = pre;\n                    j++;\n                }\n                // \u91cd\u590d 1 \u6b21\u4ee5\u4e0a\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u5143\u7d20\n            } else {\n                // \u91cd\u7f6e\u6b21\u6570\u548c\u4e4b\u524d\u7684\u90a3\u4e2a\u503c\n                pre = nums[i];\n                duplicateTimes = 0;\n\n                nums[j] = nums[i];\n                j++;\n            }\n        }\n        return j;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4};\n        int ret = new Solution().removeDuplicates(nums);\n        System.out.println(ret);\n        System.out.println(Arrays.toString(nums));\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n\n        if len(nums) == 0 or k <= 0:\n            return\n\n        k = k % len(nums)\n\n        # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n        # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50\n        self.__reverse(nums, 0, len(nums) - 1)\n        self.__reverse(nums, 0, k - 1)\n        self.__reverse(nums, k, len(nums) - 1)\n\n    def __reverse(self, nums, index1, index2):\n        \"\"\"\n        \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c\n        :param nums:\n        :param index1:\n        :param index2:\n        :return:\n        \"\"\"\n\n        while index1 < index2:\n            nums[index1], nums[index2] = nums[index2], nums[index1]\n            index1 += 1\n            index2 -= 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    s = Solution()\n    s.rotate(nums, k)\n    print(nums)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0080-remove-duplicates-from-sorted-array-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/",
            "text": "81. Search in Rotated Sorted Array II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002\n\n\n( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0\n[0,0,1,2,2,5,6]\n\u00a0\u53ef\u80fd\u53d8\u4e3a\u00a0\n[2,5,6,0,0,1,2]\n\u00a0)\u3002\n\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de\u00a0\ntrue\n\uff0c\u5426\u5219\u8fd4\u56de\u00a0\nfalse\n\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n nums = [2\n,5,6,0,0,1,2]\n, target = 0\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n nums = [2\n,5,6,0,0,1,2]\n, target = 3\n\n\u8f93\u51fa:\n false\n\n\n\u8fdb\u9636:\n\n\n\n\n\u8fd9\u662f \n\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\n\u00a0\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684\u00a0\nnums\n\u00a0 \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002\n\n\n\u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n81. Search in Rotated Sorted Array II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n81. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public boolean search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return false;\n        }\n        int left = 0;\n        int right = len - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            // System.out.println(mid);\n            if (nums[mid] == target) {\n                return true;\n            }\n            // 10 11 4 5 6 7 8 9\n            if (nums[mid] < nums[right]) {\n                // \u53f3\u8fb9\u7684\u4e00\u5b9a\u662f\u987a\u5e8f\u6570\u7ec4\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                assert nums[mid] >= nums[right];\n                // 5 1 2 3 4 5 5 5 5 5 5 5\n                // 1 1 3 1\n                // \u53ef\u80fd\u5728\u5de6\u8fb9\uff0c\u4e5f\u6709\u53ef\u80fd\u5728\u53f3\u8fb9\n                if (nums[mid] == nums[right]) {\n                    // \u4e00\u6b65\u4e00\u6b65\u6765\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5224\u65ad\u4e86 nums[mid] != target\uff0c\u800c\u6b64\u65f6 nums[mid] == nums[right]\uff0c\n                    // \u6240\u4ee5\uff0cnums[right] \u53ef\u4ee5\u4e22\u5f03\u4e86\n                    right--;\n                } else {\n                    assert nums[mid] > nums[right];\n                    // 4 5 6 7 8 9 1 2\n                    // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n                    if (nums[left] <= target && target < nums[mid]) {\n                        right = mid - 1;\n                    } else {\n                        left = mid + 1;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 1, 3, 1};\n        int target = 3;\n        boolean search = solution.search(nums, target);\n        System.out.println(search);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0081-search-in-rotated-sorted-array-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "81. Search in Rotated Sorted Array II"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/#81-search-in-rotated-sorted-array-ii",
            "text": "",
            "title": "81. Search in Rotated Sorted Array II"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002  ( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0 [0,0,1,2,2,5,6] \u00a0\u53ef\u80fd\u53d8\u4e3a\u00a0 [2,5,6,0,0,1,2] \u00a0)\u3002  \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de\u00a0 true \uff0c\u5426\u5219\u8fd4\u56de\u00a0 false \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  nums = [2 ,5,6,0,0,1,2] , target = 0 \u8f93\u51fa:  true  \u793a\u4f8b\u00a02:  \u8f93\u5165:  nums = [2 ,5,6,0,0,1,2] , target = 3 \u8f93\u51fa:  false  \u8fdb\u9636:   \u8fd9\u662f  \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u00a0\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684\u00a0 nums \u00a0 \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002  \u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 81. Search in Rotated Sorted Array II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 81. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0081-search-in-rotated-sorted-array-ii/#1",
            "text": "public class Solution {\n\n    public boolean search(int[] nums, int target) {\n        int len = nums.length;\n        if (len == 0) {\n            return false;\n        }\n        int left = 0;\n        int right = len - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            // System.out.println(mid);\n            if (nums[mid] == target) {\n                return true;\n            }\n            // 10 11 4 5 6 7 8 9\n            if (nums[mid] < nums[right]) {\n                // \u53f3\u8fb9\u7684\u4e00\u5b9a\u662f\u987a\u5e8f\u6570\u7ec4\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                assert nums[mid] >= nums[right];\n                // 5 1 2 3 4 5 5 5 5 5 5 5\n                // 1 1 3 1\n                // \u53ef\u80fd\u5728\u5de6\u8fb9\uff0c\u4e5f\u6709\u53ef\u80fd\u5728\u53f3\u8fb9\n                if (nums[mid] == nums[right]) {\n                    // \u4e00\u6b65\u4e00\u6b65\u6765\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5224\u65ad\u4e86 nums[mid] != target\uff0c\u800c\u6b64\u65f6 nums[mid] == nums[right]\uff0c\n                    // \u6240\u4ee5\uff0cnums[right] \u53ef\u4ee5\u4e22\u5f03\u4e86\n                    right--;\n                } else {\n                    assert nums[mid] > nums[right];\n                    // 4 5 6 7 8 9 1 2\n                    // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n                    if (nums[left] <= target && target < nums[mid]) {\n                        right = mid - 1;\n                    } else {\n                        left = mid + 1;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 1, 3, 1};\n        int target = 3;\n        boolean search = solution.search(nums, target);\n        System.out.println(search);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0081-search-in-rotated-sorted-array-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/",
            "text": "82. Remove Duplicates from Sorted List II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d\u00a0\n\u6ca1\u6709\u91cd\u590d\u51fa\u73b0\u00a0\n\u7684\u6570\u5b57\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 1->2->3->3->4->4->5\n\n\u8f93\u51fa:\n 1->2->5\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 1->1->1->2->3\n\n\u8f93\u51fa:\n 2->3\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n82. Remove Duplicates from Sorted List II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5206\u6790\u6e05\u695a\u5404\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u4ee3\u7801\u5e76\u4e0d\u96be\u5199\uff0c\u6211\u628a\u601d\u8def\u90fd\u4f5c\u4e3a\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n\n        // \u8fd9\u91cc\u6211\u4eec\u8981\u6e05\u695a\uff0c\u4f8b\u5982 1 1 2 3 ,\u5934\u7ed3\u70b9\u4e5f\u662f\u6709\u53ef\u80fd\u88ab\u5220\u9664\u7684\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\n        // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n\n        ListNode curNode = dummyNode;\n        // \u9898\u76ee\u8981\u6c42\u7684\u5220\u9664\u7ed3\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7ad9\u5728\u88ab\u5220\u9664\u7ed3\u70b9\u524d\u9762\u7684\n        // \u6240\u4ee5\u5faa\u73af\u53ef\u4ee5\u7ee7\u7eed\u7684\u6761\u4ef6\u5e94\u8be5\u8fd9\u6837\u5199\n        while (curNode.next != null && curNode.next.next != null) {\n            // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389\n            if (curNode.next.val == curNode.next.next.val) {\n                // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a\n                ListNode delNode = curNode.next.next;\n\n                // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\n                // \u6ce8\u610f\uff1a\u8fd9\u91cc\u5f97\u7528\u5faa\u73af\uff0c\u4f8b\u5982\uff1a 1 2 2 2 2 2 2 2 2 3 3 3\n                // \u5f97\u8ba9 delNode \u7ed3\u70b9\u632a\u5230\u6700\u540e\u4e00\u4e2a 2 \u4e0a\n                while (delNode.next != null && delNode.next.val == delNode.val) {\n                    delNode = delNode.next;\n                }\n\n                // \u63a5\u4e0b\u6765\u628a\u6709\u91cd\u590d\u7684\u94fe\u8868\u6bb5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\n                // 1        2   2   2         3\n                // curNode          delNode\n                curNode.next = delNode.next;\n                delNode.next = null;\n            } else {\n                // \u5426\u5219\u5411\u524d\u8d70\u4e00\u6b65\n                curNode = curNode.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0082-remove-duplicates-from-sorted-list-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "82. Remove Duplicates from Sorted List II"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/#82-remove-duplicates-from-sorted-list-ii",
            "text": "",
            "title": "82. Remove Duplicates from Sorted List II"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d\u00a0 \u6ca1\u6709\u91cd\u590d\u51fa\u73b0\u00a0 \u7684\u6570\u5b57\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1->2->3->3->4->4->5 \u8f93\u51fa:  1->2->5  \u793a\u4f8b\u00a02:  \u8f93\u5165:  1->1->1->2->3 \u8f93\u51fa:  2->3    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 82. Remove Duplicates from Sorted List II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5206\u6790\u6e05\u695a\u5404\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u4ee3\u7801\u5e76\u4e0d\u96be\u5199\uff0c\u6211\u628a\u601d\u8def\u90fd\u4f5c\u4e3a\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0082-remove-duplicates-from-sorted-list-ii/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n\n        // \u8fd9\u91cc\u6211\u4eec\u8981\u6e05\u695a\uff0c\u4f8b\u5982 1 1 2 3 ,\u5934\u7ed3\u70b9\u4e5f\u662f\u6709\u53ef\u80fd\u88ab\u5220\u9664\u7684\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\n        // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n\n        ListNode curNode = dummyNode;\n        // \u9898\u76ee\u8981\u6c42\u7684\u5220\u9664\u7ed3\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7ad9\u5728\u88ab\u5220\u9664\u7ed3\u70b9\u524d\u9762\u7684\n        // \u6240\u4ee5\u5faa\u73af\u53ef\u4ee5\u7ee7\u7eed\u7684\u6761\u4ef6\u5e94\u8be5\u8fd9\u6837\u5199\n        while (curNode.next != null && curNode.next.next != null) {\n            // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389\n            if (curNode.next.val == curNode.next.next.val) {\n                // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a\n                ListNode delNode = curNode.next.next;\n\n                // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a\n                // \u6ce8\u610f\uff1a\u8fd9\u91cc\u5f97\u7528\u5faa\u73af\uff0c\u4f8b\u5982\uff1a 1 2 2 2 2 2 2 2 2 3 3 3\n                // \u5f97\u8ba9 delNode \u7ed3\u70b9\u632a\u5230\u6700\u540e\u4e00\u4e2a 2 \u4e0a\n                while (delNode.next != null && delNode.next.val == delNode.val) {\n                    delNode = delNode.next;\n                }\n\n                // \u63a5\u4e0b\u6765\u628a\u6709\u91cd\u590d\u7684\u94fe\u8868\u6bb5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\n                // 1        2   2   2         3\n                // curNode          delNode\n                curNode.next = delNode.next;\n                delNode.next = null;\n            } else {\n                // \u5426\u5219\u5411\u524d\u8d70\u4e00\u6b65\n                curNode = curNode.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0082-remove-duplicates-from-sorted-list-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/",
            "text": "83. Remove Duplicates from Sorted List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 1->1->2\n\n\u8f93\u51fa:\n 1->2\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 1->1->2->3->3\n\n\u8f93\u51fa:\n 1->2->3\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n83. Remove Duplicates from Sorted List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002\n\n\n\n\n\u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002\n\n\n\n\n\n\n\n\n\u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b  \n\n\n\u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b  \n\n\n\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f \nwhile(cur.next!=null)\n\uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 \ncur\n \u548c \nnext\n \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 \npre\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6\n        if head is None or head.next is None:\n            return head\n        cur = head\n        while cur.next:\n            next = cur.next\n            if next.val == cur.val:\n                # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d\n                cur.next = next.next\n                next.next = None\n            else:\n                cur = cur.next\n        return head\n\n\n\n\n\u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#83-remove-duplicates-from-sorted-list",
            "text": "",
            "title": "83. Remove Duplicates from Sorted List"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1->1->2 \u8f93\u51fa:  1->2  \u793a\u4f8b\u00a02:  \u8f93\u5165:  1->1->2->3->3 \u8f93\u51fa:  1->2->3    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002   \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002     \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b    \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b    \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f  while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981  cur  \u548c  next  \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528  pre \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0083-remove-duplicates-from-sorted-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        ListNode cur = head;\n        ListNode next;\n        while (cur.next != null) {\n            next = cur.next;\n            if (next.val == cur.val) {\n                cur.next = next.next;\n                next.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return head;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2, 3, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\");\n        ListNode deleteDuplicates = solution.deleteDuplicates(head);\n        System.out.println(deleteDuplicates);\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6\n        if head is None or head.next is None:\n            return head\n        cur = head\n        while cur.next:\n            next = cur.next\n            if next.val == cur.val:\n                # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d\n                cur.next = next.next\n                next.next = None\n            else:\n                cur = cur.next\n        return head  \u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/",
            "text": "86. Partition List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n86. Partition List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n86. \u5206\u9694\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\npublic class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#86-partition-list",
            "text": "",
            "title": "86. Partition List"
        },
        {
            "location": "/leetcode-0086-partition-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0086-partition-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\n\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0086-partition-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0086-partition-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762\n                curL.next = new ListNode(val);\n                curL = curL.next;\n            } else { // \u63a5\u5728 R \u7684\u540e\u9762\n                curR.next = new ListNode(val);\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762\n        return dummyNodeL.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 4, 3, 2, 5, 2};\n        int x = 3;\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\");\n        ListNode partition = solution.partition(head, x);\n        System.out.println(partition);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0086-partition-list/#2",
            "text": "public class Solution2 {\n\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9\n        ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386\n        ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386\n        int val;\n        while (head != null) {\n            val = head.val;\n            if (val < x) {\n                curL.next = head;\n                curL = curL.next;\n            } else {\n                curR.next = head;\n                curR = curR.next;\n            }\n            head = head.next;\n        }\n        curL.next = dummyNodeR.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curR.next = null;\n        return dummyNodeL.next;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/",
            "text": "88. Merge Sorted Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\u00a0\nnums1 \n\u548c \nnums2\n\uff0c\u5c06 \nnums2 \n\u5408\u5e76\u5230\u00a0\nnums1\u00a0\n\u4e2d\n\uff0c\n\u4f7f\u5f97\u00a0\nnum1 \n\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\n\n\n\u8bf4\u660e:\n\n\n\n\n\u521d\u59cb\u5316\u00a0\nnums1\n \u548c \nnums2\n \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0\nm\n \u548c \nn\n\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0\nnums1\u00a0\n\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\u00a0\nm + n\n\uff09\u6765\u4fdd\u5b58 \nnums2\n \u4e2d\u7684\u5143\u7d20\u3002\n\n\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n\n\u8f93\u51fa:\n\u00a0[1,2,2,3,5,6]\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n88. Merge Sorted Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002\n\n\n\n\n\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int len = m + n;\n        int i = m - 1;\n        int j = n - 1;\n        for (int k = len - 1; k >= 0; k--) {\n            if (i == -1) {\n                // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217\n                nums1[k] = nums2[j];\n                j--;\n            } else if (j == -1) {\n                // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else if (nums1[i] >= nums2[j]) {\n                // \u8c01\u5927\u8c01\u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                assert nums1[i] < nums2[j];\n                nums1[k] = nums2[j];\n                j--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 0, 0, 0};\n        int m = 3;\n        int[] nums2 = {2, 5, 6};\n        int n = 3;\n        Solution solution = new Solution();\n        solution.merge(nums1, m, nums2, n);\n        System.out.println(Arrays.toString(nums1));\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002\n\n\npublic class Solution2 {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb\n        // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd\n        int[] nums3 = new int[m];\n        System.arraycopy(nums1, 0, nums3, 0, m);\n        // \u6570\u7ec43\n        int i = 0;\n        // \u6570\u7ec42\n        int j = 0;\n        int length = m + n;\n        for (int k = 0; k < length; k++) {\n            if (i == m) {\n                nums1[k] = nums2[j];\n                j++;\n            } else if (j == n) {\n                nums1[k] = nums3[i];\n                i++;\n            } else if (nums3[i] < nums2[j]) {\n                nums1[k] = nums3[i];\n                i++;\n            } else {\n                nums1[k] = nums2[j];\n                j++;\n            }\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "88. Merge Sorted Array"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#88-merge-sorted-array",
            "text": "",
            "title": "88. Merge Sorted Array"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\u00a0 nums1  \u548c  nums2 \uff0c\u5c06  nums2  \u5408\u5e76\u5230\u00a0 nums1\u00a0 \u4e2d \uff0c \u4f7f\u5f97\u00a0 num1  \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002  \u8bf4\u660e:   \u521d\u59cb\u5316\u00a0 nums1  \u548c  nums2  \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0 m  \u548c  n \u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0 nums1\u00a0 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\u00a0 m + n \uff09\u6765\u4fdd\u5b58  nums2  \u4e2d\u7684\u5143\u7d20\u3002   \u793a\u4f8b:  \u8f93\u5165: \nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3 \u8f93\u51fa: \u00a0[1,2,2,3,5,6]     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 88. Merge Sorted Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002   \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#1",
            "text": "import java.util.Arrays;\n\npublic class Solution {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int len = m + n;\n        int i = m - 1;\n        int j = n - 1;\n        for (int k = len - 1; k >= 0; k--) {\n            if (i == -1) {\n                // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217\n                nums1[k] = nums2[j];\n                j--;\n            } else if (j == -1) {\n                // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else if (nums1[i] >= nums2[j]) {\n                // \u8c01\u5927\u8c01\u51fa\u5217\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                assert nums1[i] < nums2[j];\n                nums1[k] = nums2[j];\n                j--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 0, 0, 0};\n        int m = 3;\n        int[] nums2 = {2, 5, 6};\n        int n = 3;\n        Solution solution = new Solution();\n        solution.merge(nums1, m, nums2, n);\n        System.out.println(Arrays.toString(nums1));\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0088-merge-sorted-array/#2",
            "text": "public class Solution2 {\n\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb\n        // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd\n        int[] nums3 = new int[m];\n        System.arraycopy(nums1, 0, nums3, 0, m);\n        // \u6570\u7ec43\n        int i = 0;\n        // \u6570\u7ec42\n        int j = 0;\n        int length = m + n;\n        for (int k = 0; k < length; k++) {\n            if (i == m) {\n                nums1[k] = nums2[j];\n                j++;\n            } else if (j == n) {\n                nums1[k] = nums3[i];\n                i++;\n            } else if (nums3[i] < nums2[j]) {\n                nums1[k] = nums3[i];\n                i++;\n            } else {\n                nums1[k] = nums2[j];\n                j++;\n            }\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0090-subsets-ii/",
            "text": "90. Subsets II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 \nnums\n\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002\n\n\n\u8bf4\u660e\uff1a\n\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,2,2]\n\n\u8f93\u51fa:\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n90. Subsets II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n90. \u5b50\u96c6 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0090-subsets-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "90. Subsets II"
        },
        {
            "location": "/leetcode-0090-subsets-ii/#90-subsets-ii",
            "text": "",
            "title": "90. Subsets II"
        },
        {
            "location": "/leetcode-0090-subsets-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4  nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002  \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002  \u793a\u4f8b:  \u8f93\u5165:  [1,2,2] \u8f93\u51fa: \n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 90. Subsets II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 90. \u5b50\u96c6 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0090-subsets-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0090-subsets-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0090-subsets-ii/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0090-subsets-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/",
            "text": "92. Reverse Linked List II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n92. Reverse Linked List II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n92. \u53cd\u8f6c\u94fe\u8868 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002\n\n\n\n\n\n\n\n\n\u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002\n\n\n\u5173\u6ce8\u4e34\u754c\u503c\uff0c\npre\n \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b\n\n\n\u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b\n\n\n\u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e \ncur\n \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c\npre\n \u4e5f\u4e0d\u53d8\uff0c\nnext\n \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728 \ncur\n \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21 \ncur\n \u7684 \nnext\n \u90fd\u4f1a\u79fb\u5230 \npre\n \u7684 \nnext\n\uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b\n\n\n\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9 \nListNode\n \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868 \ncreateListNode\n\uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868 \nprintLinkedList\n\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u540e\u6765\u89c9\u5f97\u6bd4\u8f83\u597d\u7684\u601d\u8def\uff1a\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        cur_node = dummy_node\n        for _ in range(m - 1):\n            cur_node = cur_node.next\n        begin = cur_node\n        end = cur_node.next\n        # \u5411\u524d\u8d70\u4e00\u6b65\n        cur_node = cur_node.next\n        # \u518d\u524d\u8d70\u4e00\u6b65\n        pre = cur_node\n        cur_node = cur_node.next\n        for _ in range(n - m):\n            next = cur_node.next\n            cur_node.next = pre\n            pre = cur_node\n            cur_node = next\n        begin.next = pre\n        end.next = cur_node\n        return dummy_node.next\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nJava \u5199\u6cd5\n\n\n// \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "92. Reverse Linked List II"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#92-reverse-linked-list-ii",
            "text": "",
            "title": "92. Reverse Linked List II"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 92. Reverse Linked List II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 92. \u53cd\u8f6c\u94fe\u8868 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002     \u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002  \u5173\u6ce8\u4e34\u754c\u503c\uff0c pre  \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b  \u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b  \u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e  cur  \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c pre  \u4e5f\u4e0d\u53d8\uff0c next  \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728  cur  \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21  cur  \u7684  next  \u90fd\u4f1a\u79fb\u5230  pre  \u7684  next \uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b  \u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9  ListNode  \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868  createListNode \uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868  printLinkedList \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#1",
            "text": "\u540e\u6765\u89c9\u5f97\u6bd4\u8f83\u597d\u7684\u601d\u8def\uff1a   Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        cur_node = dummy_node\n        for _ in range(m - 1):\n            cur_node = cur_node.next\n        begin = cur_node\n        end = cur_node.next\n        # \u5411\u524d\u8d70\u4e00\u6b65\n        cur_node = cur_node.next\n        # \u518d\u524d\u8d70\u4e00\u6b65\n        pre = cur_node\n        cur_node = cur_node.next\n        for _ in range(n - m):\n            next = cur_node.next\n            cur_node.next = pre\n            pre = cur_node\n            cur_node = next\n        begin.next = pre\n        end.next = cur_node\n        return dummy_node.next",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0092-reverse-linked-list-ii/#2",
            "text": "Java \u5199\u6cd5  // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA\n// https://www.jianshu.com/p/fbe6012c9e52\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < m - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < n - m; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4);\n        System.out.println(reverseBetween);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/",
            "text": "93. Restore IP Addresses\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n93. Restore IP Addresses\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n93. \u590d\u539fIP\u5730\u5740\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002\n\n\n1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b\n2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b\n3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002\n\n\n\u9898\u76ee\u5927\u610f\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u52a0\u4e0a\u4e09\u4e2a\u70b9\uff08.\uff09\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684IP\u5730\u5740\uff0c\u8fd4\u56de\u6240\u6709\u7684\u5408\u6cd5\u7684 IP \u5730\u5740\u3002\n\n\n\u8865\u5145\u8bf4\u660e\n\n\n\n\n\u5982\u7ed9\u5b9a\u5b57\u7b26\u4e32 \"25525511135\",\n\n\n\u8fd4\u56de [\"255.255.11.135\", \"255.255.111.35\"]\n\n\n\n\n\u6211\u4eec\u518d\u60f3\u60f3\uff0c\u6211\u4eec\u9012\u5f52\u5230\u5e95\uff0c\u65e0\u975e\u5c31\u662f\u7ed9\u4e00\u4e32\u6570\u5b57\u52a0\u4e0a\u4e09\u4e2a\".\"\uff0c\u4e0d\u7ba1\u80fd\u4e0d\u80fd\u6210\u4e3a IP \uff0c\u5206\u5272\u6b21\u6570\u589e\u52a0\u548c\u4e4b\u524d\u7684 IP \u6bb5\u79ef\u7d2f\u6211\u4eec\u90fd\u6709\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u6210\u4e3a IP \u5730\u5740\u7684 list \u6700\u540e\u6ca1\u6709\u88ab result \u6536\u8fdb\u53bb\uff0c\u9012\u5f52\u8d70\u5230\u5e95\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u628a\u5206\u5272\u6b21\u6570\u51cf\u5c11\uff0c\u5e76\u4e14\u628a IP \u6bb5\u79ef\u7d2f\u6062\u590d\u3002\n\n\n\u6211\u7684\u89e3\u7b54\n\n\n\u603b\u7ed3\n\n\n\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a1\u3001\u901a\u8fc7\u5b8c\u5584\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u5f0f\u6765\u53d1\u73b0\u4e00\u4e9b\u5751\uff1b2\u3001\u63d0\u4ea4\u7ed9 LeetCode \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u81ea\u5df1\u53ef\u80fd\u6ca1\u6709\u60f3\u5230\u7684\u60c5\u51b5\uff1b\n\n\n\u7b2c 1 \u904d\u5199\u51fa\u6765\u7684\u4ee3\u7801\u80af\u5b9a\u662f\u6709\u8bf8\u591a\u95ee\u9898\u7684\uff0c\u9700\u8981\u4e00\u4e9b\u8010\u5fc3\uff0c\u6253\u5370\u4e00\u4e9b\u8f93\u51fa\u8bed\u53e5\uff0c\u6765\u5206\u6790\u7a0b\u5e8f\u7684\u8d70\u5411\u3002\n\n\n\u6811\u5f62\u95ee\u9898\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\u7684\u4e00\u4e2a\u5957\u8def\u662f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u9012\u5f52\uff0c\u72b6\u6001\u5728\u9012\u5f52\u524d\u540e\u8fdb\u884c\u6062\u590d\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// https://leetcode-cn.com/problems/restore-ip-addresses/description/\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n\n    private boolean judgeIfIPSegment(String ipSegment) {\n        int len = ipSegment.length();\n        // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934\n        if (len > 1 && ipSegment.startsWith(\"0\")) {\n            return false;\n        }\n        return Integer.parseInt(ipSegment) <= 255;\n    }\n\n    private void findIpSegment(String s, int split, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (split == 4) {\n            if (begin == s.length()) {\n                res.add(pre.substring(0, pre.length() - 1));\n            }\n            return;\n        }\n        // split < 4 \u7684\u65f6\u5019\n        // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565\n        for (int i = 1; i <= 3 && begin + i <= s.length(); i++) {\n            // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32\n            String ifIpSegment = s.substring(begin, begin + i);\n            if (judgeIfIPSegment(ifIpSegment)) {\n                findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.');\n            }\n        }\n\n    }\n\n    public List<String> restoreIpAddresses(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return res;\n        }\n        findIpSegment(s, 0, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"25525511135\";\n        Solution solution = new Solution();\n        List<String> restoreIpAddresses = solution.restoreIpAddresses(s);\n        System.out.println(restoreIpAddresses);\n    }\n}",
            "title": "93. Restore IP Addresses"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#93-restore-ip-addresses",
            "text": "",
            "title": "93. Restore IP Addresses"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 93. Restore IP Addresses   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 93. \u590d\u539fIP\u5730\u5740   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002  1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b\n2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b\n3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_3",
            "text": "\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u52a0\u4e0a\u4e09\u4e2a\u70b9\uff08.\uff09\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684IP\u5730\u5740\uff0c\u8fd4\u56de\u6240\u6709\u7684\u5408\u6cd5\u7684 IP \u5730\u5740\u3002",
            "title": "\u9898\u76ee\u5927\u610f"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_4",
            "text": "\u5982\u7ed9\u5b9a\u5b57\u7b26\u4e32 \"25525511135\",  \u8fd4\u56de [\"255.255.11.135\", \"255.255.111.35\"]   \u6211\u4eec\u518d\u60f3\u60f3\uff0c\u6211\u4eec\u9012\u5f52\u5230\u5e95\uff0c\u65e0\u975e\u5c31\u662f\u7ed9\u4e00\u4e32\u6570\u5b57\u52a0\u4e0a\u4e09\u4e2a\".\"\uff0c\u4e0d\u7ba1\u80fd\u4e0d\u80fd\u6210\u4e3a IP \uff0c\u5206\u5272\u6b21\u6570\u589e\u52a0\u548c\u4e4b\u524d\u7684 IP \u6bb5\u79ef\u7d2f\u6211\u4eec\u90fd\u6709\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u6210\u4e3a IP \u5730\u5740\u7684 list \u6700\u540e\u6ca1\u6709\u88ab result \u6536\u8fdb\u53bb\uff0c\u9012\u5f52\u8d70\u5230\u5e95\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u628a\u5206\u5272\u6b21\u6570\u51cf\u5c11\uff0c\u5e76\u4e14\u628a IP \u6bb5\u79ef\u7d2f\u6062\u590d\u3002",
            "title": "\u8865\u5145\u8bf4\u660e"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_5",
            "text": "",
            "title": "\u6211\u7684\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_6",
            "text": "\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a1\u3001\u901a\u8fc7\u5b8c\u5584\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u5f0f\u6765\u53d1\u73b0\u4e00\u4e9b\u5751\uff1b2\u3001\u63d0\u4ea4\u7ed9 LeetCode \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u81ea\u5df1\u53ef\u80fd\u6ca1\u6709\u60f3\u5230\u7684\u60c5\u51b5\uff1b  \u7b2c 1 \u904d\u5199\u51fa\u6765\u7684\u4ee3\u7801\u80af\u5b9a\u662f\u6709\u8bf8\u591a\u95ee\u9898\u7684\uff0c\u9700\u8981\u4e00\u4e9b\u8010\u5fc3\uff0c\u6253\u5370\u4e00\u4e9b\u8f93\u51fa\u8bed\u53e5\uff0c\u6765\u5206\u6790\u7a0b\u5e8f\u7684\u8d70\u5411\u3002  \u6811\u5f62\u95ee\u9898\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\u7684\u4e00\u4e2a\u5957\u8def\u662f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u9012\u5f52\uff0c\u72b6\u6001\u5728\u9012\u5f52\u524d\u540e\u8fdb\u884c\u6062\u590d\u3002",
            "title": "\u603b\u7ed3"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#_7",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0093-restore-ip-addresses/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\n// https://leetcode-cn.com/problems/restore-ip-addresses/description/\npublic class Solution {\n\n    private List<String> res = new ArrayList<>();\n\n    private boolean judgeIfIPSegment(String ipSegment) {\n        int len = ipSegment.length();\n        // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934\n        if (len > 1 && ipSegment.startsWith(\"0\")) {\n            return false;\n        }\n        return Integer.parseInt(ipSegment) <= 255;\n    }\n\n    private void findIpSegment(String s, int split, int begin, String pre) {\n        // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (split == 4) {\n            if (begin == s.length()) {\n                res.add(pre.substring(0, pre.length() - 1));\n            }\n            return;\n        }\n        // split < 4 \u7684\u65f6\u5019\n        // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565\n        for (int i = 1; i <= 3 && begin + i <= s.length(); i++) {\n            // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32\n            String ifIpSegment = s.substring(begin, begin + i);\n            if (judgeIfIPSegment(ifIpSegment)) {\n                findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.');\n            }\n        }\n\n    }\n\n    public List<String> restoreIpAddresses(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return res;\n        }\n        findIpSegment(s, 0, 0, \"\");\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String s = \"25525511135\";\n        Solution solution = new Solution();\n        List<String> restoreIpAddresses = solution.restoreIpAddresses(s);\n        System.out.println(restoreIpAddresses);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/",
            "text": "94. Binary Tree Inorder Traversal\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684\n\u4e2d\u5e8f\u00a0\n\u904d\u5386\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n\n\u8f93\u51fa:\n [1,3,2]\n\n\n\u8fdb\u9636:\n\u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n94. Binary Tree Inorder Traversal\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u904d\u5386\u3002\n\n\nJava \u5b9e\u73b0\uff1a\n\n\npublic class Solution2 {\n\n    private List<Integer> result = new ArrayList<>();\n\n    public List<Integer> inorderTraversal(TreeNode root) {\n        inorder(root);\n        return result;\n    }\n\n    private void inorder(TreeNode root) {\n        if (root != null) {\n            inorder(root.left);\n            result.add(root.val);\n            inorder(root.right);\n        }\n    }\n}\n\n\n\n\nPython \u5b9e\u73b0\uff1a\n\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n\n    # \u9012\u5f52\u89e3\u6cd5\n\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n        res = []\n        self.__helper(root, res)\n        return res\n\n    def __helper(self, node, res):\n        if node is None:\n            return\n\n        self.__helper(node.left, res)\n        res.append(node.val)\n        self.__helper(node.right, res)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u975e\u9012\u5f52\uff0c\u501f\u52a9\u6808\u5b8c\u6210\u904d\u5386\u3002\n\n\nPython \u5b9e\u73b0\uff1a\n\n\nclass Solution(object):\n\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        while root or stack:\n            # \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u7ed3\u70b9\u4e0d\u662f\u7a7a\u7ed3\u70b9\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                node = stack.pop()\n                res.append(node.val)\n                root = node.right\n        return res\n\n\n\n\nPython \u5b9e\u73b0\uff1a\n\n\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                node = node.left\n\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n        return res\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\n\n\nJava \u5b9e\u73b0\uff1a\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nenum UseType {\n    RECURSION,\n    ADD\n}\n\nclass Command {\n    UseType useType;\n    TreeNode treeNode;\n\n    Command(UseType useType, TreeNode treeNode) {\n        this.useType = useType;\n        this.treeNode = treeNode;\n    }\n}\n\n/**\n * \u4ec0\u4e48\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u8282\u70b9\n * \u5728\u5904\u7406\u81ea\u5df1\n * \u7136\u540e\u518d\u9012\u5f52\u904d\u5386\u53f3\u5b50\u8282\u70b9\n */\npublic class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Stack<Command> stack = new Stack<>();\n        stack.push(new Command(UseType.RECURSION, root));\n\n        while (!stack.isEmpty()) {\n            Command command = stack.pop();\n            if (UseType.ADD == command.useType) {\n                result.add(command.treeNode.val);\n            } else {\n                assert UseType.RECURSION == command.useType;\n                if (command.treeNode.right != null) {\n                    stack.push(new Command(UseType.RECURSION, command.treeNode.right));\n                }\n                stack.push(new Command(UseType.ADD, command.treeNode));\n                if (command.treeNode.left != null) {\n                    stack.push(new Command(UseType.RECURSION, command.treeNode.left));\n                }\n            }\n\n        }\n        return result;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0094-binary-tree-inorder-traversal\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "94. Binary Tree Inorder Traversal"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#94-binary-tree-inorder-traversal",
            "text": "",
            "title": "94. Binary Tree Inorder Traversal"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u4e2d\u5e8f\u00a0 \u904d\u5386\u3002  \u793a\u4f8b:  \u8f93\u5165:  [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3 \u8f93\u51fa:  [1,3,2]  \u8fdb\u9636: \u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 94. Binary Tree Inorder Traversal   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#1",
            "text": "Java \u5b9e\u73b0\uff1a  public class Solution2 {\n\n    private List<Integer> result = new ArrayList<>();\n\n    public List<Integer> inorderTraversal(TreeNode root) {\n        inorder(root);\n        return result;\n    }\n\n    private void inorder(TreeNode root) {\n        if (root != null) {\n            inorder(root.left);\n            result.add(root.val);\n            inorder(root.right);\n        }\n    }\n}  Python \u5b9e\u73b0\uff1a  # Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n\n    # \u9012\u5f52\u89e3\u6cd5\n\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n        res = []\n        self.__helper(root, res)\n        return res\n\n    def __helper(self, node, res):\n        if node is None:\n            return\n\n        self.__helper(node.left, res)\n        res.append(node.val)\n        self.__helper(node.right, res)",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u904d\u5386\u3002"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#2",
            "text": "Python \u5b9e\u73b0\uff1a  class Solution(object):\n\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        while root or stack:\n            # \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u7ed3\u70b9\u4e0d\u662f\u7a7a\u7ed3\u70b9\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                node = stack.pop()\n                res.append(node.val)\n                root = node.right\n        return res  Python \u5b9e\u73b0\uff1a  class Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                node = node.left\n\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n        return res",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u975e\u9012\u5f52\uff0c\u501f\u52a9\u6808\u5b8c\u6210\u904d\u5386\u3002"
        },
        {
            "location": "/leetcode-0094-binary-tree-inorder-traversal/#3",
            "text": "Java \u5b9e\u73b0\uff1a  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nenum UseType {\n    RECURSION,\n    ADD\n}\n\nclass Command {\n    UseType useType;\n    TreeNode treeNode;\n\n    Command(UseType useType, TreeNode treeNode) {\n        this.useType = useType;\n        this.treeNode = treeNode;\n    }\n}\n\n/**\n * \u4ec0\u4e48\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u8282\u70b9\n * \u5728\u5904\u7406\u81ea\u5df1\n * \u7136\u540e\u518d\u9012\u5f52\u904d\u5386\u53f3\u5b50\u8282\u70b9\n */\npublic class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Stack<Command> stack = new Stack<>();\n        stack.push(new Command(UseType.RECURSION, root));\n\n        while (!stack.isEmpty()) {\n            Command command = stack.pop();\n            if (UseType.ADD == command.useType) {\n                result.add(command.treeNode.val);\n            } else {\n                assert UseType.RECURSION == command.useType;\n                if (command.treeNode.right != null) {\n                    stack.push(new Command(UseType.RECURSION, command.treeNode.right));\n                }\n                stack.push(new Command(UseType.ADD, command.treeNode));\n                if (command.treeNode.left != null) {\n                    stack.push(new Command(UseType.RECURSION, command.treeNode.left));\n                }\n            }\n\n        }\n        return result;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0094-binary-tree-inorder-traversal  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/",
            "text": "95. Unique Binary Search Trees II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 \nn\n\uff0c\u751f\u6210\u6240\u6709\u7531 1 ...\u00a0\nn\n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684\n\u4e8c\u53c9\u641c\u7d22\u6811\n\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n 3\n\n\u8f93\u51fa:\n\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\n\n\u89e3\u91ca:\n\n\u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n95. Unique Binary Search Trees II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u5f53\u524d\u7684\u9012\u5f52\u4e2d\uff0c\u5047\u8bbe \nroot\n\u4e3a \ni\n\u3002\n\u90a3\u4e48\u5de6\u5b50\u6811\u662f\u7531 \n[1, i - 1]\n \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u53f3\u5b50\u6811\u662f\u7531 \n[i + 1, n]\n \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u3002\n\u53ef\u4ee5\u7edf\u4e00\u8bb0\u5f55\u4e3a\u7528 \n[start, end]\n \u53bb\u6784\u5efa\u4e00\u68f5\u6811\u3002\n\u5728\u6709\u4e86\u5de6\u5b50\u6811\u3001\u6839\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u5f88\u5bb9\u6613\u8ba1\u7b97\u5f97\u51fa\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u7684\u6811\u3002\u8bb0\u5f55 root \u5230\u4e00\u4e2a vector \u4e2d\u5c31\u53ef\u4ee5\u5b8c\u6574\u5730\u8bb0\u5f55\u6240\u6709\u7ed3\u679c\uff0c\u8fd4\u56de\u7ed3\u679c\u5373\u53ef\u3002\n\n\n1\u3001\u9012\u5f52\u6bcf\u6b21\u90fd\u8fd4\u56de\u4e00\u5806\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7ed3\u70b9\u3002\n\u5f53\u9012\u5f52\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a\u591a\u4e2a\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7ed3\u679c\u6253\u5305\u653e\u5165\u4e00\u4e2a vector\uff08\u5217\u8868\uff09\u4e2d\u3002\n2\u3001\u662f\u5178\u578b\u7684 DFS \u9898\u76ee\u3002 \n\n\n\u6613\u9519\u70b9\u5728\u4e8e\uff0cn = 0 \u65f6\uff0c\u6211\u4eec\u5bf9\u5c5e\u4e8e\u5b83\u7684\u94fe\u8868 res[0] \u4e5f\u8981\u52a0\u5165\u7ed3\u70b9 null \uff0c\u5426\u5219\u5982\u679c\u5de6\u5b50\u6811\u9700\u8981 n = 0 \u7684\u89e3\u96c6\uff0c\u800c\u94fe\u8868\u4e3a\u7a7a\uff0c\n\u5219\u4f1a\u76f4\u63a5\u8df3\u8fc7\u91cc\u9762\u5bf9\u53f3\u5b50\u6811\u7684\u8bbf\u95ee\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u5165\u4e00\u884c \nres[0].add(null);\n \u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * \u5178\u578b\u7684\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\n */\npublic class Solution {\n\n    public List<TreeNode> generateTrees(int n) {\n        List<TreeNode> res = new ArrayList<>();\n        if (n <= 0) {\n            return res;\n        }\n        return generateTrees(1, n);\n    }\n\n    private List<TreeNode> generateTrees(int start, int end) {\n        List<TreeNode> res = new ArrayList<>();\n        if (start > end) {\n            // \u4e0a\u5c42\u8c03\u7528\u7684\u65b9\u6cd5\u987b\u8981\u8fd9\u4e2a\u7a7a\u7ed3\u70b9\u4f5c\u4e3a\u5176\u5de6\u7ed3\u70b9\u6216\u8005\u53f3\u8282\u70b9\n            res.add(null);\n            return res;\n        } else if (start == end) {\n            // \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\u8fd4\u56de\u5373\u53ef\n            // \u8fd9\u4e00\u6b65\u53ef\u4ee5\u5305\u62ec\u5230\u4e0b\u9762\u4e00\u4e2a\u60c5\u51b5\u4e2d\n            res.add(new TreeNode(start));\n            return res;\n        } else {\n            for (int i = start; i <= end; i++) {\n                List<TreeNode> leftList = generateTrees(start, i - 1);\n                List<TreeNode> rightList = generateTrees(i + 1, end);\n                for (TreeNode l : leftList) {\n                    for (TreeNode r : rightList) {\n                        TreeNode root = new TreeNode(i);\n                        root.left = l;\n                        root.right = r;\n                        res.add(root);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0095-unique-binary-search-trees-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "95. Unique Binary Search Trees II"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/#95-unique-binary-search-trees-ii",
            "text": "",
            "title": "95. Unique Binary Search Trees II"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570  n \uff0c\u751f\u6210\u6240\u6709\u7531 1 ...\u00a0 n  \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u3002  \u793a\u4f8b:  \u8f93\u5165:  3 \u8f93\u51fa: \n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n] \u89e3\u91ca: \n\u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 95. Unique Binary Search Trees II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u5f53\u524d\u7684\u9012\u5f52\u4e2d\uff0c\u5047\u8bbe  root \u4e3a  i \u3002\n\u90a3\u4e48\u5de6\u5b50\u6811\u662f\u7531  [1, i - 1]  \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u53f3\u5b50\u6811\u662f\u7531  [i + 1, n]  \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u3002\n\u53ef\u4ee5\u7edf\u4e00\u8bb0\u5f55\u4e3a\u7528  [start, end]  \u53bb\u6784\u5efa\u4e00\u68f5\u6811\u3002\n\u5728\u6709\u4e86\u5de6\u5b50\u6811\u3001\u6839\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u5f88\u5bb9\u6613\u8ba1\u7b97\u5f97\u51fa\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u7684\u6811\u3002\u8bb0\u5f55 root \u5230\u4e00\u4e2a vector \u4e2d\u5c31\u53ef\u4ee5\u5b8c\u6574\u5730\u8bb0\u5f55\u6240\u6709\u7ed3\u679c\uff0c\u8fd4\u56de\u7ed3\u679c\u5373\u53ef\u3002  1\u3001\u9012\u5f52\u6bcf\u6b21\u90fd\u8fd4\u56de\u4e00\u5806\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7ed3\u70b9\u3002\n\u5f53\u9012\u5f52\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a\u591a\u4e2a\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7ed3\u679c\u6253\u5305\u653e\u5165\u4e00\u4e2a vector\uff08\u5217\u8868\uff09\u4e2d\u3002\n2\u3001\u662f\u5178\u578b\u7684 DFS \u9898\u76ee\u3002   \u6613\u9519\u70b9\u5728\u4e8e\uff0cn = 0 \u65f6\uff0c\u6211\u4eec\u5bf9\u5c5e\u4e8e\u5b83\u7684\u94fe\u8868 res[0] \u4e5f\u8981\u52a0\u5165\u7ed3\u70b9 null \uff0c\u5426\u5219\u5982\u679c\u5de6\u5b50\u6811\u9700\u8981 n = 0 \u7684\u89e3\u96c6\uff0c\u800c\u94fe\u8868\u4e3a\u7a7a\uff0c\n\u5219\u4f1a\u76f4\u63a5\u8df3\u8fc7\u91cc\u9762\u5bf9\u53f3\u5b50\u6811\u7684\u8bbf\u95ee\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u5165\u4e00\u884c  res[0].add(null);  \u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0095-unique-binary-search-trees-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * \u5178\u578b\u7684\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\n */\npublic class Solution {\n\n    public List<TreeNode> generateTrees(int n) {\n        List<TreeNode> res = new ArrayList<>();\n        if (n <= 0) {\n            return res;\n        }\n        return generateTrees(1, n);\n    }\n\n    private List<TreeNode> generateTrees(int start, int end) {\n        List<TreeNode> res = new ArrayList<>();\n        if (start > end) {\n            // \u4e0a\u5c42\u8c03\u7528\u7684\u65b9\u6cd5\u987b\u8981\u8fd9\u4e2a\u7a7a\u7ed3\u70b9\u4f5c\u4e3a\u5176\u5de6\u7ed3\u70b9\u6216\u8005\u53f3\u8282\u70b9\n            res.add(null);\n            return res;\n        } else if (start == end) {\n            // \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\u8fd4\u56de\u5373\u53ef\n            // \u8fd9\u4e00\u6b65\u53ef\u4ee5\u5305\u62ec\u5230\u4e0b\u9762\u4e00\u4e2a\u60c5\u51b5\u4e2d\n            res.add(new TreeNode(start));\n            return res;\n        } else {\n            for (int i = start; i <= end; i++) {\n                List<TreeNode> leftList = generateTrees(start, i - 1);\n                List<TreeNode> rightList = generateTrees(i + 1, end);\n                for (TreeNode l : leftList) {\n                    for (TreeNode r : rightList) {\n                        TreeNode root = new TreeNode(i);\n                        root.left = l;\n                        root.right = r;\n                        res.add(root);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0095-unique-binary-search-trees-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/",
            "text": "96. Unique Binary Search Trees\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 \nn\n\uff0c\u6c42\u4ee5\u00a01 ...\u00a0\nn\n\u00a0\u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n 3\n\n\u8f93\u51fa:\n 5\n\n\u89e3\u91ca:\n\n\u7ed9\u5b9a \nn\n = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n96. Unique Binary Search Trees\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution2 {\n\n    // \u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u7528\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\n    // \u56e0\u4e3a\u6709\u5927\u91cf\u91cd\u590d\u5b50\u95ee\u9898\n\n    // base case \u662f\uff0c\u5f53 n = 0 \u6216\u8005 n = 1 \u65f6\uff0c\u663e\u7136 BST \u6570\u91cf\u53ea\u80fd\u6709 1 \u4e2a\u3002\n\n    // \u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\n    private int[] memo;\n\n    public int numTrees(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        memo = new int[n + 1];\n        memo[0] = 1;\n        memo[1] = 1;\n        return helper(n);\n    }\n\n    private int helper(int n) {\n        if (memo[n] != 0) {\n            return memo[n];\n        }\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += helper(i - 1) * helper(n - i);\n        }\n        memo[n] = sum;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int n = 3;\n        int numTrees = solution2.numTrees(n);\n        System.out.println(numTrees);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0096-unique-binary-search-trees\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "96. Unique Binary Search Trees"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/#96-unique-binary-search-trees",
            "text": "",
            "title": "96. Unique Binary Search Trees"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570  n \uff0c\u6c42\u4ee5\u00a01 ...\u00a0 n \u00a0\u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f  \u793a\u4f8b:  \u8f93\u5165:  3 \u8f93\u51fa:  5 \u89e3\u91ca: \u7ed9\u5b9a  n  = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 96. Unique Binary Search Trees   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0096-unique-binary-search-trees/#1",
            "text": "public class Solution2 {\n\n    // \u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u7528\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\n    // \u56e0\u4e3a\u6709\u5927\u91cf\u91cd\u590d\u5b50\u95ee\u9898\n\n    // base case \u662f\uff0c\u5f53 n = 0 \u6216\u8005 n = 1 \u65f6\uff0c\u663e\u7136 BST \u6570\u91cf\u53ea\u80fd\u6709 1 \u4e2a\u3002\n\n    // \u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58\n    private int[] memo;\n\n    public int numTrees(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        memo = new int[n + 1];\n        memo[0] = 1;\n        memo[1] = 1;\n        return helper(n);\n    }\n\n    private int helper(int n) {\n        if (memo[n] != 0) {\n            return memo[n];\n        }\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += helper(i - 1) * helper(n - i);\n        }\n        memo[n] = sum;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int n = 3;\n        int numTrees = solution2.numTrees(n);\n        System.out.println(numTrees);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0096-unique-binary-search-trees  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/",
            "text": "98. Validate Binary Search Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\n\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a\n\n\n\n\n\u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\n\u5c0f\u4e8e\n\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002\n\n\n\u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\n\u5927\u4e8e\n\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002\n\n\n\u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n\n    2\n   / \\\n  1   3\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n\n    5\n   / \\\n  1   4\n\u00a0    / \\\n\u00a0   3   6\n\n\u8f93\u51fa:\n false\n\n\u89e3\u91ca:\n \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002\n\u00a0    \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n98. Validate Binary Search Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7ecf\u8fc7\u4e2d\u5e8f\u904d\u5386\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        ArrayList<Integer> list = new ArrayList<>();\n        inOrder(root, list);\n        int len = list.size();\n        for (int i = 0; i < len - 1; i++) {\n            if (list.get(i) >= list.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void inOrder(TreeNode treeNode, ArrayList<Integer> list) {\n        if (treeNode == null) {\n            return;\n        }\n        inOrder(treeNode.left, list);\n        list.add(treeNode.val);\n        inOrder(treeNode.right, list);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0098-validate-binary-search-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "98. Validate Binary Search Tree"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/#98-validate-binary-search-tree",
            "text": "",
            "title": "98. Validate Binary Search Tree"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002  \u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a   \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b \u5c0f\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002  \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b \u5927\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002  \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002   \u793a\u4f8b\u00a01:  \u8f93\u5165: \n    2\n   / \\\n  1   3 \u8f93\u51fa:  true  \u793a\u4f8b\u00a02:  \u8f93\u5165:     5\n   / \\\n  1   4\n\u00a0    / \\\n\u00a0   3   6 \u8f93\u51fa:  false \u89e3\u91ca:  \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002\n\u00a0    \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 98. Validate Binary Search Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7ecf\u8fc7\u4e2d\u5e8f\u904d\u5386\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0098-validate-binary-search-tree/#1",
            "text": "import java.util.ArrayList;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        ArrayList<Integer> list = new ArrayList<>();\n        inOrder(root, list);\n        int len = list.size();\n        for (int i = 0; i < len - 1; i++) {\n            if (list.get(i) >= list.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void inOrder(TreeNode treeNode, ArrayList<Integer> list) {\n        if (treeNode == null) {\n            return;\n        }\n        inOrder(treeNode.left, list);\n        list.add(treeNode.val);\n        inOrder(treeNode.right, list);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0098-validate-binary-search-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0100-same-tree/",
            "text": "100. Same Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n100. Same Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n100. \u76f8\u540c\u7684\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019\n        if (p == null && q == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false\n        if (p == null || q == null || p.val != q.val) {\n            return false;\n        }\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}",
            "title": "100. Same Tree"
        },
        {
            "location": "/leetcode-0100-same-tree/#100-same-tree",
            "text": "",
            "title": "100. Same Tree"
        },
        {
            "location": "/leetcode-0100-same-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 100. Same Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 100. \u76f8\u540c\u7684\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0100-same-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0100-same-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0100-same-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019\n        if (p == null && q == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false\n        if (p == null || q == null || p.val != q.val) {\n            return false;\n        }\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/",
            "text": "101. Symmetric Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n101. Symmetric Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n101. \u5bf9\u79f0\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002\n\n\n\u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002\n\n\n\u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684 \ncopyBinaryTree\n \u65b9\u6cd5\u3002\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        TreeNode copyBinaryTree = copyBinaryTree(root);\n        TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree);\n        return isSameTree(root, invertBinaryTree);\n    }\n\n    private boolean isSameTree(TreeNode t1, TreeNode t2) {\n        if (t1 == null && t2 == null) {\n            return true;\n        }\n        if (t1 == null || t2 == null || t1.val != t2.val) {\n            return false;\n        }\n        return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right);\n    }\n\n    private TreeNode invertBinaryTree(TreeNode node) {\n        if (node == null) {\n            return node;\n        }\n        invertBinaryTree(node.left);\n        invertBinaryTree(node.right);\n        TreeNode temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n        return node;\n    }\n\n    // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09\n    private TreeNode copyBinaryTree(TreeNode node) {\n        if (node == null) {\n            return null;\n        }\n        TreeNode newTreeNode = new TreeNode(node.val);\n        newTreeNode.left = copyBinaryTree(node.left);\n        newTreeNode.right = copyBinaryTree(node.right);\n        return newTreeNode;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\npublic class Solution {\n\n    // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86\n    private boolean isSymmetric(TreeNode p1, TreeNode p2) {\n        // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49\n        if (p1 == null && p2 == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree\n        if (p1 == null || p2 == null || p1.val != p2.val) {\n            return false;\n        }\n        // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9\n        // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9\n        return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left);\n    }\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return isSymmetric(root.left, root.right);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\n\n\n\u53c2\u8003\u8d44\u6599\uff1a\n\n\nimport java.util.LinkedList;\n\n// https://leetcode-cn.com/problems/symmetric-tree/description/\npublic class Solution3 {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        LinkedList<TreeNode> linkedList = new LinkedList<>();\n        linkedList.addFirst(root.left);\n        linkedList.addLast(root.right);\n        while (!linkedList.isEmpty()) {\n            // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f\n            TreeNode lNode = linkedList.removeFirst();\n            TreeNode rNode = linkedList.removeLast();\n            if (lNode == null && rNode == null) {\n                continue;\n            }\n            if (lNode == null || rNode == null) {\n                return false;\n            }\n            linkedList.addFirst(lNode.right);\n            linkedList.addFirst(lNode.left);\n            linkedList.addLast(rNode.left);\n            linkedList.addLast(rNode.right);\n\n            if (lNode.val != rNode.val) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "title": "101. Symmetric Tree"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#101-symmetric-tree",
            "text": "",
            "title": "101. Symmetric Tree"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 101. Symmetric Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 101. \u5bf9\u79f0\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a   \u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002  \u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002  \u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#1",
            "text": "\u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684  copyBinaryTree  \u65b9\u6cd5\u3002  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        TreeNode copyBinaryTree = copyBinaryTree(root);\n        TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree);\n        return isSameTree(root, invertBinaryTree);\n    }\n\n    private boolean isSameTree(TreeNode t1, TreeNode t2) {\n        if (t1 == null && t2 == null) {\n            return true;\n        }\n        if (t1 == null || t2 == null || t1.val != t2.val) {\n            return false;\n        }\n        return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right);\n    }\n\n    private TreeNode invertBinaryTree(TreeNode node) {\n        if (node == null) {\n            return node;\n        }\n        invertBinaryTree(node.left);\n        invertBinaryTree(node.right);\n        TreeNode temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n        return node;\n    }\n\n    // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09\n    private TreeNode copyBinaryTree(TreeNode node) {\n        if (node == null) {\n            return null;\n        }\n        TreeNode newTreeNode = new TreeNode(node.val);\n        newTreeNode.left = copyBinaryTree(node.left);\n        newTreeNode.right = copyBinaryTree(node.right);\n        return newTreeNode;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#2",
            "text": "public class Solution {\n\n    // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86\n    private boolean isSymmetric(TreeNode p1, TreeNode p2) {\n        // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49\n        if (p1 == null && p2 == null) {\n            return true;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree\n        if (p1 == null || p2 == null || p1.val != p2.val) {\n            return false;\n        }\n        // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9\n        // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9\n        return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left);\n    }\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return isSymmetric(root.left, root.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0101-symmetric-tree/#3",
            "text": "\u53c2\u8003\u8d44\u6599\uff1a  import java.util.LinkedList;\n\n// https://leetcode-cn.com/problems/symmetric-tree/description/\npublic class Solution3 {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        LinkedList<TreeNode> linkedList = new LinkedList<>();\n        linkedList.addFirst(root.left);\n        linkedList.addLast(root.right);\n        while (!linkedList.isEmpty()) {\n            // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f\n            TreeNode lNode = linkedList.removeFirst();\n            TreeNode rNode = linkedList.removeLast();\n            if (lNode == null && rNode == null) {\n                continue;\n            }\n            if (lNode == null || rNode == null) {\n                return false;\n            }\n            linkedList.addFirst(lNode.right);\n            linkedList.addFirst(lNode.left);\n            linkedList.addLast(rNode.left);\n            linkedList.addLast(rNode.right);\n\n            if (lNode.val != rNode.val) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/",
            "text": "104. Maximum Depth of Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n104. Maximum Depth of Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n\n}",
            "title": "104. Maximum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#104-maximum-depth-of-binary-tree",
            "text": "",
            "title": "104. Maximum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 104. Maximum Depth of Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0104-maximum-depth-of-binary-tree/#1",
            "text": "public class Solution {\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/",
            "text": "105. Construct Binary Tree from Preorder and Inorder Traversal\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002\n\n\n\u6ce8\u610f:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u51fa\n\n\n\u524d\u5e8f\u904d\u5386 preorder =\u00a0[3,9,20,15,7]\n\u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7]\n\n\n\u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a\n\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n105. Construct Binary Tree from Preorder and Inorder Traversal\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        int preLen = preorder.length;\n        int inLen = inorder.length;\n        return helper(preorder, 0, preLen - 1, inorder, 0, inLen - 1);\n    }\n\n\n    private TreeNode helper(int[] preorder,\n                            int preL, int preR,\n                            int[] inorder,\n                            int inL, int inR) {\n        if (preL > preR || inL > inR) {\n            return null;\n        }\n        int rootVal = preorder[preL];\n        int l = inL;\n        while (l <= inR && inorder[l] != rootVal) {\n            l++;\n        }\n        TreeNode root = new TreeNode(rootVal);\n        root.left = helper(preorder, preL + 1, preL + l - inL, inorder, inL, l - 1);\n        root.right = helper(preorder, preL + l - inL + 1, preR, inorder, l + 1, inR);\n        return root;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "105. Construct Binary Tree from Preorder and Inorder Traversal"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#105-construct-binary-tree-from-preorder-and-inorder-traversal",
            "text": "",
            "title": "105. Construct Binary Tree from Preorder and Inorder Traversal"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002  \u6ce8\u610f: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002  \u4f8b\u5982\uff0c\u7ed9\u51fa  \u524d\u5e8f\u904d\u5386 preorder =\u00a0[3,9,20,15,7]\n\u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7]  \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a      3\n   / \\\n  9  20\n    /  \\\n   15   7    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 105. Construct Binary Tree from Preorder and Inorder Traversal   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        int preLen = preorder.length;\n        int inLen = inorder.length;\n        return helper(preorder, 0, preLen - 1, inorder, 0, inLen - 1);\n    }\n\n\n    private TreeNode helper(int[] preorder,\n                            int preL, int preR,\n                            int[] inorder,\n                            int inL, int inR) {\n        if (preL > preR || inL > inR) {\n            return null;\n        }\n        int rootVal = preorder[preL];\n        int l = inL;\n        while (l <= inR && inorder[l] != rootVal) {\n            l++;\n        }\n        TreeNode root = new TreeNode(rootVal);\n        root.left = helper(preorder, preL + 1, preL + l - inL, inorder, inL, l - 1);\n        root.right = helper(preorder, preL + l - inL + 1, preR, inorder, l + 1, inR);\n        return root;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/",
            "text": "109. Convert Sorted List to Binary Search Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\n\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811\n\u6bcf\u4e2a\u8282\u70b9\u00a0\n\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002\n\n\n\u793a\u4f8b:\n\n\n\u7ed9\u5b9a\u7684\u6709\u5e8f\u94fe\u8868\uff1a [-10, -3, 0, 5, 9],\n\n\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0, -3, 9, -10, null, 5], \u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n109. Convert Sorted List to Binary Search Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0109-convert-sorted-list-to-binary-search-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "109. Convert Sorted List to Binary Search Tree"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/#109-convert-sorted-list-to-binary-search-tree",
            "text": "",
            "title": "109. Convert Sorted List to Binary Search Tree"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002  \u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9\u00a0 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002  \u793a\u4f8b:  \u7ed9\u5b9a\u7684\u6709\u5e8f\u94fe\u8868\uff1a [-10, -3, 0, 5, 9],\n\n\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0, -3, 9, -10, null, 5], \u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 109. Convert Sorted List to Binary Search Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0109-convert-sorted-list-to-binary-search-tree/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0109-convert-sorted-list-to-binary-search-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/",
            "text": "110. Balanced Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002\n\n\n\u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a\n\n\n\n\n\u4e00\u4e2a\u4e8c\u53c9\u6811\n\u6bcf\u4e2a\u8282\u70b9\u00a0\n\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002\n\n\n\n\n\u793a\u4f8b 1:\n\n\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 \n[3,9,20,null,null,15,7]\n\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\u8fd4\u56de \ntrue\n \u3002\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 \n[1,2,2,3,3,null,null,4,4]\n\n\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n\n\n\n\u8fd4\u56de\u00a0\nfalse\n \u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n110. Balanced Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n110. \u5e73\u8861\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5148\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u518d\u8ba1\u7b97\u81ea\u5df1\u3002\n+ \u5982\u679c\u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u4e00\u76f4\u5c06\u4e0d\u5e73\u8861\u4fe1\u606f\uff08-1\uff09\u56de\u4f20\u5230\u6839\u7ed3\u70b9\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nclass Solution {\n\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return depth(root) != -1;\n    }\n\n    private int depth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = depth(root.left);\n        int right = depth(root.right);\n\n        if (left == -1 || right == -1 || Math.abs(left - right) > 1) {\n            return -1;\n        }\n        return Integer.max(left, right) + 1;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0110-balanced-binary-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "110. Balanced Binary Tree"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/#110-balanced-binary-tree",
            "text": "",
            "title": "110. Balanced Binary Tree"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002  \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a   \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9\u00a0 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002   \u793a\u4f8b 1:  \u7ed9\u5b9a\u4e8c\u53c9\u6811  [3,9,20,null,null,15,7]      3\n   / \\\n  9  20\n    /  \\\n   15   7  \u8fd4\u56de  true  \u3002   \u793a\u4f8b 2:  \u7ed9\u5b9a\u4e8c\u53c9\u6811  [1,2,2,3,3,null,null,4,4]         1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4  \u8fd4\u56de\u00a0 false  \u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 110. Balanced Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 110. \u5e73\u8861\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5148\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u518d\u8ba1\u7b97\u81ea\u5df1\u3002\n+ \u5982\u679c\u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u4e00\u76f4\u5c06\u4e0d\u5e73\u8861\u4fe1\u606f\uff08-1\uff09\u56de\u4f20\u5230\u6839\u7ed3\u70b9\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0110-balanced-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nclass Solution {\n\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return depth(root) != -1;\n    }\n\n    private int depth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = depth(root.left);\n        int right = depth(root.right);\n\n        if (left == -1 || right == -1 || Math.abs(left - right) > 1) {\n            return -1;\n        }\n        return Integer.max(left, right) + 1;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0110-balanced-binary-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/",
            "text": "111. Minimum Depth of Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n111. Minimum Depth of Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5\n        if (root.left == null || root.right == null) {\n            return Integer.max(minDepth(root.left), minDepth(root.right)) + 1;\n\n        }\n        return Integer.min(minDepth(root.left), minDepth(root.right)) + 1;\n    }\n}",
            "title": "111. Minimum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#111-minimum-depth-of-binary-tree",
            "text": "",
            "title": "111. Minimum Depth of Binary Tree"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 111. Minimum Depth of Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0111-minimum-depth-of-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5\n        if (root.left == null || root.right == null) {\n            return Integer.max(minDepth(root.left), minDepth(root.right)) + 1;\n\n        }\n        return Integer.min(minDepth(root.left), minDepth(root.right)) + 1;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/",
            "text": "113. Path Sum II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002\n\n\n\u8bf4\u660e:\n\u00a0\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u793a\u4f8b:\n\n\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c\u00a0\nsum = 22\n\uff0c\n\n\n              \n5\n\n             / \\\n            \n4\n   \n8\n\n           /   / \\\n          \n11\n  13  \n4\n\n         /  \\    / \\\n        7    \n2\n  \n5\n   1\n\n\n\n\u8fd4\u56de:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n113. Path Sum II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n113. \u8def\u5f84\u603b\u548c II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5b9e\u73b0\uff1a\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        // \u6839\u8282\u70b9\n        if (root.left == null && root.right == null) {\n            if (root.val == sum) {\n                List<Integer> temp1 = new ArrayList<>();\n                temp1.add(root.val);\n                result.add(temp1);\n                return result;\n            }\n        }\n        List<List<Integer>> leftLists = pathSum(root.left, sum - root.val);\n        mergeOneAndList(root, leftLists, result);\n        List<List<Integer>> rightLists = pathSum(root.right, sum - root.val);\n        mergeOneAndList(root, rightLists, result);\n        return result;\n    }\n\n    private void mergeOneAndList(TreeNode node, List<List<Integer>> listList, List<List<Integer>> result) {\n        for (int i = 0; i < listList.size(); i++) {\n            List<Integer> temp1 = new ArrayList<>();\n            temp1.add(node.val);\n            temp1.addAll(listList.get(i));\n            result.add(temp1);\n        }\n    }\n}\n\n\n\n\n\u9898\u540e\u603b\u7ed3\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5e76\u4e0d\u662f\u8ba9\u6211\u4eec\u771f\u6b63\u5730\u53bb\u505a\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u987b\u8981\u6211\u4eec\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\uff0c\u5bfb\u627e\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u3002\u5386\u53f2\u4e0a\u7c7b\u4f3c\u7684\u7ecf\u5178\u95ee\u9898\u6709\u6c49\u8bfa\u5854\u95ee\u9898\u548c\u516b\u7687\u540e\u95ee\u9898\u3002\n\n\n\u4f46\u662f\uff0c\u6211\u81ea\u5df1\u89c9\u5f97\uff0c\u6211\u7684\u89e3\u6cd5\uff0c\u5c24\u5176\u662f\u5728 \nmergeOneAndList()\n \u51fd\u6570\u7684\u90e8\u5206\u7a0d\u663e\u590d\u6742\u3002\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u79cd\u7b80\u6d01\u7684\u89e3\u6cd5\uff1a\u8fd9\u79cd\u89e3\u6cd5\u663e\u5f97\u66f4\u81ea\u7136\u4e00\u4e9b\uff0c\u904d\u5386\u4e86\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u7d2f\u52a0\u8ba1\u7b97\u52a0\u5230\u4e86\u591a\u5c11\uff0c\u8fd9\u662f\u4e0e\u8001\u5e08\u7684\u601d\u8def\u4e0d\u540c\u7684\u4e00\u79cd\u601d\u8def\u3002\n\n\npublic class Solution2 {\n\n    private List<List<Integer>> result = new ArrayList<>();\n\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n        getSum(root, new ArrayList<Integer>(), 0, sum);\n        return result;\n    }\n\n    private void getSum(TreeNode node, ArrayList<Integer> list, int current, int sum) {\n        if (node == null) {\n            return;\n        }\n        current += node.val;\n        list.add(node.val);\n        if (node.left == null && node.right == null) {\n            if (current == sum) {\n                result.add(list);\n            } else {\n                // \u4ec0\u4e48\u90fd\u4e0d\u505a\n                // \u5728\u8fd9\u91cc\u53ef\u4ee5\u628a\u4e0d\u6ee1\u8db3\u7684\u8282\u70b9\u90fd\u904d\u5386\u51fa\u6765\n                return;\n            }\n        }\n        if (node.left != null) {\n            getSum(node.left, new ArrayList<Integer>(), current, sum);\n        }\n        if (node.right != null) {\n            getSum(node.right, new ArrayList<Integer>(), current, sum);\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0113-path-sum-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "113. Path Sum II"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/#113-path-sum-ii",
            "text": "",
            "title": "113. Path Sum II"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002  \u8bf4\u660e: \u00a0\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u793a\u4f8b: \n\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c\u00a0 sum = 22 \uff0c                 5 \n             / \\\n             4     8 \n           /   / \\\n           11   13   4 \n         /  \\    / \\\n        7     2    5    1  \u8fd4\u56de:  [\n   [5,4,11,2],\n   [5,8,4,5]\n]    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 113. Path Sum II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 113. \u8def\u5f84\u603b\u548c II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0113-path-sum-ii/#1",
            "text": "Java \u5b9e\u73b0\uff1a  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        // \u6839\u8282\u70b9\n        if (root.left == null && root.right == null) {\n            if (root.val == sum) {\n                List<Integer> temp1 = new ArrayList<>();\n                temp1.add(root.val);\n                result.add(temp1);\n                return result;\n            }\n        }\n        List<List<Integer>> leftLists = pathSum(root.left, sum - root.val);\n        mergeOneAndList(root, leftLists, result);\n        List<List<Integer>> rightLists = pathSum(root.right, sum - root.val);\n        mergeOneAndList(root, rightLists, result);\n        return result;\n    }\n\n    private void mergeOneAndList(TreeNode node, List<List<Integer>> listList, List<List<Integer>> result) {\n        for (int i = 0; i < listList.size(); i++) {\n            List<Integer> temp1 = new ArrayList<>();\n            temp1.add(node.val);\n            temp1.addAll(listList.get(i));\n            result.add(temp1);\n        }\n    }\n}  \u9898\u540e\u603b\u7ed3\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5e76\u4e0d\u662f\u8ba9\u6211\u4eec\u771f\u6b63\u5730\u53bb\u505a\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u987b\u8981\u6211\u4eec\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\uff0c\u5bfb\u627e\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u3002\u5386\u53f2\u4e0a\u7c7b\u4f3c\u7684\u7ecf\u5178\u95ee\u9898\u6709\u6c49\u8bfa\u5854\u95ee\u9898\u548c\u516b\u7687\u540e\u95ee\u9898\u3002  \u4f46\u662f\uff0c\u6211\u81ea\u5df1\u89c9\u5f97\uff0c\u6211\u7684\u89e3\u6cd5\uff0c\u5c24\u5176\u662f\u5728  mergeOneAndList()  \u51fd\u6570\u7684\u90e8\u5206\u7a0d\u663e\u590d\u6742\u3002  \u4e0b\u9762\u7ed9\u51fa\u4e00\u79cd\u7b80\u6d01\u7684\u89e3\u6cd5\uff1a\u8fd9\u79cd\u89e3\u6cd5\u663e\u5f97\u66f4\u81ea\u7136\u4e00\u4e9b\uff0c\u904d\u5386\u4e86\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u7d2f\u52a0\u8ba1\u7b97\u52a0\u5230\u4e86\u591a\u5c11\uff0c\u8fd9\u662f\u4e0e\u8001\u5e08\u7684\u601d\u8def\u4e0d\u540c\u7684\u4e00\u79cd\u601d\u8def\u3002  public class Solution2 {\n\n    private List<List<Integer>> result = new ArrayList<>();\n\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n        getSum(root, new ArrayList<Integer>(), 0, sum);\n        return result;\n    }\n\n    private void getSum(TreeNode node, ArrayList<Integer> list, int current, int sum) {\n        if (node == null) {\n            return;\n        }\n        current += node.val;\n        list.add(node.val);\n        if (node.left == null && node.right == null) {\n            if (current == sum) {\n                result.add(list);\n            } else {\n                // \u4ec0\u4e48\u90fd\u4e0d\u505a\n                // \u5728\u8fd9\u91cc\u53ef\u4ee5\u628a\u4e0d\u6ee1\u8db3\u7684\u8282\u70b9\u90fd\u904d\u5386\u51fa\u6765\n                return;\n            }\n        }\n        if (node.left != null) {\n            getSum(node.left, new ArrayList<Integer>(), current, sum);\n        }\n        if (node.right != null) {\n            getSum(node.right, new ArrayList<Integer>(), current, sum);\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0113-path-sum-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/",
            "text": "121. Best Time to Buy and Sell Stock\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0\ni\n \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c \ni\n \u5929\u7684\u4ef7\u683c\u3002\n\n\n\u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\n\n\n\u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [7,1,5,3,6,4]\n\n\u8f93\u51fa:\n 5\n\n\u89e3\u91ca: \n\u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002\n     \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [7,6,4,3,1]\n\n\u8f93\u51fa:\n 0\n\n\u89e3\u91ca: \n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n121. Best Time to Buy and Sell Stock\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5728\u6700\u591a\u53ea\u5141\u8bb8\u4ea4\u6613\u4e00\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u51fa\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u6700\u5927\u5229\u6da6\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230\u80a1\u4ef7\u6700\u4f4e\u7684\u4e00\u5929\u4e70\u8fdb\uff0c\u7136\u540e\u5728\u80a1\u4ef7\u6700\u9ad8\u7684\u4e00\u5929\u5356\u51fa\u5373\u53ef\uff08\u5e76\u4e14\u8981\u6ee1\u8db3\u5148\u4e70\u540e\u5356\u7684\u89c4\u5219\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u7684\u6700\u5c0f\u503c\uff0c\u7528\u5f53\u524d\u503c\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u6700\u5927\u3002\n\n\n\u6211\u4eec\u5199\u51fa\u4e86\u53c2\u8003\u89e3\u7b54 1 \u4ee5\u540e\uff0c\u53d1\u73b0\u4e0b\u9762\u8fd9\u4e24\u884c\u4ee3\u7801\u7b2c 1 \u884c\u6c42\u6700\u5927\u503c\uff0c\u7b2c 2 \u884c\u6c42\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u80fd\u4e0d\u80fd\u628a\u5b83\u4eec\u7684\u7ed3\u6784\u7edf\u4e00\u8d77\u6765\u3002\n\n\nmaxProfit = Integer.max(maxProfit, prices[i] - preMinimum);\npreMinimum = Integer.min(preMinimum, prices[i]);\n\n\n\n\n\u6211\u4eec\u8981\u6c42\u5229\u6da6\u6700\u5927\u5316\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65b9\u5411\u662f\u628a \nmin\n \u6539\u6210 \nmax\n\uff0c\u5f88\u7b80\u5355\uff0c\u53d6\u4e2a\u8d1f\u53f7\u5c31\u884c\u4e86\u3002\u5176\u542b\u4e49\u4e5f\u5f88\u76f4\u89c2\uff0c \n0 - price\n \u5c31\u8868\u793a\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5047\u5982\u6211\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\u6211\u7684\u5229\u6da6\uff0c\u6211\u80af\u5b9a\u662f\u8fd8\u662f\u5e0c\u671b\u6211\u7684\u5229\u6da6\u8d8a\u6765\u8d8a\u5927\u3002\n\n\n\u800c\u6211\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u503c\u662f\u548c\u4e70\u64cd\u4f5c\u76f8\u5173\u7684\uff0c\u5f88\u5bb9\u6613\u6211\u4eec\u5c31\u5199\u51fa\u4e86\u4e0b\u9762\u7684\u4e24\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4ece\u7d22\u5f15\u4e3a 0 \u5f00\u59cb\u3002\u63a5\u4e0b\u6765\u8bbe\u7f6e\u521d\u59cb\u503c\u5c31\u6bd4\u8f83\u5173\u952e\u4e86\uff0c\u5982\u679c\u6211\u662f\u4e70\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e00\u76f4\u5356\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u662f\u6574\u6570\u7684\u6700\u5c0f\u503c\uff1b\u5982\u679c\u6211\u662f\u5356\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e0d\u8d5a\u94b1\uff0c\u6240\u4ee5\u4e0b\u754c\u5c31\u662f 0\u3002\n\n\n// \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c\nbuy = Integer.max(buy, -price);\n// \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c\nsell = Integer.max(sell, buy + price);\n\n\n\n\n\u5b8c\u6574\u4ee3\u7801\u5c31\u662f\uff1a\n\n\nint buy = Integer.MIN_VALUE;\nint sell = 0;\nfor (int price : prices) {\n    buy = Integer.max(buy, -price);\n    sell = Integer.max(sell, buy + price);\n}\nreturn sell;\n\n\n\n\n\n\n\u53ef\u4ee5\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u89e3 LeetCode \u7b2c 123 \u9898\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    /**\n     * \u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\n     *\n     * @param prices\n     * @return\n     */\n    public int maxProfit(int[] prices) {\n        int len = prices.length;\n        if (len == 0) {\n            return 0;\n        }\n        int maxProfit = 0;\n        // \u4e4b\u524d\u904d\u5386\u5230\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c\n        int preMinimum = prices[0];\n        // \u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5143\u7d20\u5f00\u59cb\n        for (int i = 1; i < len; i++) {\n            // \u5f53\u524d\u503c\u51cf\u53bb\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u51fa\u6700\u5927\uff0c\u5373\u4e3a\u6240\u6c42\n            maxProfit = Integer.max(maxProfit, prices[i] - preMinimum);\n            preMinimum = Integer.min(preMinimum, prices[i]);\n        }\n        return maxProfit;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        int buy = Integer.MIN_VALUE;\n        int sell = 0;\n        for (int price : prices) {\n            buy = Integer.max(buy, -price);\n            sell = Integer.max(sell, buy + price);\n        }\n        return sell;\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {7, 1, 5, 3, 6, 4};\n        Solution2 solution2 = new Solution2();\n        int maxProfit = solution2.maxProfit(prices);\n        System.out.println(maxProfit);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0121-best-time-to-buy-and-sell-stock\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "121. Best Time to Buy and Sell Stock"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#121-best-time-to-buy-and-sell-stock",
            "text": "",
            "title": "121. Best Time to Buy and Sell Stock"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0 i  \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c  i  \u5929\u7684\u4ef7\u683c\u3002  \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002  \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [7,1,5,3,6,4] \u8f93\u51fa:  5 \u89e3\u91ca:  \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002\n     \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  [7,6,4,3,1] \u8f93\u51fa:  0 \u89e3\u91ca:  \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 121. Best Time to Buy and Sell Stock   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5728\u6700\u591a\u53ea\u5141\u8bb8\u4ea4\u6613\u4e00\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u51fa\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u6700\u5927\u5229\u6da6\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230\u80a1\u4ef7\u6700\u4f4e\u7684\u4e00\u5929\u4e70\u8fdb\uff0c\u7136\u540e\u5728\u80a1\u4ef7\u6700\u9ad8\u7684\u4e00\u5929\u5356\u51fa\u5373\u53ef\uff08\u5e76\u4e14\u8981\u6ee1\u8db3\u5148\u4e70\u540e\u5356\u7684\u89c4\u5219\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u7684\u6700\u5c0f\u503c\uff0c\u7528\u5f53\u524d\u503c\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u6700\u5927\u3002  \u6211\u4eec\u5199\u51fa\u4e86\u53c2\u8003\u89e3\u7b54 1 \u4ee5\u540e\uff0c\u53d1\u73b0\u4e0b\u9762\u8fd9\u4e24\u884c\u4ee3\u7801\u7b2c 1 \u884c\u6c42\u6700\u5927\u503c\uff0c\u7b2c 2 \u884c\u6c42\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u80fd\u4e0d\u80fd\u628a\u5b83\u4eec\u7684\u7ed3\u6784\u7edf\u4e00\u8d77\u6765\u3002  maxProfit = Integer.max(maxProfit, prices[i] - preMinimum);\npreMinimum = Integer.min(preMinimum, prices[i]);  \u6211\u4eec\u8981\u6c42\u5229\u6da6\u6700\u5927\u5316\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65b9\u5411\u662f\u628a  min  \u6539\u6210  max \uff0c\u5f88\u7b80\u5355\uff0c\u53d6\u4e2a\u8d1f\u53f7\u5c31\u884c\u4e86\u3002\u5176\u542b\u4e49\u4e5f\u5f88\u76f4\u89c2\uff0c  0 - price  \u5c31\u8868\u793a\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5047\u5982\u6211\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\u6211\u7684\u5229\u6da6\uff0c\u6211\u80af\u5b9a\u662f\u8fd8\u662f\u5e0c\u671b\u6211\u7684\u5229\u6da6\u8d8a\u6765\u8d8a\u5927\u3002  \u800c\u6211\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u503c\u662f\u548c\u4e70\u64cd\u4f5c\u76f8\u5173\u7684\uff0c\u5f88\u5bb9\u6613\u6211\u4eec\u5c31\u5199\u51fa\u4e86\u4e0b\u9762\u7684\u4e24\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4ece\u7d22\u5f15\u4e3a 0 \u5f00\u59cb\u3002\u63a5\u4e0b\u6765\u8bbe\u7f6e\u521d\u59cb\u503c\u5c31\u6bd4\u8f83\u5173\u952e\u4e86\uff0c\u5982\u679c\u6211\u662f\u4e70\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e00\u76f4\u5356\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u662f\u6574\u6570\u7684\u6700\u5c0f\u503c\uff1b\u5982\u679c\u6211\u662f\u5356\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e0d\u8d5a\u94b1\uff0c\u6240\u4ee5\u4e0b\u754c\u5c31\u662f 0\u3002  // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c\nbuy = Integer.max(buy, -price);\n// \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c\nsell = Integer.max(sell, buy + price);  \u5b8c\u6574\u4ee3\u7801\u5c31\u662f\uff1a  int buy = Integer.MIN_VALUE;\nint sell = 0;\nfor (int price : prices) {\n    buy = Integer.max(buy, -price);\n    sell = Integer.max(sell, buy + price);\n}\nreturn sell;   \u53ef\u4ee5\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u89e3 LeetCode \u7b2c 123 \u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#1",
            "text": "public class Solution {\n\n    /**\n     * \u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\n     *\n     * @param prices\n     * @return\n     */\n    public int maxProfit(int[] prices) {\n        int len = prices.length;\n        if (len == 0) {\n            return 0;\n        }\n        int maxProfit = 0;\n        // \u4e4b\u524d\u904d\u5386\u5230\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c\n        int preMinimum = prices[0];\n        // \u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5143\u7d20\u5f00\u59cb\n        for (int i = 1; i < len; i++) {\n            // \u5f53\u524d\u503c\u51cf\u53bb\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u51fa\u6700\u5927\uff0c\u5373\u4e3a\u6240\u6c42\n            maxProfit = Integer.max(maxProfit, prices[i] - preMinimum);\n            preMinimum = Integer.min(preMinimum, prices[i]);\n        }\n        return maxProfit;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0121-best-time-to-buy-and-sell-stock/#2",
            "text": "public class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        int buy = Integer.MIN_VALUE;\n        int sell = 0;\n        for (int price : prices) {\n            buy = Integer.max(buy, -price);\n            sell = Integer.max(sell, buy + price);\n        }\n        return sell;\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {7, 1, 5, 3, 6, 4};\n        Solution2 solution2 = new Solution2();\n        int maxProfit = solution2.maxProfit(prices);\n        System.out.println(maxProfit);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0121-best-time-to-buy-and-sell-stock  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/",
            "text": "122. Best Time to Buy and Sell Stock II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0\ni\n \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c \ni\n \u5929\u7684\u4ef7\u683c\u3002\n\n\n\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002\n\n\n\u6ce8\u610f\uff1a\n\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [7,1,5,3,6,4]\n\n\u8f93\u51fa:\n 7\n\n\u89e3\u91ca:\n \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [1,2,3,4,5]\n\n\u8f93\u51fa:\n 4\n\n\u89e3\u91ca:\n \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n\u00a0    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002\n\u00a0    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n [7,6,4,3,1]\n\n\u8f93\u51fa:\n 0\n\n\u89e3\u91ca:\n \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n122. Best Time to Buy and Sell Stock II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\u3002\u7528\u6211\u4eec\u751f\u6d3b\u7684\u5e38\u8bc6\u5c31\u53ef\u4ee5\u5224\u65ad\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u672a\u6765\uff08\u53ea\u8981\u6bcf\u5929\u90fd\u77e5\u9053\u660e\u5929\uff09\u7684\u80a1\u7968\u4f1a\u6da8\uff0c\u6211\u4eec\u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5c31\u4e00\u5b9a\u662f\u8d5a\u94b1\u7684\u3002\u56e0\u6b64\uff0c\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u548c\u5373\u6210\u4e3a\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u3002\u5f53\u7136\u8fd9\u79cd\u5047\u8bbe\u662f\u4e0d\u6210\u7acb\u7684\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898\uff0c\u6ca1\u6709\u73b0\u5b9e\u6307\u5bfc\u610f\u4e49\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        int len = prices.length;\n        for (int i = 0; i < len - 1; i++) {\n            int diff = prices[i + 1] - prices[i];\n            if (diff > 0) {\n                res += diff;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4e0e\u53c2\u8003\u89e3\u7b541\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0a\u66f4\u7b80\u6d01\u3002\n\n\npublic class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        int len = prices.length;\n        for (int i = 0; i < len - 1; i++) {\n            res += Integer.max(prices[i + 1] - prices[i], 0);\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0122-best-time-to-buy-and-sell-stock-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "122. Best Time to Buy and Sell Stock II"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#122-best-time-to-buy-and-sell-stock-ii",
            "text": "",
            "title": "122. Best Time to Buy and Sell Stock II"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0 i  \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c  i  \u5929\u7684\u4ef7\u683c\u3002  \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002  \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [7,1,5,3,6,4] \u8f93\u51fa:  7 \u89e3\u91ca:  \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002  \u793a\u4f8b 2:  \u8f93\u5165:  [1,2,3,4,5] \u8f93\u51fa:  4 \u89e3\u91ca:  \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n\u00a0    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002\n\u00a0    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002  \u793a\u4f8b\u00a03:  \u8f93\u5165:  [7,6,4,3,1] \u8f93\u51fa:  0 \u89e3\u91ca:  \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 122. Best Time to Buy and Sell Stock II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\u3002\u7528\u6211\u4eec\u751f\u6d3b\u7684\u5e38\u8bc6\u5c31\u53ef\u4ee5\u5224\u65ad\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u672a\u6765\uff08\u53ea\u8981\u6bcf\u5929\u90fd\u77e5\u9053\u660e\u5929\uff09\u7684\u80a1\u7968\u4f1a\u6da8\uff0c\u6211\u4eec\u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5c31\u4e00\u5b9a\u662f\u8d5a\u94b1\u7684\u3002\u56e0\u6b64\uff0c\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u548c\u5373\u6210\u4e3a\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u3002\u5f53\u7136\u8fd9\u79cd\u5047\u8bbe\u662f\u4e0d\u6210\u7acb\u7684\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898\uff0c\u6ca1\u6709\u73b0\u5b9e\u6307\u5bfc\u610f\u4e49\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#1",
            "text": "public class Solution {\n\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        int len = prices.length;\n        for (int i = 0; i < len - 1; i++) {\n            int diff = prices[i + 1] - prices[i];\n            if (diff > 0) {\n                res += diff;\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0122-best-time-to-buy-and-sell-stock-ii/#21",
            "text": "public class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        int len = prices.length;\n        for (int i = 0; i < len - 1; i++) {\n            res += Integer.max(prices[i + 1] - prices[i], 0);\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0122-best-time-to-buy-and-sell-stock-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4e0e\u53c2\u8003\u89e3\u7b541\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0a\u66f4\u7b80\u6d01\u3002"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/",
            "text": "123. Best Time to Buy and Sell Stock III\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\n i\n \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c \ni \n\u5929\u7684\u4ef7\u683c\u3002\n\n\n\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0\n\u4e24\u7b14\u00a0\n\u4ea4\u6613\u3002\n\n\n\u6ce8\u610f:\n\u00a0\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n [3,3,5,0,0,3,1,4]\n\n\u8f93\u51fa:\n 6\n\n\u89e3\u91ca:\n \u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [1,2,3,4,5]\n\n\u8f93\u51fa:\n 4\n\n\u89e3\u91ca:\n \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u00a0 \n\u00a0    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u00a0 \n\u00a0    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n [7,6,4,3,1] \n\n\u8f93\u51fa:\n 0 \n\n\u89e3\u91ca:\n \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n123. Best Time to Buy and Sell Stock III\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u601d\u8def1\uff1a\u53c2\u8003 LeetCode \u7b2c 121 \u9898\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u4e3a\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u4e24\u7b14 \u4ea4\u6613\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u8fd9\u4e24\u90e8\u5206\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u4e4b\u548c\u5373\u4e3a\u6240\u6c42\u3002\n\n\n\u601d\u8def2\uff1a\u5176\u5b9e\u5c31\u5728 LeetCode \u7b2c 121 \u9898\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u591a\u505a\u4e00\u5c42\u6700\u503c\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u3002\n\u4e70\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u8d1f\uff0c\u5356\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u6b63\u3002\u8fd9\u6837\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int maxProfit(int[] prices) {\n        int len = prices.length;\n        int maxProfit = 0;\n        for (int i = 1; i < len; i++) {\n            maxProfit = Integer.max(maxProfit(prices, 0, i) + maxProfit(prices, i + 1, len - 1), maxProfit);\n        }\n        return maxProfit;\n    }\n\n    private int maxProfit(int[] prices, int l, int r) {\n        int len = prices.length;\n        if (len == 0 || l < 0 || l >= len) {\n            return 0;\n        }\n        int preMinimum = prices[l];\n        int maxProfit = 0;\n        for (int i = l + 1; i <= r; i++) {\n            maxProfit = Integer.max(prices[i] - preMinimum, maxProfit);\n            preMinimum = Integer.min(preMinimum, prices[i]);\n        }\n        return maxProfit;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        // \u4e0d\u8bba\u662f\u4e70\u548c\u4e70\uff0c\u90fd\u5148\u5047\u8bbe\u4e00\u4e2a\u6700\u574f\u7684\u60c5\u51b5\n        // \u4e70\u7684\u65f6\u5019\uff0c\u6700\u574f\u6211\u53ea\u4e70\u4e0d\u5356\uff0c\u94b1\u4f1a\u8d8a\u6765\u8d8a\u5c11\n        int buy1 = Integer.MIN_VALUE;\n        // \u5356\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6c42\u6700\u5927\u503c\uff0c\u6211\u6700\u5dee\u4ec0\u4e48\u60c5\u51b5\u5c31\u662f\u4e0d\u4ea4\u6613\uff0c\u6536\u76ca\u4e3a 0\n        int sell1 = 0;\n        int buy2 = Integer.MIN_VALUE;\n        int sell2 = 0;\n        for (int price : prices) {\n            buy1 = Integer.max(buy1, -price);\n            sell1 = Integer.max(sell1, price + buy1);\n            buy2 = Integer.max(buy2, sell1 - price);\n            sell2 = Integer.max(sell2, price + buy2);\n        }\n        return sell2;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0123-best-time-to-buy-and-sell-stock-iii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "123. Best Time to Buy and Sell Stock III"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#123-best-time-to-buy-and-sell-stock-iii",
            "text": "",
            "title": "123. Best Time to Buy and Sell Stock III"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c  i  \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c  i  \u5929\u7684\u4ef7\u683c\u3002  \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0 \u4e24\u7b14\u00a0 \u4ea4\u6613\u3002  \u6ce8\u610f: \u00a0\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  [3,3,5,0,0,3,1,4] \u8f93\u51fa:  6 \u89e3\u91ca:  \u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002  \u793a\u4f8b 2:  \u8f93\u5165:  [1,2,3,4,5] \u8f93\u51fa:  4 \u89e3\u91ca:  \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u00a0 \n\u00a0    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u00a0 \n\u00a0    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002  \u793a\u4f8b 3:  \u8f93\u5165:  [7,6,4,3,1]  \u8f93\u51fa:  0  \u89e3\u91ca:  \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 123. Best Time to Buy and Sell Stock III   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u601d\u8def1\uff1a\u53c2\u8003 LeetCode \u7b2c 121 \u9898\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u4e3a\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u4e24\u7b14 \u4ea4\u6613\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u8fd9\u4e24\u90e8\u5206\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u4e4b\u548c\u5373\u4e3a\u6240\u6c42\u3002  \u601d\u8def2\uff1a\u5176\u5b9e\u5c31\u5728 LeetCode \u7b2c 121 \u9898\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u591a\u505a\u4e00\u5c42\u6700\u503c\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u3002\n\u4e70\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u8d1f\uff0c\u5356\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u6b63\u3002\u8fd9\u6837\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#1",
            "text": "public class Solution {\n\n    public int maxProfit(int[] prices) {\n        int len = prices.length;\n        int maxProfit = 0;\n        for (int i = 1; i < len; i++) {\n            maxProfit = Integer.max(maxProfit(prices, 0, i) + maxProfit(prices, i + 1, len - 1), maxProfit);\n        }\n        return maxProfit;\n    }\n\n    private int maxProfit(int[] prices, int l, int r) {\n        int len = prices.length;\n        if (len == 0 || l < 0 || l >= len) {\n            return 0;\n        }\n        int preMinimum = prices[l];\n        int maxProfit = 0;\n        for (int i = l + 1; i <= r; i++) {\n            maxProfit = Integer.max(prices[i] - preMinimum, maxProfit);\n            preMinimum = Integer.min(preMinimum, prices[i]);\n        }\n        return maxProfit;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0123-best-time-to-buy-and-sell-stock-iii/#2",
            "text": "public class Solution2 {\n\n    public int maxProfit(int[] prices) {\n        // \u4e0d\u8bba\u662f\u4e70\u548c\u4e70\uff0c\u90fd\u5148\u5047\u8bbe\u4e00\u4e2a\u6700\u574f\u7684\u60c5\u51b5\n        // \u4e70\u7684\u65f6\u5019\uff0c\u6700\u574f\u6211\u53ea\u4e70\u4e0d\u5356\uff0c\u94b1\u4f1a\u8d8a\u6765\u8d8a\u5c11\n        int buy1 = Integer.MIN_VALUE;\n        // \u5356\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6c42\u6700\u5927\u503c\uff0c\u6211\u6700\u5dee\u4ec0\u4e48\u60c5\u51b5\u5c31\u662f\u4e0d\u4ea4\u6613\uff0c\u6536\u76ca\u4e3a 0\n        int sell1 = 0;\n        int buy2 = Integer.MIN_VALUE;\n        int sell2 = 0;\n        for (int price : prices) {\n            buy1 = Integer.max(buy1, -price);\n            sell1 = Integer.max(sell1, price + buy1);\n            buy2 = Integer.max(buy2, sell1 - price);\n            sell2 = Integer.max(sell2, price + buy2);\n        }\n        return sell2;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0123-best-time-to-buy-and-sell-stock-iii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/",
            "text": "125. Valid Palindrome\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002\n\n\n\u8bf4\u660e\uff1a\n\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \"A man, a plan, a canal: Panama\"\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \"race a car\"\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n125. Valid Palindrome\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n125. \u9a8c\u8bc1\u56de\u6587\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u4f7f\u7528\u6307\u9488\u5bf9\u649e\u7684\u601d\u60f3\uff1a\n\n\npublic class Solution {\n\n    /**\n     * \"A man, a plan, a canal: Panama\"\n     *\n     * @param s\n     * @return\n     */\n    public boolean isPalindrome(String s) {\n        int index_i = 0;\n        int index_j = s.length() - 1;\n\n        while (index_i <= index_j) {\n            String i = s.charAt(index_i) + \"\";\n            String j = s.charAt(index_j) + \"\";\n            if (!i.matches(\"[0-9a-zA-Z]\")) {\n                index_i++;\n                continue;\n            }\n            if (!j.matches(\"[0-9a-zA-Z]\")) {\n                index_j--;\n                continue;\n            }\n            if (!j.equalsIgnoreCase(i)) {\n                return false;\n            } else {\n                index_i++;\n                index_j--;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String s = \"A man, a plan, a canal: Panama\";\n        Solution solution = new Solution();\n        boolean palindrome = solution.isPalindrome(s);\n        System.out.println(palindrome);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            if not s[left].isalnum():\n                left += 1\n                continue\n            if not s[right].isalnum():\n                right -= 1\n                continue\n\n            if s[left].lower() != s[right].lower():\n                return False\n\n            left += 1\n            right -= 1\n        return True\n\n\n\n\n\u63d0\u4ea4\u4ee5\u540e\u53d1\u73b0\uff0c\u624d\u51fb\u8d25\u4e86 0.85% \u7684 Java \u5f00\u53d1\u8005\u3002\n\u4e0b\u9762\u6539\u4e86\u4e00\u7248\uff0c\u51fb\u8d25\u4e86 19.22% \u7684 Java \u5f00\u53d1\u8005\u3002\n\n\nJava \u4ee3\u7801\uff1a\n\n\npublic class Solution {\n\n    /**\n     * \"A man, a plan, a canal: Panama\"\n     *\n     * @param s\n     * @return\n     */\n    public boolean isPalindrome(String s) {\n        // \u53bb\u6389\u975e\u6570\u5b57\u548c\u5b57\u6bcd\n        // \u5168\u90e8\u8f6c\u6362\u4e3a\u5c0f\u5199\n        s = s.replaceAll(\"[^0-9a-zA-Z]\", \"\");\n        StringBuilder reverse = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            reverse.append(s.charAt(i));\n        }\n        return s.equalsIgnoreCase(reverse.toString());\n    }\n\n    public static void main(String[] args) {\n        String s = \"A man, a plan, a canal: Panama\";\n        Solution solution = new Solution();\n        boolean palindrome = solution.isPalindrome(s);\n        System.out.println(palindrome);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0125-valid-palindrome\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "125. Valid Palindrome"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/#125-valid-palindrome",
            "text": "",
            "title": "125. Valid Palindrome"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002  \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \"A man, a plan, a canal: Panama\" \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:  \"race a car\" \u8f93\u51fa:  false    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 125. Valid Palindrome   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 125. \u9a8c\u8bc1\u56de\u6587\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0125-valid-palindrome/#1",
            "text": "\u4f7f\u7528\u6307\u9488\u5bf9\u649e\u7684\u601d\u60f3\uff1a  public class Solution {\n\n    /**\n     * \"A man, a plan, a canal: Panama\"\n     *\n     * @param s\n     * @return\n     */\n    public boolean isPalindrome(String s) {\n        int index_i = 0;\n        int index_j = s.length() - 1;\n\n        while (index_i <= index_j) {\n            String i = s.charAt(index_i) + \"\";\n            String j = s.charAt(index_j) + \"\";\n            if (!i.matches(\"[0-9a-zA-Z]\")) {\n                index_i++;\n                continue;\n            }\n            if (!j.matches(\"[0-9a-zA-Z]\")) {\n                index_j--;\n                continue;\n            }\n            if (!j.equalsIgnoreCase(i)) {\n                return false;\n            } else {\n                index_i++;\n                index_j--;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String s = \"A man, a plan, a canal: Panama\";\n        Solution solution = new Solution();\n        boolean palindrome = solution.isPalindrome(s);\n        System.out.println(palindrome);\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            if not s[left].isalnum():\n                left += 1\n                continue\n            if not s[right].isalnum():\n                right -= 1\n                continue\n\n            if s[left].lower() != s[right].lower():\n                return False\n\n            left += 1\n            right -= 1\n        return True  \u63d0\u4ea4\u4ee5\u540e\u53d1\u73b0\uff0c\u624d\u51fb\u8d25\u4e86 0.85% \u7684 Java \u5f00\u53d1\u8005\u3002\n\u4e0b\u9762\u6539\u4e86\u4e00\u7248\uff0c\u51fb\u8d25\u4e86 19.22% \u7684 Java \u5f00\u53d1\u8005\u3002  Java \u4ee3\u7801\uff1a  public class Solution {\n\n    /**\n     * \"A man, a plan, a canal: Panama\"\n     *\n     * @param s\n     * @return\n     */\n    public boolean isPalindrome(String s) {\n        // \u53bb\u6389\u975e\u6570\u5b57\u548c\u5b57\u6bcd\n        // \u5168\u90e8\u8f6c\u6362\u4e3a\u5c0f\u5199\n        s = s.replaceAll(\"[^0-9a-zA-Z]\", \"\");\n        StringBuilder reverse = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            reverse.append(s.charAt(i));\n        }\n        return s.equalsIgnoreCase(reverse.toString());\n    }\n\n    public static void main(String[] args) {\n        String s = \"A man, a plan, a canal: Panama\";\n        Solution solution = new Solution();\n        boolean palindrome = solution.isPalindrome(s);\n        System.out.println(palindrome);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0125-valid-palindrome  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0136-single-number/",
            "text": "136. Single Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\n\u975e\u7a7a\n\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002\n\n\n\u8bf4\u660e\uff1a\n\n\n\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [2,2,1]\n\n\u8f93\u51fa:\n 1\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [4,1,2,1,2]\n\n\u8f93\u51fa:\n 4\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n136. Single Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5f53\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u6211\u4e5f\u662f\u770b\u4e86\u522b\u4eba\u7684\u89e3\u7b54\u624d\u77e5\u9053\u7684\u3002\u4f4d\u8fd0\u7b97\u6709\u7684\u65f6\u5019\u771f\u7684\u5f88\u9177\uff01\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int singleNumber(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new RuntimeException(\"\u6570\u7ec4\u5143\u7d20\u4e3a\u7a7a\uff0c\u6ca1\u6709\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\");\n        }\n        int res = nums[0];\n        for (int i = 1; i < len; i++) {\n            res ^= nums[i];\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0136-single-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "136. Single Number"
        },
        {
            "location": "/leetcode-0136-single-number/#136-single-number",
            "text": "",
            "title": "136. Single Number"
        },
        {
            "location": "/leetcode-0136-single-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002  \u8bf4\u660e\uff1a  \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f  \u793a\u4f8b 1:  \u8f93\u5165:  [2,2,1] \u8f93\u51fa:  1  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [4,1,2,1,2] \u8f93\u51fa:  4    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 136. Single Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0136-single-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5f53\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u6211\u4e5f\u662f\u770b\u4e86\u522b\u4eba\u7684\u89e3\u7b54\u624d\u77e5\u9053\u7684\u3002\u4f4d\u8fd0\u7b97\u6709\u7684\u65f6\u5019\u771f\u7684\u5f88\u9177\uff01",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0136-single-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0136-single-number/#1",
            "text": "public class Solution {\n\n    public int singleNumber(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new RuntimeException(\"\u6570\u7ec4\u5143\u7d20\u4e3a\u7a7a\uff0c\u6ca1\u6709\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\");\n        }\n        int res = nums[0];\n        for (int i = 1; i < len; i++) {\n            res ^= nums[i];\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0136-single-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0137-single-number-ii/",
            "text": "137. Single Number II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\n\u975e\u7a7a\n\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002\n\n\n\u8bf4\u660e\uff1a\n\n\n\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [2,2,3,2]\n\n\u8f93\u51fa:\n 3\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [0,1,0,1,0,1,99]\n\n\u8f93\u51fa:\n 99\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n137. Single Number II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n137. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            int count = 0;\n            for (int num : nums) {\n                if ((mask & num) != 0) {\n                    count++;\n                }\n            }\n            if (count % 3 != 0) {\n                res |= mask;\n            }\n            mask <<= 1;\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u672c\u8d28\u4e0a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u6709\u70b9\u5c0f\u7684\u4e0d\u540c\u3002\n\n\npublic class Solution2 {\n\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            mask = 1 << i;\n            int count = 0;\n            for (int num : nums) {\n                if ((num & mask) != 0) {\n                    count++;\n                }\n            }\n            if (count % 3 != 0) {\n                res |= mask;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0137-single-number-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "137. Single Number II"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#137-single-number-ii",
            "text": "",
            "title": "137. Single Number II"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002  \u8bf4\u660e\uff1a  \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f  \u793a\u4f8b 1:  \u8f93\u5165:  [2,2,3,2] \u8f93\u51fa:  3  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [0,1,0,1,0,1,99] \u8f93\u51fa:  99    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 137. Single Number II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 137. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#1",
            "text": "public class Solution {\n\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            int count = 0;\n            for (int num : nums) {\n                if ((mask & num) != 0) {\n                    count++;\n                }\n            }\n            if (count % 3 != 0) {\n                res |= mask;\n            }\n            mask <<= 1;\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0137-single-number-ii/#2-1",
            "text": "public class Solution2 {\n\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            mask = 1 << i;\n            int count = 0;\n            for (int num : nums) {\n                if ((num & mask) != 0) {\n                    count++;\n                }\n            }\n            if (count % 3 != 0) {\n                res |= mask;\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0137-single-number-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u672c\u8d28\u4e0a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u6709\u70b9\u5c0f\u7684\u4e0d\u540c\u3002"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/",
            "text": "141. Linked List Cycle\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002\n\n\n\u8fdb\u9636\uff1a\n\n\u4f60\u80fd\u5426\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n141. Linked List Cycle\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n141. \u73af\u5f62\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528 Hash \u8868\u5224\u65ad\u662f\u5426\u91cd\u590d\uff08\u4e0d\u63a8\u8350\uff09\u3002\n\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n\n    # \u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u65b9\u6cd5\u67e5\u91cd\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350\n\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        hash_tabel = dict()\n        point = head\n        while point:\n            if point in hash_tabel:\n                return True\n            else:\n                hash_tabel[point] = 0\n            point = point.next\n        return False\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\u7684\u65b9\u5f0f\u3002\n\n\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n\n    # \u8fd9\u4e00\u7248\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\n\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        slow = head\n        fast = head\n        # \u5feb\u6307\u9488\u6bcf\u8d70\u4e00\u6b65\uff0c\u90fd\u505a\u4e86\u5224\u65ad\n        while fast:\n            fast = fast.next\n\n            if fast:\n                fast = fast.next\n                slow = slow.next\n            else:\n                return False\n            if fast == slow:\n                return True\n        return False\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0141-linked-list-cycle\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "141. Linked List Cycle"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#141-linked-list-cycle",
            "text": "",
            "title": "141. Linked List Cycle"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002  \u8fdb\u9636\uff1a \n\u4f60\u80fd\u5426\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 141. Linked List Cycle   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 141. \u73af\u5f62\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#1-hash",
            "text": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n\n    # \u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u65b9\u6cd5\u67e5\u91cd\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350\n\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        hash_tabel = dict()\n        point = head\n        while point:\n            if point in hash_tabel:\n                return True\n            else:\n                hash_tabel[point] = 0\n            point = point.next\n        return False",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528 Hash \u8868\u5224\u65ad\u662f\u5426\u91cd\u590d\uff08\u4e0d\u63a8\u8350\uff09\u3002"
        },
        {
            "location": "/leetcode-0141-linked-list-cycle/#2",
            "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n\n    # \u8fd9\u4e00\u7248\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\n\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        slow = head\n        fast = head\n        # \u5feb\u6307\u9488\u6bcf\u8d70\u4e00\u6b65\uff0c\u90fd\u505a\u4e86\u5224\u65ad\n        while fast:\n            fast = fast.next\n\n            if fast:\n                fast = fast.next\n                slow = slow.next\n            else:\n                return False\n            if fast == slow:\n                return True\n        return False  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0141-linked-list-cycle  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\u7684\u65b9\u5f0f\u3002"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/",
            "text": "142. Linked List Cycle II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u00a0\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de\u00a0\nnull\n\u3002\n\n\n\u8bf4\u660e\uff1a\n\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002\n\n\n\u8fdb\u9636\uff1a\n\n\u4f60\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n142. Linked List Cycle II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n142. \u73af\u5f62\u94fe\u8868 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    # If there is no cycle, return null.\n\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None:\n            return None\n\n        slow = head\n        fast = head\n\n        while fast:\n            fast = fast.next\n            if fast:\n                fast = fast.next\n                slow = slow.next\n            else:\n                return None\n            if fast == slow:\n                break\n\n        # \u8d70\u5230\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u8981\u5224\u65ad\n        if fast:\n            # \u6b64\u65f6 fast == slow \u4e3a True\n            point = head\n            while slow != point:\n                slow = slow.next\n                point = point.next\n            return point\n        else:\n            return None\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0142-linked-list-cycle-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "142. Linked List Cycle II"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/#142-linked-list-cycle-ii",
            "text": "",
            "title": "142. Linked List Cycle II"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u00a0\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de\u00a0 null \u3002  \u8bf4\u660e\uff1a \u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002  \u8fdb\u9636\uff1a \n\u4f60\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 142. Linked List Cycle II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 142. \u73af\u5f62\u94fe\u8868 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0142-linked-list-cycle-ii/#1",
            "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    # If there is no cycle, return null.\n\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None:\n            return None\n\n        slow = head\n        fast = head\n\n        while fast:\n            fast = fast.next\n            if fast:\n                fast = fast.next\n                slow = slow.next\n            else:\n                return None\n            if fast == slow:\n                break\n\n        # \u8d70\u5230\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u8981\u5224\u65ad\n        if fast:\n            # \u6b64\u65f6 fast == slow \u4e3a True\n            point = head\n            while slow != point:\n                slow = slow.next\n                point = point.next\n            return point\n        else:\n            return None  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0142-linked-list-cycle-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/",
            "text": "144. Binary Tree Preorder Traversal\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684\u00a0\n\u524d\u5e8f\u00a0\n\u904d\u5386\u3002\n\n\n\u00a0\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3\n\n\n\u8f93\u51fa:\n [1,2,3]\n\n\n\n\u8fdb\u9636:\n\u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n144. Binary Tree Preorder Traversal\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0144-binary-tree-preorder-traversal\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "144. Binary Tree Preorder Traversal"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/#144-binary-tree-preorder-traversal",
            "text": "",
            "title": "144. Binary Tree Preorder Traversal"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684\u00a0 \u524d\u5e8f\u00a0 \u904d\u5386\u3002  \u00a0 \u793a\u4f8b:  \u8f93\u5165:  [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \u8f93\u51fa:  [1,2,3]  \u8fdb\u9636: \u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 144. Binary Tree Preorder Traversal   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0144-binary-tree-preorder-traversal/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0144-binary-tree-preorder-traversal  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/",
            "text": "145. Binary Tree Postorder Traversal\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \n\u540e\u5e8f\u00a0\n\u904d\u5386\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3\n\n\n\u8f93\u51fa:\n [3,2,1]\n\n\n\u8fdb\u9636:\n\u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n145. Binary Tree Postorder Traversal\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\u5176\u5b9e\u662f\u4e2a\u5957\u8def\uff0c\u4e09\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u5b8c\u6210\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u9012\u5f52\u5199\u6cd5\n\n\npublic class Solution2 {\n\n    private List<Integer> result = new ArrayList<>();\n\n    /**\n     * \u9012\u5f52\u7684\u65b9\u5f0f\u540e\u7eed\u904d\u5386\u4e8c\u53c9\u6811\n     * @param root\n     * @return\n     */\n    public List<Integer> postorderTraversal(TreeNode root) {\n        postorder(root);\n        return result;\n\n    }\n\n    private void postorder(TreeNode root) {\n        if(root!=null){\n            postorder(root.left);\n            postorder(root.right);\n            result.add(root.val);\n        }\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u975e\u9012\u5f52\u5199\u6cd5\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nenum UseType {\n    RECURSION,\n    ADD\n}\n\nclass Command {\n    UseType useType;\n    TreeNode treeNode;\n\n    public Command(UseType useType, TreeNode treeNode) {\n        this.useType = useType;\n        this.treeNode = treeNode;\n    }\n}\n\n\npublic class Solution {\n\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result  =new ArrayList<>();\n        if(root==null){\n            return result;\n        }\n        Stack<Command> stack = new Stack<>();\n        stack.add(new Command(UseType.RECURSION,root));\n\n        while (!stack.isEmpty()){\n            Command command = stack.pop();\n\n            if(UseType.ADD == command.useType){\n                result.add(command.treeNode.val);\n            }else {\n                assert UseType.RECURSION == command.useType;\n                stack.push(new Command(UseType.ADD,command.treeNode));\n                if(command.treeNode.right!=null){\n                    stack.push(new Command(UseType.RECURSION,command.treeNode.right));\n                }\n                if(command.treeNode.left!=null){\n                    stack.push(new Command(UseType.RECURSION,command.treeNode.left));\n                }\n            }\n        }\n        return result;\n    }\n\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0145-binary-tree-postorder-traversal\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "145. Binary Tree Postorder Traversal"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#145-binary-tree-postorder-traversal",
            "text": "",
            "title": "145. Binary Tree Postorder Traversal"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684  \u540e\u5e8f\u00a0 \u904d\u5386\u3002  \u793a\u4f8b:  \u8f93\u5165:  [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \u8f93\u51fa:  [3,2,1]  \u8fdb\u9636: \u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 145. Binary Tree Postorder Traversal   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\u5176\u5b9e\u662f\u4e2a\u5957\u8def\uff0c\u4e09\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u5b8c\u6210\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#1",
            "text": "public class Solution2 {\n\n    private List<Integer> result = new ArrayList<>();\n\n    /**\n     * \u9012\u5f52\u7684\u65b9\u5f0f\u540e\u7eed\u904d\u5386\u4e8c\u53c9\u6811\n     * @param root\n     * @return\n     */\n    public List<Integer> postorderTraversal(TreeNode root) {\n        postorder(root);\n        return result;\n\n    }\n\n    private void postorder(TreeNode root) {\n        if(root!=null){\n            postorder(root.left);\n            postorder(root.right);\n            result.add(root.val);\n        }\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u9012\u5f52\u5199\u6cd5"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0145-binary-tree-postorder-traversal/#2",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nenum UseType {\n    RECURSION,\n    ADD\n}\n\nclass Command {\n    UseType useType;\n    TreeNode treeNode;\n\n    public Command(UseType useType, TreeNode treeNode) {\n        this.useType = useType;\n        this.treeNode = treeNode;\n    }\n}\n\n\npublic class Solution {\n\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result  =new ArrayList<>();\n        if(root==null){\n            return result;\n        }\n        Stack<Command> stack = new Stack<>();\n        stack.add(new Command(UseType.RECURSION,root));\n\n        while (!stack.isEmpty()){\n            Command command = stack.pop();\n\n            if(UseType.ADD == command.useType){\n                result.add(command.treeNode.val);\n            }else {\n                assert UseType.RECURSION == command.useType;\n                stack.push(new Command(UseType.ADD,command.treeNode));\n                if(command.treeNode.right!=null){\n                    stack.push(new Command(UseType.RECURSION,command.treeNode.right));\n                }\n                if(command.treeNode.left!=null){\n                    stack.push(new Command(UseType.RECURSION,command.treeNode.left));\n                }\n            }\n        }\n        return result;\n    }\n\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0145-binary-tree-postorder-traversal  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u975e\u9012\u5f52\u5199\u6cd5"
        },
        {
            "location": "/leetcode-0146-lru-cache/",
            "text": "146. LRU Cache\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a\u00a0 \nLRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236\n\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e \nget\n \u548c \u5199\u5165\u6570\u636e \nput\n \u3002\n\n\n\u83b7\u53d6\u6570\u636e \nget(key)\n - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002\n\n\u5199\u5165\u6570\u636e \nput(key, value)\n - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002\n\n\n\u8fdb\u9636:\n\n\n\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u00a0\nO(1)\n \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f\n\n\n\u793a\u4f8b:\n\n\nLRUCache cache = new LRUCache( 2 /* \u7f13\u5b58\u5bb9\u91cf */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de  1\ncache.put(3, 3);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.put(4, 4);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.get(3);       // \u8fd4\u56de  3\ncache.get(4);       // \u8fd4\u56de  4\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n146. LRU Cache\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n146. LRU\u7f13\u5b58\u673a\u5236\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * https://leetcode-cn.com/problems/lru-cache/description/\n */\npublic class LRUCache {\n\n    /**\n     * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b\n     */\n    private class ListNode {\n\n        // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684\n        // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83\n        private int key;\n\n        private int val;\n        private ListNode preV;\n        private ListNode next;\n\n        public ListNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n        }\n    }\n\n    private HashMap<Integer, ListNode> map;\n    private int capacity;\n    private int size;\n    private ListNode head;\n    private ListNode tail;\n\n    public LRUCache(int capacity) {\n        this.size = 0;\n        this.capacity = capacity;\n        // \u6211\u4eec\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5148\u6dfb\u52a0\u518d\u5220\u9664\u7684\u7b56\u7565\uff0c\u6240\u4ee5\u591a\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\n        this.map = new LinkedHashMap<>(capacity + 1);\n        this.head = null;\n        this.tail = null;\n    }\n\n    //\n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        // map \u4e2d\u6709\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7f13\u5b58\u4e2d\u6709\u6570\u636e\uff0c\u4ece ListNode \u4e2d\u62ff\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\n        ListNode retNode = map.get(key);\n        int retVal = retNode.val;\n        // \u79fb\u52a8\u5230\u5934\n        moveToHead(retNode);\n        return retVal;\n    }\n\n    /**\n     * \u628a\u5f53\u524d\u7ed3\u70b9\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\n     *\n     * @param retNode\n     */\n    private void moveToHead(ListNode retNode) {\n        // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c\n        if (head == retNode || retNode == null) {\n            return;\n        }\n\n        // \u5904\u7406\u5c3e\u6307\u9488\uff0cretNode \u7684\u524d\u6307\u9488\u548c\u540e\u6307\u9488\u7edf\u4e00\u5904\u7406\n        if (retNode == tail) {\n            tail = tail.preV;\n            if (tail != null) {\n                tail.next = null;\n            }\n        }\n\n        if (retNode.preV != null) {\n            retNode.preV.next = retNode.next;\n        }\n\n        if (retNode.next != null) {\n            retNode.next.preV = retNode.preV;\n        }\n\n        retNode.next = head;\n        retNode.preV = null;\n        if (head != null) {\n            head.preV = retNode;\n        }\n        head = retNode;\n    }\n\n\n    /**\n     * \u672b\u5c3e\u7ed3\u70b9\u91ca\u653e\uff0ctail \u6307\u9488\u524d\u79fb\n     */\n    private void removeLast() {\n\n        // \u6839\u636e\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0chead \u548c tail \u8981\u4e48\u90fd\u975e\u7a7a\uff0c\u8981\u4e48\u90fd\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\n\n        // head == null || tail == null \u5305\u62ec\u4e86\u4ed6\u4eec\u540c\u65f6\u4e3a null \u7684\u60c5\u51b5\n        if (head == null || tail == null) {\n            // throw new IllegalArgumentException(\"\u5f53\u524d\u53cc\u5411\u94fe\u8868\u4e3a null\uff0c\u4e0d\u80fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\");\n            return;\n        }\n\n        // \u5982\u679c\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48 head \u548c tail \u90fd\u7f6e\u4e3a null \uff0c\u5373\u6e05\u7a7a\u4e86\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868\n        if (head == tail) {\n            head = null;\n            tail = null;\n            return;\n        }\n        // \u6b64\u65f6\u53cc\u5411\u94fe\u8868\u975e\u7a7a\uff0c\u5e76\u4e14 head \u548c tail \u4e0d\u91cd\u5408\n        // \u53ea\u8981\u628a tail \u5411\u524d\u79fb\u52a8\uff0c\u5373\u53ef\n        ListNode removeNode = tail;\n        tail = tail.preV;\n        tail.next = null;\n        removeNode.preV = null;\n        removeNode.next = null;\n    }\n\n    /**\n     * \u628a\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n     *\n     * @param newNode\n     */\n    private void addFirst(ListNode newNode) {\n        if (newNode == null) {\n            return;\n        }\n        newNode.next = head;\n        newNode.preV = null;\n        if (head != null) {\n            head.preV = newNode;\n        }\n        head = newNode;\n\n        // \u8003\u8651\u4e00\u4e0b\u5c3e\u7ed3\u70b9\uff08\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\u6389\u8fd9\u4e2a\u60c5\u51b5\uff09\n        // \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\uff0c\u5373\u4e00\u5f00\u59cb\u7684\u60c5\u51b5\uff0ctail == null \u7684\u65f6\u5019\uff0ctail \u4e5f\u8981\u8d4b\u503c\n        if (tail == null) {\n            tail = newNode;\n        }\n    }\n\n    public void put(int key, int value) {\n        // \u5982\u679c map \u4e2d\u6709\n        // \u76f4\u63a5\u62ff\u51fa\u6765\uff0c\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 value\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\n        if (map.containsKey(key)) {\n            // \u8868\u793a\u51fb\u4e2d\u7f13\u5b58\n            ListNode curNode = map.get(key);\n            curNode.val = value;\n            moveToHead(curNode);\n            return;\n        }\n        // \u5982\u679c map \u4e2d\u6ca1\u6709\n        // \u60c5\u51b51\uff1asize = capacaity\uff0cmap \u4e2d\u79fb\u9664\u672b\u5c3e\u7ed3\u70b9\uff0cListNode \u628a tail \u79fb\u9664\uff0c\u5e76\u4e14\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n        ListNode newNode = new ListNode(key, value);\n        map.put(key, newNode);\n        if (size == capacity) {\n            // \u79fb\u9664 Map \u4e2d\u7684\u672b\u5c3e\u7ed3\u70b9\u5bf9\u5e94\u7684 key-value \u5bf9\n            int removeKey = tail.key;\n            map.remove(removeKey);\n            removeLast();\n        } else {\n            // \u60c5\u51b52\uff1asize < capacaity\uff0csize++\uff0cmap \u4e2d\u6dfb\u52a0\uff0c\u628a\u65b0\u7ed3\u70b9\u52a0\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n            assert size < capacity;\n            // \u628a\u4e00\u4e2a\u65b0\u7ed3\u70b9\u6dfb\u52a0\u5728\u94fe\u8868\u7684\u5f00\u5934\n            size++;\n        }\n        addFirst(newNode);\n    }\n\n\n    // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700\n    // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868\n    // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49\n\n    public void printListNode() {\n        System.out.println(\"map:\" + map.keySet());\n        System.out.println(\"head:\" + head.key);\n        System.out.println(\"tail:\" + tail.key);\n        StringBuilder stringBuilder = new StringBuilder();\n        ListNode curNode = head;\n        stringBuilder.append(\"NULL\");\n        stringBuilder.append(\" <-> \");\n        while (curNode != null) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(curNode.key);\n            stringBuilder.append(\",\");\n            stringBuilder.append(curNode.val);\n            stringBuilder.append(\")\");\n            stringBuilder.append(\" <-> \");\n            curNode = curNode.next;\n        }\n        stringBuilder.append(\"NULL\");\n        System.out.println(stringBuilder.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2\n        int capacity = 2;\n        LRUCache lruCache = new LRUCache(capacity);\n\n        lruCache.put(1, 100);\n        lruCache.printListNode();\n        lruCache.put(2, 200);\n        lruCache.printListNode();\n\n        int value1 = lruCache.get(1);\n        System.out.println(value1);\n        lruCache.printListNode();\n\n\n        lruCache.put(3, 300);\n        lruCache.printListNode();\n\n\n        int value2 = lruCache.get(2);\n        System.out.println(value2);\n        lruCache.printListNode();\n\n        lruCache.put(4, 400);\n        lruCache.printListNode();\n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * https://leetcode-cn.com/problems/lru-cache/description/\n * \u53c2\u8003\u8d44\u6599\uff1ahttps://leetcode.com/problems/lru-cache/discuss/145937/100-Java-solution-with-doubly-linked-list-and-HashTable\n */\npublic class LRUCache2 {\n\n    /**\n     * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b\n     */\n    private class ListNode {\n        // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684\n        // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83\n        private int key;\n        private int val;\n        private ListNode prev;\n        private ListNode next;\n\n        public ListNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n        }\n    }\n\n    private HashMap<Integer, ListNode> map;\n    private int capacity;\n    private ListNode head;\n    private ListNode tail;\n\n    public LRUCache2(int capacity) {\n        this.capacity = capacity;\n        map = new LinkedHashMap<>(capacity);\n        this.head = null;\n        this.tail = null;\n    }\n\n    public int get(int key) {\n        if (!this.map.containsKey(key)) {\n            return -1;\n        }\n\n        ListNode curr = this.map.get(key);\n        if (curr == head) {\n            return curr.val;\n        }\n        // \u5982\u679c\u4e0d\u662f\u5934\u7ed3\u70b9\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u5934\u7ed3\u70b9\n        moveToHead(curr);\n        return curr.val;\n    }\n\n    private void moveToHead(ListNode retNode) {\n        // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c\n        if (retNode == head || retNode == null) {\n            return;\n        }\n\n        // \u4e0b\u9762\u8fd9\u4e24\u4e2a if \u4ee3\u7801\u5f88\u5de5\u6574\uff0c\u601d\u8def\u4e5f\u975e\u5e38\u6b63\u786e\n        // \u53ea\u6709\u5bf9\u975e\u7a7a\u7ed3\u70b9\u624d\u80fd\u8fdb\u884c\u5c5e\u6027\u7684\u64cd\u4f5c\n        if (retNode.prev != null) {\n            retNode.prev.next = retNode.next;\n        }\n        if (retNode.next != null) {\n            retNode.next.prev = retNode.prev;\n        }\n        // \u4e0a\u9762\u5206\u522b\u6539\u53d8\u4e86\u524d\u540e\u7ed3\u70b9\u7684 next \u548c prev \u6307\u5411\n        // \u5bf9 retNode \u6ca1\u6709\u6539\u53d8\n\n        // \u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        if (retNode == tail) {\n            tail = retNode.prev;\n        }\n\n        // \u63a5\u4e0b\u6765\u628a retNode \u79fb\u52a8\u5230\u5f53\u524d\u7684 head \u7ed3\u70b9\u4e4b\u524d\n        retNode.prev = null;\n        if (head != null) {\n            retNode.next = head;\n            head.prev = retNode;\n        }\n        head = retNode;\n    }\n\n    /**\n     * \u79fb\u9664\u5c3e\u7ed3\u70b9\n     */\n    private void evict() {\n        if (tail == null) {\n            return;\n        }\n\n        ListNode evictedNode = tail;\n        // \u6539\u53d8 tail \u6307\u9488\n        tail = evictedNode.prev;\n        // \u622a\u65ad\u5f15\u7528\n        evictedNode.prev = null;\n\n        // \u5bf9\u7ed3\u70b9\u7684\u64cd\u4f5c\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\n        if (tail != null) {\n            tail.next = null;\n        }\n        // \u53ea\u5269\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0chead \u7f6e\u7a7a\n        if (evictedNode == head) {\n            head = null;\n        }\n        this.map.remove(evictedNode.key);\n    }\n\n    /**\n     * \u6ce8\u610f\u4ee3\u7801\u4e2d\u5bf9\u7ed3\u70b9\u5c5e\u6027\u7684\u4f7f\u7528\u90fd\u4f1a\u52a0\u4e0a\u975e\u7a7a\u7684\u5224\u65ad\n     *\n     * @param node\n     */\n    private void addNodeToHead(ListNode node) {\n        if (node == null) {\n            return;\n        }\n        node.next = head;\n        if (head != null) {\n            head.prev = node;\n        }\n        node.prev = null;\n        head = node;\n        if (tail == null) {\n            tail = node;\n        }\n    }\n\n    public void put(int key, int value) {\n        ListNode curr;\n        if (this.map.containsKey(key)) {\n            curr = this.map.get(key);\n            curr.val = value;\n            moveToHead(curr);\n            return;\n        }\n        curr = new ListNode(key, value);\n        if (this.map.size() == this.capacity) {\n            // \u5982\u679c\u6ee1\u4e86\uff0c\u5148\u628a\u6700\u540e\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ee5\u53ca\u5728 map \u4e2d\u5bf9\u5e94\u7684 k-v \u5bf9\u79fb\u9664\u6389\n            evict();\n        }\n        addNodeToHead(curr);\n        this.map.put(key, curr);\n    }\n\n\n    // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700\n    // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868\n    // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49\n\n    public void printListNode() {\n        System.out.println(\"map:\" + map.keySet());\n        System.out.println(\"head:\" + head.key);\n        System.out.println(\"tail:\" + tail.key);\n        StringBuilder stringBuilder = new StringBuilder();\n        ListNode curNode = head;\n        stringBuilder.append(\"NULL\");\n        stringBuilder.append(\" <-> \");\n        while (curNode != null) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(curNode.key);\n            stringBuilder.append(\",\");\n            stringBuilder.append(curNode.val);\n            stringBuilder.append(\")\");\n            stringBuilder.append(\" <-> \");\n            curNode = curNode.next;\n        }\n        stringBuilder.append(\"NULL\");\n        System.out.println(stringBuilder.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2\n        int capacity = 2;\n        LRUCache2 lruCache = new LRUCache2(capacity);\n\n        lruCache.put(1, 100);\n        lruCache.printListNode();\n        lruCache.put(2, 200);\n        lruCache.printListNode();\n\n        int value1 = lruCache.get(1);\n        System.out.println(value1);\n        lruCache.printListNode();\n\n\n        lruCache.put(3, 300);\n        lruCache.printListNode();\n\n\n        int value2 = lruCache.get(2);\n        System.out.println(value2);\n        lruCache.printListNode();\n\n        lruCache.put(4, 400);\n        lruCache.printListNode();\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,val);\n */\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0146-lru-cache\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "146. LRU Cache"
        },
        {
            "location": "/leetcode-0146-lru-cache/#146-lru-cache",
            "text": "",
            "title": "146. LRU Cache"
        },
        {
            "location": "/leetcode-0146-lru-cache/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a\u00a0  LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236 \u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e  get  \u548c \u5199\u5165\u6570\u636e  put  \u3002  \u83b7\u53d6\u6570\u636e  get(key)  - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \n\u5199\u5165\u6570\u636e  put(key, value)  - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002  \u8fdb\u9636:  \u4f60\u662f\u5426\u53ef\u4ee5\u5728\u00a0 O(1)  \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f  \u793a\u4f8b:  LRUCache cache = new LRUCache( 2 /* \u7f13\u5b58\u5bb9\u91cf */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de  1\ncache.put(3, 3);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.put(4, 4);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.get(3);       // \u8fd4\u56de  3\ncache.get(4);       // \u8fd4\u56de  4     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 146. LRU Cache   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 146. LRU\u7f13\u5b58\u673a\u5236   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0146-lru-cache/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0146-lru-cache/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0146-lru-cache/#1",
            "text": "import java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * https://leetcode-cn.com/problems/lru-cache/description/\n */\npublic class LRUCache {\n\n    /**\n     * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b\n     */\n    private class ListNode {\n\n        // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684\n        // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83\n        private int key;\n\n        private int val;\n        private ListNode preV;\n        private ListNode next;\n\n        public ListNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n        }\n    }\n\n    private HashMap<Integer, ListNode> map;\n    private int capacity;\n    private int size;\n    private ListNode head;\n    private ListNode tail;\n\n    public LRUCache(int capacity) {\n        this.size = 0;\n        this.capacity = capacity;\n        // \u6211\u4eec\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5148\u6dfb\u52a0\u518d\u5220\u9664\u7684\u7b56\u7565\uff0c\u6240\u4ee5\u591a\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\n        this.map = new LinkedHashMap<>(capacity + 1);\n        this.head = null;\n        this.tail = null;\n    }\n\n    //\n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        // map \u4e2d\u6709\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7f13\u5b58\u4e2d\u6709\u6570\u636e\uff0c\u4ece ListNode \u4e2d\u62ff\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\n        ListNode retNode = map.get(key);\n        int retVal = retNode.val;\n        // \u79fb\u52a8\u5230\u5934\n        moveToHead(retNode);\n        return retVal;\n    }\n\n    /**\n     * \u628a\u5f53\u524d\u7ed3\u70b9\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\n     *\n     * @param retNode\n     */\n    private void moveToHead(ListNode retNode) {\n        // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c\n        if (head == retNode || retNode == null) {\n            return;\n        }\n\n        // \u5904\u7406\u5c3e\u6307\u9488\uff0cretNode \u7684\u524d\u6307\u9488\u548c\u540e\u6307\u9488\u7edf\u4e00\u5904\u7406\n        if (retNode == tail) {\n            tail = tail.preV;\n            if (tail != null) {\n                tail.next = null;\n            }\n        }\n\n        if (retNode.preV != null) {\n            retNode.preV.next = retNode.next;\n        }\n\n        if (retNode.next != null) {\n            retNode.next.preV = retNode.preV;\n        }\n\n        retNode.next = head;\n        retNode.preV = null;\n        if (head != null) {\n            head.preV = retNode;\n        }\n        head = retNode;\n    }\n\n\n    /**\n     * \u672b\u5c3e\u7ed3\u70b9\u91ca\u653e\uff0ctail \u6307\u9488\u524d\u79fb\n     */\n    private void removeLast() {\n\n        // \u6839\u636e\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0chead \u548c tail \u8981\u4e48\u90fd\u975e\u7a7a\uff0c\u8981\u4e48\u90fd\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\n\n        // head == null || tail == null \u5305\u62ec\u4e86\u4ed6\u4eec\u540c\u65f6\u4e3a null \u7684\u60c5\u51b5\n        if (head == null || tail == null) {\n            // throw new IllegalArgumentException(\"\u5f53\u524d\u53cc\u5411\u94fe\u8868\u4e3a null\uff0c\u4e0d\u80fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\");\n            return;\n        }\n\n        // \u5982\u679c\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48 head \u548c tail \u90fd\u7f6e\u4e3a null \uff0c\u5373\u6e05\u7a7a\u4e86\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868\n        if (head == tail) {\n            head = null;\n            tail = null;\n            return;\n        }\n        // \u6b64\u65f6\u53cc\u5411\u94fe\u8868\u975e\u7a7a\uff0c\u5e76\u4e14 head \u548c tail \u4e0d\u91cd\u5408\n        // \u53ea\u8981\u628a tail \u5411\u524d\u79fb\u52a8\uff0c\u5373\u53ef\n        ListNode removeNode = tail;\n        tail = tail.preV;\n        tail.next = null;\n        removeNode.preV = null;\n        removeNode.next = null;\n    }\n\n    /**\n     * \u628a\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n     *\n     * @param newNode\n     */\n    private void addFirst(ListNode newNode) {\n        if (newNode == null) {\n            return;\n        }\n        newNode.next = head;\n        newNode.preV = null;\n        if (head != null) {\n            head.preV = newNode;\n        }\n        head = newNode;\n\n        // \u8003\u8651\u4e00\u4e0b\u5c3e\u7ed3\u70b9\uff08\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\u6389\u8fd9\u4e2a\u60c5\u51b5\uff09\n        // \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\uff0c\u5373\u4e00\u5f00\u59cb\u7684\u60c5\u51b5\uff0ctail == null \u7684\u65f6\u5019\uff0ctail \u4e5f\u8981\u8d4b\u503c\n        if (tail == null) {\n            tail = newNode;\n        }\n    }\n\n    public void put(int key, int value) {\n        // \u5982\u679c map \u4e2d\u6709\n        // \u76f4\u63a5\u62ff\u51fa\u6765\uff0c\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 value\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\n        if (map.containsKey(key)) {\n            // \u8868\u793a\u51fb\u4e2d\u7f13\u5b58\n            ListNode curNode = map.get(key);\n            curNode.val = value;\n            moveToHead(curNode);\n            return;\n        }\n        // \u5982\u679c map \u4e2d\u6ca1\u6709\n        // \u60c5\u51b51\uff1asize = capacaity\uff0cmap \u4e2d\u79fb\u9664\u672b\u5c3e\u7ed3\u70b9\uff0cListNode \u628a tail \u79fb\u9664\uff0c\u5e76\u4e14\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n        ListNode newNode = new ListNode(key, value);\n        map.put(key, newNode);\n        if (size == capacity) {\n            // \u79fb\u9664 Map \u4e2d\u7684\u672b\u5c3e\u7ed3\u70b9\u5bf9\u5e94\u7684 key-value \u5bf9\n            int removeKey = tail.key;\n            map.remove(removeKey);\n            removeLast();\n        } else {\n            // \u60c5\u51b52\uff1asize < capacaity\uff0csize++\uff0cmap \u4e2d\u6dfb\u52a0\uff0c\u628a\u65b0\u7ed3\u70b9\u52a0\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934\n            assert size < capacity;\n            // \u628a\u4e00\u4e2a\u65b0\u7ed3\u70b9\u6dfb\u52a0\u5728\u94fe\u8868\u7684\u5f00\u5934\n            size++;\n        }\n        addFirst(newNode);\n    }\n\n\n    // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700\n    // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868\n    // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49\n\n    public void printListNode() {\n        System.out.println(\"map:\" + map.keySet());\n        System.out.println(\"head:\" + head.key);\n        System.out.println(\"tail:\" + tail.key);\n        StringBuilder stringBuilder = new StringBuilder();\n        ListNode curNode = head;\n        stringBuilder.append(\"NULL\");\n        stringBuilder.append(\" <-> \");\n        while (curNode != null) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(curNode.key);\n            stringBuilder.append(\",\");\n            stringBuilder.append(curNode.val);\n            stringBuilder.append(\")\");\n            stringBuilder.append(\" <-> \");\n            curNode = curNode.next;\n        }\n        stringBuilder.append(\"NULL\");\n        System.out.println(stringBuilder.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2\n        int capacity = 2;\n        LRUCache lruCache = new LRUCache(capacity);\n\n        lruCache.put(1, 100);\n        lruCache.printListNode();\n        lruCache.put(2, 200);\n        lruCache.printListNode();\n\n        int value1 = lruCache.get(1);\n        System.out.println(value1);\n        lruCache.printListNode();\n\n\n        lruCache.put(3, 300);\n        lruCache.printListNode();\n\n\n        int value2 = lruCache.get(2);\n        System.out.println(value2);\n        lruCache.printListNode();\n\n        lruCache.put(4, 400);\n        lruCache.printListNode();\n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0146-lru-cache/#2",
            "text": "import java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * https://leetcode-cn.com/problems/lru-cache/description/\n * \u53c2\u8003\u8d44\u6599\uff1ahttps://leetcode.com/problems/lru-cache/discuss/145937/100-Java-solution-with-doubly-linked-list-and-HashTable\n */\npublic class LRUCache2 {\n\n    /**\n     * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b\n     */\n    private class ListNode {\n        // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684\n        // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83\n        private int key;\n        private int val;\n        private ListNode prev;\n        private ListNode next;\n\n        public ListNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n        }\n    }\n\n    private HashMap<Integer, ListNode> map;\n    private int capacity;\n    private ListNode head;\n    private ListNode tail;\n\n    public LRUCache2(int capacity) {\n        this.capacity = capacity;\n        map = new LinkedHashMap<>(capacity);\n        this.head = null;\n        this.tail = null;\n    }\n\n    public int get(int key) {\n        if (!this.map.containsKey(key)) {\n            return -1;\n        }\n\n        ListNode curr = this.map.get(key);\n        if (curr == head) {\n            return curr.val;\n        }\n        // \u5982\u679c\u4e0d\u662f\u5934\u7ed3\u70b9\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u5934\u7ed3\u70b9\n        moveToHead(curr);\n        return curr.val;\n    }\n\n    private void moveToHead(ListNode retNode) {\n        // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c\n        if (retNode == head || retNode == null) {\n            return;\n        }\n\n        // \u4e0b\u9762\u8fd9\u4e24\u4e2a if \u4ee3\u7801\u5f88\u5de5\u6574\uff0c\u601d\u8def\u4e5f\u975e\u5e38\u6b63\u786e\n        // \u53ea\u6709\u5bf9\u975e\u7a7a\u7ed3\u70b9\u624d\u80fd\u8fdb\u884c\u5c5e\u6027\u7684\u64cd\u4f5c\n        if (retNode.prev != null) {\n            retNode.prev.next = retNode.next;\n        }\n        if (retNode.next != null) {\n            retNode.next.prev = retNode.prev;\n        }\n        // \u4e0a\u9762\u5206\u522b\u6539\u53d8\u4e86\u524d\u540e\u7ed3\u70b9\u7684 next \u548c prev \u6307\u5411\n        // \u5bf9 retNode \u6ca1\u6709\u6539\u53d8\n\n        // \u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        if (retNode == tail) {\n            tail = retNode.prev;\n        }\n\n        // \u63a5\u4e0b\u6765\u628a retNode \u79fb\u52a8\u5230\u5f53\u524d\u7684 head \u7ed3\u70b9\u4e4b\u524d\n        retNode.prev = null;\n        if (head != null) {\n            retNode.next = head;\n            head.prev = retNode;\n        }\n        head = retNode;\n    }\n\n    /**\n     * \u79fb\u9664\u5c3e\u7ed3\u70b9\n     */\n    private void evict() {\n        if (tail == null) {\n            return;\n        }\n\n        ListNode evictedNode = tail;\n        // \u6539\u53d8 tail \u6307\u9488\n        tail = evictedNode.prev;\n        // \u622a\u65ad\u5f15\u7528\n        evictedNode.prev = null;\n\n        // \u5bf9\u7ed3\u70b9\u7684\u64cd\u4f5c\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\n        if (tail != null) {\n            tail.next = null;\n        }\n        // \u53ea\u5269\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0chead \u7f6e\u7a7a\n        if (evictedNode == head) {\n            head = null;\n        }\n        this.map.remove(evictedNode.key);\n    }\n\n    /**\n     * \u6ce8\u610f\u4ee3\u7801\u4e2d\u5bf9\u7ed3\u70b9\u5c5e\u6027\u7684\u4f7f\u7528\u90fd\u4f1a\u52a0\u4e0a\u975e\u7a7a\u7684\u5224\u65ad\n     *\n     * @param node\n     */\n    private void addNodeToHead(ListNode node) {\n        if (node == null) {\n            return;\n        }\n        node.next = head;\n        if (head != null) {\n            head.prev = node;\n        }\n        node.prev = null;\n        head = node;\n        if (tail == null) {\n            tail = node;\n        }\n    }\n\n    public void put(int key, int value) {\n        ListNode curr;\n        if (this.map.containsKey(key)) {\n            curr = this.map.get(key);\n            curr.val = value;\n            moveToHead(curr);\n            return;\n        }\n        curr = new ListNode(key, value);\n        if (this.map.size() == this.capacity) {\n            // \u5982\u679c\u6ee1\u4e86\uff0c\u5148\u628a\u6700\u540e\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ee5\u53ca\u5728 map \u4e2d\u5bf9\u5e94\u7684 k-v \u5bf9\u79fb\u9664\u6389\n            evict();\n        }\n        addNodeToHead(curr);\n        this.map.put(key, curr);\n    }\n\n\n    // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700\n    // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868\n    // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49\n\n    public void printListNode() {\n        System.out.println(\"map:\" + map.keySet());\n        System.out.println(\"head:\" + head.key);\n        System.out.println(\"tail:\" + tail.key);\n        StringBuilder stringBuilder = new StringBuilder();\n        ListNode curNode = head;\n        stringBuilder.append(\"NULL\");\n        stringBuilder.append(\" <-> \");\n        while (curNode != null) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(curNode.key);\n            stringBuilder.append(\",\");\n            stringBuilder.append(curNode.val);\n            stringBuilder.append(\")\");\n            stringBuilder.append(\" <-> \");\n            curNode = curNode.next;\n        }\n        stringBuilder.append(\"NULL\");\n        System.out.println(stringBuilder.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2\n        int capacity = 2;\n        LRUCache2 lruCache = new LRUCache2(capacity);\n\n        lruCache.put(1, 100);\n        lruCache.printListNode();\n        lruCache.put(2, 200);\n        lruCache.printListNode();\n\n        int value1 = lruCache.get(1);\n        System.out.println(value1);\n        lruCache.printListNode();\n\n\n        lruCache.put(3, 300);\n        lruCache.printListNode();\n\n\n        int value2 = lruCache.get(2);\n        System.out.println(value2);\n        lruCache.printListNode();\n\n        lruCache.put(4, 400);\n        lruCache.printListNode();\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,val);\n */  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0146-lru-cache  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/",
            "text": "147. Insertion Sort List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \n\n\n\n\n\n\n\u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002\n\n\n\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a\n\n\n\n\n\u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002\n\n\n\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002\n\n\n\u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002\n\n\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\u8f93\u5165: 4->2->1->3\n\u8f93\u51fa: 1->2->3->4\n\n\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\u8f93\u5165: -1->5->3->4->0\n\u8f93\u51fa: -1->0->3->4->5\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n147. Insertion Sort List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002\n\n1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b\n\n2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b\n\n3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b\n\n4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002  \n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode insertionSortList(ListNode head) {\n        // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5\n        if (head == null) {\n            return null;\n        }\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = head;\n        ListNode pre;\n        ListNode next;\n        while (true) {\n            // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86\n            // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b\n            // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\n            while (curNode.next != null && curNode.val <= curNode.next.val) {\n                curNode = curNode.next;\n            }\n            // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n            if (curNode.next == null) {\n                // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86\n                break;\n            } else {\n                // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f\n                // pre \u6253\u56de\u5230\u8d77\u70b9\n                pre = dummyNode;\n                next = curNode.next;\n                // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                while (pre.next.val < next.val) {\n                    pre = pre.next;\n                }\n                // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1\n                curNode.next = next.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                next.next = pre.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                pre.next = next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 7, 9, 10, 8};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode insertionSortList = solution.insertionSortList(head);\n        System.out.println(insertionSortList);\n    }\n}",
            "title": "147. Insertion Sort List"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#147-insertion-sort-list",
            "text": "",
            "title": "147. Insertion Sort List"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002     \u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002  \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a   \u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002  \u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002  \u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002   \u793a\u4f8b 1\uff1a  \u8f93\u5165: 4->2->1->3\n\u8f93\u51fa: 1->2->3->4  \u793a\u4f8b 2\uff1a  \u8f93\u5165: -1->5->3->4->0\n\u8f93\u51fa: -1->0->3->4->5   \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 147. Insertion Sort List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002 \n1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b \n2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b \n3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b \n4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002 \n\u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0147-insertion-sort-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode insertionSortList(ListNode head) {\n        // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5\n        if (head == null) {\n            return null;\n        }\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode curNode = head;\n        ListNode pre;\n        ListNode next;\n        while (true) {\n            // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86\n            // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b\n            // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\n            while (curNode.next != null && curNode.val <= curNode.next.val) {\n                curNode = curNode.next;\n            }\n            // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n            if (curNode.next == null) {\n                // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86\n                break;\n            } else {\n                // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f\n                // pre \u6253\u56de\u5230\u8d77\u70b9\n                pre = dummyNode;\n                next = curNode.next;\n                // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                while (pre.next.val < next.val) {\n                    pre = pre.next;\n                }\n                // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1\n                curNode.next = next.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                next.next = pre.next;\n                // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2\n                pre.next = next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 7, 9, 10, 8};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode insertionSortList = solution.insertionSortList(head);\n        System.out.println(insertionSortList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0148-sort-list/",
            "text": "148. Sort List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728\u00a0\nO\n(\nn\n\u00a0log\u00a0\nn\n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 4->2->1->3\n\n\u8f93\u51fa:\n 1->2->3->4\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n -1->5->3->4->0\n\n\u8f93\u51fa:\n -1->0->3->4->5\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n148. Sort List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n148. \u6392\u5e8f\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\n\n\n\n\n\u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002\n\n\n\n\n\u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(int[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode sortList(ListNode head) {\n        // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\n        ListNode fast = head;\n        ListNode slow = head;\n        // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00\n        ListNode midNext = slow.next;\n        // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868\n        slow.next = null;\n        ListNode listNodeLeft = sortList(head);\n        ListNode listNodeRight = sortList(midNext);\n        // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86\n        return mergeOfTwoSortListNode(listNodeLeft, listNodeRight);\n    }\n\n    private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortListNode(l1, l2.next);\n            return l2;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{4, 2, 1, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode sortList = solution.sortList(head);\n        System.out.println(sortList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\n/**\n * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f\n        ListNode[] counter = new ListNode[64];\n        ListNode curNode = head;\n        // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15\n        int maxIndex = 0;\n        while (curNode != null) {\n            // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a\n            ListNode carryNode = curNode;\n            // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406\n            curNode = curNode.next;\n            // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb\n            carryNode.next = null;\n            // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e\n            int i = 0;\n            // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76\n            // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d\n            while (counter[i] != null) {\n                ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]);\n                counter[i] = null;\n                i++;\n                carryNode = newMergeNode;\n            }\n            // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\n            counter[i] = carryNode;\n            // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a\n            if (i > maxIndex) {\n                maxIndex = i;\n            }\n        }\n        // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76\n        // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65\n        // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/\n        ListNode res = null;\n        for (int i = 0; i <= maxIndex; i++) {\n            if (counter[i] != null) {\n                res = mergeOfTwoSortedListNode(res, counter[i]);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210\n     *\n     * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681\n     * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682\n     * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868\n     */\n    private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortedListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortedListNode(l1, l2.next);\n            return l2;\n        }\n    }\n}\n\n\n\n\n\u53c2\u8003\u8d44\u6599\uff1a\n1. http://www.cnblogs.com/bin3/articles/1858691.html\n\n2. https://blog.csdn.net/qq575787460/article/details/40706747  \n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "148. Sort List"
        },
        {
            "location": "/leetcode-0148-sort-list/#148-sort-list",
            "text": "",
            "title": "148. Sort List"
        },
        {
            "location": "/leetcode-0148-sort-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728\u00a0 O ( n \u00a0log\u00a0 n ) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  4->2->1->3 \u8f93\u51fa:  1->2->3->4  \u793a\u4f8b 2:  \u8f93\u5165:  -1->5->3->4->0 \u8f93\u51fa:  -1->0->3->4->5    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 148. Sort List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 148. \u6392\u5e8f\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0148-sort-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002   \u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09   \u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002   \u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\n\u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0148-sort-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0148-sort-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(int[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public ListNode sortList(ListNode head) {\n        // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\n        ListNode fast = head;\n        ListNode slow = head;\n        // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00\n        ListNode midNext = slow.next;\n        // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868\n        slow.next = null;\n        ListNode listNodeLeft = sortList(head);\n        ListNode listNodeRight = sortList(midNext);\n        // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86\n        return mergeOfTwoSortListNode(listNodeLeft, listNodeRight);\n    }\n\n    private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortListNode(l1, l2.next);\n            return l2;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{4, 2, 1, 3};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode sortList = solution.sortList(head);\n        System.out.println(sortList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0148-sort-list/#2",
            "text": "/**\n * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f\n        ListNode[] counter = new ListNode[64];\n        ListNode curNode = head;\n        // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15\n        int maxIndex = 0;\n        while (curNode != null) {\n            // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a\n            ListNode carryNode = curNode;\n            // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406\n            curNode = curNode.next;\n            // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb\n            carryNode.next = null;\n            // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e\n            int i = 0;\n            // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76\n            // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d\n            while (counter[i] != null) {\n                ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]);\n                counter[i] = null;\n                i++;\n                carryNode = newMergeNode;\n            }\n            // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\n            counter[i] = carryNode;\n            // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a\n            if (i > maxIndex) {\n                maxIndex = i;\n            }\n        }\n        // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76\n        // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65\n        // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/\n        ListNode res = null;\n        for (int i = 0; i <= maxIndex; i++) {\n            if (counter[i] != null) {\n                res = mergeOfTwoSortedListNode(res, counter[i]);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210\n     *\n     * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681\n     * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682\n     * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868\n     */\n    private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        if (l1.val < l2.val) {\n            l1.next = mergeOfTwoSortedListNode(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeOfTwoSortedListNode(l1, l2.next);\n            return l2;\n        }\n    }\n}  \u53c2\u8003\u8d44\u6599\uff1a\n1. http://www.cnblogs.com/bin3/articles/1858691.html \n2. https://blog.csdn.net/qq575787460/article/details/40706747    \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com  \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/",
            "text": "153. Find Minimum in Rotated Sorted Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002\n\n\n( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0\n[0,1,2,4,5,6,7]\n \n \n\u53ef\u80fd\u53d8\u4e3a\u00a0\n[4,5,6,7,0,1,2]\n\u00a0)\u3002\n\n\n\u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [3,4,5,1,2]\n\n\u8f93\u51fa:\n 1\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [4,5,6,7,0,1,2]\n\n\u8f93\u51fa:\n 0\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n153. Find Minimum in Rotated Sorted Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u201d\u8fd9\u4e2a\u4fe1\u606f\u662f\u5173\u952e\u7684\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002\n\n\npublic class Solution {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\");\n        }\n        int left = 0;\n        int right = len - 1;\n        // \u601d\u8003\uff0c\u4e3a\u4ec0\u4e48\u662f left < right\n        while (left < right) {\n            // \u8fd9\u4e00\u6b65\u5c31\u662f\u53d6\u4e2d\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\n            int mid = left + (right - left) / 2;\n\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n\n            if (nums[mid] > nums[right]) {\n                // 5 6 7 8 9 1 2\n                // \u6b64\u65f6\u53ef\u4ee5\u6254\u6389 mid \u7684\u503c\n                left = mid + 1;\n            } else {\n                // 5 6 7 1 2 3 4\n                assert nums[mid] < nums[right];\n                // \u6b64\u65f6 mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15\n                right = mid;\n            }\n        }\n\n        // \u9000\u51fa\u5faa\u73af\u8bf4\u660e left \u4e0e right \u76f8\u7b49\uff0c\u6240\u4ee5\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\uff0c\n        // \u6240\u4ee5 return [left] \u6216\u8005 return [right] \u90fd\u53ef\u4ee5\u4e86\n        // \u6ce8\u610f\u4e0d\u80fd return mid\uff0c\u53ef\u4ee5\u4ece {2,1} \u8fd9\u4e2a\u8f93\u5165\u770b\u51fa\u6765\u3002\n\n        return nums[right];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {4, 5, 6, 7, 0, 1, 2};\n        int min = solution.findMin(nums);\n        System.out.println(min);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\n\n\n/**\n * \u5206\u6cbb\u7684\u5199\u6cd5\n */\npublic class Solution2 {\n\n    // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    private int findMin(int[] nums, int left, int right) {\n        // \u601d\u8003\uff1a\u8fd9\u4e2a\u4e34\u754c\u6761\u4ef6\u662f\u4e3a\u4ec0\u4e48?\n        // \u6216\u8005\u5199\u6210 left + 1 >= right\n        if (left == right || left + 1 == right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        int mid = left + (right - left) / 2;\n        // 8 9 1 2 3 4 5 6 7\n        if (nums[mid] < nums[right]) {\n            // \u53f3\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n            return Math.min(findMin(nums, left, mid - 1), nums[mid]);\n        } else {\n            // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n            // nums[mid] > nums[right]\n            // 3 4 5 6 7 8 1 2\n            return Math.min(nums[left], findMin(nums, mid + 1, right));\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int[] nums = {1, 2};\n        int solution2Min = solution2.findMin(nums);\n        System.out.println(solution2Min);\n    }\n\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\n\n\npublic class Solution3 {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u7ed9\u51fa\u7684\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6ca1\u6709\u6700\u5c0f\u503c\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    public int findMin(int[] nums, int left, int right) {\n        // \u5206\u6cbb\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u8981\u5904\u7406\u8981\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (left + 1 >= right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        if (nums[left] < nums[right]) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        return Math.min(findMin(nums, left, mid), findMin(nums, mid + 1, right));\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0153-find-minimum-in-rotated-sorted-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "153. Find Minimum in Rotated Sorted Array"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#153-find-minimum-in-rotated-sorted-array",
            "text": "",
            "title": "153. Find Minimum in Rotated Sorted Array"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002  ( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0 [0,1,2,4,5,6,7]     \u53ef\u80fd\u53d8\u4e3a\u00a0 [4,5,6,7,0,1,2] \u00a0)\u3002  \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [3,4,5,1,2] \u8f93\u51fa:  1  \u793a\u4f8b 2:  \u8f93\u5165:  [4,5,6,7,0,1,2] \u8f93\u51fa:  0    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 153. Find Minimum in Rotated Sorted Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u201d\u8fd9\u4e2a\u4fe1\u606f\u662f\u5173\u952e\u7684\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#1",
            "text": "public class Solution {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\");\n        }\n        int left = 0;\n        int right = len - 1;\n        // \u601d\u8003\uff0c\u4e3a\u4ec0\u4e48\u662f left < right\n        while (left < right) {\n            // \u8fd9\u4e00\u6b65\u5c31\u662f\u53d6\u4e2d\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\n            int mid = left + (right - left) / 2;\n\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n            // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid]\n\n            if (nums[mid] > nums[right]) {\n                // 5 6 7 8 9 1 2\n                // \u6b64\u65f6\u53ef\u4ee5\u6254\u6389 mid \u7684\u503c\n                left = mid + 1;\n            } else {\n                // 5 6 7 1 2 3 4\n                assert nums[mid] < nums[right];\n                // \u6b64\u65f6 mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15\n                right = mid;\n            }\n        }\n\n        // \u9000\u51fa\u5faa\u73af\u8bf4\u660e left \u4e0e right \u76f8\u7b49\uff0c\u6240\u4ee5\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\uff0c\n        // \u6240\u4ee5 return [left] \u6216\u8005 return [right] \u90fd\u53ef\u4ee5\u4e86\n        // \u6ce8\u610f\u4e0d\u80fd return mid\uff0c\u53ef\u4ee5\u4ece {2,1} \u8fd9\u4e2a\u8f93\u5165\u770b\u51fa\u6765\u3002\n\n        return nums[right];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {4, 5, 6, 7, 0, 1, 2};\n        int min = solution.findMin(nums);\n        System.out.println(min);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#2",
            "text": "/**\n * \u5206\u6cbb\u7684\u5199\u6cd5\n */\npublic class Solution2 {\n\n    // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    private int findMin(int[] nums, int left, int right) {\n        // \u601d\u8003\uff1a\u8fd9\u4e2a\u4e34\u754c\u6761\u4ef6\u662f\u4e3a\u4ec0\u4e48?\n        // \u6216\u8005\u5199\u6210 left + 1 >= right\n        if (left == right || left + 1 == right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        int mid = left + (right - left) / 2;\n        // 8 9 1 2 3 4 5 6 7\n        if (nums[mid] < nums[right]) {\n            // \u53f3\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n            return Math.min(findMin(nums, left, mid - 1), nums[mid]);\n        } else {\n            // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4\n            // nums[mid] > nums[right]\n            // 3 4 5 6 7 8 1 2\n            return Math.min(nums[left], findMin(nums, mid + 1, right));\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int[] nums = {1, 2};\n        int solution2Min = solution2.findMin(nums);\n        System.out.println(solution2Min);\n    }\n\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3"
        },
        {
            "location": "/leetcode-0153-find-minimum-in-rotated-sorted-array/#3",
            "text": "public class Solution3 {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u7ed9\u51fa\u7684\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6ca1\u6709\u6700\u5c0f\u503c\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    public int findMin(int[] nums, int left, int right) {\n        // \u5206\u6cbb\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u8981\u5904\u7406\u8981\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\n        if (left + 1 >= right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        if (nums[left] < nums[right]) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        return Math.min(findMin(nums, left, mid), findMin(nums, mid + 1, right));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0153-find-minimum-in-rotated-sorted-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/",
            "text": "154. Find Minimum in Rotated Sorted Array II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002\n\n\n( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0\n[0,1,2,4,5,6,7]\n \n \n\u53ef\u80fd\u53d8\u4e3a\u00a0\n[4,5,6,7,0,1,2]\n\u00a0)\u3002\n\n\n\u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002\n\n\n\u6ce8\u610f\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\u8f93\u5165:\n [1,3,5]\n\n\u8f93\u51fa:\n 1\n\n\n\u793a\u4f8b\u00a02\uff1a\n\n\n\u8f93\u5165:\n [2,2,2,0,1]\n\n\u8f93\u51fa:\n 0\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\u8fd9\u9053\u9898\u662f\u00a0\n\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\n\u00a0\u7684\u5ef6\u4f38\u9898\u76ee\u3002\n\n\n\u5141\u8bb8\u91cd\u590d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u5982\u4f55\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n154. Find Minimum in Rotated Sorted Array II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u7684\uff0c\u8fd9\u9053\u9898\u548c LeetCode \u7b2c 153 \u9898\u6ca1\u6709\u533a\u522b\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\u3002\n\n\npublic class Solution {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6700\u5c0f\u503c\u4e0d\u5b58\u5728\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    private int findMin(int[] nums, int left, int right) {\n        if (left + 1 >= right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        if (nums[left] < nums[right]) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        return Math.min(findMin(nums, left, mid - 1), findMin(nums, mid, right));\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 3, 5};\n        Solution solution = new Solution();\n        int solutionMin = solution.findMin(nums);\n        System.out.println(solutionMin);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0154-find-minimum-in-rotated-sorted-array-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "154. Find Minimum in Rotated Sorted Array II"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#154-find-minimum-in-rotated-sorted-array-ii",
            "text": "",
            "title": "154. Find Minimum in Rotated Sorted Array II"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002  ( \u4f8b\u5982\uff0c\u6570\u7ec4\u00a0 [0,1,2,4,5,6,7]     \u53ef\u80fd\u53d8\u4e3a\u00a0 [4,5,6,7,0,1,2] \u00a0)\u3002  \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002  \u6ce8\u610f\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002  \u793a\u4f8b 1\uff1a  \u8f93\u5165:  [1,3,5] \u8f93\u51fa:  1  \u793a\u4f8b\u00a02\uff1a  \u8f93\u5165:  [2,2,2,0,1] \u8f93\u51fa:  0  \u8bf4\u660e\uff1a   \u8fd9\u9053\u9898\u662f\u00a0 \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c \u00a0\u7684\u5ef6\u4f38\u9898\u76ee\u3002  \u5141\u8bb8\u91cd\u590d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u5982\u4f55\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 154. Find Minimum in Rotated Sorted Array II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u7684\uff0c\u8fd9\u9053\u9898\u548c LeetCode \u7b2c 153 \u9898\u6ca1\u6709\u533a\u522b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#1",
            "text": "public class Solution {\n\n    public int findMin(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6700\u5c0f\u503c\u4e0d\u5b58\u5728\");\n        }\n        return findMin(nums, 0, len - 1);\n    }\n\n    private int findMin(int[] nums, int left, int right) {\n        if (left + 1 >= right) {\n            return Math.min(nums[left], nums[right]);\n        }\n        if (nums[left] < nums[right]) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        return Math.min(findMin(nums, left, mid - 1), findMin(nums, mid, right));\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 3, 5};\n        Solution solution = new Solution();\n        int solutionMin = solution.findMin(nums);\n        System.out.println(solutionMin);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0154-find-minimum-in-rotated-sorted-array-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\u3002"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/",
            "text": "160. Intersection of Two Linked Lists\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\n\n\n\u00a0\n\n\n\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868\n\uff1a\n\n\nA:          a1 \u2192 a2\n                   \u2198\n                     c1 \u2192 c2 \u2192 c3\n                   \u2197            \nB:     b1 \u2192 b2 \u2192 b3\n\n\n\n\u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002\n\n\n\u00a0\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de \nnull\n.\n\n\n\u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002\n\n\n\u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002\n\n\n\u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O(\nn\n) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O(\n1\n) \u5185\u5b58\u3002\n\n\n\n\n\u00a0\n\n\n\u81f4\u8c22\n:\n\n\u7279\u522b\u611f\u8c22\u00a0\n@stellari\n \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n160. Intersection of Two Linked Lists\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n160. \u76f8\u4ea4\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if headA is None or headB is None:\n            return None\n        node1 = headA\n        node2 = headB\n        while node1 != node2:\n            if node1:\n                node1 = node1.next\n            else:\n                node1 = headB\n            if node2:\n                node2 = node2.next\n            else:\n                node2 = headA\n        return node1\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0160-intersection-of-two-linked-lists\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "160. Intersection of Two Linked Lists"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/#160-intersection-of-two-linked-lists",
            "text": "",
            "title": "160. Intersection of Two Linked Lists"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002  \u00a0  \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868 \uff1a  A:          a1 \u2192 a2\n                   \u2198\n                     c1 \u2192 c2 \u2192 c3\n                   \u2197            \nB:     b1 \u2192 b2 \u2192 b3  \u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002  \u00a0  \u6ce8\u610f\uff1a   \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de  null .  \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002  \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002  \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O( 1 ) \u5185\u5b58\u3002   \u00a0  \u81f4\u8c22 : \n\u7279\u522b\u611f\u8c22\u00a0 @stellari  \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 160. Intersection of Two Linked Lists   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 160. \u76f8\u4ea4\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0160-intersection-of-two-linked-lists/#1",
            "text": "Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if headA is None or headB is None:\n            return None\n        node1 = headA\n        node2 = headB\n        while node1 != node2:\n            if node1:\n                node1 = node1.next\n            else:\n                node1 = headB\n            if node2:\n                node2 = node2.next\n            else:\n                node2 = headA\n        return node1  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0160-intersection-of-two-linked-lists  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/",
            "text": "168. Excel Sheet Column Title\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u5b83\u5728 Excel \u8868\u4e2d\u76f8\u5bf9\u5e94\u7684\u5217\u540d\u79f0\u3002\n\n\n\u4f8b\u5982\uff0c\n\n\n    1 -> A\n    2 -> B\n    3 -> C\n    ...\n    26 -> Z\n    27 -> AA\n    28 -> AB \n    ...\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 1\n\n\u8f93\u51fa:\n \"A\"\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 28\n\n\u8f93\u51fa:\n \"AB\"\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n 701\n\n\u8f93\u51fa:\n \"ZY\"\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n168. Excel Sheet Column Title\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n168. Excel\u8868\u5217\u540d\u79f0\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0168-excel-sheet-column-title\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "168. Excel Sheet Column Title"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/#168-excel-sheet-column-title",
            "text": "",
            "title": "168. Excel Sheet Column Title"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u5b83\u5728 Excel \u8868\u4e2d\u76f8\u5bf9\u5e94\u7684\u5217\u540d\u79f0\u3002  \u4f8b\u5982\uff0c      1 -> A\n    2 -> B\n    3 -> C\n    ...\n    26 -> Z\n    27 -> AA\n    28 -> AB \n    ...  \u793a\u4f8b 1:  \u8f93\u5165:  1 \u8f93\u51fa:  \"A\"  \u793a\u4f8b\u00a02:  \u8f93\u5165:  28 \u8f93\u51fa:  \"AB\"  \u793a\u4f8b\u00a03:  \u8f93\u5165:  701 \u8f93\u51fa:  \"ZY\"    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 168. Excel Sheet Column Title   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 168. Excel\u8868\u5217\u540d\u79f0   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0168-excel-sheet-column-title/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0168-excel-sheet-column-title  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/",
            "text": "171. Excel Sheet Column Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2aExcel\u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\uff0c\u8fd4\u56de\u5176\u76f8\u5e94\u7684\u5217\u5e8f\u53f7\u3002\n\n\n\u4f8b\u5982\uff0c\n\n\n    A -> 1\n    B -> 2\n    C -> 3\n    ...\n    Z -> 26\n    AA -> 27\n    AB -> 28 \n    ...\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \"A\"\n\n\u8f93\u51fa:\n 1\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165: \n\"AB\"\n\n\u8f93\u51fa:\n 28\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165: \n\"ZY\"\n\n\u8f93\u51fa:\n 701\n\n\n\u81f4\u8c22\uff1a\n\n\u7279\u522b\u611f\u8c22\u00a0\n@ts\n\u00a0\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n171. Excel Sheet Column Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n171. Excel\u8868\u5217\u5e8f\u53f7\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0171-excel-sheet-column-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "171. Excel Sheet Column Number"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/#171-excel-sheet-column-number",
            "text": "",
            "title": "171. Excel Sheet Column Number"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2aExcel\u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\uff0c\u8fd4\u56de\u5176\u76f8\u5e94\u7684\u5217\u5e8f\u53f7\u3002  \u4f8b\u5982\uff0c      A -> 1\n    B -> 2\n    C -> 3\n    ...\n    Z -> 26\n    AA -> 27\n    AB -> 28 \n    ...  \u793a\u4f8b 1:  \u8f93\u5165:  \"A\" \u8f93\u51fa:  1  \u793a\u4f8b\u00a02:  \u8f93\u5165:  \"AB\" \u8f93\u51fa:  28  \u793a\u4f8b\u00a03:  \u8f93\u5165:  \"ZY\" \u8f93\u51fa:  701  \u81f4\u8c22\uff1a \n\u7279\u522b\u611f\u8c22\u00a0 @ts \u00a0\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 171. Excel Sheet Column Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 171. Excel\u8868\u5217\u5e8f\u53f7   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0171-excel-sheet-column-number/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0171-excel-sheet-column-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/",
            "text": "173. Binary Search Tree Iterator\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002\n\n\n\u8c03\u7528 \nnext()\n \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002\n\n\n\u6ce8\u610f:\n \nnext()\n \u548c\nhasNext()\n\u00a0\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u5e76\u4f7f\u7528\u00a0\nO(h)\u00a0\n\u5185\u5b58\uff0c\u5176\u4e2d\u00a0\nh\u00a0\n\u662f\u6811\u7684\u9ad8\u5ea6\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n173. Binary Search Tree Iterator\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Stack;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class BSTIterator {\n\n    private Stack<TreeNode> stack;\n\n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        TreeNode p = root;\n        while (p != null) {\n            stack.push(p);\n            p = p.left;\n        }\n    }\n\n    /**\n     * @return whether we have a next smallest number\n     */\n    public boolean hasNext() {\n        return !stack.empty();\n    }\n\n    /**\n     * @return the next smallest number\n     */\n    public int next() {\n        TreeNode top = stack.pop();\n        if (top.right != null) {\n            TreeNode p = top.right;\n            while (p != null) {\n                stack.push(p);\n                p = p.left;\n            }\n        }\n        return top.val;\n    }\n\n    public static void main(String[] args) {\n        TreeNode node1 = new TreeNode(1);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node3 = new TreeNode(3);\n        TreeNode node4 = new TreeNode(4);\n        TreeNode node5 = new TreeNode(5);\n\n        node2.left = node1;\n        node2.right = node5;\n        node5.left = node4;\n        node4.left = node3;\n\n        BSTIterator bstIterator = new BSTIterator(node2);\n        while (bstIterator.hasNext()){\n            System.out.println(bstIterator.next());\n        }\n    }\n}\n\n/**\n * Your BSTIterator will be called like this:\n * BSTIterator i = new BSTIterator(root);\n * while (i.hasNext()) v[f()] = i.next();\n */\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0173-binary-search-tree-iterator\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "173. Binary Search Tree Iterator"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/#173-binary-search-tree-iterator",
            "text": "",
            "title": "173. Binary Search Tree Iterator"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002  \u8c03\u7528  next()  \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002  \u6ce8\u610f:   next()  \u548c hasNext() \u00a0\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u5e76\u4f7f\u7528\u00a0 O(h)\u00a0 \u5185\u5b58\uff0c\u5176\u4e2d\u00a0 h\u00a0 \u662f\u6811\u7684\u9ad8\u5ea6\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 173. Binary Search Tree Iterator   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0173-binary-search-tree-iterator/#1",
            "text": "import java.util.Stack;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class BSTIterator {\n\n    private Stack<TreeNode> stack;\n\n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        TreeNode p = root;\n        while (p != null) {\n            stack.push(p);\n            p = p.left;\n        }\n    }\n\n    /**\n     * @return whether we have a next smallest number\n     */\n    public boolean hasNext() {\n        return !stack.empty();\n    }\n\n    /**\n     * @return the next smallest number\n     */\n    public int next() {\n        TreeNode top = stack.pop();\n        if (top.right != null) {\n            TreeNode p = top.right;\n            while (p != null) {\n                stack.push(p);\n                p = p.left;\n            }\n        }\n        return top.val;\n    }\n\n    public static void main(String[] args) {\n        TreeNode node1 = new TreeNode(1);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node3 = new TreeNode(3);\n        TreeNode node4 = new TreeNode(4);\n        TreeNode node5 = new TreeNode(5);\n\n        node2.left = node1;\n        node2.right = node5;\n        node5.left = node4;\n        node4.left = node3;\n\n        BSTIterator bstIterator = new BSTIterator(node2);\n        while (bstIterator.hasNext()){\n            System.out.println(bstIterator.next());\n        }\n    }\n}\n\n/**\n * Your BSTIterator will be called like this:\n * BSTIterator i = new BSTIterator(root);\n * while (i.hasNext()) v[f()] = i.next();\n */  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0173-binary-search-tree-iterator  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/",
            "text": "175. Combine Two Tables\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u88681: \nPerson\n\n\n+-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId \u662f\u4e0a\u8868\u4e3b\u952e\n\n\n\n\u88682: \nAddress\n\n\n+-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId \u662f\u4e0a\u8868\u4e3b\u952e\n\n\n\n\u00a0\n\n\n\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a\u65e0\u8bba person \u662f\u5426\u6709\u5730\u5740\u4fe1\u606f\uff0c\u90fd\u9700\u8981\u57fa\u4e8e\u4e0a\u8ff0\u4e24\u8868\u63d0\u4f9b\u00a0person \u7684\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n\u00a0\n\n\nFirstName, LastName, City, State\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n175. Combine Two Tables\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n175. \u7ec4\u5408\u4e24\u4e2a\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u5c31\u8003\u4e86\u5de6\u8fde\u63a5\u3002\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a\n\n\nDROP TABLE IF EXISTS Person;\nDROP TABLE IF EXISTS Address;\n\nCREATE TABLE Person(\n    PersonId INT PRIMARY KEY AUTO_INCREMENT,\n    FirstName VARCHAR(200),\n    LastName VARCHAR(200)\n);\n\n\ninsert into Person(FirstName,LastName) values('li','wei');\ninsert into Person(FirstName,LastName) values('zhou','guang');\ninsert into Person(FirstName,LastName) values('yuan','lian');\n\nCREATE TABLE Address(\n    AddressId INT PRIMARY KEY AUTO_INCREMENT,\n    PersonId INT,\n    City VARCHAR(200),\n    State VARCHAR(200)\n);\n\ninsert into Address(PersonId,City,State) values(1,'beijng','haidianqu');\ninsert into Address(PersonId,City,State) values(2,'shanghai','xuhuiqu');\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nselect t1.FirstName, t1.LastName, t2.City, t2.State\nfrom Person t1 left join Address t2 on t1.`PersonId` = t2.`PersonId`;\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0175-combine-two-tables\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "175. Combine Two Tables"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/#175-combine-two-tables",
            "text": "",
            "title": "175. Combine Two Tables"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u88681:  Person  +-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId \u662f\u4e0a\u8868\u4e3b\u952e  \u88682:  Address  +-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId \u662f\u4e0a\u8868\u4e3b\u952e  \u00a0  \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a\u65e0\u8bba person \u662f\u5426\u6709\u5730\u5740\u4fe1\u606f\uff0c\u90fd\u9700\u8981\u57fa\u4e8e\u4e0a\u8ff0\u4e24\u8868\u63d0\u4f9b\u00a0person \u7684\u4ee5\u4e0b\u4fe1\u606f\uff1a  \u00a0  FirstName, LastName, City, State    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 175. Combine Two Tables   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 175. \u7ec4\u5408\u4e24\u4e2a\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u5c31\u8003\u4e86\u5de6\u8fde\u63a5\u3002  \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a  DROP TABLE IF EXISTS Person;\nDROP TABLE IF EXISTS Address;\n\nCREATE TABLE Person(\n    PersonId INT PRIMARY KEY AUTO_INCREMENT,\n    FirstName VARCHAR(200),\n    LastName VARCHAR(200)\n);\n\n\ninsert into Person(FirstName,LastName) values('li','wei');\ninsert into Person(FirstName,LastName) values('zhou','guang');\ninsert into Person(FirstName,LastName) values('yuan','lian');\n\nCREATE TABLE Address(\n    AddressId INT PRIMARY KEY AUTO_INCREMENT,\n    PersonId INT,\n    City VARCHAR(200),\n    State VARCHAR(200)\n);\n\ninsert into Address(PersonId,City,State) values(1,'beijng','haidianqu');\ninsert into Address(PersonId,City,State) values(2,'shanghai','xuhuiqu');",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0175-combine-two-tables/#1",
            "text": "select t1.FirstName, t1.LastName, t2.City, t2.State\nfrom Person t1 left join Address t2 on t1.`PersonId` = t2.`PersonId`;  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0175-combine-two-tables  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/",
            "text": "181. Employees Earning More Than Their Managers\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\nEmployee\n\u00a0\u8868\u5305\u542b\u6240\u6709\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u4e5f\u5c5e\u4e8e\u5458\u5de5\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a Id\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u5217\u5bf9\u5e94\u5458\u5de5\u7684\u7ecf\u7406\u7684 Id\u3002\n\n\n+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n\n\n\n\u7ed9\u5b9a\u00a0\nEmployee\n\u00a0\u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u83b7\u53d6\u6536\u5165\u8d85\u8fc7\u4ed6\u4eec\u7ecf\u7406\u7684\u5458\u5de5\u7684\u59d3\u540d\u3002\u5728\u4e0a\u9762\u7684\u8868\u683c\u4e2d\uff0cJoe \u662f\u552f\u4e00\u4e00\u4e2a\u6536\u5165\u8d85\u8fc7\u4ed6\u7684\u7ecf\u7406\u7684\u5458\u5de5\u3002\n\n\n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n181. Employees Earning More Than Their Managers\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n181. \u8d85\u8fc7\u7ecf\u7406\u6536\u5165\u7684\u5458\u5de5\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a\n\n\ndrop table if exists Employee;\n\ncreate table Employee(\n  Id int primary key auto_increment,\n  Name varchar(200),\n  Salary int,\n  ManagerId int\n);\n\ninsert into Employee(Id,name,Salary,ManagerId) values(1,'Joe',70000,3);\ninsert into Employee(Id,name,Salary,ManagerId) values(2,'Henry',80000,4);\ninsert into Employee(Id,name,Salary,ManagerId) values(3,'Sam',60000,NULL);\ninsert into Employee(Id,name,Salary,ManagerId) values(4,'Max',90000,NULL);\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nselect t1.Name as Employee from Employee t1,Employee t2\nwhere t1.`ManagerId` = t2.`Id` and t1.`Salary` > t2.`Salary`;\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0181-employees-earning-more-than-their-managers\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "181. Employees Earning More Than Their Managers"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/#181-employees-earning-more-than-their-managers",
            "text": "",
            "title": "181. Employees Earning More Than Their Managers"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   Employee \u00a0\u8868\u5305\u542b\u6240\u6709\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u4e5f\u5c5e\u4e8e\u5458\u5de5\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a Id\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u5217\u5bf9\u5e94\u5458\u5de5\u7684\u7ecf\u7406\u7684 Id\u3002  +----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+  \u7ed9\u5b9a\u00a0 Employee \u00a0\u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u83b7\u53d6\u6536\u5165\u8d85\u8fc7\u4ed6\u4eec\u7ecf\u7406\u7684\u5458\u5de5\u7684\u59d3\u540d\u3002\u5728\u4e0a\u9762\u7684\u8868\u683c\u4e2d\uff0cJoe \u662f\u552f\u4e00\u4e00\u4e2a\u6536\u5165\u8d85\u8fc7\u4ed6\u7684\u7ecf\u7406\u7684\u5458\u5de5\u3002  +----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 181. Employees Earning More Than Their Managers   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 181. \u8d85\u8fc7\u7ecf\u7406\u6536\u5165\u7684\u5458\u5de5   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a  drop table if exists Employee;\n\ncreate table Employee(\n  Id int primary key auto_increment,\n  Name varchar(200),\n  Salary int,\n  ManagerId int\n);\n\ninsert into Employee(Id,name,Salary,ManagerId) values(1,'Joe',70000,3);\ninsert into Employee(Id,name,Salary,ManagerId) values(2,'Henry',80000,4);\ninsert into Employee(Id,name,Salary,ManagerId) values(3,'Sam',60000,NULL);\ninsert into Employee(Id,name,Salary,ManagerId) values(4,'Max',90000,NULL);",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0181-employees-earning-more-than-their-managers/#1",
            "text": "select t1.Name as Employee from Employee t1,Employee t2\nwhere t1.`ManagerId` = t2.`Id` and t1.`Salary` > t2.`Salary`;  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0181-employees-earning-more-than-their-managers  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/",
            "text": "182. Duplicate Emails\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e\u00a0\nPerson\n \u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n\n\n\n\u6839\u636e\u4ee5\u4e0a\u8f93\u5165\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff1a\n\n\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n\n\n\n\u8bf4\u660e\uff1a\n\u6240\u6709\u7535\u5b50\u90ae\u7bb1\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n182. Duplicate Emails\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n182. \u67e5\u627e\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nDROP TABLE IF EXISTS Person ;\n\nCREATE TABLE Person(\n  Id INT PRIMARY KEY AUTO_INCREMENT,\n  Email VARCHAR(200)\n);\n\nINSERT INTO Person(Email) VALUES ('a@b.com');\nINSERT INTO Person(Email) VALUES ('c@d.com');\nINSERT INTO Person(Email) VALUES ('a@b.com');\n\n\nSELECT Email FROM Person GROUP BY Email HAVING count(*) > 1;\n\nSELECT DISTINCT p1.Email FROM Person p1,Person p2 \nWHERE p1.email = p2.email AND p1.`Id`!=p2.`Id`;\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0182-duplicate-emails\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "182. Duplicate Emails"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/#182-duplicate-emails",
            "text": "",
            "title": "182. Duplicate Emails"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e\u00a0 Person  \u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\u3002  \u793a\u4f8b\uff1a  +----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+  \u6839\u636e\u4ee5\u4e0a\u8f93\u5165\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff1a  +---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+  \u8bf4\u660e\uff1a \u6240\u6709\u7535\u5b50\u90ae\u7bb1\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 182. Duplicate Emails   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 182. \u67e5\u627e\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0182-duplicate-emails/#1",
            "text": "DROP TABLE IF EXISTS Person ;\n\nCREATE TABLE Person(\n  Id INT PRIMARY KEY AUTO_INCREMENT,\n  Email VARCHAR(200)\n);\n\nINSERT INTO Person(Email) VALUES ('a@b.com');\nINSERT INTO Person(Email) VALUES ('c@d.com');\nINSERT INTO Person(Email) VALUES ('a@b.com');\n\n\nSELECT Email FROM Person GROUP BY Email HAVING count(*) > 1;\n\nSELECT DISTINCT p1.Email FROM Person p1,Person p2 \nWHERE p1.email = p2.email AND p1.`Id`!=p2.`Id`;  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0182-duplicate-emails  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/",
            "text": "187. Repeated DNA Sequences\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002\n\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n\n\n\u8f93\u51fa:\n [\"AAAAACCCCC\", \"CCCCCAAAAA\"]\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n187. Repeated DNA Sequences\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n187. \u91cd\u590d\u7684DNA\u5e8f\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u8981\u6c42\u627e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u56fa\u5b9a\u957f\u5ea6\u4e3a 10 \u7684\u6709\u91cd\u590d\u7684\u5b50\u4e32\uff08\u6ce8\u610f\uff1a\u4e0d\u662f\u5b50\u5e8f\u5217\uff09\uff0c\u56e0\u6b64\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u501f\u52a9\u54c8\u5e0c\u8868\u5c31\u80fd\u591f\u5b8c\u6210\u3002\n\n\n1\u3001\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\uff0c\u653e\u5165\u54c8\u5e0c\u8868\uff1b\n2\u3001\u8003\u8651\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709 4 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u6700\u591a\u53ea\u7528 2 \u4f4d\u7f16\u7801\uff0c\u56e0\u6b64\u539f\u6765\u7684\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u7f16\u7801\u6210\u4e00\u4e2a\u53ea\u6709\u4f4e\u4f4d 20 \u4f4d\u6709\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u952e\u653e\u5165\u54c8\u5e0c\u8868\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        HashSet<String> seen = new HashSet<>();\n        // \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u591a\u6b21\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f7f\u7528 Set \u53bb\u9664\u91cd\u590d\n        HashSet<String> repeated = new HashSet<>();\n\n        int len = s.length();\n        int begin = 0;\n        int end = 10;\n\n        StringBuilder stringBuilder = new StringBuilder(s);\n        // \u6ce8\u610f\u8fd9\u91cc\u662f\u7b49\u4e8e\u53f7\uff0c\u56e0\u4e3a substring \u65b9\u6cd5\u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u5f00\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230\n        while (end <= len) {\n            String segment = stringBuilder.substring(begin, end);\n            if (seen.contains(segment)) {\n                repeated.add(segment);\n            } else {\n                seen.add(segment);\n            }\n            begin++;\n            end++;\n        }\n        return new ArrayList<>(repeated);\n    }\n\n    public static void main(String[] args) {\n        String s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\";\n        Solution solution = new Solution();\n        List<String> repeatedDnaSequences = solution.findRepeatedDnaSequences(s);\n        System.out.println(repeatedDnaSequences);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\n\n/**\n * @author liwei\n * @date 18/7/1 \u4e0a\u534811:22\n */\npublic class Solution4 {\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        int len = s.length();\n        // 10 \u4e2a\u5b57\u7b26\uff0c1 \u4e2a\u5b57\u7b26\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u7684 2 \u4f4d\uff0c\u6240\u4ee5\u662f 20 \u4f4d\n        // 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c\u4e00\u4e2a f \u8868\u793a 1111\n        int mask = 0xfffff;\n        HashSet<Integer> seen = new HashSet<>();\n        HashSet<String> repeated = new HashSet<>();\n        HashMap<Character, Integer> map = new HashMap<>();\n        // \u8868\u793a\u4e8c\u8fdb\u5236 00\n        map.put('A', 0);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 01\n        map.put('C', 1);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 10\n        map.put('G', 2);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 11\n        map.put('T', 3);\n        int v = 0;\n        for (int i = 0; i < len; i++) {\n            // \u7a7a\u51fa\u4e24\u4f4d\uff0c\u7528\u6765\u5b58\u653e\u5f53\u524d\u904d\u5386\u5230\u7684\u5b57\u7b26\u7684\u7f16\u7801\n            v <<= 2;\n            // \u53ef\u4ee5\u7528 + \u4e5f\u53ef\u4ee5\u7528 |\uff0c& mask \u7684\u4f5c\u7528\u662f\u628a\u4e0a\u4e00\u6b65\u5de6\u79fb\u51fa\u4e86 20 \u4f4d\u7684\u90a3\u4e24\u4f4d\u62b9\u53bb\n            v = (v | map.get(s.charAt(i))) & mask;\n            if (i < 9) {\n                continue;\n            }\n            if (seen.contains(v)) {\n                repeated.add(s.substring(i - 9, i + 1));\n            } else {\n                seen.add(v);\n            }\n        }\n        return new ArrayList<>(repeated);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0187-repeated-dna-sequences\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "187. Repeated DNA Sequences"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#187-repeated-dna-sequences",
            "text": "",
            "title": "187. Repeated DNA Sequences"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002  \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002  \u793a\u4f8b:  \u8f93\u5165:  s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa:  [\"AAAAACCCCC\", \"CCCCCAAAAA\"]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 187. Repeated DNA Sequences   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 187. \u91cd\u590d\u7684DNA\u5e8f\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u8981\u6c42\u627e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u56fa\u5b9a\u957f\u5ea6\u4e3a 10 \u7684\u6709\u91cd\u590d\u7684\u5b50\u4e32\uff08\u6ce8\u610f\uff1a\u4e0d\u662f\u5b50\u5e8f\u5217\uff09\uff0c\u56e0\u6b64\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u501f\u52a9\u54c8\u5e0c\u8868\u5c31\u80fd\u591f\u5b8c\u6210\u3002  1\u3001\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\uff0c\u653e\u5165\u54c8\u5e0c\u8868\uff1b\n2\u3001\u8003\u8651\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709 4 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u6700\u591a\u53ea\u7528 2 \u4f4d\u7f16\u7801\uff0c\u56e0\u6b64\u539f\u6765\u7684\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u7f16\u7801\u6210\u4e00\u4e2a\u53ea\u6709\u4f4e\u4f4d 20 \u4f4d\u6709\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u952e\u653e\u5165\u54c8\u5e0c\u8868\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#1",
            "text": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        HashSet<String> seen = new HashSet<>();\n        // \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u591a\u6b21\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f7f\u7528 Set \u53bb\u9664\u91cd\u590d\n        HashSet<String> repeated = new HashSet<>();\n\n        int len = s.length();\n        int begin = 0;\n        int end = 10;\n\n        StringBuilder stringBuilder = new StringBuilder(s);\n        // \u6ce8\u610f\u8fd9\u91cc\u662f\u7b49\u4e8e\u53f7\uff0c\u56e0\u4e3a substring \u65b9\u6cd5\u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u5f00\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230\n        while (end <= len) {\n            String segment = stringBuilder.substring(begin, end);\n            if (seen.contains(segment)) {\n                repeated.add(segment);\n            } else {\n                seen.add(segment);\n            }\n            begin++;\n            end++;\n        }\n        return new ArrayList<>(repeated);\n    }\n\n    public static void main(String[] args) {\n        String s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\";\n        Solution solution = new Solution();\n        List<String> repeatedDnaSequences = solution.findRepeatedDnaSequences(s);\n        System.out.println(repeatedDnaSequences);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0187-repeated-dna-sequences/#2",
            "text": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\n\n/**\n * @author liwei\n * @date 18/7/1 \u4e0a\u534811:22\n */\npublic class Solution4 {\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        int len = s.length();\n        // 10 \u4e2a\u5b57\u7b26\uff0c1 \u4e2a\u5b57\u7b26\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u7684 2 \u4f4d\uff0c\u6240\u4ee5\u662f 20 \u4f4d\n        // 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c\u4e00\u4e2a f \u8868\u793a 1111\n        int mask = 0xfffff;\n        HashSet<Integer> seen = new HashSet<>();\n        HashSet<String> repeated = new HashSet<>();\n        HashMap<Character, Integer> map = new HashMap<>();\n        // \u8868\u793a\u4e8c\u8fdb\u5236 00\n        map.put('A', 0);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 01\n        map.put('C', 1);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 10\n        map.put('G', 2);\n        // \u8868\u793a\u4e8c\u8fdb\u5236 11\n        map.put('T', 3);\n        int v = 0;\n        for (int i = 0; i < len; i++) {\n            // \u7a7a\u51fa\u4e24\u4f4d\uff0c\u7528\u6765\u5b58\u653e\u5f53\u524d\u904d\u5386\u5230\u7684\u5b57\u7b26\u7684\u7f16\u7801\n            v <<= 2;\n            // \u53ef\u4ee5\u7528 + \u4e5f\u53ef\u4ee5\u7528 |\uff0c& mask \u7684\u4f5c\u7528\u662f\u628a\u4e0a\u4e00\u6b65\u5de6\u79fb\u51fa\u4e86 20 \u4f4d\u7684\u90a3\u4e24\u4f4d\u62b9\u53bb\n            v = (v | map.get(s.charAt(i))) & mask;\n            if (i < 9) {\n                continue;\n            }\n            if (seen.contains(v)) {\n                repeated.add(s.substring(i - 9, i + 1));\n            } else {\n                seen.add(v);\n            }\n        }\n        return new ArrayList<>(repeated);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0187-repeated-dna-sequences  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0189-rotate-array/",
            "text": "189. Rotate Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8\u00a0\nk\u00a0\n\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u00a0\nk\u00a0\n\u662f\u975e\u8d1f\u6570\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \n[1,2,3,4,5,6,7]\n \u548c \nk\n = 3\n\n\u8f93\u51fa:\n \n[5,6,7,1,2,3,4]\n\n\n\u89e3\u91ca:\n\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: \n[7,1,2,3,4,5,6]\n\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: \n[6,7,1,2,3,4,5]\n\n\u5411\u53f3\u65cb\u8f6c 3 \u6b65: \n[5,6,7,1,2,3,4]\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n \n[-1,-100,3,99]\n \u548c \nk\n = 2\n\n\u8f93\u51fa:\n [3,99,-1,-100]\n\n\u89e3\u91ca:\n \n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3]\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100]\n\n\n\u8bf4\u660e:\n\n\n\n\n\u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\n\u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(1) \u7684\u539f\u5730\u7b97\u6cd5\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n189. Rotate Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n189. \u65cb\u8f6c\u6570\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n$3$ \u6b21\u9006\u8f6c\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u6781\u7aef\u6761\u4ef6\u5224\u65ad\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    // \u5411\u53f3\u65cb\u8f6c\n    // \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3\n\n    // \u7ed3\u679c\uff1a[5,6,7,1,2,3,4]\n\n    // \u4e2d\u95f4\u8fc7\u7a0b\uff1a\n    // 7 6 5 4 3 2 1\n    // 5 6 7 1 2 3 4\n\n    public void rotate(int[] nums, int k) {\n        // \u5148\u5199\u51fa\u6781\u7aef\u6761\u4ef6\n        int len = nums.length;\n        if (len == 0 || k <= 0) {\n            return;\n        }\n\n        k %= len;\n\n        reverse(nums, 0, len - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, len - 1);\n    }\n\n    private void reverse(int[] nums, int index1, int index2) {\n        if (index1 >= index2) {\n            return;\n        }\n        while (index1 < index2) {\n            int temp = nums[index1];\n            nums[index1] = nums[index2];\n            nums[index2] = temp;\n            index1++;\n            index2--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5, 6, 7};\n        int k = 3;\n        Solution solution = new Solution();\n        solution.rotate(nums, k);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n\n        if len(nums) == 0 or k <= 0:\n            return\n\n        k = k % len(nums)\n\n        # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n        # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50\n        self.__reverse(nums, 0, len(nums) - 1)\n        self.__reverse(nums, 0, k - 1)\n        self.__reverse(nums, k, len(nums) - 1)\n\n    def __reverse(self, nums, index1, index2):\n        \"\"\"\n        \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c\n        :param nums:\n        :param index1:\n        :param index2:\n        :return:\n        \"\"\"\n\n        while index1 < index2:\n            nums[index1], nums[index2] = nums[index2], nums[index1]\n            index1 += 1\n            index2 -= 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    s = Solution()\n    s.rotate(nums, k)\n    print(nums)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0189-rotate-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "189. Rotate Array"
        },
        {
            "location": "/leetcode-0189-rotate-array/#189-rotate-array",
            "text": "",
            "title": "189. Rotate Array"
        },
        {
            "location": "/leetcode-0189-rotate-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8\u00a0 k\u00a0 \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u00a0 k\u00a0 \u662f\u975e\u8d1f\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:   [1,2,3,4,5,6,7]  \u548c  k  = 3 \u8f93\u51fa:   [5,6,7,1,2,3,4]  \u89e3\u91ca: \n\u5411\u53f3\u65cb\u8f6c 1 \u6b65:  [7,1,2,3,4,5,6] \n\u5411\u53f3\u65cb\u8f6c 2 \u6b65:  [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65:  [5,6,7,1,2,3,4]   \u793a\u4f8b\u00a02:  \u8f93\u5165:   [-1,-100,3,99]  \u548c  k  = 2 \u8f93\u51fa:  [3,99,-1,-100] \u89e3\u91ca:  \n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3]\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100]  \u8bf4\u660e:   \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002  \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(1) \u7684\u539f\u5730\u7b97\u6cd5\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 189. Rotate Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 189. \u65cb\u8f6c\u6570\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0189-rotate-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  $3$ \u6b21\u9006\u8f6c\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u6781\u7aef\u6761\u4ef6\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0189-rotate-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0189-rotate-array/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.Arrays;\n\npublic class Solution {\n\n    // \u5411\u53f3\u65cb\u8f6c\n    // \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3\n\n    // \u7ed3\u679c\uff1a[5,6,7,1,2,3,4]\n\n    // \u4e2d\u95f4\u8fc7\u7a0b\uff1a\n    // 7 6 5 4 3 2 1\n    // 5 6 7 1 2 3 4\n\n    public void rotate(int[] nums, int k) {\n        // \u5148\u5199\u51fa\u6781\u7aef\u6761\u4ef6\n        int len = nums.length;\n        if (len == 0 || k <= 0) {\n            return;\n        }\n\n        k %= len;\n\n        reverse(nums, 0, len - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, len - 1);\n    }\n\n    private void reverse(int[] nums, int index1, int index2) {\n        if (index1 >= index2) {\n            return;\n        }\n        while (index1 < index2) {\n            int temp = nums[index1];\n            nums[index1] = nums[index2];\n            nums[index2] = temp;\n            index1++;\n            index2--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{1, 2, 3, 4, 5, 6, 7};\n        int k = 3;\n        Solution solution = new Solution();\n        solution.rotate(nums, k);\n        System.out.println(Arrays.toString(nums));\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n\n        if len(nums) == 0 or k <= 0:\n            return\n\n        k = k % len(nums)\n\n        # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n        # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50\n        self.__reverse(nums, 0, len(nums) - 1)\n        self.__reverse(nums, 0, k - 1)\n        self.__reverse(nums, k, len(nums) - 1)\n\n    def __reverse(self, nums, index1, index2):\n        \"\"\"\n        \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c\n        :param nums:\n        :param index1:\n        :param index2:\n        :return:\n        \"\"\"\n\n        while index1 < index2:\n            nums[index1], nums[index2] = nums[index2], nums[index1]\n            index1 += 1\n            index2 -= 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    s = Solution()\n    s.rotate(nums, k)\n    print(nums)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0189-rotate-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0190-reverse-bits/",
            "text": "190. Reverse Bits\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n 43261596\n\n\u8f93\u51fa:\n 964176192\n\n\u89e3\u91ca: \n43261596 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a \n00000010100101000001111010011100 \n\uff0c\n\u00a0    \u8fd4\u56de 964176192\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a \n00111001011110000010100101000000 \n\u3002\n\n\n\u8fdb\u9636\n:\n\n\u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n190. Reverse Bits\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5e76\u4e0d\u96be\uff0c\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u7684\u65b9\u6cd5\u6765\u505a\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n    // you need treat n as an unsigned value\n\n    // 00000010100101000001111010011100\n    //       10100101000001111010011100\n\n    /**\n     * \u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u62ff\u5b57\u7b26\u4e32\u8f6c\u6765\u8f6c\u53bb\n     *\n     * @param n\n     * @return\n     */\n    public int reverseBits(int n) {\n        String toBinaryString = Long.toBinaryString(n);\n        StringBuilder stringBuilder = new StringBuilder(toBinaryString);\n        // \u4e0d\u591f 32 \u4f4d\u7684\u5de6\u8865 0\n        while (stringBuilder.length() < 32) {\n            stringBuilder.insert(0, 0);\n        }\n        String str = stringBuilder.reverse().toString();\n        return Integer.valueOf(str, 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 43261596;\n        int reverseBits = solution.reverseBits(n);\n        System.out.println(reverseBits);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        // 0 \u5176\u5b9e\u4e0d\u7528\u7279\u6b8a\u8003\u8651\n        if (n == 0) {\n            return 0;\n        }\n        int res = 0;\n        // \u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528 while(n!=0) \uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8003\u8651\u5230\u6700\u9ad8\u4f4d\u8865 0 \u7684\u60c5\u51b5\n        for (int i = 0; i < 32; i++) {\n            // \u5148\u5de6\u79fb\uff0c\u8ba9\u51fa\u4f4d\u7f6e\u6765\n            res <<= 1;\n            // \u5f53\u524d\u8003\u8651\u7684\u8fd9\u4e2a\u6570\u4f4d\u662f 0 \u8fd8\u662f 1\n            res += n & 1;\n            n >>= 1;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int n = 43261596;\n        int reverseBits = solution2.reverseBits(n);\n        System.out.println(reverseBits);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0190-reverse-bits\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "190. Reverse Bits"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#190-reverse-bits",
            "text": "",
            "title": "190. Reverse Bits"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002  \u793a\u4f8b:  \u8f93\u5165:  43261596 \u8f93\u51fa:  964176192 \u89e3\u91ca:  43261596 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a  00000010100101000001111010011100  \uff0c\n\u00a0    \u8fd4\u56de 964176192\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a  00111001011110000010100101000000  \u3002  \u8fdb\u9636 : \n\u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 190. Reverse Bits   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5e76\u4e0d\u96be\uff0c\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u7684\u65b9\u6cd5\u6765\u505a\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#1",
            "text": "public class Solution {\n    // you need treat n as an unsigned value\n\n    // 00000010100101000001111010011100\n    //       10100101000001111010011100\n\n    /**\n     * \u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u62ff\u5b57\u7b26\u4e32\u8f6c\u6765\u8f6c\u53bb\n     *\n     * @param n\n     * @return\n     */\n    public int reverseBits(int n) {\n        String toBinaryString = Long.toBinaryString(n);\n        StringBuilder stringBuilder = new StringBuilder(toBinaryString);\n        // \u4e0d\u591f 32 \u4f4d\u7684\u5de6\u8865 0\n        while (stringBuilder.length() < 32) {\n            stringBuilder.insert(0, 0);\n        }\n        String str = stringBuilder.reverse().toString();\n        return Integer.valueOf(str, 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 43261596;\n        int reverseBits = solution.reverseBits(n);\n        System.out.println(reverseBits);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0190-reverse-bits/#2",
            "text": "public class Solution2 {\n\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        // 0 \u5176\u5b9e\u4e0d\u7528\u7279\u6b8a\u8003\u8651\n        if (n == 0) {\n            return 0;\n        }\n        int res = 0;\n        // \u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528 while(n!=0) \uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8003\u8651\u5230\u6700\u9ad8\u4f4d\u8865 0 \u7684\u60c5\u51b5\n        for (int i = 0; i < 32; i++) {\n            // \u5148\u5de6\u79fb\uff0c\u8ba9\u51fa\u4f4d\u7f6e\u6765\n            res <<= 1;\n            // \u5f53\u524d\u8003\u8651\u7684\u8fd9\u4e2a\u6570\u4f4d\u662f 0 \u8fd8\u662f 1\n            res += n & 1;\n            n >>= 1;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        int n = 43261596;\n        int reverseBits = solution2.reverseBits(n);\n        System.out.println(reverseBits);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0190-reverse-bits  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/",
            "text": "191. Number of 1 Bits\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a \u20181\u2019\u00a0\u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a\n\u6c49\u660e\u91cd\u91cf\n\uff09\u3002\n\n\n\u793a\u4f8b\u00a0:\n\n\n\u8f93\u5165:\n 11\n\n\u8f93\u51fa:\n 3\n\n\u89e3\u91ca: \n\u6574\u6570 11 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \n00000000000000000000000000001011\n\n\n\u00a0\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 128\n\n\u8f93\u51fa:\n 1\n\n\u89e3\u91ca: \n\u6574\u6570 128 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \n00000000000000000000000010000000\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n191. Number of 1 Bits\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n191. \u4f4d1\u7684\u4e2a\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u5217\u51fa 5 \u79cd\uff0c\u90fd\u4e0d\u96be\u7406\u89e3\u3002\u5176\u4e2d\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u53ea\u8981\u4e3e\u51fa\u51e0\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5c31\u6e05\u695a\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u7b80\u5355\u7c97\u66b4\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6570 \u201c1\u201d \u7684\u4e2a\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e0d\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002\n\n\npublic class Solution {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        char[] binaryArr = Integer.toBinaryString(n).toCharArray();\n        int count = 0;\n        for (char b : binaryArr) {\n            if (b == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u76f4\u63a5\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570\u53bb\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e5f\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002\n\n\npublic class Solution2 {\n\n    public int hammingWeight(int n) {\n        return Integer.bitCount(n);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4e00\u4f4d\u4e00\u4f4d\u53bb\u6570\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u7b26\u53f7\u4f4d\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u65e0\u7b26\u53f7\u5de6\u79fb\uff08\u53c2\u8003\u89e3\u7b546\uff09\u3002\n\n\npublic class Solution3 {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        int count = 0;\n        if (n < 0) {\n            n = n & 0x7fffffff;\n            count++;\n        }\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                count++;\n            }\n            n = n >> 1;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u4e0e\u8fd0\u7b97\u7684\u8fd9\u4e2a\u6027\u8d28\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u4e86\uff0c\u5e94\u8be5\u8bb0\u4f4f\u3002\n\n\npublic class Solution4 {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n & (n-1);\n            count++;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b545\uff1a\u4e0e\u53c2\u8003\u89e3\u7b54 3 \u76f8\u53cd\uff0c\u6211\u4eec\u8ba9 n \u4e0d\u53d8\uff0c\u4f7f\u7528 mask \u4e00\u4f4d\u4e00\u4f4d\u53bb\u201c\u6570\u201d\u6709\u591a\u5c11\u4e2a 1\u3002\n\n\npublic class Solution5 {\n\n    public int hammingWeight(int n) {\n        int mask = 1;\n        int count = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & mask) != 0) {\n                count++;\n            }\n            mask<<=1;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b546\uff1a\u65e0\u7b26\u53f7\u5de6\u79fb\u6570\u51fa \u201c1\u201d \u7684\u4e2a\u6570\u3002\n\n\npublic class Solution6 {\n\n    public int hammingWeight(int n) {\n        int mask = 1;\n        int count = 0;\n        while (n != 0) {\n            count += (n & mask);\n            n >>>= 1;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0191-number-of-1-bits\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "191. Number of 1 Bits"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#191-number-of-1-bits",
            "text": "",
            "title": "191. Number of 1 Bits"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a \u20181\u2019\u00a0\u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a \u6c49\u660e\u91cd\u91cf \uff09\u3002  \u793a\u4f8b\u00a0:  \u8f93\u5165:  11 \u8f93\u51fa:  3 \u89e3\u91ca:  \u6574\u6570 11 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a  00000000000000000000000000001011  \u00a0  \u793a\u4f8b\u00a02:  \u8f93\u5165:  128 \u8f93\u51fa:  1 \u89e3\u91ca:  \u6574\u6570 128 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a  00000000000000000000000010000000    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 191. Number of 1 Bits   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 191. \u4f4d1\u7684\u4e2a\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u5217\u51fa 5 \u79cd\uff0c\u90fd\u4e0d\u96be\u7406\u89e3\u3002\u5176\u4e2d\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u53ea\u8981\u4e3e\u51fa\u51e0\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5c31\u6e05\u695a\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#1-1",
            "text": "public class Solution {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        char[] binaryArr = Integer.toBinaryString(n).toCharArray();\n        int count = 0;\n        for (char b : binaryArr) {\n            if (b == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u7b80\u5355\u7c97\u66b4\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6570 \u201c1\u201d \u7684\u4e2a\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e0d\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#2-java",
            "text": "public class Solution2 {\n\n    public int hammingWeight(int n) {\n        return Integer.bitCount(n);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u76f4\u63a5\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570\u53bb\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e5f\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#36",
            "text": "public class Solution3 {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        int count = 0;\n        if (n < 0) {\n            n = n & 0x7fffffff;\n            count++;\n        }\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                count++;\n            }\n            n = n >> 1;\n        }\n        return count;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4e00\u4f4d\u4e00\u4f4d\u53bb\u6570\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u7b26\u53f7\u4f4d\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u65e0\u7b26\u53f7\u5de6\u79fb\uff08\u53c2\u8003\u89e3\u7b546\uff09\u3002"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#4",
            "text": "public class Solution4 {\n\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n & (n-1);\n            count++;\n        }\n        return count;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u4e0e\u8fd0\u7b97\u7684\u8fd9\u4e2a\u6027\u8d28\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u4e86\uff0c\u5e94\u8be5\u8bb0\u4f4f\u3002"
        },
        {
            "location": "/leetcode-0191-number-of-1-bits/#5-3-n-mask-1",
            "text": "public class Solution5 {\n\n    public int hammingWeight(int n) {\n        int mask = 1;\n        int count = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & mask) != 0) {\n                count++;\n            }\n            mask<<=1;\n        }\n        return count;\n    }\n}  \u53c2\u8003\u89e3\u7b546\uff1a\u65e0\u7b26\u53f7\u5de6\u79fb\u6570\u51fa \u201c1\u201d \u7684\u4e2a\u6570\u3002  public class Solution6 {\n\n    public int hammingWeight(int n) {\n        int mask = 1;\n        int count = 0;\n        while (n != 0) {\n            count += (n & mask);\n            n >>>= 1;\n        }\n        return count;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0191-number-of-1-bits  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b545\uff1a\u4e0e\u53c2\u8003\u89e3\u7b54 3 \u76f8\u53cd\uff0c\u6211\u4eec\u8ba9 n \u4e0d\u53d8\uff0c\u4f7f\u7528 mask \u4e00\u4f4d\u4e00\u4f4d\u53bb\u201c\u6570\u201d\u6709\u591a\u5c11\u4e2a 1\u3002"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/",
            "text": "201. Bitwise AND of Numbers Range\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 <= m <= n <= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002\n\n\n\u793a\u4f8b 1:\u00a0\n\n\n\u8f93\u5165:\n [5,7]\n\n\u8f93\u51fa:\n 4\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [0,1]\n\n\u8f93\u51fa:\n 0\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n201. Bitwise AND of Numbers Range\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5982\u679c\u6309\u7167\u5e38\u89c4\u505a\u6cd5\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u4e00\u4e2a\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u7684\u8bdd\uff0c\u4f1a\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u8981\u627e\u89c4\u5f8b\u4e86\u3002\n\u601d\u8def1\uff1a\n+ \u6309\u4f4d\u4e0e\u8fd0\u7b97\u662f\u4e00\u79cd\u5982\u679c\u67d0\u4e2a\u6570\u4f4d\u4e0a\u51fa\u73b0\u4e86 0 \uff0c\u7ed3\u679c\u5c31\u4e00\u5b9a\u662f 0 \u7684\u8fd0\u7b97\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7f57\u5217\u4e00\u4e9b\u5177\u4f53\u7684\u6570\uff0c\u627e\u627e\u89c4\u5f8b\u3002\u4e3a\u6b64\uff0c\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u3002\n\n\npublic class Solution {\n\n    /**\n     * \u66b4\u529b\u89e3\u6cd5\u4f1a\u8d85\u65f6\n     * @param m\n     * @param n\n     * @return\n     */\n    public int rangeBitwiseAnd(int m, int n) {\n        int res = m;\n        for (int i = m + 1; i <= n; i++) {\n            res &= i;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int m = 200;\n        int n = 230;\n        int rangeBitwiseAnd = solution.rangeBitwiseAnd(m, n);\n\n        for (int i = m; i <=n ; i++) {\n            System.out.printf(\"%-3d %32s\",i,Integer.toBinaryString(i));\n            System.out.println();\n        }\n\n        System.out.println(\"\u7ed3\u679c\uff1a\");\n        System.out.printf(\"%-3d %32s\",rangeBitwiseAnd,Integer.toBinaryString(rangeBitwiseAnd));\n    }\n}\n\n\n\n\n203                         11001011\n204                         11001100\n205                         11001101\n206                         11001110\n207                         11001111\n208                         11010000\n209                         11010001\n210                         11010010\n211                         11010011\n212                         11010100\n213                         11010101\n214                         11010110\n215                         11010111\n216                         11011000\n217                         11011001\n218                         11011010\n219                         11011011\n220                         11011100\n221                         11011101\n222                         11011110\n223                         11011111\n224                         11100000\n225                         11100001\n226                         11100010\n227                         11100011\n228                         11100100\n229                         11100101\n230                         11100110\n\u7ed3\u679c\uff1a\n192                         11000000\n\n\n\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u7ed3\u679c\u53ea\u4e0e\u8fd9\u4e9b\u6570\u4e2d\u6700\u5de6\u8fb9\u201c\u6700\u957f\u201d\u7684\u76f8\u7b49\u7684\u90e8\u5206\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 m \u548c n \u4e0d\u65ad\u53f3\u79fb\uff08\u9898\u76ee\u4e2d\u8bf4\u4e86 m \u548c n \u4e0d\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u53f3\u79fb\u7b26\u53f7\u4f4d\u7684\u95ee\u9898\uff09\uff0c\u79fb\u5230\u76f8\u7b49\u7684\u65f6\u5019\u4e3a\u6b62\u3002\u540c\u65f6\u8bb0\u5f55\u79fb\u52a8\u7684\u6b65\u6570\u3002\u6700\u540e\u5c06\u76f8\u7b49\u7684\u90e8\u5206\u5de6\u79fb\u4e4b\u524d\u7684\u6b65\u6570\uff08\u76f8\u5f53\u4e8e\u8865 0\uff09\uff0c\u5c31\u662f\u6700\u7ec8\u8981\u6c42\u7684\u6570\u3002\n\n\n\u601d\u8def2\uff1a\u4f4d\u8fd0\u7b97\u505a\u5f97\u9898\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u4f1a\u77e5\u9053\u4e0e\u8fd0\u7b97\u7684\u4e00\u6761\u6027\u8d28\uff1a\nn & (n - 1)\n \u53ef\u4ee5\u5c06 n \u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0 \uff0c\u8fd9\u4ef6\u4e8b\u60c5\u4e5f\u662f\u5f88\u9177\u7684\uff0c\u56e0\u4e3a\u5176\u5b9e\u4e0d\u4ec5\u628a 1 \u53d8\u6210\u4e86 0\uff0c\u8fd8\u8df3\u8fc7\u4e86\u5f88\u591a 0\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u66b4\u529b\u89e3\u6cd5\u7684\u53cd\u65b9\u5411\u53bb\u601d\u8003\uff0c\u5012\u7740\u505a\u6309\u4f4d\u4e0e\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u5f97\u5230\u89e3\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int rangeBitwiseAnd(int m, int n) {\n        int count = 0;\n        while (m != n) {\n            m >>= 1;\n            n >>= 1;\n            count++;\n        }\n        return m << count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    /**\n     * \u5229\u7528\u4e86 n &= (n - 1) \u4e00\u4e0b\u80fd\u6d88\u6b7b\u4e00\u5927\u7247\n     *\n     * @param m\n     * @param n\n     * @return\n     */\n    public int rangeBitwiseAnd(int m, int n) {\n        while (n > m) {\n            n &= (n - 1);\n        }\n        return n;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0201-bitwise-and-of-numbers-range\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "201. Bitwise AND of Numbers Range"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#201-bitwise-and-of-numbers-range",
            "text": "",
            "title": "201. Bitwise AND of Numbers Range"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 <= m <= n <= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002  \u793a\u4f8b 1:\u00a0  \u8f93\u5165:  [5,7] \u8f93\u51fa:  4  \u793a\u4f8b 2:  \u8f93\u5165:  [0,1] \u8f93\u51fa:  0    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 201. Bitwise AND of Numbers Range   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5982\u679c\u6309\u7167\u5e38\u89c4\u505a\u6cd5\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u4e00\u4e2a\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u7684\u8bdd\uff0c\u4f1a\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u8981\u627e\u89c4\u5f8b\u4e86\u3002\n\u601d\u8def1\uff1a\n+ \u6309\u4f4d\u4e0e\u8fd0\u7b97\u662f\u4e00\u79cd\u5982\u679c\u67d0\u4e2a\u6570\u4f4d\u4e0a\u51fa\u73b0\u4e86 0 \uff0c\u7ed3\u679c\u5c31\u4e00\u5b9a\u662f 0 \u7684\u8fd0\u7b97\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7f57\u5217\u4e00\u4e9b\u5177\u4f53\u7684\u6570\uff0c\u627e\u627e\u89c4\u5f8b\u3002\u4e3a\u6b64\uff0c\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u3002  public class Solution {\n\n    /**\n     * \u66b4\u529b\u89e3\u6cd5\u4f1a\u8d85\u65f6\n     * @param m\n     * @param n\n     * @return\n     */\n    public int rangeBitwiseAnd(int m, int n) {\n        int res = m;\n        for (int i = m + 1; i <= n; i++) {\n            res &= i;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int m = 200;\n        int n = 230;\n        int rangeBitwiseAnd = solution.rangeBitwiseAnd(m, n);\n\n        for (int i = m; i <=n ; i++) {\n            System.out.printf(\"%-3d %32s\",i,Integer.toBinaryString(i));\n            System.out.println();\n        }\n\n        System.out.println(\"\u7ed3\u679c\uff1a\");\n        System.out.printf(\"%-3d %32s\",rangeBitwiseAnd,Integer.toBinaryString(rangeBitwiseAnd));\n    }\n}  203                         11001011\n204                         11001100\n205                         11001101\n206                         11001110\n207                         11001111\n208                         11010000\n209                         11010001\n210                         11010010\n211                         11010011\n212                         11010100\n213                         11010101\n214                         11010110\n215                         11010111\n216                         11011000\n217                         11011001\n218                         11011010\n219                         11011011\n220                         11011100\n221                         11011101\n222                         11011110\n223                         11011111\n224                         11100000\n225                         11100001\n226                         11100010\n227                         11100011\n228                         11100100\n229                         11100101\n230                         11100110\n\u7ed3\u679c\uff1a\n192                         11000000  \u6211\u4eec\u53d1\u73b0\uff0c\u7ed3\u679c\u53ea\u4e0e\u8fd9\u4e9b\u6570\u4e2d\u6700\u5de6\u8fb9\u201c\u6700\u957f\u201d\u7684\u76f8\u7b49\u7684\u90e8\u5206\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 m \u548c n \u4e0d\u65ad\u53f3\u79fb\uff08\u9898\u76ee\u4e2d\u8bf4\u4e86 m \u548c n \u4e0d\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u53f3\u79fb\u7b26\u53f7\u4f4d\u7684\u95ee\u9898\uff09\uff0c\u79fb\u5230\u76f8\u7b49\u7684\u65f6\u5019\u4e3a\u6b62\u3002\u540c\u65f6\u8bb0\u5f55\u79fb\u52a8\u7684\u6b65\u6570\u3002\u6700\u540e\u5c06\u76f8\u7b49\u7684\u90e8\u5206\u5de6\u79fb\u4e4b\u524d\u7684\u6b65\u6570\uff08\u76f8\u5f53\u4e8e\u8865 0\uff09\uff0c\u5c31\u662f\u6700\u7ec8\u8981\u6c42\u7684\u6570\u3002  \u601d\u8def2\uff1a\u4f4d\u8fd0\u7b97\u505a\u5f97\u9898\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u4f1a\u77e5\u9053\u4e0e\u8fd0\u7b97\u7684\u4e00\u6761\u6027\u8d28\uff1a n & (n - 1)  \u53ef\u4ee5\u5c06 n \u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0 \uff0c\u8fd9\u4ef6\u4e8b\u60c5\u4e5f\u662f\u5f88\u9177\u7684\uff0c\u56e0\u4e3a\u5176\u5b9e\u4e0d\u4ec5\u628a 1 \u53d8\u6210\u4e86 0\uff0c\u8fd8\u8df3\u8fc7\u4e86\u5f88\u591a 0\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u66b4\u529b\u89e3\u6cd5\u7684\u53cd\u65b9\u5411\u53bb\u601d\u8003\uff0c\u5012\u7740\u505a\u6309\u4f4d\u4e0e\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u5f97\u5230\u89e3\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#1",
            "text": "public class Solution {\n\n    public int rangeBitwiseAnd(int m, int n) {\n        int count = 0;\n        while (m != n) {\n            m >>= 1;\n            n >>= 1;\n            count++;\n        }\n        return m << count;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0201-bitwise-and-of-numbers-range/#2",
            "text": "public class Solution2 {\n\n    /**\n     * \u5229\u7528\u4e86 n &= (n - 1) \u4e00\u4e0b\u80fd\u6d88\u6b7b\u4e00\u5927\u7247\n     *\n     * @param m\n     * @param n\n     * @return\n     */\n    public int rangeBitwiseAnd(int m, int n) {\n        while (n > m) {\n            n &= (n - 1);\n        }\n        return n;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0201-bitwise-and-of-numbers-range  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/",
            "text": "203. Remove Linked List Elements\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n203. Remove Linked List Elements\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002\n\n\n\u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002\n\n\n\u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9 \nListNode\n \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6 \ntoString()\n \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf\n\n\nJava \u5199\u6cd5\uff1a\n\n\n// Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                // \u5f85\u5220\u9664\u7684\u7ed3\u70b9\n                ListNode delete = cur.next;\n                cur.next = delete.next;\n                delete.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}\n\n\n\n\nPython \u5199\u6cd51\uff1a\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef create_linked_list(nums):\n    if len(nums) == 0:\n        return None\n    head = ListNode(nums[0])\n    cur = head\n    for i in range(1, len(nums)):\n        cur.next = ListNode(nums[i])\n        cur = cur.next\n    return head\n\n\ndef print_linked_list(list_node):\n    if list_node is None:\n        return\n\n    cur = list_node\n    while cur:\n        print(cur.val, '->', end=' ')\n        cur = cur.next\n    print('null')\n\n\nclass Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        pre = dummy_node\n        cur = head\n        while cur:\n            if cur.val == val:\n                pre.next = cur.next\n                cur.next = None\n                cur = pre.next\n            else:\n                pre = cur\n                cur = cur.next\n        return dummy_node.next\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 6, 3, 4, 5, 6]\n    head = create_linked_list(nums)\n    val = 6\n    print_linked_list(head)\n    s = Solution()\n    result = s.removeElements(head, val)\n    print('\u7ed3\u679c\uff1a')\n    print_linked_list(result)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09\n\n\nJava \u5199\u6cd5\uff1a\n\n\nclass Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n}\n\n\n\n\n\u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}\n\n\n\n\nPython \u5199\u6cd52\uff1a\n\n\nclass Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n\n        # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if head is None:\n            return None\n        # \u7136\u540e\u518d\u5199\u4e00\u822c\u60c5\u51b5\n        if head.val == val:\n            return self.removeElements(head.next, val)\n        else:\n            head.next = self.removeElements(head.next, val)\n            return head\n\n\n\n\nPython \u5199\u6cd53\uff1a\n\n\nclass Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        head.next = self.removeElements(head.next, val)\n        return head.next if head.val == val else head\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "203. Remove Linked List Elements"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#203-remove-linked-list-elements",
            "text": "",
            "title": "203. Remove Linked List Elements"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 203. Remove Linked List Elements   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002  \u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002  \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002  \u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9  ListNode  \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6  toString()  \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#1",
            "text": "Java \u5199\u6cd5\uff1a  // Definition for singly-linked list.\nclass ListNode {\n\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5\n    // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868\n    public ListNode(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head\n        // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de\n        this.val = arr[0];\n        ListNode cur = this;\n        for (int i = 1; i < arr.length; i++) {\n            cur.next = new ListNode(arr[i]);\n            cur = cur.next;\n        }\n    }\n\n    // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode cur = dummyNode;\n        while (cur.next != null) {\n            if (cur.next.val == val) {\n                // \u5f85\u5220\u9664\u7684\u7ed3\u70b9\n                ListNode delete = cur.next;\n                cur.next = delete.next;\n                delete.next = null;\n            } else {\n                cur = cur.next;\n            }\n        }\n        return dummyNode.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 6, 3, 4, 5, 6};\n        ListNode head = new ListNode(nums);\n        int val = 6;\n        Solution solution = new Solution();\n        ListNode removeElements = solution.removeElements(head, val);\n        System.out.println(removeElements);\n    }\n}  Python \u5199\u6cd51\uff1a  # Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef create_linked_list(nums):\n    if len(nums) == 0:\n        return None\n    head = ListNode(nums[0])\n    cur = head\n    for i in range(1, len(nums)):\n        cur.next = ListNode(nums[i])\n        cur = cur.next\n    return head\n\n\ndef print_linked_list(list_node):\n    if list_node is None:\n        return\n\n    cur = list_node\n    while cur:\n        print(cur.val, '->', end=' ')\n        cur = cur.next\n    print('null')\n\n\nclass Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        pre = dummy_node\n        cur = head\n        while cur:\n            if cur.val == val:\n                pre.next = cur.next\n                cur.next = None\n                cur = pre.next\n            else:\n                pre = cur\n                cur = cur.next\n        return dummy_node.next\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 6, 3, 4, 5, 6]\n    head = create_linked_list(nums)\n    val = 6\n    print_linked_list(head)\n    s = Solution()\n    result = s.removeElements(head, val)\n    print('\u7ed3\u679c\uff1a')\n    print_linked_list(result)",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf"
        },
        {
            "location": "/leetcode-0203-remove-linked-list-elements/#2",
            "text": "Java \u5199\u6cd5\uff1a  class Solution2 {\n\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n    public ListNode removeElements(ListNode head, int val) {\n        // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\n        if (head == null) {\n            return head;\n        }\n        // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\n        ListNode res = removeElements(head.next, val);\n        // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n        if (head.val == val) {\n            // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389\n            return res;\n        } else {\n            head.next = res;\n            return head;\n        }\n    }\n}  \u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002  Java \u5199\u6cd5\uff1a  public class Solution3 {\n\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}  Python \u5199\u6cd52\uff1a  class Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n\n        # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if head is None:\n            return None\n        # \u7136\u540e\u518d\u5199\u4e00\u822c\u60c5\u51b5\n        if head.val == val:\n            return self.removeElements(head.next, val)\n        else:\n            head.next = self.removeElements(head.next, val)\n            return head  Python \u5199\u6cd53\uff1a  class Solution:\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        head.next = self.removeElements(head.next, val)\n        return head.next if head.val == val else head  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09"
        },
        {
            "location": "/leetcode-0204-count-primes/",
            "text": "204. Count Primes\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570\u00a0\nn\u00a0\n\u7684\u8d28\u6570\u7684\u6570\u91cf\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n 10\n\n\u8f93\u51fa:\n 4\n\n\u89e3\u91ca:\n \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n204. Count Primes\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n204. \u8ba1\u6570\u8d28\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d\n\uff0c\u4e5f\u79f0\u201c\u7d20\u6570\u7b5b\u9009\u6cd5\u201d\uff0c\u662f\u5f97\u5230\u7d20\u6570\u8868\u7684\u4e00\u4e2a\u7ecf\u5178\u65b9\u6cd5\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\npublic class Solution3 {\n\n    public int countPrimes(int n) {\n        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n        for (int i = 2; i < n; i++) {\n            // \u6bcf\u4e00\u8f6e\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u80af\u5b9a\u662f\u8d28\u6570\n            if (primes[i]) {\n                for (int j = i + i; j < n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        // \u4e0b\u9762\u5f00\u59cb\u8ba1\u6570\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0204-count-primes\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "204. Count Primes"
        },
        {
            "location": "/leetcode-0204-count-primes/#204-count-primes",
            "text": "",
            "title": "204. Count Primes"
        },
        {
            "location": "/leetcode-0204-count-primes/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570\u00a0 n\u00a0 \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002  \u793a\u4f8b:  \u8f93\u5165:  10 \u8f93\u51fa:  4 \u89e3\u91ca:  \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 204. Count Primes   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 204. \u8ba1\u6570\u8d28\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0204-count-primes/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d \uff0c\u4e5f\u79f0\u201c\u7d20\u6570\u7b5b\u9009\u6cd5\u201d\uff0c\u662f\u5f97\u5230\u7d20\u6570\u8868\u7684\u4e00\u4e2a\u7ecf\u5178\u65b9\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0204-count-primes/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0204-count-primes/#1",
            "text": "import java.util.Arrays;\n\npublic class Solution3 {\n\n    public int countPrimes(int n) {\n        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n        for (int i = 2; i < n; i++) {\n            // \u6bcf\u4e00\u8f6e\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u80af\u5b9a\u662f\u8d28\u6570\n            if (primes[i]) {\n                for (int j = i + i; j < n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        // \u4e0b\u9762\u5f00\u59cb\u8ba1\u6570\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0204-count-primes  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/",
            "text": "205. Isomorphic Strings\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u00a0\ns\u00a0\n\u548c\u00a0\nt\n\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002\n\n\n\u5982\u679c\u00a0\ns\u00a0\n\u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230\u00a0\nt\u00a0\n\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002\n\n\n\u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \ns\n = \n\"egg\", \nt = \n\"add\"\n\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \ns\n = \n\"foo\", \nt = \n\"bar\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n \ns\n = \n\"paper\", \nt = \n\"title\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u8bf4\u660e:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0\ns\u00a0\n\u548c \nt \n\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n205. Isomorphic Strings\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n205. \u540c\u6784\u5b57\u7b26\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u7684\u65f6\u5019\uff0c\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u4e24\u4e2a key \u5bf9\u5e94\u5230\u540c\u4e00\u4e2a value \u4e0a\u4e86\u3002\n\n\n\n\n\u4f7f\u7528 Hash \u8868\u8fdb\u884c\u6620\u5c04\u5173\u7cfb\u7684\u5efa\u7acb\uff0c\u548c\u68c0\u67e5 value \u662f\u5426\u91cd\u590d\u3002\n\n\n\u5bf9\u4e8e\u5b57\u7b26\u6620\u5c04\u7684\u95ee\u9898\u800c\u8a00\uff0cHash \u8868\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u5f97\u5230\u540c\u6837\u7684\u6548\u679c\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution4 {\n\n    public boolean isIsomorphic(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        if (slen != tlen) {\n            return false;\n        }\n        Character[] map = new Character[256];\n        boolean[] set = new boolean[256];\n        for (int i = 0; i < slen; i++) {\n            char key = s.charAt(i);\n            char value = t.charAt(i);\n            if (map[key] == null) {\n                // \u5efa\u7acb\u6620\u5c04\u5173\u7cfb\n                if (set[value]) {\n                    return false;\n                }\n                map[key] = value;\n                set[value] = true;\n            } else {\n                if (map[key] != value) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0205-isomorphic-strings\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "205. Isomorphic Strings"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/#205-isomorphic-strings",
            "text": "",
            "title": "205. Isomorphic Strings"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u00a0 s\u00a0 \u548c\u00a0 t \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002  \u5982\u679c\u00a0 s\u00a0 \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230\u00a0 t\u00a0 \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002  \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002  \u793a\u4f8b 1:  \u8f93\u5165:   s  =  \"egg\",  t =  \"add\"  \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:   s  =  \"foo\",  t =  \"bar\"  \u8f93\u51fa:  false  \u793a\u4f8b 3:  \u8f93\u5165:   s  =  \"paper\",  t =  \"title\"  \u8f93\u51fa:  true  \u8bf4\u660e: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0 s\u00a0 \u548c  t  \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 205. Isomorphic Strings   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 205. \u540c\u6784\u5b57\u7b26\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u7684\u65f6\u5019\uff0c\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u4e24\u4e2a key \u5bf9\u5e94\u5230\u540c\u4e00\u4e2a value \u4e0a\u4e86\u3002   \u4f7f\u7528 Hash \u8868\u8fdb\u884c\u6620\u5c04\u5173\u7cfb\u7684\u5efa\u7acb\uff0c\u548c\u68c0\u67e5 value \u662f\u5426\u91cd\u590d\u3002  \u5bf9\u4e8e\u5b57\u7b26\u6620\u5c04\u7684\u95ee\u9898\u800c\u8a00\uff0cHash \u8868\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u5f97\u5230\u540c\u6837\u7684\u6548\u679c\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0205-isomorphic-strings/#1",
            "text": "public class Solution4 {\n\n    public boolean isIsomorphic(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        if (slen != tlen) {\n            return false;\n        }\n        Character[] map = new Character[256];\n        boolean[] set = new boolean[256];\n        for (int i = 0; i < slen; i++) {\n            char key = s.charAt(i);\n            char value = t.charAt(i);\n            if (map[key] == null) {\n                // \u5efa\u7acb\u6620\u5c04\u5173\u7cfb\n                if (set[value]) {\n                    return false;\n                }\n                map[key] = value;\n                set[value] = true;\n            } else {\n                if (map[key] != value) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0205-isomorphic-strings  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/",
            "text": "206. reverse-linked-list\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n206. Reverse Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n206. \u53cd\u8f6c\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002  \n\n\n\n\n\n\n\u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488 \npre\n\u3001\ncur\n\u3001\nnext\n\uff1a\n\n\n\u5f53\u524d\u904d\u5386\u7684 \ncur\n \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b\n\n\n\u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5 \npre\n \u4e5f\u5fc5\u987b\u6709\uff1b\n\n\n\n\n\u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\ncur\n \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488 \nnext\n \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d \nnext\n \u53ef\u4ee5\u5728 \ncur\n \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002\n\n\n\n\n\n\n\u753b\u56fe\u5206\u6790 \nnext\n \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01  \n\n\n\n\n\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f \npre\n \u8282\u70b9\u3002\n\n\n\n\n\u5982\u679c\u4f60\u89c9\u5f97\u7a7f\u9488\u5f15\u7ebf\u9ebb\u70e6\uff0c\u90a3\u5c31\u4ea4\u7ed9\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u7a7f\u9488\u5f15\u7ebf\n\n\nJava \u5199\u6cd5\uff1a\n\n\n// https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        pre = None\n        cur = head\n        while cur is not None:\n            next_temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = next_temp\n        return pre\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u9012\u5f52\u5199\u6cd5\n\n\nJava \u5199\u6cd5\uff1a\n\n\n/**\n * \u4e0d\u60f3\u7a7f\u9488\u5f15\u7ebf\uff0c\u90a3\u5c31\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    /**\n     * \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\n     * \u6b65\u9aa4\uff1a\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u7136\u540e\u5047\u8bbe\u89c4\u6a21\u5c0f\u4e00\u4e2a\u7ea7\u522b\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u601d\u8003\u5982\u4f55\u4e0e\u539f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n     *\n     * @param head \u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n     * @return \u53cd\u8f6c\u4ee5\u540e\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n     */\n    public ListNode reverseList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u5176\u5b9e\u8fd9\u4e00\u6b65\u505a\u7684\u4e5f\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u5de5\u4f5c\u4e86\n        ListNode nextNode = head.next;\n        ListNode reverseList = reverseList(nextNode);\n        nextNode.next = head;\n        head.next = null;\n        return reverseList;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        Solution2 solution2 = new Solution2();\n        ListNode reverseList = solution2.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None or head.next is None:\n            return head\n\n        # head \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5148\u5b58\u8d77\u6765\n        temp_node = head.next\n\n        new_head = self.reverseList(temp_node)\n        temp_node.next = head\n        head.next = None\n        return new_head",
            "title": "206. reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#206-reverse-linked-list",
            "text": "",
            "title": "206. reverse-linked-list"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 206. Reverse Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 206. \u53cd\u8f6c\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002      \u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488  pre \u3001 cur \u3001 next \uff1a  \u5f53\u524d\u904d\u5386\u7684  cur  \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b  \u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5  pre  \u4e5f\u5fc5\u987b\u6709\uff1b   \u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c cur  \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488  next  \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d  next  \u53ef\u4ee5\u5728  cur  \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002    \u753b\u56fe\u5206\u6790  next  \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01     \u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f  pre  \u8282\u70b9\u3002   \u5982\u679c\u4f60\u89c9\u5f97\u7a7f\u9488\u5f15\u7ebf\u9ebb\u70e6\uff0c\u90a3\u5c31\u4ea4\u7ed9\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#1",
            "text": "Java \u5199\u6cd5\uff1a  // https://leetcode-cn.com/problems/reverse-linked-list/description/\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\n// \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790\n// \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb\n// \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de\n\n// \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002\npublic class Solution {\n\n    public ListNode reverseList(ListNode head) {\n        // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488\n        ListNode pre = null;\n        // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488\n        ListNode cur = head;\n        ListNode next;\n        while (cur != null) {\n            // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488\n            next = cur.next;\n            // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c\n            cur.next = pre;\n            // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf\n            pre = cur;\n            cur = next;\n        }\n        // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre\n        // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\n        return pre;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new  ListNode(nums);\n        System.out.println(head);\n        Solution solution = new Solution();\n        ListNode reverseList = solution.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        pre = None\n        cur = head\n        while cur is not None:\n            next_temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = next_temp\n        return pre",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u7a7f\u9488\u5f15\u7ebf"
        },
        {
            "location": "/leetcode-0206-reverse-linked-list/#2",
            "text": "Java \u5199\u6cd5\uff1a  /**\n * \u4e0d\u60f3\u7a7f\u9488\u5f15\u7ebf\uff0c\u90a3\u5c31\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    /**\n     * \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\n     * \u6b65\u9aa4\uff1a\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u7136\u540e\u5047\u8bbe\u89c4\u6a21\u5c0f\u4e00\u4e2a\u7ea7\u522b\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u601d\u8003\u5982\u4f55\u4e0e\u539f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb\n     *\n     * @param head \u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n     * @return \u53cd\u8f6c\u4ee5\u540e\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n     */\n    public ListNode reverseList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // \u5176\u5b9e\u8fd9\u4e00\u6b65\u505a\u7684\u4e5f\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u5de5\u4f5c\u4e86\n        ListNode nextNode = head.next;\n        ListNode reverseList = reverseList(nextNode);\n        nextNode.next = head;\n        head.next = null;\n        return reverseList;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        System.out.println(head);\n        Solution2 solution2 = new Solution2();\n        ListNode reverseList = solution2.reverseList(head);\n        System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\");\n        System.out.println(reverseList);\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None or head.next is None:\n            return head\n\n        # head \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5148\u5b58\u8d77\u6765\n        temp_node = head.next\n\n        new_head = self.reverseList(temp_node)\n        temp_node.next = head\n        head.next = None\n        return new_head",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u9012\u5f52\u5199\u6cd5"
        },
        {
            "location": "/leetcode-0207-course-schedule/",
            "text": "207. Course Schedule\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u73b0\u5728\u4f60\u603b\u5171\u6709 \nn\n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a\u00a0\n0\n\u00a0\u5230\u00a0\nn-1\n\u3002\n\n\n\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: \n[0,1]\n\n\n\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 2, [[1,0]] \n\n\u8f93\u51fa: \ntrue\n\n\u89e3\u91ca:\n\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 2, [[1,0],[0,1]]\n\n\u8f93\u51fa: \nfalse\n\n\u89e3\u91ca:\n\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\n\n\u8bf4\u660e:\n\n\n\n\n\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\n\u8fb9\u7f18\u5217\u8868\n\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\n\u56fe\u7684\u8868\u793a\u6cd5\n\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002\n\n\n\n\n\u63d0\u793a:\n\n\n\n\n\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002\n\n\n\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002\n\n\n\n\n\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u00a0\nBFS\n\u00a0\u5b8c\u6210\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n207. Course Schedule\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n207. \u8bfe\u7a0b\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u8003\u67e5\u4e86\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u5f04\u6e05\u695a\u4e86\u62d3\u6251\u6392\u5e8f\u4ee5\u540e\uff0c\u5176\u5b9e\u5199\u51fa\u4ee3\u7801\u662f\u5f88\u8f7b\u677e\u7684\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashSet;\n\npublic class Solution {\n    /**\n     * @param numCourses    \u603b\u5171\u6709\u591a\u5c11\u95e8\u8bfe\u7a0b\n     * @param prerequisites [[1,0],[1,2],[0,1]] \u5e94\u8be5\u8fd4\u56de false\n     * @return\n     */\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        if (numCourses == 0) {\n            return false;\n        }\n        // \u90bb\u63a5\u8868\uff0c\u4f7f\u7528 Set \u662f\u4e3a\u4e86\u53bb\u91cd\n        HashSet<Integer>[] table = new HashSet[numCourses];\n        // \u521d\u59cb\u5316\u90bb\u63a5\u8868\n        for (int i = 0; i < numCourses; i++) {\n            table[i] = new HashSet<>();\n        }\n        // \u586b\u5199\u90bb\u63a5\u8868\uff0c\u6709\u591a\u5c11\u6761\u6709\u5411\u8fb9\uff0c\u6ce8\u610f\uff1a\u540e\u9762\u7684\u7ed3\u70b9\u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9\n        // \u6dfb\u52a0\u5165\u5ea6\u5217\u8868\uff0c\u5217\u8868\u7684\u4e2a\u6570\u4e0e\u8282\u70b9\u4e2a\u6570\u4e00\u81f4\n        // \u586b\u5199\u90bb\u63a5\u8868\u7684\u65f6\u5019\uff0c\u628a\u5165\u5ea6\u8868\u4e5f\u586b\u4e86\n        int[] inDegree = new int[numCourses];\n        for (int[] p : prerequisites) {\n            table[p[1]].add(p[0]);\n            inDegree[p[0]]++;\n        }\n        // \u904d\u5386\u5165\u5ea6\u77e9\u9635\n        for (int i = 0; i < numCourses; i++) {\n            // \u6bcf\u4e00\u8f6e\u90fd\u5148\u627e\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u5c06\u5b83\u8bbe\u7f6e\u6210 -1 \u8868\u793a\u5df2\u7ecf\u4ece\u90bb\u63a5\u8868\u4e2d\u5220\u9664\n            int j = 0;\n            while (j < numCourses && inDegree[j] != 0) {\n                j++;\n            }\n            // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u627e\u5230\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff0c\u8bfe\u7a0b\u5b66\u4e60\u4efb\u52a1\u5c31\u65e0\u6cd5\u5b8c\u6210\n            // \u6240\u4ee5\u8fd4\u56de false\n            if (j == numCourses) {\n                return false;\n            }\n            // \u627e\u5230\u4e86\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n            // 1\u3001\u5c06\u5b83\u5220\u9664\uff0c\u5373\u8bbe\u7f6e\u4e3a -1\n            // 2\u3001\u5c06\u5b83\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u4e00\n            inDegree[j] = -1;\n            for (int n : table[j]) {\n                inDegree[n]--;\n            }\n        }\n        return true;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * \u8be5\u65b9\u6cd5\u8fd8\u5b58\u50a8\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\n *\n * @author liwei\n * @date 18/6/24 \u4e0b\u534812:20\n */\npublic class Solution4 {\n\n    /**\n     * @param numCourses\n     * @param prerequisites\n     * @return\n     */\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        if (numCourses <= 0) {\n            return false;\n        }\n        int plen = prerequisites.length;\n        if (plen == 0) {\n            return true;\n        }\n        int[] inDegree = new int[numCourses];\n        for (int[] p : prerequisites) {\n            inDegree[p[0]]++;\n        }\n        LinkedList<Integer> queue = new LinkedList<>();\n        // \u9996\u5148\u52a0\u5165\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n        for (int i = 0; i < numCourses; i++) {\n            if (inDegree[i] == 0) {\n                queue.addLast(i);\n            }\n        }\n        // \u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\n        List<Integer> res = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            Integer num = queue.removeFirst();\n            res.add(num);\n            // \u628a\u90bb\u8fb9\u5168\u90e8\u904d\u5386\u4e00\u4e0b\n            for (int[] p : prerequisites) {\n                if (p[1] == num) {\n                    inDegree[p[0]]--;\n                    if (inDegree[p[0]] == 0) {\n                        queue.addLast(p[0]);\n                    }\n                }\n            }\n        }\n        // System.out.println(\"\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\uff1a\");\n        // System.out.println(res);\n        return res.size() == numCourses;\n    }\n\n    public static void main(String[] args) {\n        int[][] prerequisites = new int[][]{{1, 0}, {2, 6},\n                {1, 7}, {6, 4}, {7, 0}, {0, 5}};\n        int numCourses = 8;\n        Solution4 solution4 = new Solution4();\n        boolean canFinish = solution4.canFinish(numCourses, prerequisites);\n        System.out.println(canFinish);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0207-course-schedule\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "207. Course Schedule"
        },
        {
            "location": "/leetcode-0207-course-schedule/#207-course-schedule",
            "text": "",
            "title": "207. Course Schedule"
        },
        {
            "location": "/leetcode-0207-course-schedule/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u73b0\u5728\u4f60\u603b\u5171\u6709  n  \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a\u00a0 0 \u00a0\u5230\u00a0 n-1 \u3002  \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec:  [0,1]  \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f  \u793a\u4f8b 1:  \u8f93\u5165:  2, [[1,0]]  \u8f93\u51fa:  true \u89e3\u91ca: \u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  2, [[1,0],[0,1]] \u8f93\u51fa:  false \u89e3\u91ca: \u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002  \u8bf4\u660e:   \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002  \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002   \u63d0\u793a:   \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002  \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f  - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002   \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u00a0 BFS \u00a0\u5b8c\u6210\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 207. Course Schedule   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 207. \u8bfe\u7a0b\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0207-course-schedule/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u8003\u67e5\u4e86\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u5f04\u6e05\u695a\u4e86\u62d3\u6251\u6392\u5e8f\u4ee5\u540e\uff0c\u5176\u5b9e\u5199\u51fa\u4ee3\u7801\u662f\u5f88\u8f7b\u677e\u7684\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0207-course-schedule/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0207-course-schedule/#1",
            "text": "import java.util.HashSet;\n\npublic class Solution {\n    /**\n     * @param numCourses    \u603b\u5171\u6709\u591a\u5c11\u95e8\u8bfe\u7a0b\n     * @param prerequisites [[1,0],[1,2],[0,1]] \u5e94\u8be5\u8fd4\u56de false\n     * @return\n     */\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        if (numCourses == 0) {\n            return false;\n        }\n        // \u90bb\u63a5\u8868\uff0c\u4f7f\u7528 Set \u662f\u4e3a\u4e86\u53bb\u91cd\n        HashSet<Integer>[] table = new HashSet[numCourses];\n        // \u521d\u59cb\u5316\u90bb\u63a5\u8868\n        for (int i = 0; i < numCourses; i++) {\n            table[i] = new HashSet<>();\n        }\n        // \u586b\u5199\u90bb\u63a5\u8868\uff0c\u6709\u591a\u5c11\u6761\u6709\u5411\u8fb9\uff0c\u6ce8\u610f\uff1a\u540e\u9762\u7684\u7ed3\u70b9\u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9\n        // \u6dfb\u52a0\u5165\u5ea6\u5217\u8868\uff0c\u5217\u8868\u7684\u4e2a\u6570\u4e0e\u8282\u70b9\u4e2a\u6570\u4e00\u81f4\n        // \u586b\u5199\u90bb\u63a5\u8868\u7684\u65f6\u5019\uff0c\u628a\u5165\u5ea6\u8868\u4e5f\u586b\u4e86\n        int[] inDegree = new int[numCourses];\n        for (int[] p : prerequisites) {\n            table[p[1]].add(p[0]);\n            inDegree[p[0]]++;\n        }\n        // \u904d\u5386\u5165\u5ea6\u77e9\u9635\n        for (int i = 0; i < numCourses; i++) {\n            // \u6bcf\u4e00\u8f6e\u90fd\u5148\u627e\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u5c06\u5b83\u8bbe\u7f6e\u6210 -1 \u8868\u793a\u5df2\u7ecf\u4ece\u90bb\u63a5\u8868\u4e2d\u5220\u9664\n            int j = 0;\n            while (j < numCourses && inDegree[j] != 0) {\n                j++;\n            }\n            // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u627e\u5230\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff0c\u8bfe\u7a0b\u5b66\u4e60\u4efb\u52a1\u5c31\u65e0\u6cd5\u5b8c\u6210\n            // \u6240\u4ee5\u8fd4\u56de false\n            if (j == numCourses) {\n                return false;\n            }\n            // \u627e\u5230\u4e86\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n            // 1\u3001\u5c06\u5b83\u5220\u9664\uff0c\u5373\u8bbe\u7f6e\u4e3a -1\n            // 2\u3001\u5c06\u5b83\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u4e00\n            inDegree[j] = -1;\n            for (int n : table[j]) {\n                inDegree[n]--;\n            }\n        }\n        return true;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0207-course-schedule/#2",
            "text": "import java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * \u8be5\u65b9\u6cd5\u8fd8\u5b58\u50a8\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\n *\n * @author liwei\n * @date 18/6/24 \u4e0b\u534812:20\n */\npublic class Solution4 {\n\n    /**\n     * @param numCourses\n     * @param prerequisites\n     * @return\n     */\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        if (numCourses <= 0) {\n            return false;\n        }\n        int plen = prerequisites.length;\n        if (plen == 0) {\n            return true;\n        }\n        int[] inDegree = new int[numCourses];\n        for (int[] p : prerequisites) {\n            inDegree[p[0]]++;\n        }\n        LinkedList<Integer> queue = new LinkedList<>();\n        // \u9996\u5148\u52a0\u5165\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n        for (int i = 0; i < numCourses; i++) {\n            if (inDegree[i] == 0) {\n                queue.addLast(i);\n            }\n        }\n        // \u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\n        List<Integer> res = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            Integer num = queue.removeFirst();\n            res.add(num);\n            // \u628a\u90bb\u8fb9\u5168\u90e8\u904d\u5386\u4e00\u4e0b\n            for (int[] p : prerequisites) {\n                if (p[1] == num) {\n                    inDegree[p[0]]--;\n                    if (inDegree[p[0]] == 0) {\n                        queue.addLast(p[0]);\n                    }\n                }\n            }\n        }\n        // System.out.println(\"\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\uff1a\");\n        // System.out.println(res);\n        return res.size() == numCourses;\n    }\n\n    public static void main(String[] args) {\n        int[][] prerequisites = new int[][]{{1, 0}, {2, 6},\n                {1, 7}, {6, 4}, {7, 0}, {0, 5}};\n        int numCourses = 8;\n        Solution4 solution4 = new Solution4();\n        boolean canFinish = solution4.canFinish(numCourses, prerequisites);\n        System.out.println(canFinish);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0207-course-schedule  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/",
            "text": "208. Implement Trie (Prefix Tree)\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b\u00a0\ninsert\n,\u00a0\nsearch\n, \u548c\u00a0\nstartsWith\n\u00a0\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002\n\n\n\u793a\u4f8b:\n\n\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // \u8fd4\u56de true\ntrie.search(\"app\");     // \u8fd4\u56de false\ntrie.startsWith(\"app\"); // \u8fd4\u56de true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // \u8fd4\u56de true\n\n\n\u8bf4\u660e:\n\n\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd\u00a0\na-z\n\u00a0\u6784\u6210\u7684\u3002\n\n\n\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n208. Implement Trie (Prefix Tree)\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528 Map\uff09\n\n\n\n\n\u6ce8\u610f\uff1a\u5185\u90e8\u7c7b \nNode\n \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a \nprivate\n \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002\n\n\n\n\nimport java.util.HashMap;\n\npublic class Trie {\n\n    private Node root;\n\n    // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root\n    private class Node {\n        private boolean isWord;\n        // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.isWord = false;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86\n            }\n        }\n        return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false;\n            }\n        }\n        // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true\n        System.out.println(search1);\n        boolean search2 = trie.search(\"app\");     // \u8fd4\u56de false\n        System.out.println(search2);\n        boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true\n        System.out.println(startsWith);\n        trie.insert(\"app\");\n        boolean search3 = trie.search(\"app\");     // \u8fd4\u56de true\n        System.out.println(search3);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528\u7ed3\u70b9\u6570\u7ec4\uff09\n\n\npublic class Trie {\n\n    private Node root;\n\n    private class Node {\n        private Node[] dict;\n        private boolean isWord;\n\n        public Node() {\n            dict = new Node[26];\n            this.isWord = false;\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        int len = word.length();\n        Node curNode = root;\n        for (int i = 0; i < len; i++) {\n            char curChar = word.charAt(i);\n            Node next = curNode.dict[curChar - 'a'];\n            if (next == null) {\n                curNode.dict[curChar - 'a'] = new Node();\n            }\n            curNode = curNode.dict[curChar - 'a'];\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        int len = word.length();\n        Node curNode = root;\n\n        for (int i = 0; i < len; i++) {\n            char curC = word.charAt(i);\n            Node next = curNode.dict[curC - 'a'];\n            if (next == null) {\n                return false;\n            } else {\n                curNode = next;\n            }\n        }\n        return curNode.isWord;\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        int len = prefix.length();\n        Node curNode = root;\n        for (int i = 0; i < len; i++) {\n            char curC = prefix.charAt(i);\n            Node next = curNode.dict[curC - 'a'];\n            if (next == null) {\n                return false;\n            } else {\n                curNode = next;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"helloworld\");\n        boolean startsWith = trie.startsWith(\"hello\");\n        System.out.println(startsWith);\n        boolean search1 = trie.search(\"helloworld\");\n        System.out.println(search1);\n\n        boolean search2 = trie.search(\"hello\");\n        System.out.println(search2);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0208-implement-trie-prefix-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "208. Implement Trie (Prefix Tree)"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#208-implement-trie-prefix-tree",
            "text": "",
            "title": "208. Implement Trie (Prefix Tree)"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b\u00a0 insert ,\u00a0 search , \u548c\u00a0 startsWith \u00a0\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002  \u793a\u4f8b:  Trie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // \u8fd4\u56de true\ntrie.search(\"app\");     // \u8fd4\u56de false\ntrie.startsWith(\"app\"); // \u8fd4\u56de true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // \u8fd4\u56de true  \u8bf4\u660e:   \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd\u00a0 a-z \u00a0\u6784\u6210\u7684\u3002  \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 208. Implement Trie (Prefix Tree)   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#1-map",
            "text": "\u6ce8\u610f\uff1a\u5185\u90e8\u7c7b  Node  \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a  private  \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002   import java.util.HashMap;\n\npublic class Trie {\n\n    private Node root;\n\n    // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root\n    private class Node {\n        private boolean isWord;\n        // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.isWord = false;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86\n            }\n        }\n        return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return false;\n            }\n        }\n        // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true\n        System.out.println(search1);\n        boolean search2 = trie.search(\"app\");     // \u8fd4\u56de false\n        System.out.println(search2);\n        boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true\n        System.out.println(startsWith);\n        trie.insert(\"app\");\n        boolean search3 = trie.search(\"app\");     // \u8fd4\u56de true\n        System.out.println(search3);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528 Map\uff09"
        },
        {
            "location": "/leetcode-0208-implement-trie-prefix-tree/#2",
            "text": "public class Trie {\n\n    private Node root;\n\n    private class Node {\n        private Node[] dict;\n        private boolean isWord;\n\n        public Node() {\n            dict = new Node[26];\n            this.isWord = false;\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public Trie() {\n        root = new Node();\n    }\n\n    /**\n     * Inserts a word into the trie.\n     */\n    public void insert(String word) {\n        int len = word.length();\n        Node curNode = root;\n        for (int i = 0; i < len; i++) {\n            char curChar = word.charAt(i);\n            Node next = curNode.dict[curChar - 'a'];\n            if (next == null) {\n                curNode.dict[curChar - 'a'] = new Node();\n            }\n            curNode = curNode.dict[curChar - 'a'];\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     */\n    public boolean search(String word) {\n        int len = word.length();\n        Node curNode = root;\n\n        for (int i = 0; i < len; i++) {\n            char curC = word.charAt(i);\n            Node next = curNode.dict[curC - 'a'];\n            if (next == null) {\n                return false;\n            } else {\n                curNode = next;\n            }\n        }\n        return curNode.isWord;\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\n    public boolean startsWith(String prefix) {\n        int len = prefix.length();\n        Node curNode = root;\n        for (int i = 0; i < len; i++) {\n            char curC = prefix.charAt(i);\n            Node next = curNode.dict[curC - 'a'];\n            if (next == null) {\n                return false;\n            } else {\n                curNode = next;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"helloworld\");\n        boolean startsWith = trie.startsWith(\"hello\");\n        System.out.println(startsWith);\n        boolean search1 = trie.search(\"helloworld\");\n        System.out.println(search1);\n\n        boolean search2 = trie.search(\"hello\");\n        System.out.println(search2);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0208-implement-trie-prefix-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528\u7ed3\u70b9\u6570\u7ec4\uff09"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/",
            "text": "209. Minimum Size Subarray Sum\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u00a0\nn\u00a0\n\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570\u00a0\ns \uff0c\n\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c\n \u2265 s \n\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n\u3002\n\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002\n\n\n\u793a\u4f8b:\u00a0\n\n\n\u8f93\u5165:\n \ns = 7, nums = [2,3,1,2,4,3]\n\n\n\u8f93\u51fa:\n 2\n\n\u89e3\u91ca: \n\u5b50\u6570\u7ec4\u00a0\n[4,3]\n\u00a0\u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002\n\n\n\n\u8fdb\u9636:\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\nO\n(\nn\n) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5\u00a0\nO\n(\nn\n log \nn\n) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n209. Minimum Size Subarray Sum\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\u601d\u8def\u4e00\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\n\u4e3a\u4ec0\u4e48\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff1f\u201c\u4e8c\u5206\u67e5\u627e\u201d\u4e0d\u662f\u8981\u6c42\u6570\u7ec4\u662f\u6709\u5e8f\u7684\u5417\uff1f\n\n\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\u8fd9\u4e2a\u6761\u4ef6\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u4e2d\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u56e0\u4e3a\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u4e00\u5b9a\u662f\u4e25\u683c\u589e\u52a0\u7684\u3002\n\u4efb\u610f\u533a\u95f4\u548c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5f97\u5230\uff0c\u8fd9\u662f\u6211\u4eec\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5\u3002\n\u8d77\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u533a\u95f4\u8d8a\u957f\uff0c\u533a\u95f4\u548c\u8d8a\u5927\u3002\n\n\n\u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u6280\u5de7\u6765\u5b8c\u6210\uff0c\u8981\u770b\u8fc7\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f  $O(n)$\u3002\n\n\n\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6ee1\u8db3\u533a\u95f4\u548c >= s \u7684\u6700\u5c0f\u5b50\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u626b\u63cf\u3002\n\n\n\n\n\u5f53\u533a\u95f4\u548c\u5c0f\u4e8e s \u7684\u65f6\u5019\uff0c\u53f3\u533a\u95f4\u7684\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u8fd9\u4e00\u70b9\u4f9d\u8d56\u5916\u5c42\u5faa\u73af\u7684\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b\n\n\n\u4e00\u65e6\u533a\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e s\uff0c\u5c1d\u8bd5\u4e00\u6b65\u4e00\u6b65\u7f29\u5c0f\u5de6\u533a\u95f4\u7aef\u70b9\uff0c\u770b\u770b\u662f\u5426\u80fd\u5f97\u5230\u4e00\u4e2a\u66f4\u77ed\u7684\u533a\u95f4\uff0c\u6ee1\u8db3\u533a\u95f4\u548c >=s\uff0c\u8fd9\u4e00\u6b65\u901a\u8fc7\u4e00\u4e2a\u5185\u5c42\u5faa\u73af\u5b9e\u73b0\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\u3002\n\n\npublic class Solution {\n\n    public int minSubArrayLen(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\n        // \u56e0\u4e3a nums \u5168\u90fd\u662f\u6b63\u6574\u6570\uff0c\u56e0\u6b64 preSum \u4e25\u683c\u5355\u8c03\u589e\u52a0\n        int[] preSum = new int[len];\n        preSum[0] = nums[0];\n        for (int i = 1; i < len; i++) {\n            preSum[i] = preSum[i - 1] + nums[i];\n        }\n        // \u56e0\u4e3a\u524d\u7f00\u548c\u6570\u7ec4\u4e25\u683c\u5355\u8c03\u589e\u52a0\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n        // \u6700\u540e\u4e00\u4f4d\u6ca1\u6709\u4e0b\u4e00\u4f4d\u4e86\uff0c\u6240\u4ee5\u5916\u5c42\u904d\u5386\u5230\u6700\u540e\u4e00\u4f4d\u7684\u524d\u4e00\u4f4d\u5c31\u53ef\u4ee5\u4e86\n        int ret = len + 1;\n        for (int i = 0; i < len - 1; i++) {\n            // \u8ba1\u7b97\u533a\u95f4\u548c\n            int l = i;\n            int r = len - 1;\n            // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u6709\u4e0b\u754c\n            // i \u7684\u6700\u5927\u503c\u662f len-2,\n            // ans - i + 1 >= len + 1\n            // ans >= i + len = 2 * len -2\n            int ans = 2 * len - 2;\n            // int ans = 2 * len - 1; \u80fd\u901a\u8fc7\n            // int ans = 2 * len - 3; \u4e0d\u80fd\u901a\u8fc7\n            // \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u662f l > r\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n                // \u8ba1\u7b97\u4e00\u4e0b\u533a\u95f4\u548c\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5230\u7d22\u5f15 i \u7684\u533a\u95f4\u548c\u4e3a s\n                // 13 14 15 17 19 20\n                int segmentSum = preSum[mid] - (i == 0 ? 0 : preSum[i - 1]);\n                if (segmentSum >= s) {\n                    ans = mid;\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            ret = Integer.min(ans - i + 1, ret);\n        }\n        if (ret == len + 1) {\n            return 0;\n        }\n        return ret;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\n\n\npublic class Solution {\n\n    public int minSubArrayLen(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int r = -1;\n        // \u6ce8\u610f1\uff1a\u65e2\u7136\u662f\u6c42\u6700\u5c0f\u7684\u957f\u5ea6\uff0c\u521d\u59cb\u503c\u5e94\u8be5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u8fbe\u5230\u7684\u4e0a\u9650\n        int minSubArrayLen = len + 1;\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += nums[i];\n            r++;\n            // \u6ce8\u610f2\uff1a\u8fd9\u91cc\u7684 = \u53f7\u4e0d\u8981\u5fd8\u8bb0\u4e86\n            while (sum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, r - l + 1);\n                sum -= nums[l];\n                l++;\n            }\n        }\n        // \u5982\u679c\u5168\u90e8\u6570\u7ec4\u5143\u7d20\u52a0\u8d77\u6765\u90fd <s \uff0c\u5373 minSubArrayLen \u7684\u503c\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u6839\u636e\u9898\u610f\uff0c\u8fd4\u56de 0\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n\n    // \u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u8fb9\u754c\u6761\u4ef6\u8bbe\u7f6e\u4e0d\u4e00\u6837\n    public int minSubArrayLen1(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int r = 0;\n        int minSubArrayLen = len + 1;\n        int segmentSum = 0;\n        for (int num : nums) {\n            segmentSum += num;\n            r++;\n            // \u6ce8\u610f\uff1a\u6839\u636e\u9898\u610f\"\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\"\n            // \u6ce8\u610f\u8fd9\u4e2a\u8fb9\u754c\u6761\u4ef6\n            while (segmentSum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, r - l);\n                segmentSum -= nums[l];\n                l++;\n            }\n        }\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n\n    // 3 \u79cd\u5199\u6cd5\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\uff1a\u6ed1\u52a8\u7a97\u53e3\n    public int minSubArrayLen2(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int segmentSum = 0;\n        int minSubArrayLen = len + 1;\n        for (int i = 0; i < len; i++) {\n\n            segmentSum += nums[i];\n            while (segmentSum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, i - l + 1);\n                segmentSum -= nums[l];\n                l++;\n            }\n        }\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0209-minimum-size-subarray-sum\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "209. Minimum Size Subarray Sum"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#209-minimum-size-subarray-sum",
            "text": "",
            "title": "209. Minimum Size Subarray Sum"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u00a0 n\u00a0 \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570\u00a0 s \uff0c \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c  \u2265 s  \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002  \u793a\u4f8b:\u00a0  \u8f93\u5165:   s = 7, nums = [2,3,1,2,4,3]  \u8f93\u51fa:  2 \u89e3\u91ca:  \u5b50\u6570\u7ec4\u00a0 [4,3] \u00a0\u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002  \u8fdb\u9636:  \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 O ( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5\u00a0 O ( n  log  n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 209. Minimum Size Subarray Sum   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\n\u601d\u8def\u4e00\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\n\u4e3a\u4ec0\u4e48\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff1f\u201c\u4e8c\u5206\u67e5\u627e\u201d\u4e0d\u662f\u8981\u6c42\u6570\u7ec4\u662f\u6709\u5e8f\u7684\u5417\uff1f \n\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\u8fd9\u4e2a\u6761\u4ef6\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u4e2d\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u56e0\u4e3a\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u4e00\u5b9a\u662f\u4e25\u683c\u589e\u52a0\u7684\u3002\n\u4efb\u610f\u533a\u95f4\u548c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5f97\u5230\uff0c\u8fd9\u662f\u6211\u4eec\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5\u3002\n\u8d77\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u533a\u95f4\u8d8a\u957f\uff0c\u533a\u95f4\u548c\u8d8a\u5927\u3002  \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u6280\u5de7\u6765\u5b8c\u6210\uff0c\u8981\u770b\u8fc7\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f  $O(n)$\u3002  \u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6ee1\u8db3\u533a\u95f4\u548c >= s \u7684\u6700\u5c0f\u5b50\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u626b\u63cf\u3002   \u5f53\u533a\u95f4\u548c\u5c0f\u4e8e s \u7684\u65f6\u5019\uff0c\u53f3\u533a\u95f4\u7684\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u8fd9\u4e00\u70b9\u4f9d\u8d56\u5916\u5c42\u5faa\u73af\u7684\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b  \u4e00\u65e6\u533a\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e s\uff0c\u5c1d\u8bd5\u4e00\u6b65\u4e00\u6b65\u7f29\u5c0f\u5de6\u533a\u95f4\u7aef\u70b9\uff0c\u770b\u770b\u662f\u5426\u80fd\u5f97\u5230\u4e00\u4e2a\u66f4\u77ed\u7684\u533a\u95f4\uff0c\u6ee1\u8db3\u533a\u95f4\u548c >=s\uff0c\u8fd9\u4e00\u6b65\u901a\u8fc7\u4e00\u4e2a\u5185\u5c42\u5faa\u73af\u5b9e\u73b0\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#1",
            "text": "public class Solution {\n\n    public int minSubArrayLen(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\n        // \u56e0\u4e3a nums \u5168\u90fd\u662f\u6b63\u6574\u6570\uff0c\u56e0\u6b64 preSum \u4e25\u683c\u5355\u8c03\u589e\u52a0\n        int[] preSum = new int[len];\n        preSum[0] = nums[0];\n        for (int i = 1; i < len; i++) {\n            preSum[i] = preSum[i - 1] + nums[i];\n        }\n        // \u56e0\u4e3a\u524d\u7f00\u548c\u6570\u7ec4\u4e25\u683c\u5355\u8c03\u589e\u52a0\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n        // \u6700\u540e\u4e00\u4f4d\u6ca1\u6709\u4e0b\u4e00\u4f4d\u4e86\uff0c\u6240\u4ee5\u5916\u5c42\u904d\u5386\u5230\u6700\u540e\u4e00\u4f4d\u7684\u524d\u4e00\u4f4d\u5c31\u53ef\u4ee5\u4e86\n        int ret = len + 1;\n        for (int i = 0; i < len - 1; i++) {\n            // \u8ba1\u7b97\u533a\u95f4\u548c\n            int l = i;\n            int r = len - 1;\n            // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u6709\u4e0b\u754c\n            // i \u7684\u6700\u5927\u503c\u662f len-2,\n            // ans - i + 1 >= len + 1\n            // ans >= i + len = 2 * len -2\n            int ans = 2 * len - 2;\n            // int ans = 2 * len - 1; \u80fd\u901a\u8fc7\n            // int ans = 2 * len - 3; \u4e0d\u80fd\u901a\u8fc7\n            // \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u662f l > r\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n                // \u8ba1\u7b97\u4e00\u4e0b\u533a\u95f4\u548c\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5230\u7d22\u5f15 i \u7684\u533a\u95f4\u548c\u4e3a s\n                // 13 14 15 17 19 20\n                int segmentSum = preSum[mid] - (i == 0 ? 0 : preSum[i - 1]);\n                if (segmentSum >= s) {\n                    ans = mid;\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            ret = Integer.min(ans - i + 1, ret);\n        }\n        if (ret == len + 1) {\n            return 0;\n        }\n        return ret;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0209-minimum-size-subarray-sum/#2",
            "text": "public class Solution {\n\n    public int minSubArrayLen(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int r = -1;\n        // \u6ce8\u610f1\uff1a\u65e2\u7136\u662f\u6c42\u6700\u5c0f\u7684\u957f\u5ea6\uff0c\u521d\u59cb\u503c\u5e94\u8be5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u8fbe\u5230\u7684\u4e0a\u9650\n        int minSubArrayLen = len + 1;\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += nums[i];\n            r++;\n            // \u6ce8\u610f2\uff1a\u8fd9\u91cc\u7684 = \u53f7\u4e0d\u8981\u5fd8\u8bb0\u4e86\n            while (sum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, r - l + 1);\n                sum -= nums[l];\n                l++;\n            }\n        }\n        // \u5982\u679c\u5168\u90e8\u6570\u7ec4\u5143\u7d20\u52a0\u8d77\u6765\u90fd <s \uff0c\u5373 minSubArrayLen \u7684\u503c\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u6839\u636e\u9898\u610f\uff0c\u8fd4\u56de 0\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n\n    // \u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u8fb9\u754c\u6761\u4ef6\u8bbe\u7f6e\u4e0d\u4e00\u6837\n    public int minSubArrayLen1(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int r = 0;\n        int minSubArrayLen = len + 1;\n        int segmentSum = 0;\n        for (int num : nums) {\n            segmentSum += num;\n            r++;\n            // \u6ce8\u610f\uff1a\u6839\u636e\u9898\u610f\"\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\"\n            // \u6ce8\u610f\u8fd9\u4e2a\u8fb9\u754c\u6761\u4ef6\n            while (segmentSum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, r - l);\n                segmentSum -= nums[l];\n                l++;\n            }\n        }\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n\n    // 3 \u79cd\u5199\u6cd5\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\uff1a\u6ed1\u52a8\u7a97\u53e3\n    public int minSubArrayLen2(int s, int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        int l = 0;\n        int segmentSum = 0;\n        int minSubArrayLen = len + 1;\n        for (int i = 0; i < len; i++) {\n\n            segmentSum += nums[i];\n            while (segmentSum >= s) {\n                minSubArrayLen = Integer.min(minSubArrayLen, i - l + 1);\n                segmentSum -= nums[l];\n                l++;\n            }\n        }\n        if (minSubArrayLen == len + 1) {\n            return 0;\n        }\n        return minSubArrayLen;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0209-minimum-size-subarray-sum  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/",
            "text": "210. Course Schedule II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u73b0\u5728\u4f60\u603b\u5171\u6709 \nn\n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a\u00a0\n0\n\u00a0\u5230\u00a0\nn-1\n\u3002\n\n\n\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b\u00a01 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: \n[0,1]\n\n\n\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002\n\n\n\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 2, [[1,0]] \n\n\u8f93\u51fa: \n[0,1]\n\n\n\u89e3\u91ca:\n\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a \n[0,1] \u3002\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n 4, [[1,0],[2,0],[3,1],[3,2]]\n\n\u8f93\u51fa: \n[0,1,2,3] or [0,2,1,3]\n\n\n\u89e3\u91ca:\n\u00a0\u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002\n\u00a0    \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f\u00a0\n[0,1,2,3]\n \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f\u00a0\n[0,2,1,3]\n \u3002\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\n\u8fb9\u7f18\u5217\u8868\n\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\n\u56fe\u7684\u8868\u793a\u6cd5\n\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002\n\n\n\n\n\u63d0\u793a:\n\n\n\n\n\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002\n\n\n\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002\n\n\n\n\n\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u00a0\nBFS\n\u00a0\u5b8c\u6210\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n210. Course Schedule II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n210. \u8bfe\u7a0b\u8868 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u3002\n\n\n\u6211\u4e2a\u4eba\u89c9\u5f97\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u601d\u8def\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0cdfs \u9012\u5f52\u8981\u5224\u65ad\u7ed3\u70b9\u7684\u72b6\u6001\uff0c\u6709\u90a3\u4e48\u4e00\u4e9b\u7ed5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedList;\n\npublic class Solution {\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        // \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n        if (numCourses <= 0) {\n            return new int[0];\n        }\n        // \u90bb\u63a5\u8868\u8868\u793a\n        HashSet<Integer>[] graph = new HashSet[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            graph[i] = new HashSet<>();\n        }\n        // \u5165\u5ea6\u8868\n        int[] inDegree = new int[numCourses];\n        // \u904d\u5386 prerequisites \u7684\u65f6\u5019\uff0c\u628a \u90bb\u63a5\u8868 \u548c \u5165\u5ea6\u8868 \u90fd\u586b\u4e0a\n        for (int[] p : prerequisites) {\n            graph[p[1]].add(p[0]);\n            inDegree[p[0]]++;\n        }\n        LinkedList<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < numCourses; i++) {\n            if (inDegree[i] == 0) {\n                queue.addLast(i);\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            // \u5f53\u524d\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n            Integer inDegreeNode = queue.removeFirst();\n            // \u52a0\u5165\u7ed3\u679c\u96c6\u4e2d\n            res.add(inDegreeNode);\n            // \u4e0b\u9762\u4ece\u56fe\u4e2d\u5220\u53bb\n            // \u5f97\u5230\u6240\u6709\u7684\u540e\u7ee7\u8bfe\u7a0b\uff0c\u63a5\u4e0b\u6765\u628a\u5b83\u4eec\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u53bb 1\n            HashSet<Integer> nextCourses = graph[inDegreeNode];\n            for (Integer nextCourse : nextCourses) {\n                inDegree[nextCourse]--;\n                // \u9a6c\u4e0a\u68c0\u6d4b\u8be5\u7ed3\u70b9\u7684\u5165\u5ea6\u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u4e3a 0\uff0c\u9a6c\u4e0a\u52a0\u5165\u961f\u5217\n                if (inDegree[nextCourse] == 0) {\n                    queue.addLast(nextCourse);\n                }\n            }\n        }\n        // \u5982\u679c\u7ed3\u679c\u96c6\u4e2d\u7684\u6570\u91cf\u4e0d\u7b49\u4e8e\u7ed3\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u4e0d\u80fd\u5b8c\u6210\u8bfe\u7a0b\u4efb\u52a1\uff0c\u8fd9\u4e00\u70b9\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u8bba\n        int resLen = res.size();\n        if (resLen == numCourses) {\n            int[] ret = new int[numCourses];\n            for (int i = 0; i < numCourses; i++) {\n                ret[i] = res.get(i);\n            }\n            return ret;\n        } else {\n            return new int[0];\n        }\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002\n\n\nimport java.util.HashSet;\nimport java.util.Stack;\n\n/**\n * @author liwei\n * @date 18/6/24 \u4e0b\u53484:10\n */\npublic class Solution3 {\n\n    /**\n     * @param numCourses\n     * @param prerequisites\n     * @return\n     */\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        if (numCourses <= 0) {\n            // \u8fde\u8bfe\u7a0b\u6570\u76ee\u90fd\u6ca1\u6709\uff0c\u5c31\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u7ec3\u4e60\u4e86\uff0c\u6839\u636e\u9898\u610f\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4\n            return new int[0];\n        }\n        int plen = prerequisites.length;\n        if (plen == 0) {\n            // \u6ca1\u6709\u6709\u5411\u8fb9\uff0c\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8bfe\u7a0b\u4f9d\u8d56\uff0c\u4efb\u52a1\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210\n            int[] ret = new int[numCourses];\n            for (int i = 0; i < numCourses; i++) {\n                ret[i] = i;\n            }\n            return ret;\n        }\n        int[] marked = new int[numCourses];\n        // \u521d\u59cb\u5316\u6709\u5411\u56fe begin\n        HashSet<Integer>[] graph = new HashSet[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            graph[i] = new HashSet<>();\n        }\n        // \u521d\u59cb\u5316\u6709\u5411\u56fe end\n        // \u6709\u5411\u56fe\u7684 key \u662f\u524d\u9a71\u7ed3\u70b9\uff0cvalue \u662f\u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408\n        for (int[] p : prerequisites) {\n            graph[p[1]].add(p[0]);\n        }\n        // \u4f7f\u7528 Stack \u6216\u8005 List \u8bb0\u5f55\u9012\u5f52\u7684\u987a\u5e8f\uff0c\u8fd9\u91cc\u4f7f\u7528 Stack\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < numCourses; i++) {\n            if (dfs(i, graph, marked, stack)) {\n                // \u6ce8\u610f\u65b9\u6cd5\u7684\u8bed\u4e49\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u73af\uff0c\u8868\u793a\u8bfe\u7a0b\u4efb\u52a1\u4e0d\u80fd\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4\n                return new int[0];\n            }\n        }\n        // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u76f4 dfs \u90fd\u6ca1\u6709\u9047\u5230\u5df2\u7ecf\u91cd\u590d\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0c\u5c31\u8868\u793a\u6709\u5411\u56fe\u4e2d\u6ca1\u6709\u73af\n        // \u6240\u6709\u8bfe\u7a0b\u4efb\u52a1\u53ef\u4ee5\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de true\n        // \u4e0b\u9762\u8fd9\u4e2a\u65ad\u8a00\u4e00\u5b9a\u6210\u7acb\uff0c\u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u544a\u8bc9\u6211\u4eec\u7684\u7ed3\u8bba\n        assert stack.size() == numCourses;\n        int[] ret = new int[numCourses];\n        // \u60f3\u60f3\u8981\u600e\u4e48\u5f97\u5230\u7ed3\u8bba\uff0c\u6211\u4eec\u7684 dfs \u662f\u4e00\u81f4\u5c06\u540e\u7ee7\u7ed3\u70b9\u8fdb\u884c dfs \u7684\n        // \u6240\u4ee5\u538b\u5728\u6808\u5e95\u7684\u5143\u7d20\uff0c\u4e00\u5b9a\u662f\u90a3\u4e2a\u6ca1\u6709\u540e\u7ee7\u8bfe\u7a0b\u7684\u7ed3\u70b9\n        // \u90a3\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u8bfe\u7a0b\uff0c\u4e00\u5b9a\u5728\u6808\u9876\uff0c\u6240\u4ee5\u8bfe\u7a0b\u5b66\u4e60\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u662f\u4ece\u6808\u9876\u5230\u6808\u5e95\n        // \u4f9d\u6b21\u51fa\u6808\u5c31\u597d\u4e86\n        for (int i = 0; i < numCourses; i++) {\n            ret[i] = stack.pop();\n        }\n        return ret;\n    }\n\n    /**\n     * \u6ce8\u610f\u8fd9\u4e2a dfs \u65b9\u6cd5\u7684\u8bed\u4e49\n     *\n     * @param i      \u5f53\u524d\u8bbf\u95ee\u7684\u8bfe\u7a0b\u7ed3\u70b9\n     * @param graph\n     * @param marked \u5982\u679c == 1 \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5982\u679c == 2 \u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86\n     * @return true \u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\uff0cfalse \u8868\u793a\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86\n     */\n    private boolean dfs(int i,\n                        HashSet<Integer>[] graph,\n                        int[] marked,\n                        Stack<Integer> stack) {\n        // \u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86\n        if (marked[i] == 1) {\n            // \u4ece\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5230\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u8868\u793a\u9047\u5230\u4e86\u73af\n            return true;\n        }\n        if (marked[i] == 2) {\n            // \u8868\u793a\u5728\u8bbf\u95ee\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u9047\u5230\u73af\uff0c\u8fd9\u4e2a\u8282\u70b9\u8bbf\u95ee\u8fc7\u4e86\n            return false;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\uff0c\u662f\u56e0\u4e3a\u521d\u59cb\u5316\u5462\uff0c\u6b64\u65f6 marked[i] == 0\n        // \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\n        marked[i] = 1;\n        // \u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408\n        HashSet<Integer> successorNodes = graph[i];\n        for (Integer successor : successorNodes) {\n            if (dfs(successor, graph, marked, stack)) {\n                // \u5c42\u5c42\u9012\u5f52\u8fd4\u56de true \uff0c\u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\n                return true;\n            }\n        }\n        // i \u7684\u6240\u6709\u540e\u7ee7\u7ed3\u70b9\u90fd\u8bbf\u95ee\u5b8c\u4e86\uff0c\u90fd\u6ca1\u6709\u5b58\u5728\u73af\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u7ed3\u675f\n        // \u72b6\u6001\u8bbe\u7f6e\u4e3a 2\n        marked[i] = 2;\n        stack.add(i);\n        // false \u8868\u793a\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\n        return false;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0210-course-schedule-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "210. Course Schedule II"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#210-course-schedule-ii",
            "text": "",
            "title": "210. Course Schedule II"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u73b0\u5728\u4f60\u603b\u5171\u6709  n  \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a\u00a0 0 \u00a0\u5230\u00a0 n-1 \u3002  \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b\u00a01 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec:  [0,1]  \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002  \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  2, [[1,0]]  \u8f93\u51fa:  [0,1]  \u89e3\u91ca: \u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a  [0,1] \u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165:  4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa:  [0,1,2,3] or [0,2,1,3]  \u89e3\u91ca: \u00a0\u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002\n\u00a0    \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f\u00a0 [0,1,2,3]  \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f\u00a0 [0,2,1,3]  \u3002  \u8bf4\u660e:   \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002  \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002   \u63d0\u793a:   \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002  \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f  - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002   \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u00a0 BFS \u00a0\u5b8c\u6210\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 210. Course Schedule II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 210. \u8bfe\u7a0b\u8868 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u3002  \u6211\u4e2a\u4eba\u89c9\u5f97\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u601d\u8def\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0cdfs \u9012\u5f52\u8981\u5224\u65ad\u7ed3\u70b9\u7684\u72b6\u6001\uff0c\u6709\u90a3\u4e48\u4e00\u4e9b\u7ed5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedList;\n\npublic class Solution {\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        // \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5\n        if (numCourses <= 0) {\n            return new int[0];\n        }\n        // \u90bb\u63a5\u8868\u8868\u793a\n        HashSet<Integer>[] graph = new HashSet[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            graph[i] = new HashSet<>();\n        }\n        // \u5165\u5ea6\u8868\n        int[] inDegree = new int[numCourses];\n        // \u904d\u5386 prerequisites \u7684\u65f6\u5019\uff0c\u628a \u90bb\u63a5\u8868 \u548c \u5165\u5ea6\u8868 \u90fd\u586b\u4e0a\n        for (int[] p : prerequisites) {\n            graph[p[1]].add(p[0]);\n            inDegree[p[0]]++;\n        }\n        LinkedList<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < numCourses; i++) {\n            if (inDegree[i] == 0) {\n                queue.addLast(i);\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            // \u5f53\u524d\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\n            Integer inDegreeNode = queue.removeFirst();\n            // \u52a0\u5165\u7ed3\u679c\u96c6\u4e2d\n            res.add(inDegreeNode);\n            // \u4e0b\u9762\u4ece\u56fe\u4e2d\u5220\u53bb\n            // \u5f97\u5230\u6240\u6709\u7684\u540e\u7ee7\u8bfe\u7a0b\uff0c\u63a5\u4e0b\u6765\u628a\u5b83\u4eec\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u53bb 1\n            HashSet<Integer> nextCourses = graph[inDegreeNode];\n            for (Integer nextCourse : nextCourses) {\n                inDegree[nextCourse]--;\n                // \u9a6c\u4e0a\u68c0\u6d4b\u8be5\u7ed3\u70b9\u7684\u5165\u5ea6\u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u4e3a 0\uff0c\u9a6c\u4e0a\u52a0\u5165\u961f\u5217\n                if (inDegree[nextCourse] == 0) {\n                    queue.addLast(nextCourse);\n                }\n            }\n        }\n        // \u5982\u679c\u7ed3\u679c\u96c6\u4e2d\u7684\u6570\u91cf\u4e0d\u7b49\u4e8e\u7ed3\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u4e0d\u80fd\u5b8c\u6210\u8bfe\u7a0b\u4efb\u52a1\uff0c\u8fd9\u4e00\u70b9\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u8bba\n        int resLen = res.size();\n        if (resLen == numCourses) {\n            int[] ret = new int[numCourses];\n            for (int i = 0; i < numCourses; i++) {\n                ret[i] = res.get(i);\n            }\n            return ret;\n        } else {\n            return new int[0];\n        }\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u3002"
        },
        {
            "location": "/leetcode-0210-course-schedule-ii/#2",
            "text": "import java.util.HashSet;\nimport java.util.Stack;\n\n/**\n * @author liwei\n * @date 18/6/24 \u4e0b\u53484:10\n */\npublic class Solution3 {\n\n    /**\n     * @param numCourses\n     * @param prerequisites\n     * @return\n     */\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        if (numCourses <= 0) {\n            // \u8fde\u8bfe\u7a0b\u6570\u76ee\u90fd\u6ca1\u6709\uff0c\u5c31\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u7ec3\u4e60\u4e86\uff0c\u6839\u636e\u9898\u610f\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4\n            return new int[0];\n        }\n        int plen = prerequisites.length;\n        if (plen == 0) {\n            // \u6ca1\u6709\u6709\u5411\u8fb9\uff0c\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8bfe\u7a0b\u4f9d\u8d56\uff0c\u4efb\u52a1\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210\n            int[] ret = new int[numCourses];\n            for (int i = 0; i < numCourses; i++) {\n                ret[i] = i;\n            }\n            return ret;\n        }\n        int[] marked = new int[numCourses];\n        // \u521d\u59cb\u5316\u6709\u5411\u56fe begin\n        HashSet<Integer>[] graph = new HashSet[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            graph[i] = new HashSet<>();\n        }\n        // \u521d\u59cb\u5316\u6709\u5411\u56fe end\n        // \u6709\u5411\u56fe\u7684 key \u662f\u524d\u9a71\u7ed3\u70b9\uff0cvalue \u662f\u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408\n        for (int[] p : prerequisites) {\n            graph[p[1]].add(p[0]);\n        }\n        // \u4f7f\u7528 Stack \u6216\u8005 List \u8bb0\u5f55\u9012\u5f52\u7684\u987a\u5e8f\uff0c\u8fd9\u91cc\u4f7f\u7528 Stack\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < numCourses; i++) {\n            if (dfs(i, graph, marked, stack)) {\n                // \u6ce8\u610f\u65b9\u6cd5\u7684\u8bed\u4e49\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u73af\uff0c\u8868\u793a\u8bfe\u7a0b\u4efb\u52a1\u4e0d\u80fd\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4\n                return new int[0];\n            }\n        }\n        // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u76f4 dfs \u90fd\u6ca1\u6709\u9047\u5230\u5df2\u7ecf\u91cd\u590d\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0c\u5c31\u8868\u793a\u6709\u5411\u56fe\u4e2d\u6ca1\u6709\u73af\n        // \u6240\u6709\u8bfe\u7a0b\u4efb\u52a1\u53ef\u4ee5\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de true\n        // \u4e0b\u9762\u8fd9\u4e2a\u65ad\u8a00\u4e00\u5b9a\u6210\u7acb\uff0c\u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u544a\u8bc9\u6211\u4eec\u7684\u7ed3\u8bba\n        assert stack.size() == numCourses;\n        int[] ret = new int[numCourses];\n        // \u60f3\u60f3\u8981\u600e\u4e48\u5f97\u5230\u7ed3\u8bba\uff0c\u6211\u4eec\u7684 dfs \u662f\u4e00\u81f4\u5c06\u540e\u7ee7\u7ed3\u70b9\u8fdb\u884c dfs \u7684\n        // \u6240\u4ee5\u538b\u5728\u6808\u5e95\u7684\u5143\u7d20\uff0c\u4e00\u5b9a\u662f\u90a3\u4e2a\u6ca1\u6709\u540e\u7ee7\u8bfe\u7a0b\u7684\u7ed3\u70b9\n        // \u90a3\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u8bfe\u7a0b\uff0c\u4e00\u5b9a\u5728\u6808\u9876\uff0c\u6240\u4ee5\u8bfe\u7a0b\u5b66\u4e60\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u662f\u4ece\u6808\u9876\u5230\u6808\u5e95\n        // \u4f9d\u6b21\u51fa\u6808\u5c31\u597d\u4e86\n        for (int i = 0; i < numCourses; i++) {\n            ret[i] = stack.pop();\n        }\n        return ret;\n    }\n\n    /**\n     * \u6ce8\u610f\u8fd9\u4e2a dfs \u65b9\u6cd5\u7684\u8bed\u4e49\n     *\n     * @param i      \u5f53\u524d\u8bbf\u95ee\u7684\u8bfe\u7a0b\u7ed3\u70b9\n     * @param graph\n     * @param marked \u5982\u679c == 1 \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5982\u679c == 2 \u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86\n     * @return true \u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\uff0cfalse \u8868\u793a\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86\n     */\n    private boolean dfs(int i,\n                        HashSet<Integer>[] graph,\n                        int[] marked,\n                        Stack<Integer> stack) {\n        // \u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86\n        if (marked[i] == 1) {\n            // \u4ece\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5230\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u8868\u793a\u9047\u5230\u4e86\u73af\n            return true;\n        }\n        if (marked[i] == 2) {\n            // \u8868\u793a\u5728\u8bbf\u95ee\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u9047\u5230\u73af\uff0c\u8fd9\u4e2a\u8282\u70b9\u8bbf\u95ee\u8fc7\u4e86\n            return false;\n        }\n        // \u8d70\u5230\u8fd9\u91cc\uff0c\u662f\u56e0\u4e3a\u521d\u59cb\u5316\u5462\uff0c\u6b64\u65f6 marked[i] == 0\n        // \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\n        marked[i] = 1;\n        // \u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408\n        HashSet<Integer> successorNodes = graph[i];\n        for (Integer successor : successorNodes) {\n            if (dfs(successor, graph, marked, stack)) {\n                // \u5c42\u5c42\u9012\u5f52\u8fd4\u56de true \uff0c\u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\n                return true;\n            }\n        }\n        // i \u7684\u6240\u6709\u540e\u7ee7\u7ed3\u70b9\u90fd\u8bbf\u95ee\u5b8c\u4e86\uff0c\u90fd\u6ca1\u6709\u5b58\u5728\u73af\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u7ed3\u675f\n        // \u72b6\u6001\u8bbe\u7f6e\u4e3a 2\n        marked[i] = 2;\n        stack.add(i);\n        // false \u8868\u793a\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\n        return false;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0210-course-schedule-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/",
            "text": "211. Add and Search Word - Data structure design\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n\n\n\nvoid addWord(word)\nbool search(word)\n\n\n\n\nsearch(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd \n.\n \u6216 \na-z\n \u3002 \n.\n \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002\n+ \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n+ \u82f1\u6587\u7f51\u5740\uff1a\n211. Add and Search Word - Data structure design\n  \u3002\n+ \u4e2d\u6587\u7f51\u5740\uff1a\n211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\n  \u3002\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\nsearch\n \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684 \n.\n \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\nimport java.util.Set;\n\npublic class WordDictionary {\n\n    private Node root;\n\n    private class Node {\n        private boolean isWord;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public WordDictionary() {\n        root = new Node();\n    }\n\n    /**\n     * Adds a word into the data structure.\n     */\n    public void addWord(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n     */\n    public boolean search(String word) {\n        return search(root, word, 0);\n    }\n\n    private boolean search(Node node, String word, int depth) {\n        if (depth == word.length()) {\n            // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d\n            // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\n            return node.isWord;\n        }\n        Character c = word.charAt(depth);\n        if (c == '.') {\n            Set<Character> keys = node.next.keySet();\n            for (Character key : keys) {\n                Node nextNode = node.next.get(key);\n                if (search(nextNode, word, depth + 1)) {\n                    return true;\n                }\n            }\n            // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\n            return false;\n        } else {\n            if (!node.next.containsKey(c)) {\n                return false;\n            }\n            return search(node.next.get(c), word, depth + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        boolean search1 = wordDictionary.search(\"pad\");// -> false\n        System.out.println(search1);\n        boolean search2 = wordDictionary.search(\"bad\"); // -> true\n        System.out.println(search2);\n        boolean search3 = wordDictionary.search(\".ad\"); // -> true\n        System.out.println(search3);\n        boolean search4 = wordDictionary.search(\"b..\"); //-> true\n        System.out.println(search4);\n    }\n}",
            "title": "211. Add and Search Word - Data structure design"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#211-add-and-search-word-data-structure-design",
            "text": "",
            "title": "211. Add and Search Word - Data structure design"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a   void addWord(word)\nbool search(word)  search(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd  .  \u6216  a-z  \u3002  .  \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002\n+ \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n+ \u82f1\u6587\u7f51\u5740\uff1a 211. Add and Search Word - Data structure design   \u3002\n+ \u4e2d\u6587\u7f51\u5740\uff1a 211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a search  \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684  .  \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0211-add-and-search-word-data-structure-design/#1",
            "text": "import java.util.HashMap;\nimport java.util.Set;\n\npublic class WordDictionary {\n\n    private Node root;\n\n    private class Node {\n        private boolean isWord;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public WordDictionary() {\n        root = new Node();\n    }\n\n    /**\n     * Adds a word into the data structure.\n     */\n    public void addWord(String word) {\n        Node curNode = root;\n        for (int i = 0; i < word.length(); i++) {\n            Character c = word.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        if (!curNode.isWord) {\n            curNode.isWord = true;\n        }\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n     */\n    public boolean search(String word) {\n        return search(root, word, 0);\n    }\n\n    private boolean search(Node node, String word, int depth) {\n        if (depth == word.length()) {\n            // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d\n            // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\n            return node.isWord;\n        }\n        Character c = word.charAt(depth);\n        if (c == '.') {\n            Set<Character> keys = node.next.keySet();\n            for (Character key : keys) {\n                Node nextNode = node.next.get(key);\n                if (search(nextNode, word, depth + 1)) {\n                    return true;\n                }\n            }\n            // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\n            return false;\n        } else {\n            if (!node.next.containsKey(c)) {\n                return false;\n            }\n            return search(node.next.get(c), word, depth + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        boolean search1 = wordDictionary.search(\"pad\");// -> false\n        System.out.println(search1);\n        boolean search2 = wordDictionary.search(\"bad\"); // -> true\n        System.out.println(search2);\n        boolean search3 = wordDictionary.search(\".ad\"); // -> true\n        System.out.println(search3);\n        boolean search4 = wordDictionary.search(\"b..\"); //-> true\n        System.out.println(search4);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0212-word-search-ii/",
            "text": "212. Word Search II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u00a0\nboard\u00a0\n\u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 \nwords\n\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002\n\n\n\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \n\nwords\n = \n[\"oath\",\"pea\",\"eat\",\"rain\"]\n and \nboard \n=\n[\n  ['\no\n','\na\n','a','n'],\n  ['e','\nt\n','\na\n','\ne\n'],\n  ['i','\nh\n','k','r'],\n  ['i','f','l','v']\n]\n\n\n\u8f93\u51fa:\u00a0\n[\"eat\",\"oath\"]\n\n\n\u8bf4\u660e:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd \na-z\n\u00a0\u7ec4\u6210\u3002\n\n\n\u63d0\u793a:\n\n\n\n\n\u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f\n\n\n\u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \n\u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09\n\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n212. Word Search II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n212. \u5355\u8bcd\u641c\u7d22 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5b57\u5178\u6811 + \u641c\u7d22\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u3002\n\n\n\n\n\u5b57\u5178\u6811\u7684\u7ed3\u70b9\u8981\u66b4\u9732\u51fa\u6765\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Solution {\n\n    // \u53c2\u8003\u8d44\u6599\uff1a\n    // https://leetcode.com/problems/word-search-ii/discuss/148041/Clean-Java-Code-Trie\n\n    //         x-1, y\n    // x, y-1  x, y    x, y+1\n    //         x+1,y\n    private static final int[][] directions = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};\n\n    private class TrieNode {\n        private TrieNode[] next;\n        private boolean isEnd;\n        private String word;\n\n        public TrieNode() {\n            next = new TrieNode[26];\n            isEnd = false;\n        }\n    }\n\n    public List<String> findWords(char[][] board, String[] words) {\n        List<String> res = new ArrayList<>();\n        if (words == null || words.length == 0) {\n            return res;\n        }\n        int row = board.length;\n        if (row == 0) {\n            return res;\n        }\n        int col = board[0].length;\n        TrieNode root = new TrieNode();\n        boolean[][] visited = new boolean[row][col];\n        for (String word : words) {\n            TrieNode curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    curNode.next[c - 'a'] = new TrieNode();\n                }\n                curNode = curNode.next[c - 'a'];\n            }\n            if (!curNode.isEnd) {\n                curNode.isEnd = true;\n                curNode.word = word;\n            }\n        }\n\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                dfs(board, visited, i, j, row, col, root, res);\n            }\n        }\n        // \u6700\u540e\u8981\u53bb\u91cd\n        Set<String> set = new HashSet(res);\n        res = new ArrayList<>(set);\n        return res;\n    }\n\n    /**\n     * @param board   \u5b57\u7b26\u9762\u677f\n     * @param visited \u8bb0\u5f55\u5f53\u524d\u5750\u6807\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n     * @param i       \u6a2a\u5750\u6807\n     * @param j       \u7eb5\u5750\u6807\n     * @param row     \u6a2a\u5750\u6807\u7684\u6700\u5927\u503c\n     * @param col     \u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\n     * @param node    \u5f53\u524d\u5b57\u5178\u6811\u7ed3\u70b9\n     * @param res     \u7ed3\u679c\u96c6\n     */\n    private void dfs(char[][] board, boolean[][] visited, int i, int j, int row, int col, TrieNode node, List<String> res) {\n        if (node.isEnd) {\n            res.add(node.word);\n        }\n        if (inArea(i, j, row, col) && !visited[i][j]) {\n            TrieNode nextNode = node.next[board[i][j] - 'a'];\n            // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e\n            visited[i][j] = true;\n            if (nextNode != null) {\n                for (int k = 0; k < 4; k++) {\n                    int newX = i + directions[k][0];\n                    int newY = j + directions[k][1];\n                    dfs(board, visited, newX, newY, row, col, nextNode, res);\n                }\n            }\n            // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e\n            visited[i][j] = false;\n        }\n    }\n\n    private boolean inArea(int i, int j, int row, int col) {\n        return i >= 0 && i < row && j >= 0 && j < col;\n    }\n\n    public static void main(String[] args) {\n        String[] words = {\"oath\", \"pea\", \"eat\", \"rain\"};\n        char[][] board = {\n                {'o', 'a', 'a', 'n'},\n                {'e', 't', 'a', 'e'},\n                {'i', 'h', 'k', 'r'},\n                {'i', 'f', 'l', 'v'}};\n        Solution solution = new Solution();\n        List<String> solutionWords = solution.findWords(board, words);\n        System.out.println(solutionWords);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0212-word-search-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "212. Word Search II"
        },
        {
            "location": "/leetcode-0212-word-search-ii/#212-word-search-ii",
            "text": "",
            "title": "212. Word Search II"
        },
        {
            "location": "/leetcode-0212-word-search-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u00a0 board\u00a0 \u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868  words \uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002  \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002  \u793a\u4f8b:  \u8f93\u5165:   words  =  [\"oath\",\"pea\",\"eat\",\"rain\"]  and  board  =\n[\n  [' o ',' a ','a','n'],\n  ['e',' t ',' a ',' e '],\n  ['i',' h ','k','r'],\n  ['i','f','l','v']\n] \u8f93\u51fa:\u00a0 [\"eat\",\"oath\"]  \u8bf4\u660e: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd  a-z \u00a0\u7ec4\u6210\u3002  \u63d0\u793a:   \u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f  \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a  \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09 \u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 212. Word Search II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 212. \u5355\u8bcd\u641c\u7d22 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0212-word-search-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5b57\u5178\u6811 + \u641c\u7d22\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u3002   \u5b57\u5178\u6811\u7684\u7ed3\u70b9\u8981\u66b4\u9732\u51fa\u6765\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0212-word-search-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0212-word-search-ii/#1",
            "text": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Solution {\n\n    // \u53c2\u8003\u8d44\u6599\uff1a\n    // https://leetcode.com/problems/word-search-ii/discuss/148041/Clean-Java-Code-Trie\n\n    //         x-1, y\n    // x, y-1  x, y    x, y+1\n    //         x+1,y\n    private static final int[][] directions = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};\n\n    private class TrieNode {\n        private TrieNode[] next;\n        private boolean isEnd;\n        private String word;\n\n        public TrieNode() {\n            next = new TrieNode[26];\n            isEnd = false;\n        }\n    }\n\n    public List<String> findWords(char[][] board, String[] words) {\n        List<String> res = new ArrayList<>();\n        if (words == null || words.length == 0) {\n            return res;\n        }\n        int row = board.length;\n        if (row == 0) {\n            return res;\n        }\n        int col = board[0].length;\n        TrieNode root = new TrieNode();\n        boolean[][] visited = new boolean[row][col];\n        for (String word : words) {\n            TrieNode curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    curNode.next[c - 'a'] = new TrieNode();\n                }\n                curNode = curNode.next[c - 'a'];\n            }\n            if (!curNode.isEnd) {\n                curNode.isEnd = true;\n                curNode.word = word;\n            }\n        }\n\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                dfs(board, visited, i, j, row, col, root, res);\n            }\n        }\n        // \u6700\u540e\u8981\u53bb\u91cd\n        Set<String> set = new HashSet(res);\n        res = new ArrayList<>(set);\n        return res;\n    }\n\n    /**\n     * @param board   \u5b57\u7b26\u9762\u677f\n     * @param visited \u8bb0\u5f55\u5f53\u524d\u5750\u6807\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n     * @param i       \u6a2a\u5750\u6807\n     * @param j       \u7eb5\u5750\u6807\n     * @param row     \u6a2a\u5750\u6807\u7684\u6700\u5927\u503c\n     * @param col     \u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\n     * @param node    \u5f53\u524d\u5b57\u5178\u6811\u7ed3\u70b9\n     * @param res     \u7ed3\u679c\u96c6\n     */\n    private void dfs(char[][] board, boolean[][] visited, int i, int j, int row, int col, TrieNode node, List<String> res) {\n        if (node.isEnd) {\n            res.add(node.word);\n        }\n        if (inArea(i, j, row, col) && !visited[i][j]) {\n            TrieNode nextNode = node.next[board[i][j] - 'a'];\n            // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e\n            visited[i][j] = true;\n            if (nextNode != null) {\n                for (int k = 0; k < 4; k++) {\n                    int newX = i + directions[k][0];\n                    int newY = j + directions[k][1];\n                    dfs(board, visited, newX, newY, row, col, nextNode, res);\n                }\n            }\n            // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e\n            visited[i][j] = false;\n        }\n    }\n\n    private boolean inArea(int i, int j, int row, int col) {\n        return i >= 0 && i < row && j >= 0 && j < col;\n    }\n\n    public static void main(String[] args) {\n        String[] words = {\"oath\", \"pea\", \"eat\", \"rain\"};\n        char[][] board = {\n                {'o', 'a', 'a', 'n'},\n                {'e', 't', 'a', 'e'},\n                {'i', 'h', 'k', 'r'},\n                {'i', 'f', 'l', 'v'}};\n        Solution solution = new Solution();\n        List<String> solutionWords = solution.findWords(board, words);\n        System.out.println(solutionWords);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0212-word-search-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/",
            "text": "215. Kth Largest Element in an Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c \nk\n \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \n[3,2,1,5,6,4] \u548c\n k = 2\n\n\u8f93\u51fa:\n 5\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n \n[3,2,3,1,2,4,5,5,6] \u548c\n k = 4\n\n\u8f93\u51fa:\n 4\n\n\n\u8bf4\u660e: \n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n215. Kth Largest Element in an Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\u3002\u5176\u5b9e\u628a\u6570\u7ec4\u6392\u4e2a\u5e8f\uff08\u5347\u5e8f\uff09\uff0c\u8fd4\u56de\u5012\u6570\u7b2c $k$ \u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u5982\u679c\u51fa\u73b0\u5728\u7b14\u8bd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7b54\u6848\u80af\u5b9a\u4e0d\u80fd\u8fc7\u5173\u7684\uff0c\u6211\u770b\u5230\u8fc7\u7684\u89e3\u7b54\u4e2d\uff0c\u4f7f\u7528 partition \u548c\u5806\u4e5f\u662f\u9700\u8981\u638c\u63e1\u7684\u3002\n\n\n\u9996\u5148\uff0c\u501f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002\u5173\u952e\u5728\u4e8e\u7406\u89e3 partition \u7684\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u503c\u662f\u62c9\u901a\u4e86\u6574\u4e2a\u6570\u7ec4\u7684\u7d22\u5f15\u503c\u3002\n\n\n\n\npartition \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09\u3002\n\n\n\u5982\u679c\u627e\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u5373\u7b2c n - k \u4e2a\u6700\u5927\u5143\u7d20\u3002\n\n\n\n\n\u4f8b\u5982\uff1a\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 4 \uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\u3002\n\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 2 \uff0c\u5de6\u8fb9\u7684\u533a\u95f4\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002\n\n\npublic class Solution2 {\n\n    private static Random random = new Random(System.currentTimeMillis());\n\n    public int findKthLargest(int[] nums, int k) {\n        int len = nums.length;\n        if (len == 0 || k > len) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u8f6c\u6362\u4e00\u4e0b\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u64cd\u4f5c\n        // \u7b2c k \u5927\u5143\u7d20\u7684\u7d22\u5f15\u662f len - k\n        int target = len - k;\n        int l = 0;\n        int r = len - 1;\n        while (true) {\n            int i = partition(nums, l, r);\n            if (i < target) {\n                l = i + 1;\n            } else if (i > target) {\n                r = i - 1;\n            } else {\n                return nums[i];\n            }\n        }\n    }\n\n    // \u5728\u533a\u95f4 [left, right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition \u64cd\u4f5c\n    private int partition(int[] nums, int left, int right) {\n        // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9\uff08\u4ee5\u4e0b\u8fd9\u4e24\u884c\u4ee3\u7801\u975e\u5fc5\u9700\uff09\n        // \u8fd9\u4e00\u6b65\u4f18\u5316\u975e\u5fc5\u9700\n        if (right > left) {\n            int randomIndex = left + 1 + random.nextInt(right - left);\n            swap(nums, left, randomIndex);\n        }\n\n        int pivot = nums[left];\n        int l = left;\n        for (int i = left + 1; i <= right; i++) {\n            if (nums[i] < pivot) {\n                l++;\n                swap(nums, l, i);\n            }\n        }\n        swap(nums, left, l);\n        return l;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n\n    # \u6570\u7ec4\u4e2d\u7684\u7b2c K \u4e2a\u6700\u5927\u5143\u7d20\n    # \u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20\uff0c\u5b83\u7684\u7d22\u5f15\u662f len(nums) - k\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        left = 0\n        right = len(nums) - 1\n\n        while True:\n            index = self.__partition(nums, left, right)\n            if index == len(nums) - k:\n                return nums[index]\n            if index > len(nums) - k:\n                right = index - 1\n            else:\n                left = index + 1\n\n    def __partition(self, nums, left, right):\n        \"\"\"\n        partition \u662f\u5fc5\u987b\u8981\u4f1a\u7684\u5b50\u6b65\u9aa4\uff0c\u4e00\u5b9a\u8981\u975e\u5e38\u719f\u7ec3\n        \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\uff1a[3,7,8,1,2,4]\n        \u9047\u5230\u6bd4\u7b2c\u4e00\u4e2a\u5143\u7d20\u5927\u7684\u6216\u7b49\u4e8e\u7684\uff0c\u5c31\u653e\u8fc7\uff0c\u9047\u5230\u5c0f\u7684\uff0c\u5c31\u4ea4\u6362\n        \u5728 [left,right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition\n        :param nums:\n        :param left:\n        :param right:\n        :return:\n        \"\"\"\n        pivot = nums[left]\n        k = left\n        for index in range(left + 1, right + 1):\n            if nums[index] < pivot:\n                k += 1\n                nums[k], nums[index] = nums[index], nums[k]\n        nums[left], nums[k] = nums[k], nums[left]\n        return k\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6700\u5c0f\u5806\uff0c\u8fd9\u4e2a\u5199\u6cd5\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6709\u70b9\u6b7b\u677f\u3002\n\n\npublic class Solution3 {\n\n    public int findKthLargest(int[] nums, int k) {\n        int len = nums.length;\n        if (len == 0 || k > len) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u4f7f\u7528\u4e00\u4e2a\u542b\u6709 k \u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806\n        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, (a, b) -> a - b);\n        for (int i = 0; i < k; i++) {\n            priorityQueue.add(nums[i]);\n        }\n        for (int i = k; i < len; i++) {\n            // \u770b\u4e00\u773c\n            Integer topEle = priorityQueue.peek();\n            // \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5806\u9876\u51fa\u6808\uff0c\u904d\u5386\u7684\u5143\u7d20\u8fdb\u53bb\n            if (nums[i] > topEle) {\n                priorityQueue.poll();\n                priorityQueue.add(nums[i]);\n            }\n        }\n        return priorityQueue.peek();\n    }\n}\n\n\n\n\nPython \u7684\u5199\u6cd5\uff1a\n\n\nimport heapq\n\n\n# \u8fd8\u53ef\u4ee5\u53c2\u8003\uff1ahttps://leetcode.com/problems/kth-largest-element-in-an-array/discuss/167837/Python-or-tm\n\nclass Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        L = []\n        for index in range(k):\n            heapq.heappush(L, nums[index])\n        for index in range(k, len(nums)):\n            top = L[0]\n            if nums[index] > top:\n                heapq.heapreplace(L, nums[index])\n        return L[0]\n\n\n\n\n\u6700\u5c0f\u5806\u66f4\u7b80\u5355\u7684\u5199\u6cd5\u3002\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution3 {\n\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k + 1, (a, b) -> (a - b));\n        for (int num : nums) {\n            priorityQueue.add(num);\n            if(priorityQueue.size()==k+1){\n                priorityQueue.poll();\n            }\n        }\n        return priorityQueue.peek();\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u8981\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5904\u7406\u3002\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0215-kth-largest-element-in-an-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "215. Kth Largest Element in an Array"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#215-kth-largest-element-in-an-array",
            "text": "",
            "title": "215. Kth Largest Element in an Array"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c  k  \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002  \u793a\u4f8b 1:  \u8f93\u5165:   [3,2,1,5,6,4] \u548c  k = 2 \u8f93\u51fa:  5  \u793a\u4f8b\u00a02:  \u8f93\u5165:   [3,2,3,1,2,4,5,5,6] \u548c  k = 4 \u8f93\u51fa:  4  \u8bf4\u660e:   \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 215. Kth Largest Element in an Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\u3002\u5176\u5b9e\u628a\u6570\u7ec4\u6392\u4e2a\u5e8f\uff08\u5347\u5e8f\uff09\uff0c\u8fd4\u56de\u5012\u6570\u7b2c $k$ \u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u5982\u679c\u51fa\u73b0\u5728\u7b14\u8bd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7b54\u6848\u80af\u5b9a\u4e0d\u80fd\u8fc7\u5173\u7684\uff0c\u6211\u770b\u5230\u8fc7\u7684\u89e3\u7b54\u4e2d\uff0c\u4f7f\u7528 partition \u548c\u5806\u4e5f\u662f\u9700\u8981\u638c\u63e1\u7684\u3002  \u9996\u5148\uff0c\u501f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002\u5173\u952e\u5728\u4e8e\u7406\u89e3 partition \u7684\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u503c\u662f\u62c9\u901a\u4e86\u6574\u4e2a\u6570\u7ec4\u7684\u7d22\u5f15\u503c\u3002   partition \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09\u3002  \u5982\u679c\u627e\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u5373\u7b2c n - k \u4e2a\u6700\u5927\u5143\u7d20\u3002   \u4f8b\u5982\uff1a\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 4 \uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\u3002\n\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 2 \uff0c\u5de6\u8fb9\u7684\u533a\u95f4\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#1-partition",
            "text": "public class Solution2 {\n\n    private static Random random = new Random(System.currentTimeMillis());\n\n    public int findKthLargest(int[] nums, int k) {\n        int len = nums.length;\n        if (len == 0 || k > len) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u8f6c\u6362\u4e00\u4e0b\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u64cd\u4f5c\n        // \u7b2c k \u5927\u5143\u7d20\u7684\u7d22\u5f15\u662f len - k\n        int target = len - k;\n        int l = 0;\n        int r = len - 1;\n        while (true) {\n            int i = partition(nums, l, r);\n            if (i < target) {\n                l = i + 1;\n            } else if (i > target) {\n                r = i - 1;\n            } else {\n                return nums[i];\n            }\n        }\n    }\n\n    // \u5728\u533a\u95f4 [left, right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition \u64cd\u4f5c\n    private int partition(int[] nums, int left, int right) {\n        // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9\uff08\u4ee5\u4e0b\u8fd9\u4e24\u884c\u4ee3\u7801\u975e\u5fc5\u9700\uff09\n        // \u8fd9\u4e00\u6b65\u4f18\u5316\u975e\u5fc5\u9700\n        if (right > left) {\n            int randomIndex = left + 1 + random.nextInt(right - left);\n            swap(nums, left, randomIndex);\n        }\n\n        int pivot = nums[left];\n        int l = left;\n        for (int i = left + 1; i <= right; i++) {\n            if (nums[i] < pivot) {\n                l++;\n                swap(nums, l, i);\n            }\n        }\n        swap(nums, left, l);\n        return l;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n\n    # \u6570\u7ec4\u4e2d\u7684\u7b2c K \u4e2a\u6700\u5927\u5143\u7d20\n    # \u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20\uff0c\u5b83\u7684\u7d22\u5f15\u662f len(nums) - k\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        left = 0\n        right = len(nums) - 1\n\n        while True:\n            index = self.__partition(nums, left, right)\n            if index == len(nums) - k:\n                return nums[index]\n            if index > len(nums) - k:\n                right = index - 1\n            else:\n                left = index + 1\n\n    def __partition(self, nums, left, right):\n        \"\"\"\n        partition \u662f\u5fc5\u987b\u8981\u4f1a\u7684\u5b50\u6b65\u9aa4\uff0c\u4e00\u5b9a\u8981\u975e\u5e38\u719f\u7ec3\n        \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\uff1a[3,7,8,1,2,4]\n        \u9047\u5230\u6bd4\u7b2c\u4e00\u4e2a\u5143\u7d20\u5927\u7684\u6216\u7b49\u4e8e\u7684\uff0c\u5c31\u653e\u8fc7\uff0c\u9047\u5230\u5c0f\u7684\uff0c\u5c31\u4ea4\u6362\n        \u5728 [left,right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition\n        :param nums:\n        :param left:\n        :param right:\n        :return:\n        \"\"\"\n        pivot = nums[left]\n        k = left\n        for index in range(left + 1, right + 1):\n            if nums[index] < pivot:\n                k += 1\n                nums[k], nums[index] = nums[index], nums[k]\n        nums[left], nums[k] = nums[k], nums[left]\n        return k",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#2",
            "text": "public class Solution3 {\n\n    public int findKthLargest(int[] nums, int k) {\n        int len = nums.length;\n        if (len == 0 || k > len) {\n            throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\");\n        }\n        // \u4f7f\u7528\u4e00\u4e2a\u542b\u6709 k \u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806\n        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, (a, b) -> a - b);\n        for (int i = 0; i < k; i++) {\n            priorityQueue.add(nums[i]);\n        }\n        for (int i = k; i < len; i++) {\n            // \u770b\u4e00\u773c\n            Integer topEle = priorityQueue.peek();\n            // \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5806\u9876\u51fa\u6808\uff0c\u904d\u5386\u7684\u5143\u7d20\u8fdb\u53bb\n            if (nums[i] > topEle) {\n                priorityQueue.poll();\n                priorityQueue.add(nums[i]);\n            }\n        }\n        return priorityQueue.peek();\n    }\n}  Python \u7684\u5199\u6cd5\uff1a  import heapq\n\n\n# \u8fd8\u53ef\u4ee5\u53c2\u8003\uff1ahttps://leetcode.com/problems/kth-largest-element-in-an-array/discuss/167837/Python-or-tm\n\nclass Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        L = []\n        for index in range(k):\n            heapq.heappush(L, nums[index])\n        for index in range(k, len(nums)):\n            top = L[0]\n            if nums[index] > top:\n                heapq.heapreplace(L, nums[index])\n        return L[0]  \u6700\u5c0f\u5806\u66f4\u7b80\u5355\u7684\u5199\u6cd5\u3002  Java \u5199\u6cd5\uff1a  public class Solution3 {\n\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k + 1, (a, b) -> (a - b));\n        for (int num : nums) {\n            priorityQueue.add(num);\n            if(priorityQueue.size()==k+1){\n                priorityQueue.poll();\n            }\n        }\n        return priorityQueue.peek();\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6700\u5c0f\u5806\uff0c\u8fd9\u4e2a\u5199\u6cd5\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6709\u70b9\u6b7b\u677f\u3002"
        },
        {
            "location": "/leetcode-0215-kth-largest-element-in-an-array/#3",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0215-kth-largest-element-in-an-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u8981\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5904\u7406\u3002"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/",
            "text": "219. Contains Duplicate II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\u00a0\nk\n\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15\n\u00a0i\n\u00a0\u548c\n\u00a0j\n\uff0c\u4f7f\u5f97\u00a0\nnums [i] = nums [j]\n\uff0c\u5e76\u4e14 \ni\n \u548c \nj\n\u00a0\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a \nk\n\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n nums = [1,2,3,1], k\n \n= 3\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165: \nnums = [1,0,1,1], k\n \n=\n \n1\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165: \nnums = [1,2,3,1,2,3], k\n \n=\n \n2\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n219. Contains Duplicate II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n219. \u5b58\u5728\u91cd\u590d\u5143\u7d20 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5373\u8981\u68c0\u6d4b\u91cd\u590d\uff0c\u53c8\u8981\u77e5\u9053\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u662f\u4ec0\u4e48\uff0c\u54c8\u5e0c\u8868\u5c31\u53ef\u4ee5\u80dc\u4efb\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\n\npublic class Solution {\n\n    // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j\uff0c\n    // \u4f7f\u5f97 nums [i] = nums [j]\uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\u3002\n    // \"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\"\uff0c\u6539\u6210\"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 k\" \u6216\u8bb8\u5c31\u597d\u7406\u89e3\u591a\u4e86\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        int len = nums.length;\n        // \u5148\u5c06\u6781\u7aef\u7528\u4f8b\u8fd4\u56de\n        if (len < 2) {\n            return false;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(nums[i])) {\n                if (i - map.get(nums[i]) <= k) {\n                    return true;\n                }\n            }\n            map.put(nums[i], i);\n        }\n        return false;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0219-contains-duplicate-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "219. Contains Duplicate II"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/#219-contains-duplicate-ii",
            "text": "",
            "title": "219. Contains Duplicate II"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\u00a0 k \uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 \u00a0i \u00a0\u548c \u00a0j \uff0c\u4f7f\u5f97\u00a0 nums [i] = nums [j] \uff0c\u5e76\u4e14  i  \u548c  j \u00a0\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a  k \u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  nums = [1,2,3,1], k   = 3 \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:  nums = [1,0,1,1], k   =   1 \u8f93\u51fa:  true  \u793a\u4f8b 3:  \u8f93\u5165:  nums = [1,2,3,1,2,3], k   =   2 \u8f93\u51fa:  false    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 219. Contains Duplicate II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 219. \u5b58\u5728\u91cd\u590d\u5143\u7d20 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5373\u8981\u68c0\u6d4b\u91cd\u590d\uff0c\u53c8\u8981\u77e5\u9053\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u662f\u4ec0\u4e48\uff0c\u54c8\u5e0c\u8868\u5c31\u53ef\u4ee5\u80dc\u4efb\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0219-contains-duplicate-ii/#1",
            "text": "import java.util.HashMap;\n\npublic class Solution {\n\n    // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j\uff0c\n    // \u4f7f\u5f97 nums [i] = nums [j]\uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\u3002\n    // \"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\"\uff0c\u6539\u6210\"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 k\" \u6216\u8bb8\u5c31\u597d\u7406\u89e3\u591a\u4e86\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        int len = nums.length;\n        // \u5148\u5c06\u6781\u7aef\u7528\u4f8b\u8fd4\u56de\n        if (len < 2) {\n            return false;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n            if (map.containsKey(nums[i])) {\n                if (i - map.get(nums[i]) <= k) {\n                    return true;\n                }\n            }\n            map.put(nums[i], i);\n        }\n        return false;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0219-contains-duplicate-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/",
            "text": "226. Invert Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n226. Invert Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n226. \u7ffb\u8f6c\u4e8c\u53c9\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a\n\n\n\n\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a\n\n\n\u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002\n\n\n\n\n\u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) {\n            return null;\n        }\n        // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811\n        invertTree(root.left);\n        invertTree(root.right);\n        return root;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.LinkedList;\n\npublic class Solution2 {\n\n    public TreeNode invertTree(TreeNode root) {\n        // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651\n        if (root == null) {\n            return null;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            TreeNode curNode = queue.removeFirst();\n            // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc\n            if (curNode.left != null || curNode.right != null) {\n                // \u5148\u7ffb\u8f6c\n                TreeNode temp = curNode.left;\n                curNode.left = curNode.right;\n                curNode.right = temp;\n                // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\n                if (curNode.left != null) {\n                    queue.addLast(curNode.left);\n                }\n                if (curNode.right != null) {\n                    queue.addLast(curNode.right);\n                }\n            }\n        }\n        return root;\n    }\n}",
            "title": "226. Invert Binary Tree"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#226-invert-binary-tree",
            "text": "",
            "title": "226. Invert Binary Tree"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002  \u82f1\u6587\u7f51\u5740\uff1a 226. Invert Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 226. \u7ffb\u8f6c\u4e8c\u53c9\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a   \u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a  \u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002   \u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002   \u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) {\n            return null;\n        }\n        // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811\n        invertTree(root.left);\n        invertTree(root.right);\n        return root;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0226-invert-binary-tree/#2",
            "text": "import java.util.LinkedList;\n\npublic class Solution2 {\n\n    public TreeNode invertTree(TreeNode root) {\n        // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651\n        if (root == null) {\n            return null;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            TreeNode curNode = queue.removeFirst();\n            // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc\n            if (curNode.left != null || curNode.right != null) {\n                // \u5148\u7ffb\u8f6c\n                TreeNode temp = curNode.left;\n                curNode.left = curNode.right;\n                curNode.right = temp;\n                // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\n                if (curNode.left != null) {\n                    queue.addLast(curNode.left);\n                }\n                if (curNode.right != null) {\n                    queue.addLast(curNode.right);\n                }\n            }\n        }\n        return root;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/",
            "text": "230. Kth Smallest Element in a BST\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n230. Kth Smallest Element in a BST\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\n\n\n\n\n\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n// \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386\npublic class Solution {\n\n    private int res;\n    private int count;\n\n    // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012\n    // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c\n    public int kthSmallest(TreeNode root, int k) {\n        count = k;\n        inOrder(root);\n        return res;\n    }\n\n    private void inOrder(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left);\n        count--;\n        if (count == 0) {\n            res = node.val;\n            return;\n        }\n        inOrder(node.right);\n    }\n}",
            "title": "230. Kth Smallest Element in a BST"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#230-kth-smallest-element-in-a-bst",
            "text": "",
            "title": "230. Kth Smallest Element in a BST"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 230. Kth Smallest Element in a BST   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002   \u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0230-kth-smallest-element-in-a-bst/#1",
            "text": "\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n// \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386\npublic class Solution {\n\n    private int res;\n    private int count;\n\n    // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012\n    // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c\n    public int kthSmallest(TreeNode root, int k) {\n        count = k;\n        inOrder(root);\n        return res;\n    }\n\n    private void inOrder(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left);\n        count--;\n        if (count == 0) {\n            res = node.val;\n            return;\n        }\n        inOrder(node.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0231-power-of-two/",
            "text": "231. Power of Two\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n 1\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 16\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n 218\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n231. Power of Two\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n231. 2\u7684\u5e42\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u65b9\u6cd5\u5f88\u591a\uff0c\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e3b\u8981\u7684\u8003\u70b9\u8fd8\u662f\u5728\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e9b\u6027\u8d28\u4e0a\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u7248\u672c\u5427\uff0c\nn & (n - 1)\n \u8fd0\u7b97\uff0c\u80fd\u628a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0\uff0c\u8fd9\u4e00\u70b9\u5e94\u8be5\u4f5c\u4e3a\u4e00\u6761\u57fa\u672c\u6027\u8d28\u8bb0\u4f4f\u3002\n\n\npublic class Solution {\n\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u8be5\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6574\u9664\u5224\u65ad\u3002\n\n\npublic class Solution2 {\n\n    public boolean isPowerOfTwo(int n) {\n        if (n <= 0) {\n            return false;\n        }\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        return n == 1;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u7528\u5230\u4e86 Java \u5e93\u51fd\u6570\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u6b64\u6cd5\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\u30014 \u7684\u65b9\u5e42\u7b49\u7b49\u3002\n\n\npublic class Solution3 {\n\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && Integer.toString(n, 2).matches(\"^10*$\");\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u4f8b\u4e3e\u51fa\u6765\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution4 {\n\n    public boolean isPowerOfTwo(int n) {\n        if (n <= 0) {\n            return false;\n        }\n        // \u6bd4 Integer.MAX_VALUE \u5c0f\u7684\u6240\u6709\u7684\u6574\u6570\u4e2d 2 \u7684\u65b9\u5e42\u7684\u6240\u6709\u7684\u6570\n        int[] nums = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return set.contains(n);\n    }\n\n    // \u8be5 main \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6574\u578b\u8303\u56f4\u5185\u6240\u6709\u7684 2 \u7684\u65b9\u5e42\n    public static void main(String[] args) {\n        int i = 1;\n        List<Integer> list = new ArrayList<>();\n        while (i > 0 && i < Integer.MAX_VALUE) {\n            list.add(i);\n            i *= 2;\n        }\n        System.out.println(list);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b545\uff1a\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5224\u5b9a\u8d28\u6570\u7684\u65b9\u5e42\u540c\u6837\u6709\u6548\uff0c\u4f8b\u5982\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\uff0c\u4e0d\u8fc7\u5f97\u4e8b\u5148\u8ba1\u7b97\u51fa\u5728\u5141\u8bb8\u7684\u8303\u56f4\u5185 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\u3002\n\n\npublic class Solution5 {\n\n    public boolean isPowerOfTwo(int n) {\n        // 1073741824 \u662f\u5c0f\u4e8e Integer.MAX_VALUE \u4e2d 2 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\n        return n > 0 && 1073741824 % n == 0;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0231-power-of-two\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "231. Power of Two"
        },
        {
            "location": "/leetcode-0231-power-of-two/#231-power-of-two",
            "text": "",
            "title": "231. Power of Two"
        },
        {
            "location": "/leetcode-0231-power-of-two/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  1 \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:  16 \u8f93\u51fa:  true  \u793a\u4f8b 3:  \u8f93\u5165:  218 \u8f93\u51fa:  false    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 231. Power of Two   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 231. 2\u7684\u5e42   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0231-power-of-two/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u65b9\u6cd5\u5f88\u591a\uff0c\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e3b\u8981\u7684\u8003\u70b9\u8fd8\u662f\u5728\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e9b\u6027\u8d28\u4e0a\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0231-power-of-two/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0231-power-of-two/#1n-n-1-1-0",
            "text": "public class Solution {\n\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u7248\u672c\u5427\uff0cn &amp; (n - 1) \u8fd0\u7b97\uff0c\u80fd\u628a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0\uff0c\u8fd9\u4e00\u70b9\u5e94\u8be5\u4f5c\u4e3a\u4e00\u6761\u57fa\u672c\u6027\u8d28\u8bb0\u4f4f\u3002"
        },
        {
            "location": "/leetcode-0231-power-of-two/#2",
            "text": "public class Solution2 {\n\n    public boolean isPowerOfTwo(int n) {\n        if (n <= 0) {\n            return false;\n        }\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        return n == 1;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u8be5\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6574\u9664\u5224\u65ad\u3002"
        },
        {
            "location": "/leetcode-0231-power-of-two/#3-java-3-4",
            "text": "public class Solution3 {\n\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && Integer.toString(n, 2).matches(\"^10*$\");\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u7528\u5230\u4e86 Java \u5e93\u51fd\u6570\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u6b64\u6cd5\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\u30014 \u7684\u65b9\u5e42\u7b49\u7b49\u3002"
        },
        {
            "location": "/leetcode-0231-power-of-two/#4",
            "text": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution4 {\n\n    public boolean isPowerOfTwo(int n) {\n        if (n <= 0) {\n            return false;\n        }\n        // \u6bd4 Integer.MAX_VALUE \u5c0f\u7684\u6240\u6709\u7684\u6574\u6570\u4e2d 2 \u7684\u65b9\u5e42\u7684\u6240\u6709\u7684\u6570\n        int[] nums = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return set.contains(n);\n    }\n\n    // \u8be5 main \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6574\u578b\u8303\u56f4\u5185\u6240\u6709\u7684 2 \u7684\u65b9\u5e42\n    public static void main(String[] args) {\n        int i = 1;\n        List<Integer> list = new ArrayList<>();\n        while (i > 0 && i < Integer.MAX_VALUE) {\n            list.add(i);\n            i *= 2;\n        }\n        System.out.println(list);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u4f8b\u4e3e\u51fa\u6765\u3002"
        },
        {
            "location": "/leetcode-0231-power-of-two/#5-3-3",
            "text": "public class Solution5 {\n\n    public boolean isPowerOfTwo(int n) {\n        // 1073741824 \u662f\u5c0f\u4e8e Integer.MAX_VALUE \u4e2d 2 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\n        return n > 0 && 1073741824 % n == 0;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0231-power-of-two  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b545\uff1a\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5224\u5b9a\u8d28\u6570\u7684\u65b9\u5e42\u540c\u6837\u6709\u6548\uff0c\u4f8b\u5982\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\uff0c\u4e0d\u8fc7\u5f97\u4e8b\u5148\u8ba1\u7b97\u51fa\u5728\u5141\u8bb8\u7684\u8303\u56f4\u5185 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\u3002"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/",
            "text": "234. Palindrome Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 1->2\n\n\u8f93\u51fa:\n false\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 1->2->2->1\n\n\u8f93\u51fa:\n true\n\n\n\n\u8fdb\u9636\uff1a\n\n\u4f60\u80fd\u5426\u7528\u00a0O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n234. Palindrome Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n234. \u56de\u6587\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u7ed3\u70b9\uff0c\u505a\u4e00\u4e9b\u76f8\u5173\u7684\u5904\u7406\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u7ba1\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u8981\u5bf9\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u4ed4\u7ec6\u8003\u8651\uff0c\u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u753b\u56fe\u5e2e\u52a9\u7f16\u7801\u5b9e\u73b0\u3002\n\n\n\u601d\u8def1\uff1a\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u53cd\u8f6c\u94fe\u8868\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002\n\n\n\u601d\u8def2\uff1a\u5728\u5bfb\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6162\u7ed3\u70b9\u5411\u524d\u904d\u5386\u7684\u65f6\u5019\uff0c\u628a\u904d\u5386\u5230\u7684\u503c\u653e\u5165\u4e00\u4e2a\u6808\u4e2d\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0234-palindrome-linked-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "234. Palindrome Linked List"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/#234-palindrome-linked-list",
            "text": "",
            "title": "234. Palindrome Linked List"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  1->2 \u8f93\u51fa:  false  \u793a\u4f8b 2:  \u8f93\u5165:  1->2->2->1 \u8f93\u51fa:  true  \u8fdb\u9636\uff1a \n\u4f60\u80fd\u5426\u7528\u00a0O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 234. Palindrome Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 234. \u56de\u6587\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u7ed3\u70b9\uff0c\u505a\u4e00\u4e9b\u76f8\u5173\u7684\u5904\u7406\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u7ba1\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u8981\u5bf9\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u4ed4\u7ec6\u8003\u8651\uff0c\u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u753b\u56fe\u5e2e\u52a9\u7f16\u7801\u5b9e\u73b0\u3002  \u601d\u8def1\uff1a\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u53cd\u8f6c\u94fe\u8868\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002  \u601d\u8def2\uff1a\u5728\u5bfb\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6162\u7ed3\u70b9\u5411\u524d\u904d\u5386\u7684\u65f6\u5019\uff0c\u628a\u904d\u5386\u5230\u7684\u503c\u653e\u5165\u4e00\u4e2a\u6808\u4e2d\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0234-palindrome-linked-list/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0234-palindrome-linked-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/",
            "text": "235. Lowest Common Ancestor of a Binary Search Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\n\u767e\u5ea6\u767e\u79d1\n\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684\u7956\u5148\u4e14x\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\u201d\uff08\n\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\n\uff09\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811:\u00a0 root =\u00a0[6,2,8,0,4,7,9,null,null,3,5]\n\n\n        _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   0      _4       7       9\n         /  \\\n         3   5\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n root, p = 2, q = 8\n\n\u8f93\u51fa:\n 6 \n\n\u89e3\u91ca: \n\u8282\u70b9 \n2 \n\u548c\u8282\u70b9 \n8 \n\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f \n6\u3002\n\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n root, p = 2, q = 4\n\n\u8f93\u51fa:\n 2\n\n\u89e3\u91ca: \n\u8282\u70b9 \n2\n \u548c\u8282\u70b9 \n4\n \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f \n2\n, \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n235. Lowest Common Ancestor of a Binary Search Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7684\u6709\u5e8f\u6027\uff0c\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\uff0c\u8fd9\u91cc\u9700\u8981\u81ea\u5df1\u753b\u56fe\u5206\u6790\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root.val > p.val && root.val > q.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        if (root.val < p.val && root.val < q.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        return root;\n    }\n}\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "235. Lowest Common Ancestor of a Binary Search Tree"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#235-lowest-common-ancestor-of-a-binary-search-tree",
            "text": "",
            "title": "235. Lowest Common Ancestor of a Binary Search Tree"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002  \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684\u7956\u5148\u4e14x\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09  \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811:\u00a0 root =\u00a0[6,2,8,0,4,7,9,null,null,3,5]          _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   0      _4       7       9\n         /  \\\n         3   5  \u793a\u4f8b 1:  \u8f93\u5165:  root, p = 2, q = 8 \u8f93\u51fa:  6  \u89e3\u91ca:  \u8282\u70b9  2  \u548c\u8282\u70b9  8  \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f  6\u3002   \u793a\u4f8b 2:  \u8f93\u5165:  root, p = 2, q = 4 \u8f93\u51fa:  2 \u89e3\u91ca:  \u8282\u70b9  2  \u548c\u8282\u70b9  4  \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f  2 , \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 235. Lowest Common Ancestor of a Binary Search Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7684\u6709\u5e8f\u6027\uff0c\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\uff0c\u8fd9\u91cc\u9700\u8981\u81ea\u5df1\u753b\u56fe\u5206\u6790\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root.val > p.val && root.val > q.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        if (root.val < p.val && root.val < q.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        return root;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/",
            "text": "236. Lowest Common Ancestor of a Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\n\u767e\u5ea6\u767e\u79d1\n\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684\n\u7956\u5148\n\u4e14x\u7684\u6df1\u5ea6\u5c3d\n\u53ef\u80fd\n\u5927\u3002\u201d\uff08\n\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\n\uff09\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811:\u00a0 root =\u00a0[6,2,8,0,4,7,9,null,null,3,5]\n\n\n        _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n root, p = 5, q = 1\n\n\u8f93\u51fa:\n 3\n\n\u89e3\u91ca: \n\u8282\u70b9 \n5 \n\u548c\u8282\u70b9 \n1 \n\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 \n3\u3002\n\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n root, p = 5, q = 4\n\n\u8f93\u51fa:\n 5\n\n\u89e3\u91ca: \n\u8282\u70b9 \n5 \n\u548c\u8282\u70b9 \n4 \n\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 \n5\u3002\n\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n236. Lowest Common Ancestor of a Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u5148\u5206\u522b\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u5730\u627e\u51fa p \u548c q\uff0c\u5982\u679c\u90fd\u80fd\u627e\u5230\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7ed3\u70b9\u5c31\u662f\u8981\u627e\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // \u521d\u59cb\u6761\u4ef6\uff1a\u53ea\u8981\u7b49\u4e8e\u5176\u4e2d\u4e4b\u4e00\uff0c\u5c31\u8fd4\u56de\u81ea\u5df1\uff0c\u4f5c\u4e3a\u540e\u5e8f\u5224\u65ad\u7684\u4f9d\u636e\n        // \u65e2\u7136\u662f\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (root == null || root == p || root == q) {\n            return root;\n        }\n        // \u5148\u5728\u5de6\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        // \u518d\u5728\u53f3\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n        // \u5982\u679c\u5de6\u8fb9\u548c\u53f3\u8fb9\u4e24\u8005\u90fd\u7a7a\uff0c\u8bf4\u660e\uff0cp \u548c q \u5206\u6563\u5728 root \u7684\u5de6\u53f3\u5b50\u6811\u4e2d\n        if (left != null && right != null) {\n            return root;\n        }\n        // \u5426\u5219\u8fd4\u56de left \u548c right \u4e2d\u975e\u7a7a\u7684\u90a3\u4e2a\n        return left == null ? right : left;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0236-lowest-common-ancestor-of-a-binary-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "236. Lowest Common Ancestor of a Binary Tree"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#236-lowest-common-ancestor-of-a-binary-tree",
            "text": "",
            "title": "236. Lowest Common Ancestor of a Binary Tree"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002  \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684 \u7956\u5148 \u4e14x\u7684\u6df1\u5ea6\u5c3d \u53ef\u80fd \u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09  \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811:\u00a0 root =\u00a0[6,2,8,0,4,7,9,null,null,3,5]          _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4  \u793a\u4f8b 1:  \u8f93\u5165:  root, p = 5, q = 1 \u8f93\u51fa:  3 \u89e3\u91ca:  \u8282\u70b9  5  \u548c\u8282\u70b9  1  \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9  3\u3002   \u793a\u4f8b\u00a02:  \u8f93\u5165:  root, p = 5, q = 4 \u8f93\u51fa:  5 \u89e3\u91ca:  \u8282\u70b9  5  \u548c\u8282\u70b9  4  \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9  5\u3002 \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 236. Lowest Common Ancestor of a Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u5148\u5206\u522b\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u5730\u627e\u51fa p \u548c q\uff0c\u5982\u679c\u90fd\u80fd\u627e\u5230\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7ed3\u70b9\u5c31\u662f\u8981\u627e\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // \u521d\u59cb\u6761\u4ef6\uff1a\u53ea\u8981\u7b49\u4e8e\u5176\u4e2d\u4e4b\u4e00\uff0c\u5c31\u8fd4\u56de\u81ea\u5df1\uff0c\u4f5c\u4e3a\u540e\u5e8f\u5224\u65ad\u7684\u4f9d\u636e\n        // \u65e2\u7136\u662f\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (root == null || root == p || root == q) {\n            return root;\n        }\n        // \u5148\u5728\u5de6\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        // \u518d\u5728\u53f3\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n        // \u5982\u679c\u5de6\u8fb9\u548c\u53f3\u8fb9\u4e24\u8005\u90fd\u7a7a\uff0c\u8bf4\u660e\uff0cp \u548c q \u5206\u6563\u5728 root \u7684\u5de6\u53f3\u5b50\u6811\u4e2d\n        if (left != null && right != null) {\n            return root;\n        }\n        // \u5426\u5219\u8fd4\u56de left \u548c right \u4e2d\u975e\u7a7a\u7684\u90a3\u4e2a\n        return left == null ? right : left;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0236-lowest-common-ancestor-of-a-binary-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/",
            "text": "237. Delete Node in a Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002\n\n\n\u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a\u00a0\n1 -> 2 -> 3 -> 4 \n\u00a0\uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a\u00a0\n3\n\u00a0\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210\u00a0\n1 -> 2 -> 4\n\u00a0\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n237. Delete Node in a Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public void deleteNode(ListNode node) {\n        // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a\n        ListNode next = node.next;\n        node.next = next.next;\n        node.val = next.val;\n        next.next = null;\n    }\n\n    public static void main(String[] args) {\n        ListNode node1 = new ListNode(0);\n        ListNode node2 = new ListNode(1);\n        node1.next = node2;\n        Solution s = new Solution();\n        s.deleteNode(node1);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "237. Delete Node in a Linked List"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#237-delete-node-in-a-linked-list",
            "text": "",
            "title": "237. Delete Node in a Linked List"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002  \u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a\u00a0 1 -> 2 -> 3 -> 4  \u00a0\uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a\u00a0 3 \u00a0\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210\u00a0 1 -> 2 -> 4 \u00a0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 237. Delete Node in a Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0237-delete-node-in-a-linked-list/#1",
            "text": "class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    ListNode(Integer[] nums) {\n        ListNode currNode = this;\n        currNode.val = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            currNode.next = new ListNode(nums[i]);\n            currNode = currNode.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        ListNode currNode = this;\n        StringBuilder s = new StringBuilder();\n        while (currNode != null) {\n            s.append(currNode.val);\n            s.append(\" -> \");\n            currNode = currNode.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n\n    public void deleteNode(ListNode node) {\n        // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a\n        ListNode next = node.next;\n        node.next = next.next;\n        node.val = next.val;\n        next.next = null;\n    }\n\n    public static void main(String[] args) {\n        ListNode node1 = new ListNode(0);\n        ListNode node2 = new ListNode(1);\n        node1.next = node2;\n        Solution s = new Solution();\n        s.deleteNode(node1);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/",
            "text": "240. Search a 2D Matrix II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22\u00a0\nm\n\u00a0x\u00a0\nn\n\u00a0\u77e9\u9635\u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a\n\n\n\n\n\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002\n\n\n\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002\n\n\n\n\n\u4f8b\u5982\uff0c\n\n\n\u7ed9\u5b9a\u4ee5\u4e0b\u77e9\u9635 matrix \uff1a\n\n\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n matrix, target = \n5\n\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n matrix, target = 20\n\n\u8f93\u51fa:\n false\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n240. Search a 2D Matrix II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \n+ \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \n+ \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002\n\u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002\n\n\n\n\n\u4e0a\u9762\u7684\u56fe\u793a\u662f\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u53c2\u8003\u89e3\u7b54 1 \u81f3\u53c2\u8003\u89e3\u7b54 4 \u90fd\u662f\u8fd9\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u4e0d\u540c\u800c\u5df2\u3002\n\n\n\u53c2\u8003\u89e3\u7b54 5 \u548c \u53c2\u8003\u89e3\u7b54 6 \u7ed9\u51fa\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4e0d\u65ad\u5411\u53f3\u8fb9\u8d70\n    // \u53f3\u8fb9\u8d70\u4e0d\u52a8\u4e86\uff0c\u5c31\u5411\u4e0b\u9762\u8d70\uff0c\u76f4\u5230\u51fa\u8fb9\u754c\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = row - 1;\n        int y = 0;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u4e0a\u8d70\n        while (x >= 0) {\n            // \u5411\u4e0a\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u53f3\u8fb9\u8d70\n            while (y < col && matrix[x][y] < target) {\n                y++;\n            }\n            if (y < col && matrix[x][y] == target) {\n                return true;\n            }\n            x--;\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002\n\n\npublic class Solution2 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = row - 1;\n        int y = 0;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u53f3\u8fb9\u8d70\n        while (y < col) {\n            // \u5411\u53f3\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0a\u8d70\n            while (x >= 0 && matrix[x][y] > target) {\n                x--;\n            }\n            // \u8d70\u4e0d\u52a8\u4e86\uff0c\u518d\u5411\u53f3\u8fb9\u8d70\n            if (x >= 0 && matrix[x][y] == target) {\n                return true;\n            }\n            y++;\n        }\n        return false;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002\n\n\npublic class Solution3 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = 0;\n        int y = col - 1;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u4e0b\u8d70\n        while (x < row) {\n            // \u5411\u4e0b\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u5de6\u8fb9\u8d70\n            while (y >= 0 && matrix[x][y] > target) {\n                y--;\n            }\n            if (y >= 0 && matrix[x][y] == target) {\n                return true;\n            }\n            x++;\n        }\n        return false;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002\n\n\npublic class Solution4 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = 0;\n        int y = col - 1;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u5de6\u8fb9\u8d70\n        while (y >= 0) {\n            // \u5411\u5de6\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0b\u8d70\n            while (x < row && matrix[x][y] < target) {\n                x++;\n            }\n            if (x < row && matrix[x][y] == target) {\n                return true;\n            }\n            y--;\n        }\n        return false;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b545\uff1a\n\n\npublic class Solution5 {\n\n    // \u8fd9\u79cd\u5199\u6cd5\u6700\u6e05\u6670\u4e86\n    // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb, \u6bd4\u8f83 target \u548c matrix[x][y] \u7684\u503c\n    // \u5982\u679c\u5c0f\u4e8e target\uff0c\u5219\u8be5\u884c\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 x++\n    // \u5982\u679c\u5927\u4e8e target\uff0c\u5219\u8be5\u5217\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 y--\n    // \u9047\u5230\u8fb9\u754c\u5219\u8868\u660e\u8be5\u77e9\u9635\u4e0d\u542b target\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u7ad9\u5728\u53f3\u4e0a\u89d2\n        int x = 0;\n        int y = col - 1;\n        while (x < row && y >= 0) {\n            // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801\n            // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]);\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                y--;\n            } else {\n                x++;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 5;\n        Solution5 solution5 = new Solution5();\n        boolean searchMatrix = solution5.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b546\uff1a\u548c\u53c2\u8003\u89e3\u7b545 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002\n\n\npublic class Solution6 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n\n        // \u7ad9\u5728\u5de6\u4e0b\u89d2\n        int x = row - 1;\n        int y = 0;\n        while (x >= 0 && y < col) {\n            // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801\n            // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]);\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                x--;\n            } else {\n                y++;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 5;\n        Solution6 solution6 = new Solution6();\n        boolean searchMatrix = solution6.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b547\uff1a\u4e8c\u5206\u6cd5\u3002\n\n\npublic class Solution7 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u7ad9\u5728\u5de6\u4e0b\u89d2\n        int x = row - 1;\n        int y = 0;\n        while (x >= 0 && y < col) {\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                // \u5411\u4e0a\u8d70\uff08\u5217\u56fa\u5b9a\uff0c\u884c\u53d8\u5316\uff09\uff0c\u7b49\u4e8e\u6700\u597d\uff0c\u5426\u5219\u8d70\u5230\u7b2c 1 \u4e2a\u5c0f\u4e8e\u7684\u5730\u65b9\n                // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u884c\u53f7\n                // x--;\n                if (matrix[0][y] > target) {\n                    return false;\n                }\n                int left = 0;\n                int right = x;\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (matrix[mid][y] == target) {\n                        return true;\n                    } else if (matrix[mid][y] < target) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                x = right;\n            } else {\n                // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u5217\u53f7\n                // \u5411\u53f3\u8fb9\u8d70\n                // y++;\n                if (matrix[x][col - 1] < target) {\n                    return false;\n                }\n\n                int left = y;\n                int right = col - 1;\n\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (matrix[x][mid] == target) {\n                        return true;\n                    } else if (matrix[x][mid] < target) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                y = left;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 40;\n        Solution7 solution7 = new Solution7();\n        boolean searchMatrix = solution7.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0240-search-a-2d-matrix-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "240. Search a 2D Matrix II"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#240-search-a-2d-matrix-ii",
            "text": "",
            "title": "240. Search a 2D Matrix II"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22\u00a0 m \u00a0x\u00a0 n \u00a0\u77e9\u9635\u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a   \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002  \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002   \u4f8b\u5982\uff0c  \u7ed9\u5b9a\u4ee5\u4e0b\u77e9\u9635 matrix \uff1a  [\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]  \u793a\u4f8b\u00a01:  \u8f93\u5165:  matrix, target =  5  \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:  matrix, target = 20 \u8f93\u51fa:  false    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 240. Search a 2D Matrix II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a \n+ \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \n+ \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002\n\u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002   \u4e0a\u9762\u7684\u56fe\u793a\u662f\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u53c2\u8003\u89e3\u7b54 1 \u81f3\u53c2\u8003\u89e3\u7b54 4 \u90fd\u662f\u8fd9\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u4e0d\u540c\u800c\u5df2\u3002  \u53c2\u8003\u89e3\u7b54 5 \u548c \u53c2\u8003\u89e3\u7b54 6 \u7ed9\u51fa\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#1",
            "text": "public class Solution {\n\n    // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4e0d\u65ad\u5411\u53f3\u8fb9\u8d70\n    // \u53f3\u8fb9\u8d70\u4e0d\u52a8\u4e86\uff0c\u5c31\u5411\u4e0b\u9762\u8d70\uff0c\u76f4\u5230\u51fa\u8fb9\u754c\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = row - 1;\n        int y = 0;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u4e0a\u8d70\n        while (x >= 0) {\n            // \u5411\u4e0a\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u53f3\u8fb9\u8d70\n            while (y < col && matrix[x][y] < target) {\n                y++;\n            }\n            if (y < col && matrix[x][y] == target) {\n                return true;\n            }\n            x--;\n        }\n        return false;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#21",
            "text": "public class Solution2 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = row - 1;\n        int y = 0;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u53f3\u8fb9\u8d70\n        while (y < col) {\n            // \u5411\u53f3\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0a\u8d70\n            while (x >= 0 && matrix[x][y] > target) {\n                x--;\n            }\n            // \u8d70\u4e0d\u52a8\u4e86\uff0c\u518d\u5411\u53f3\u8fb9\u8d70\n            if (x >= 0 && matrix[x][y] == target) {\n                return true;\n            }\n            y++;\n        }\n        return false;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#31",
            "text": "public class Solution3 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = 0;\n        int y = col - 1;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u4e0b\u8d70\n        while (x < row) {\n            // \u5411\u4e0b\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u5de6\u8fb9\u8d70\n            while (y >= 0 && matrix[x][y] > target) {\n                y--;\n            }\n            if (y >= 0 && matrix[x][y] == target) {\n                return true;\n            }\n            x++;\n        }\n        return false;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#41",
            "text": "public class Solution4 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\n        int x = 0;\n        int y = col - 1;\n        // \u6bcf\u6b21\u8003\u8651\u5411\u5de6\u8fb9\u8d70\n        while (y >= 0) {\n            // \u5411\u5de6\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0b\u8d70\n            while (x < row && matrix[x][y] < target) {\n                x++;\n            }\n            if (x < row && matrix[x][y] == target) {\n                return true;\n            }\n            y--;\n        }\n        return false;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#5",
            "text": "public class Solution5 {\n\n    // \u8fd9\u79cd\u5199\u6cd5\u6700\u6e05\u6670\u4e86\n    // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb, \u6bd4\u8f83 target \u548c matrix[x][y] \u7684\u503c\n    // \u5982\u679c\u5c0f\u4e8e target\uff0c\u5219\u8be5\u884c\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 x++\n    // \u5982\u679c\u5927\u4e8e target\uff0c\u5219\u8be5\u5217\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 y--\n    // \u9047\u5230\u8fb9\u754c\u5219\u8868\u660e\u8be5\u77e9\u9635\u4e0d\u542b target\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u7ad9\u5728\u53f3\u4e0a\u89d2\n        int x = 0;\n        int y = col - 1;\n        while (x < row && y >= 0) {\n            // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801\n            // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]);\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                y--;\n            } else {\n                x++;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 5;\n        Solution5 solution5 = new Solution5();\n        boolean searchMatrix = solution5.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b545\uff1a"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#65",
            "text": "public class Solution6 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n\n        // \u7ad9\u5728\u5de6\u4e0b\u89d2\n        int x = row - 1;\n        int y = 0;\n        while (x >= 0 && y < col) {\n            // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801\n            // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]);\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                x--;\n            } else {\n                y++;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 5;\n        Solution6 solution6 = new Solution6();\n        boolean searchMatrix = solution6.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b546\uff1a\u548c\u53c2\u8003\u89e3\u7b545 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"
        },
        {
            "location": "/leetcode-0240-search-a-2d-matrix-ii/#7",
            "text": "public class Solution7 {\n\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = matrix[0].length;\n        // \u7ad9\u5728\u5de6\u4e0b\u89d2\n        int x = row - 1;\n        int y = 0;\n        while (x >= 0 && y < col) {\n            if (matrix[x][y] == target) {\n                return true;\n            } else if (matrix[x][y] > target) {\n                // \u5411\u4e0a\u8d70\uff08\u5217\u56fa\u5b9a\uff0c\u884c\u53d8\u5316\uff09\uff0c\u7b49\u4e8e\u6700\u597d\uff0c\u5426\u5219\u8d70\u5230\u7b2c 1 \u4e2a\u5c0f\u4e8e\u7684\u5730\u65b9\n                // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u884c\u53f7\n                // x--;\n                if (matrix[0][y] > target) {\n                    return false;\n                }\n                int left = 0;\n                int right = x;\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (matrix[mid][y] == target) {\n                        return true;\n                    } else if (matrix[mid][y] < target) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                x = right;\n            } else {\n                // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u5217\u53f7\n                // \u5411\u53f3\u8fb9\u8d70\n                // y++;\n                if (matrix[x][col - 1] < target) {\n                    return false;\n                }\n\n                int left = y;\n                int right = col - 1;\n\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (matrix[x][mid] == target) {\n                        return true;\n                    } else if (matrix[x][mid] < target) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                y = left;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n                {1, 4, 7, 11, 15},\n                {2, 5, 8, 12, 19},\n                {3, 6, 9, 16, 22},\n                {10, 13, 14, 17, 24},\n                {18, 21, 23, 26, 30}\n        };\n        int target = 40;\n        Solution7 solution7 = new Solution7();\n        boolean searchMatrix = solution7.searchMatrix(matrix, target);\n        System.out.println(searchMatrix);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0240-search-a-2d-matrix-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b547\uff1a\u4e8c\u5206\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0242-valid-anagram/",
            "text": "242. Valid Anagram\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 \ns\n \u548c \nt\n \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad \nt\n \u662f\u5426\u662f \ns\n \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n \ns\n = \"anagram\", \nt\n = \"nagaram\"\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \ns\n = \"rat\", \nt\n = \"car\"\n\n\u8f93\u51fa: \nfalse\n\n\n\u8bf4\u660e:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\u8fdb\u9636:\n\n\u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n242. Valid Anagram\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u4ee5\u540e\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4f4d\u8fdb\u884c\u6bd4\u8f83\u3002\n\n\npublic class Solution {\n    public boolean isAnagram(String s, String t) {\n        boolean isAnagram = true;\n        if (s.length() != t.length()) {\n            isAnagram = false;\n        } else {\n            char[] sArray = s.toCharArray();\n            Arrays.sort(sArray);\n            char[] tArray = t.toCharArray();\n            Arrays.sort(tArray);\n            for (int i = 0; i < sArray.length; i++) {\n                if (sArray[i] != tArray[i]) {\n                    isAnagram = false;\n                    break;\n                }\n            }\n        }\n        return isAnagram;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u653e\u5165\u4e00\u4e2a Map \u4e2d\uff0c\u53ea\u8981\u540e\u9762\u6709\u4e00\u4e2a\u5143\u7d20\u4e0d\u51fa\u73b0\u5728 Map \u4e2d\uff0c\u5c31\u9000\u51fa\uff0c\u6700\u540e\u5e94\u8be5\u4f7f\u5f97\u8fd9\u4e2a Map \u91cc\u6240\u6709\u5143\u7d20\u7684 value \u503c\u90fd\u4e3a 0\u3002\n\n\npublic class Solution2 {\n    public boolean isAnagram(String s, String t) {\n        boolean isAnagram = true;\n        if (s.length() != t.length()) {\n            isAnagram = false;\n        } else {\n            char[] sArray = s.toCharArray();\n            Map<Character, Integer> map1 = new HashMap<>();\n            for (char c : sArray) {\n                if (map1.containsKey(c)) {\n                    map1.put(c, map1.get(c) + 1);\n                } else {\n                    map1.put(c, 1);\n                }\n\n            }\n\n            char[] tArray = t.toCharArray();\n            for (char c : tArray) {\n                if (map1.containsKey(c) && map1.get(c) >= 1) {\n                    map1.put(c, map1.get(c) - 1);\n                } else {\n                    isAnagram = false;\n                    break;\n                }\n            }\n\n        }\n        return isAnagram;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0242-valid-anagram\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "242. Valid Anagram"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#242-valid-anagram",
            "text": "",
            "title": "242. Valid Anagram"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32  s  \u548c  t  \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad  t  \u662f\u5426\u662f  s  \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:   s  = \"anagram\",  t  = \"nagaram\" \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:   s  = \"rat\",  t  = \"car\" \u8f93\u51fa:  false  \u8bf4\u660e: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002  \u8fdb\u9636: \n\u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 242. Valid Anagram   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#1",
            "text": "public class Solution {\n    public boolean isAnagram(String s, String t) {\n        boolean isAnagram = true;\n        if (s.length() != t.length()) {\n            isAnagram = false;\n        } else {\n            char[] sArray = s.toCharArray();\n            Arrays.sort(sArray);\n            char[] tArray = t.toCharArray();\n            Arrays.sort(tArray);\n            for (int i = 0; i < sArray.length; i++) {\n                if (sArray[i] != tArray[i]) {\n                    isAnagram = false;\n                    break;\n                }\n            }\n        }\n        return isAnagram;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u4ee5\u540e\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4f4d\u8fdb\u884c\u6bd4\u8f83\u3002"
        },
        {
            "location": "/leetcode-0242-valid-anagram/#2-map-map-map-value-0",
            "text": "public class Solution2 {\n    public boolean isAnagram(String s, String t) {\n        boolean isAnagram = true;\n        if (s.length() != t.length()) {\n            isAnagram = false;\n        } else {\n            char[] sArray = s.toCharArray();\n            Map<Character, Integer> map1 = new HashMap<>();\n            for (char c : sArray) {\n                if (map1.containsKey(c)) {\n                    map1.put(c, map1.get(c) + 1);\n                } else {\n                    map1.put(c, 1);\n                }\n\n            }\n\n            char[] tArray = t.toCharArray();\n            for (char c : tArray) {\n                if (map1.containsKey(c) && map1.get(c) >= 1) {\n                    map1.put(c, map1.get(c) - 1);\n                } else {\n                    isAnagram = false;\n                    break;\n                }\n            }\n\n        }\n        return isAnagram;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0242-valid-anagram  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u653e\u5165\u4e00\u4e2a Map \u4e2d\uff0c\u53ea\u8981\u540e\u9762\u6709\u4e00\u4e2a\u5143\u7d20\u4e0d\u51fa\u73b0\u5728 Map \u4e2d\uff0c\u5c31\u9000\u51fa\uff0c\u6700\u540e\u5e94\u8be5\u4f7f\u5f97\u8fd9\u4e2a Map \u91cc\u6240\u6709\u5143\u7d20\u7684 value \u503c\u90fd\u4e3a 0\u3002"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/",
            "text": "257. Binary Tree Paths\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002\n\n\n\u8bf4\u660e:\n\u00a0\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n\n\n   1\n /   \\\n2     3\n \\\n  5\n\n\n\u8f93\u51fa:\n [\"1->2->5\", \"1->3\"]\n\n\n\u89e3\u91ca:\n \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1->2->5, 1->3\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n257. Binary Tree Paths\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4ece\u6839\u7ed3\u70b9\u5411\u4e0b\u9012\u5f52\u6267\u884c\uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u90fd\u5b58\u5728 path \u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\u624d\u8fdb\u884c\u7ed3\u7b97\u3002\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        if root is None:\n            return res\n        self.__helper(root, '', res)\n        return res\n\n    def __helper(self, node, pre, res):\n        # \u53f6\u5b50\u7ed3\u70b9\n        if node.left is None and node.right is None:\n            res.append(pre  + str(node.val))\n            return\n        if node.left:\n            self.__helper(node.left, pre + str(node.val) + '->', res)\n        if node.right:\n            self.__helper(node.right, pre + str(node.val) + '->', res)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u529e\u6cd5\uff0c\u60f3\u8c61 path \u5c31\u662f\u4e00\u4e2a\u7ef3\u5b50\uff0c\u4e00\u6761\u8def\u8d70\u5230\u5e95\u4ee5\u540e\uff0c\u5c31\u8981\u91ca\u653e\u3002\n\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        if root is None:\n            return res\n        path = []\n        self.__helper(root, path, res)\n        return res\n\n    def __helper(self, node, path, res):\n        \"\"\"\n        :param node:\n        :param path: \u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u503c\u7ec4\u6210\u7684\u5217\u8868\n        :param res: \u5b58\u653e\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf\n        :return:\n        \"\"\"\n        if node is None:\n            return\n        path.append(str(node.val))\n        if node.left is None and node.right is None:\n            # \u53ef\u4ee5\u7ed3\u7b97\u4e86\n            res.append(\"->\".join(path))\n            return\n        if node.left:\n            self.__helper(node.left, path, res)\n\n            # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa\n            # \u5de6\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa\n            path.pop()\n\n        if node.right:\n            self.__helper(node.right, path, res)\n\n            # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa\n            # \u53f3\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa\n            path.pop()\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u662f\u540e\u5e8f\u904d\u5386\u7684\u505a\u6cd5\uff0c\u5148\u628a\u5de6\u53f3\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u5904\u7406\u81ea\u5df1\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u601d\u8def\u8fd8\u662f\u503c\u5f97\u5b66\u4e60\u7684\u3002\n\n\nJava \u4ee3\u7801\uff1a\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        // \u8fd9\u4e2a\u8282\u70b9\u662f\u4e2a\u6839\u8282\u70b9\uff0c\u60f3\u4e00\u60f3\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\n        if (root.left == null && root.right == null) {\n            res.add(String.valueOf(root.val));\n        }\n\n        List<String> leftS = binaryTreePaths(root.left);\n        for (int i = 0; i < leftS.size(); i++) {\n            res.add(String.valueOf(root.val) + \"->\" + leftS.get(i));\n        }\n        List<String> rightS = binaryTreePaths(root.right);\n        for (int i = 0; i < rightS.size(); i++) {\n            res.add(String.valueOf(root.val) + \"->\" + rightS.get(i));\n        }\n        return res;\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        # \u524d\u9762\u5148\u8ba8\u8bba\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\u60c5\u51b5\n        if root is None:\n            return res\n\n        if root.left is None and root.right is None:\n            res.append(str(root.val))\n            return res\n\n        # \u5b57\u7b26\u4e32\u5217\u8868\n        left_paths = self.binaryTreePaths(root.left)\n        for path in left_paths:\n            res.append(str(root.val) + '->' + path)\n        # \u5b57\u7b26\u4e32\u5217\u8868\n        right_paths = self.binaryTreePaths(root.right)\n        for path in right_paths:\n            res.append(str(root.val) + '->' + path)\n\n        return res\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0257-binary-tree-paths\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "257. Binary Tree Paths"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#257-binary-tree-paths",
            "text": "",
            "title": "257. Binary Tree Paths"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002  \u8bf4\u660e: \u00a0\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002  \u793a\u4f8b:  \u8f93\u5165: \n\n   1\n /   \\\n2     3\n \\\n  5 \u8f93\u51fa:  [\"1->2->5\", \"1->3\"] \u89e3\u91ca:  \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1->2->5, 1->3     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 257. Binary Tree Paths   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#1-path",
            "text": "Python \u5199\u6cd5\uff1a  # Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        if root is None:\n            return res\n        self.__helper(root, '', res)\n        return res\n\n    def __helper(self, node, pre, res):\n        # \u53f6\u5b50\u7ed3\u70b9\n        if node.left is None and node.right is None:\n            res.append(pre  + str(node.val))\n            return\n        if node.left:\n            self.__helper(node.left, pre + str(node.val) + '->', res)\n        if node.right:\n            self.__helper(node.right, pre + str(node.val) + '->', res)",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4ece\u6839\u7ed3\u70b9\u5411\u4e0b\u9012\u5f52\u6267\u884c\uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u90fd\u5b58\u5728 path \u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\u624d\u8fdb\u884c\u7ed3\u7b97\u3002"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#2-path",
            "text": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        if root is None:\n            return res\n        path = []\n        self.__helper(root, path, res)\n        return res\n\n    def __helper(self, node, path, res):\n        \"\"\"\n        :param node:\n        :param path: \u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u503c\u7ec4\u6210\u7684\u5217\u8868\n        :param res: \u5b58\u653e\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf\n        :return:\n        \"\"\"\n        if node is None:\n            return\n        path.append(str(node.val))\n        if node.left is None and node.right is None:\n            # \u53ef\u4ee5\u7ed3\u7b97\u4e86\n            res.append(\"->\".join(path))\n            return\n        if node.left:\n            self.__helper(node.left, path, res)\n\n            # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa\n            # \u5de6\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa\n            path.pop()\n\n        if node.right:\n            self.__helper(node.right, path, res)\n\n            # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa\n            # \u53f3\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa\n            path.pop()",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u529e\u6cd5\uff0c\u60f3\u8c61 path \u5c31\u662f\u4e00\u4e2a\u7ef3\u5b50\uff0c\u4e00\u6761\u8def\u8d70\u5230\u5e95\u4ee5\u540e\uff0c\u5c31\u8981\u91ca\u653e\u3002"
        },
        {
            "location": "/leetcode-0257-binary-tree-paths/#3",
            "text": "Java \u4ee3\u7801\uff1a  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        // \u8fd9\u4e2a\u8282\u70b9\u662f\u4e2a\u6839\u8282\u70b9\uff0c\u60f3\u4e00\u60f3\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\n        if (root.left == null && root.right == null) {\n            res.add(String.valueOf(root.val));\n        }\n\n        List<String> leftS = binaryTreePaths(root.left);\n        for (int i = 0; i < leftS.size(); i++) {\n            res.add(String.valueOf(root.val) + \"->\" + leftS.get(i));\n        }\n        List<String> rightS = binaryTreePaths(root.right);\n        for (int i = 0; i < rightS.size(); i++) {\n            res.add(String.valueOf(root.val) + \"->\" + rightS.get(i));\n        }\n        return res;\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n\n        res = []\n        # \u524d\u9762\u5148\u8ba8\u8bba\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\u60c5\u51b5\n        if root is None:\n            return res\n\n        if root.left is None and root.right is None:\n            res.append(str(root.val))\n            return res\n\n        # \u5b57\u7b26\u4e32\u5217\u8868\n        left_paths = self.binaryTreePaths(root.left)\n        for path in left_paths:\n            res.append(str(root.val) + '->' + path)\n        # \u5b57\u7b26\u4e32\u5217\u8868\n        right_paths = self.binaryTreePaths(root.right)\n        for path in right_paths:\n            res.append(str(root.val) + '->' + path)\n\n        return res  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0257-binary-tree-paths  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u662f\u540e\u5e8f\u904d\u5386\u7684\u505a\u6cd5\uff0c\u5148\u628a\u5de6\u53f3\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u5904\u7406\u81ea\u5df1\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u601d\u8def\u8fd8\u662f\u503c\u5f97\u5b66\u4e60\u7684\u3002"
        },
        {
            "location": "/leetcode-0260-single-number-iii/",
            "text": "260. Single Number III\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0\nnums\n\uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002\n\n\n\u793a\u4f8b :\n\n\n\u8f93\u5165:\n \n[1,2,1,3,2,5]\n\n\n\u8f93\u51fa:\n \n[3,5]\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u00a0\n[5, 3]\n\u00a0\u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002\n\n\n\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n260. Single Number III\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int[] singleNumber(int[] nums) {\n        int a_xor_b = 0;\n        for (int num : nums) {\n            a_xor_b ^= num;\n        }\n        // n&(n-1) \u5c06\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 \u53d8\u6210 0\n        // n&(~(n-1)) \u53ea\u4fdd\u7559\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1\n        int mask = a_xor_b & (~(a_xor_b - 1));\n        int[] res = new int[2];\n        for (int num : nums) {\n            if ((num & mask) == 0) {\n                res[0] ^= num;\n            } else {\n                res[1] ^= num;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public int[] singleNumber(int[] nums) {\n        int xor = 0;\n        for (int num : nums) {\n            xor ^= num;\n        }\n        int[] res = new int[2];\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            if ((xor & mask) != 0) {\n                break;\n            }\n            mask <<= 1;\n        }\n        for (int num : nums) {\n            if ((num & mask) == 0) {\n                res[0] ^= num;\n            } else {\n                res[1] ^= num;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0260-single-number-iii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "260. Single Number III"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#260-single-number-iii",
            "text": "",
            "title": "260. Single Number III"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0 nums \uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002  \u793a\u4f8b :  \u8f93\u5165:   [1,2,1,3,2,5]  \u8f93\u51fa:   [3,5]  \u6ce8\u610f\uff1a   \u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u00a0 [5, 3] \u00a0\u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002  \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 260. Single Number III   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#1",
            "text": "public class Solution {\n\n    public int[] singleNumber(int[] nums) {\n        int a_xor_b = 0;\n        for (int num : nums) {\n            a_xor_b ^= num;\n        }\n        // n&(n-1) \u5c06\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 \u53d8\u6210 0\n        // n&(~(n-1)) \u53ea\u4fdd\u7559\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1\n        int mask = a_xor_b & (~(a_xor_b - 1));\n        int[] res = new int[2];\n        for (int num : nums) {\n            if ((num & mask) == 0) {\n                res[0] ^= num;\n            } else {\n                res[1] ^= num;\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0260-single-number-iii/#2",
            "text": "public class Solution2 {\n\n    public int[] singleNumber(int[] nums) {\n        int xor = 0;\n        for (int num : nums) {\n            xor ^= num;\n        }\n        int[] res = new int[2];\n        int mask = 1;\n        for (int i = 0; i < 32; i++) {\n            if ((xor & mask) != 0) {\n                break;\n            }\n            mask <<= 1;\n        }\n        for (int num : nums) {\n            if ((num & mask) == 0) {\n                res[0] ^= num;\n            } else {\n                res[1] ^= num;\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0260-single-number-iii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0263-ugly-number/",
            "text": "263. Ugly Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002\n\n\n\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570\u00a0\n2, 3, 5\n\u00a0\u7684\n\u6b63\u6574\u6570\n\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 6\n\n\u8f93\u51fa:\n true\n\n\u89e3\u91ca: \n6 = 2 \u00d7\u00a03\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 8\n\n\u8f93\u51fa:\n true\n\n\u89e3\u91ca: \n8 = 2 \u00d7 2 \u00d7\u00a02\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n 14\n\n\u8f93\u51fa:\n false \n\n\u89e3\u91ca: \n14\n \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570\u00a0\n7\n\u3002\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n1\n\u00a0\u662f\u4e11\u6570\u3002\n\n\n\u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4:\u00a0[\u22122\n31\n,\u00a0 2\n31\u00a0\n\u2212 1]\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n263. Ugly Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n263. \u4e11\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u5bb9\u6613\u4e00\u4e0b\u5b50\u5199\u5bf9\uff0c\u4e5f\u5f88\u53ef\u80fd\u628a\u95ee\u9898\u60f3\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8bb8\u8fd9\u7c7b\u95ee\u9898\u89c1\u5f97\u591a\u4e86\u5c31\u61c2\u4e86\u57fa\u672c\u7684\u5957\u8def\u4e86\u3002\u6216\u8bb8\u6a21\u4eff\u662f\u7b2c 1 \u6b65\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n    // \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002\n    // \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002\n    public boolean isUgly(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        while (num % 5 == 0) {\n            num /= 5;\n        }\n        while (num % 3 == 0) {\n            num /= 3;\n        }\n        while (num % 2 == 0) {\n            num /= 2;\n        }\n        return num == 1;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\u3002\n\n\npublic class Solution2 {\n\n    public boolean isUgly(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        int[] factors = new int[]{2, 3, 5};\n        for (int factor : factors) {\n            while (num % factor == 0) {\n                num /= factor;\n            }\n        }\n        return num == 1;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0263-ugly-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "263. Ugly Number"
        },
        {
            "location": "/leetcode-0263-ugly-number/#263-ugly-number",
            "text": "",
            "title": "263. Ugly Number"
        },
        {
            "location": "/leetcode-0263-ugly-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002  \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570\u00a0 2, 3, 5 \u00a0\u7684 \u6b63\u6574\u6570 \u3002  \u793a\u4f8b 1:  \u8f93\u5165:  6 \u8f93\u51fa:  true \u89e3\u91ca:  6 = 2 \u00d7\u00a03  \u793a\u4f8b 2:  \u8f93\u5165:  8 \u8f93\u51fa:  true \u89e3\u91ca:  8 = 2 \u00d7 2 \u00d7\u00a02  \u793a\u4f8b\u00a03:  \u8f93\u5165:  14 \u8f93\u51fa:  false  \u89e3\u91ca:  14  \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570\u00a0 7 \u3002  \u8bf4\u660e\uff1a   1 \u00a0\u662f\u4e11\u6570\u3002  \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4:\u00a0[\u22122 31 ,\u00a0 2 31\u00a0 \u2212 1]\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 263. Ugly Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 263. \u4e11\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0263-ugly-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u5bb9\u6613\u4e00\u4e0b\u5b50\u5199\u5bf9\uff0c\u4e5f\u5f88\u53ef\u80fd\u628a\u95ee\u9898\u60f3\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8bb8\u8fd9\u7c7b\u95ee\u9898\u89c1\u5f97\u591a\u4e86\u5c31\u61c2\u4e86\u57fa\u672c\u7684\u5957\u8def\u4e86\u3002\u6216\u8bb8\u6a21\u4eff\u662f\u7b2c 1 \u6b65\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0263-ugly-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0263-ugly-number/#1",
            "text": "public class Solution {\n    // \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002\n    // \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002\n    public boolean isUgly(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        while (num % 5 == 0) {\n            num /= 5;\n        }\n        while (num % 3 == 0) {\n            num /= 3;\n        }\n        while (num % 2 == 0) {\n            num /= 2;\n        }\n        return num == 1;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0263-ugly-number/#2",
            "text": "public class Solution2 {\n\n    public boolean isUgly(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        int[] factors = new int[]{2, 3, 5};\n        for (int factor : factors) {\n            while (num % factor == 0) {\n                num /= factor;\n            }\n        }\n        return num == 1;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0263-ugly-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/",
            "text": "264. Ugly Number II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c \nn\n \u4e2a\u4e11\u6570\u3002\n\n\n\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570\u00a0\n2, 3, 5\n \u7684\n\u6b63\u6574\u6570\n\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n n = 10\n\n\u8f93\u51fa:\n 12\n\n\u89e3\u91ca: \n1, 2, 3, 4, 5, 6, 8, 9, 10, 12\n \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002\n\n\n\u8bf4\u660e:\u00a0\n\u00a0\n\n\n\n\n1\n\u00a0\u662f\u4e11\u6570\u3002\n\n\nn\n\u00a0\n\u4e0d\u8d85\u8fc7\n1690\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n264. Ugly Number II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n264. \u4e11\u6570 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u53ef\u4ee5\u53c2\u8003\u4f55\u6d77\u6d9b\u7f16\u8457\u7684\u300a\u5251\u6307Offer\u300b\u7b2c 49 \u9898\uff1a\u4e11\u6570\uff08P240\uff09\u7684\u5206\u6790\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int nthUglyNumber(int n) {\n        if (n < 7) {\n            return n;\n        }\n        int[] dp = new int[n];\n        int index2 = 0;\n        int index3 = 0;\n        int index5 = 0;\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = min3(dp[index2] * 2, dp[index3] * 3, dp[index5] * 5);\n            if (dp[i] == dp[index2] * 2) {\n                index2++;\n            }\n            if (dp[i] == dp[index3] * 3) {\n                index3++;\n            }\n            if (dp[i] == dp[index5] * 5) {\n                index5++;\n            }\n        }\n        return dp[n - 1];\n    }\n\n    private int min3(int num1, int num2, int num3) {\n        return Integer.min(Integer.min(num1, num2), num3);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int nthUglyNumber = solution.nthUglyNumber(30);\n        System.out.println(nthUglyNumber);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u6839\u636e LeetCode \u7b2c 313 \u9898\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u7279\u4f8b\u3002\n\n\npublic class Solution3 {\n\n    public int nthUglyNumber(int n) {\n        int[] primes = new int[3];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        int[] indexes = new int[3];\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for (int j = 0; j < 3; j++) {\n                dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]);\n            }\n            for (int j = 0; j < 3; j++) {\n                if (dp[i] == dp[indexes[j]] * primes[j]) {\n                    indexes[j]++;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0264-ugly-number-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "264. Ugly Number II"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#264-ugly-number-ii",
            "text": "",
            "title": "264. Ugly Number II"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c  n  \u4e2a\u4e11\u6570\u3002  \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570\u00a0 2, 3, 5  \u7684 \u6b63\u6574\u6570 \u3002  \u793a\u4f8b:  \u8f93\u5165:  n = 10 \u8f93\u51fa:  12 \u89e3\u91ca:  1, 2, 3, 4, 5, 6, 8, 9, 10, 12  \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002  \u8bf4\u660e:\u00a0 \u00a0   1 \u00a0\u662f\u4e11\u6570\u3002  n \u00a0 \u4e0d\u8d85\u8fc7 1690\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 264. Ugly Number II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 264. \u4e11\u6570 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u53ef\u4ee5\u53c2\u8003\u4f55\u6d77\u6d9b\u7f16\u8457\u7684\u300a\u5251\u6307Offer\u300b\u7b2c 49 \u9898\uff1a\u4e11\u6570\uff08P240\uff09\u7684\u5206\u6790\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#1",
            "text": "public class Solution {\n\n    public int nthUglyNumber(int n) {\n        if (n < 7) {\n            return n;\n        }\n        int[] dp = new int[n];\n        int index2 = 0;\n        int index3 = 0;\n        int index5 = 0;\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = min3(dp[index2] * 2, dp[index3] * 3, dp[index5] * 5);\n            if (dp[i] == dp[index2] * 2) {\n                index2++;\n            }\n            if (dp[i] == dp[index3] * 3) {\n                index3++;\n            }\n            if (dp[i] == dp[index5] * 5) {\n                index5++;\n            }\n        }\n        return dp[n - 1];\n    }\n\n    private int min3(int num1, int num2, int num3) {\n        return Integer.min(Integer.min(num1, num2), num3);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int nthUglyNumber = solution.nthUglyNumber(30);\n        System.out.println(nthUglyNumber);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0264-ugly-number-ii/#2-leetcode-313",
            "text": "public class Solution3 {\n\n    public int nthUglyNumber(int n) {\n        int[] primes = new int[3];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        int[] indexes = new int[3];\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for (int j = 0; j < 3; j++) {\n                dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]);\n            }\n            for (int j = 0; j < 3; j++) {\n                if (dp[i] == dp[indexes[j]] * primes[j]) {\n                    indexes[j]++;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0264-ugly-number-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u6839\u636e LeetCode \u7b2c 313 \u9898\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u7279\u4f8b\u3002"
        },
        {
            "location": "/leetcode-0268-missing-number/",
            "text": "268. Missing Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b \n0, 1, 2, ..., n\n\u00a0\u4e2d\u00a0\nn\n\u00a0\u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u627e\u51fa 0 .. \nn\n\u00a0\u4e2d\u6ca1\u6709\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u90a3\u4e2a\u6570\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [3,0,1]\n\n\u8f93\u51fa:\n 2\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n [9,6,4,2,3,5,7,0,1]\n\n\u8f93\u51fa:\n 8\n\n\n\n\u8bf4\u660e:\n\n\u4f60\u7684\u7b97\u6cd5\u5e94\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0?\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n268. Missing Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n268. \u7f3a\u5931\u6570\u5b57\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u524d n \u9879\u548c\uff0c\u518d\u51cf\u53bb\u7ed9\u51fa\u7684\u6570\u7ec4\u7684\u548c\uff0c\u5c31\u662f\u7f3a\u5931\u7684\u90a3\u4e2a\u6570\u5b57\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int sum = (n + 1) * n / 2;\n        for (int i = 0; i < n; i++) {\n            sum -= nums[i];\n        }\n        return sum;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0268-missing-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "268. Missing Number"
        },
        {
            "location": "/leetcode-0268-missing-number/#268-missing-number",
            "text": "",
            "title": "268. Missing Number"
        },
        {
            "location": "/leetcode-0268-missing-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b  0, 1, 2, ..., n \u00a0\u4e2d\u00a0 n \u00a0\u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u627e\u51fa 0 ..  n \u00a0\u4e2d\u6ca1\u6709\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u90a3\u4e2a\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [3,0,1] \u8f93\u51fa:  2  \u793a\u4f8b\u00a02:  \u8f93\u5165:  [9,6,4,2,3,5,7,0,1] \u8f93\u51fa:  8  \u8bf4\u660e: \n\u4f60\u7684\u7b97\u6cd5\u5e94\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0?    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 268. Missing Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 268. \u7f3a\u5931\u6570\u5b57   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0268-missing-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u524d n \u9879\u548c\uff0c\u518d\u51cf\u53bb\u7ed9\u51fa\u7684\u6570\u7ec4\u7684\u548c\uff0c\u5c31\u662f\u7f3a\u5931\u7684\u90a3\u4e2a\u6570\u5b57\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0268-missing-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0268-missing-number/#1",
            "text": "public class Solution {\n\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int sum = (n + 1) * n / 2;\n        for (int i = 0; i < n; i++) {\n            sum -= nums[i];\n        }\n        return sum;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0268-missing-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0283-move-zeroes/",
            "text": "283. Move Zeroes\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 \nnums\n\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 \n0\n \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \n[0,1,0,3,12]\n\n\n\u8f93\u51fa:\n \n[1,3,12,0,0]\n\n\n\u8bf4\u660e\n:\n\n\n\n\n\u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002\n\n\n\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n283. Move Zeroes\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n283. \u79fb\u52a8\u96f6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u6709 2 \u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u5b66\u4e60\u8fc7\u7b97\u6cd5\u90fd\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u5176\u5b9e\u53ea\u8981\u7b97\u6cd5\u57fa\u7840\u624e\u5b9e\uff0c\u4e5f\u662f\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u7684\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u628a\u975e\u96f6\u503c\u8986\u76d6\u5728\u6570\u7ec4\u7684\u524d\u9762\uff0c\u6700\u540e\u5728\u628a\u6570\u7ec4\u7684\u672b\u5c3e\u5168\u90e8\u8d4b\u503c\u4e3a 0\u3002\n\n\n\n\n\u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u53ea\u8981\u719f\u6089\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5e94\u8be5\u66f4\u5bb9\u6613\u60f3\u5230\u4e0b\u9762\u7684\u5199\u6cd5\u3002\n\n\n\n\n\u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u501f\u52a9\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u60f3\uff0c\u9047\u5230 0 \u5c31\u653e\u8fc7\uff0c\u9047\u5230\u975e 0 \uff0c\u8fd9\u662f\u7b26\u5408\u9898\u76ee\u4e2d\u201c\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u201d\u8fd9\u4e2a\u8981\u6c42\u7684\u3002\n\n\n\n\n\u5c31\u9010\u4e2a\u4ea4\u6362\u5230\u6570\u7ec4\u7684\u524d\u9762\u3002\u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01\u3002\n\n\n\u5728\u7ec3\u4e60\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u60f3\u5230\u4e86\u201c\u6307\u9488\u5bf9\u649e\u201d\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u4f7f\u5f97\u975e\u96f6\u5143\u7d20\u6392\u5728\u96f6\u5143\u7d20\u524d\u9762\uff0c\u4f46\u662f\u4e0d\u80fd\u505a\u5230\u201c\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u201d\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution {\n\n    public void moveZeroes(int[] nums) {\n        // \u904d\u5386\u6307\u9488\n        int i = 0;\n        // \u4e00\u5f00\u59cb\u90fd\u5199\u975e\u96f6\u5143\u7d20\uff0c\u7136\u540e\u90fd\u5199\u96f6\u5143\u7d20\n        int j = 0;\n        for (; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                nums[j++] = nums[i];\n            }\n        }\n\n        for (int k = j; k < nums.length; k++) {\n            nums[k] = 0;\n        }\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        not_zero_begin = 0\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[not_zero_begin] = nums[i]\n                not_zero_begin += 1\n\n        for i in range(not_zero_begin, len(nums)):\n            nums[not_zero_begin] = 0\n            not_zero_begin += 1\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nJava \u5199\u6cd5\uff1a\n\n\npublic class Solution3 {\n\n    // https://leetcode-cn.com/problems/move-zeroes/description/\n    // [0, 1, 0, 3, 12]\n    // [1, 0, 0, 3, 12]\n    // [1, 3, 0, 0, 12]\n    // [1, 3, 12, 0, 0]\n    // \u5e38\u89c4\u9898\uff1a\u7528\u601d\u7ef4\u5b9a\u52bf\u5c31\u53ef\u4ee5\u5b8c\u6210\n    /**\n     * i \u7528\u4e8e\u904d\u5386\n     * \u5728\u533a\u95f4 [0,j) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u975e\u96f6\n     * \u800c\u5728\u533a\u95f4 [j,i) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u4e3a\u96f6\n     * \u521d\u59cb\u5316\u7684\u65f6\u5019 j = 0 \uff0c i = 0\n     *\n     * @param nums\n     */\n    public void moveZeroes(int[] nums) {\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if(nums[i]!=0){\n                swap(nums,i,j);\n                j++;\n            }\n\n        }\n    }\n\n    private void swap(int[] nums,int index1,int index2){\n        if(index1==index2){\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] =nums[index2];\n        nums[index2] = temp;\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n\n    # \u5feb\u901f\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u6700\u7b80\u5355\uff0c\u6700\u76f4\u63a5\n\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # [0,not_zero_end\uff09 \u4fdd\u6301\u90fd\u975e 0\uff0c\n        # [not_zero_end,len-1] \u4e3a 0\n        not_zero_end = 0\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                self.__swap(nums, not_zero_end, i)\n                not_zero_end += 1\n\n    def __swap(self, nums, index1, index2):\n        if index1 == index2:\n            return\n        temp = nums[index1]\n        nums[index1] = nums[index2]\n        nums[index2] = temp\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass Solution:\n\n    # \u5feb\u6392\u5b9e\u73b0\uff1a\n    # Python \u4ea4\u6362\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u7528 Python \u7279\u6b8a\u7684\u8bed\u6cd5\u5b9e\u73b0\n\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        not_zero_end = 0  # \u4e0d\u5305\u62ec\u672b\u5c3e\u5143\u7d20\n        for j in range(len(nums)):\n            if nums[j] != 0:\n                nums[not_zero_end], nums[j] = nums[j], nums[not_zero_end]\n                not_zero_end += 1\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0283-move-zeroes\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "283. Move Zeroes"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#283-move-zeroes",
            "text": "",
            "title": "283. Move Zeroes"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4  nums \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709  0  \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002  \u793a\u4f8b:  \u8f93\u5165:   [0,1,0,3,12]  \u8f93\u51fa:   [1,3,12,0,0]  \u8bf4\u660e :   \u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002  \u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 283. Move Zeroes   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 283. \u79fb\u52a8\u96f6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u6709 2 \u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u5b66\u4e60\u8fc7\u7b97\u6cd5\u90fd\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u5176\u5b9e\u53ea\u8981\u7b97\u6cd5\u57fa\u7840\u624e\u5b9e\uff0c\u4e5f\u662f\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u7684\u3002   \u601d\u8def1\uff1a\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u628a\u975e\u96f6\u503c\u8986\u76d6\u5728\u6570\u7ec4\u7684\u524d\u9762\uff0c\u6700\u540e\u5728\u628a\u6570\u7ec4\u7684\u672b\u5c3e\u5168\u90e8\u8d4b\u503c\u4e3a 0\u3002   \u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u53ea\u8981\u719f\u6089\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5e94\u8be5\u66f4\u5bb9\u6613\u60f3\u5230\u4e0b\u9762\u7684\u5199\u6cd5\u3002   \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u501f\u52a9\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u60f3\uff0c\u9047\u5230 0 \u5c31\u653e\u8fc7\uff0c\u9047\u5230\u975e 0 \uff0c\u8fd9\u662f\u7b26\u5408\u9898\u76ee\u4e2d\u201c\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u201d\u8fd9\u4e2a\u8981\u6c42\u7684\u3002   \u5c31\u9010\u4e2a\u4ea4\u6362\u5230\u6570\u7ec4\u7684\u524d\u9762\u3002\u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01\u3002  \u5728\u7ec3\u4e60\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u60f3\u5230\u4e86\u201c\u6307\u9488\u5bf9\u649e\u201d\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u4f7f\u5f97\u975e\u96f6\u5143\u7d20\u6392\u5728\u96f6\u5143\u7d20\u524d\u9762\uff0c\u4f46\u662f\u4e0d\u80fd\u505a\u5230\u201c\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u201d\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#1",
            "text": "Java \u5199\u6cd5\uff1a  public class Solution {\n\n    public void moveZeroes(int[] nums) {\n        // \u904d\u5386\u6307\u9488\n        int i = 0;\n        // \u4e00\u5f00\u59cb\u90fd\u5199\u975e\u96f6\u5143\u7d20\uff0c\u7136\u540e\u90fd\u5199\u96f6\u5143\u7d20\n        int j = 0;\n        for (; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                nums[j++] = nums[i];\n            }\n        }\n\n        for (int k = j; k < nums.length; k++) {\n            nums[k] = 0;\n        }\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        not_zero_begin = 0\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[not_zero_begin] = nums[i]\n                not_zero_begin += 1\n\n        for i in range(not_zero_begin, len(nums)):\n            nums[not_zero_begin] = 0\n            not_zero_begin += 1",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0283-move-zeroes/#2",
            "text": "Java \u5199\u6cd5\uff1a  public class Solution3 {\n\n    // https://leetcode-cn.com/problems/move-zeroes/description/\n    // [0, 1, 0, 3, 12]\n    // [1, 0, 0, 3, 12]\n    // [1, 3, 0, 0, 12]\n    // [1, 3, 12, 0, 0]\n    // \u5e38\u89c4\u9898\uff1a\u7528\u601d\u7ef4\u5b9a\u52bf\u5c31\u53ef\u4ee5\u5b8c\u6210\n    /**\n     * i \u7528\u4e8e\u904d\u5386\n     * \u5728\u533a\u95f4 [0,j) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u975e\u96f6\n     * \u800c\u5728\u533a\u95f4 [j,i) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u4e3a\u96f6\n     * \u521d\u59cb\u5316\u7684\u65f6\u5019 j = 0 \uff0c i = 0\n     *\n     * @param nums\n     */\n    public void moveZeroes(int[] nums) {\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if(nums[i]!=0){\n                swap(nums,i,j);\n                j++;\n            }\n\n        }\n    }\n\n    private void swap(int[] nums,int index1,int index2){\n        if(index1==index2){\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] =nums[index2];\n        nums[index2] = temp;\n    }\n}  Python \u5199\u6cd5\uff1a  class Solution:\n\n    # \u5feb\u901f\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u6700\u7b80\u5355\uff0c\u6700\u76f4\u63a5\n\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        # [0,not_zero_end\uff09 \u4fdd\u6301\u90fd\u975e 0\uff0c\n        # [not_zero_end,len-1] \u4e3a 0\n        not_zero_end = 0\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                self.__swap(nums, not_zero_end, i)\n                not_zero_end += 1\n\n    def __swap(self, nums, index1, index2):\n        if index1 == index2:\n            return\n        temp = nums[index1]\n        nums[index1] = nums[index2]\n        nums[index2] = temp  Python \u5199\u6cd5\uff1a  class Solution:\n\n    # \u5feb\u6392\u5b9e\u73b0\uff1a\n    # Python \u4ea4\u6362\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u7528 Python \u7279\u6b8a\u7684\u8bed\u6cd5\u5b9e\u73b0\n\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n        not_zero_end = 0  # \u4e0d\u5305\u62ec\u672b\u5c3e\u5143\u7d20\n        for j in range(len(nums)):\n            if nums[j] != 0:\n                nums[not_zero_end], nums[j] = nums[j], nums[not_zero_end]\n                not_zero_end += 1  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0283-move-zeroes  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/",
            "text": "284. Peeking Iterator\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a\u00a0\nnext()\n\u00a0\u548c\u00a0\nhasNext()\n\u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u00a0\npeek()\n\u00a0\u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531\u00a0\nnext()\n\u00a0\u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20\u00a0\npeek()\n\u00a0\u51fa\u6765\u3002\n\n\n\u793a\u4f8b:\n\n\n\u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868\u00a0\n[1,2,3]\n\u3002\n\n\u8c03\u7528\u00a0\nnext()\n\u8fd4\u56de \n1\n\uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\u73b0\u5728\u8c03\u7528\u00a0\npeek()\n\u00a0\u8fd4\u56de \n2\n\uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528\u00a0\nnext() \n\u4ecd\u7136\u8fd4\u56de \n2\n\u3002\n\u6700\u540e\u4e00\u6b21\u8c03\u7528\u00a0\nnext()\n\u00a0\u8fd4\u56de \n3\n\uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528\u00a0\nhasNext()\n\u00a0\u5e94\u8be5\u8fd4\u56de \nfalse\n\u3002\n\n\n\n\u8fdb\u9636\uff1a\n\u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n284. Peeking Iterator\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n284. \u9876\u7aef\u8fed\u4ee3\u5668\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\nclass PeekingIterator implements Iterator<Integer> {\n\n    private Iterator<Integer> iterator;\n\n    private Integer peek = null;\n\n    private boolean peeked = false;\n\n    public PeekingIterator(Iterator<Integer> iterator) {\n        // initialize any member here.\n        this.iterator = iterator;\n    }\n\n    // Returns the next element in the iteration without advancing the iterator.\n    public Integer peek() {\n        if (peeked) {\n            return peek;\n        } else {\n            peeked = true;\n            peek = iterator.next();\n        }\n        return peek;\n    }\n\n    // hasNext() and next() should behave the same as in the Iterator interface.\n    // Override them if needed.\n    @Override\n    public Integer next() {\n        if (peeked) {\n            peeked = false;\n            return peek;\n        } else {\n            return iterator.next();\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        return peeked || iterator.hasNext();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        Iterator<Integer> iterator = list.iterator();\n        PeekingIterator peekingIterator = new PeekingIterator(iterator);\n        Integer peek1 = peekingIterator.peek();\n        System.out.println(peek1);\n\n        Integer peek2 = peekingIterator.peek();\n        System.out.println(peek2);\n\n        Integer peek3 = peekingIterator.peek();\n        System.out.println(peek3);\n\n        Integer peek4 = peekingIterator.peek();\n        System.out.println(peek4);\n\n        Integer next1 = peekingIterator.next();\n        System.out.println(next1);\n\n        Integer peek5 = peekingIterator.peek();\n        System.out.println(peek5);\n\n        Integer next2 = peekingIterator.next();\n        System.out.println(next2);\n        Integer next3 = peekingIterator.next();\n        System.out.println(next3);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0284-peeking-iterator\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "284. Peeking Iterator"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/#284-peeking-iterator",
            "text": "",
            "title": "284. Peeking Iterator"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a\u00a0 next() \u00a0\u548c\u00a0 hasNext() \u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u00a0 peek() \u00a0\u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531\u00a0 next() \u00a0\u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20\u00a0 peek() \u00a0\u51fa\u6765\u3002  \u793a\u4f8b:  \u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868\u00a0 [1,2,3] \u3002\n\n\u8c03\u7528\u00a0 next() \u8fd4\u56de  1 \uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\u73b0\u5728\u8c03\u7528\u00a0 peek() \u00a0\u8fd4\u56de  2 \uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528\u00a0 next()  \u4ecd\u7136\u8fd4\u56de  2 \u3002\n\u6700\u540e\u4e00\u6b21\u8c03\u7528\u00a0 next() \u00a0\u8fd4\u56de  3 \uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528\u00a0 hasNext() \u00a0\u5e94\u8be5\u8fd4\u56de  false \u3002  \u8fdb\u9636\uff1a \u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 284. Peeking Iterator   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 284. \u9876\u7aef\u8fed\u4ee3\u5668   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0284-peeking-iterator/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\nclass PeekingIterator implements Iterator<Integer> {\n\n    private Iterator<Integer> iterator;\n\n    private Integer peek = null;\n\n    private boolean peeked = false;\n\n    public PeekingIterator(Iterator<Integer> iterator) {\n        // initialize any member here.\n        this.iterator = iterator;\n    }\n\n    // Returns the next element in the iteration without advancing the iterator.\n    public Integer peek() {\n        if (peeked) {\n            return peek;\n        } else {\n            peeked = true;\n            peek = iterator.next();\n        }\n        return peek;\n    }\n\n    // hasNext() and next() should behave the same as in the Iterator interface.\n    // Override them if needed.\n    @Override\n    public Integer next() {\n        if (peeked) {\n            peeked = false;\n            return peek;\n        } else {\n            return iterator.next();\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        return peeked || iterator.hasNext();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        Iterator<Integer> iterator = list.iterator();\n        PeekingIterator peekingIterator = new PeekingIterator(iterator);\n        Integer peek1 = peekingIterator.peek();\n        System.out.println(peek1);\n\n        Integer peek2 = peekingIterator.peek();\n        System.out.println(peek2);\n\n        Integer peek3 = peekingIterator.peek();\n        System.out.println(peek3);\n\n        Integer peek4 = peekingIterator.peek();\n        System.out.println(peek4);\n\n        Integer next1 = peekingIterator.next();\n        System.out.println(next1);\n\n        Integer peek5 = peekingIterator.peek();\n        System.out.println(peek5);\n\n        Integer next2 = peekingIterator.next();\n        System.out.println(next2);\n        Integer next3 = peekingIterator.next();\n        System.out.println(next3);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0284-peeking-iterator  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0290-word-pattern/",
            "text": "290. Word Pattern\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u79cd \npattern(\u6a21\u5f0f)\n\u00a0\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0\nstr\n\u00a0\uff0c\u5224\u65ad \nstr\n \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002\n\n\n\u8fd9\u91cc\u7684\n\u9075\u5faa\n\u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c\u00a0\npattern\n\u00a0\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32\u00a0\nstr\n\u00a0\n\u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002\n\n\n\u793a\u4f8b1:\n\n\n\u8f93\u5165:\n pattern = \n\"abba\"\n, str = \n\"dog cat cat dog\"\n\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\npattern = \n\"abba\"\n, str = \n\"dog cat cat fish\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n pattern = \n\"aaaa\"\n, str = \n\"dog cat cat dog\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u793a\u4f8b\u00a04:\n\n\n\u8f93\u5165:\n pattern = \n\"abba\"\n, str = \n\"dog dog dog dog\"\n\n\n\u8f93\u51fa:\n false\n\n\n\u8bf4\u660e:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0\npattern\n\u00a0\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c\u00a0\nstr\n\u00a0\u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002\u00a0 \u00a0\u00a0\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n290. Word Pattern\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n290. \u5355\u8bcd\u6a21\u5f0f\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\u6211\u7684\u89e3\u7b54\uff1a\n\u6211\u7684\u601d\u8def\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5751\uff0c\u5c31\u662f\u5f53\u6d4b\u8bd5\u7528\u4f8b\u662f\uff1a\nString pattern = \"abba\";String str = \"dog dog dog dog\";\n\u7684\u65f6\u5019\uff0c\u6211\u4eec\u987b\u8981\u5224\u65ad\u51fa\u7ed3\u679c\u662f false\u3002\n\n\npublic class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        boolean wordPattern = false;\n        int patternLength = pattern.length();\n        String[] strArray = str.split(\" \");\n        if (patternLength == strArray.length) {\n\n            Map<Character, String> map1 = new HashMap<>();\n            Set<String> uniqueValue = new HashSet<>();\n            char[] patternArray = pattern.toCharArray();\n            for (int i = 0; i < patternLength; i++) {\n                if (map1.containsKey(patternArray[i])) {\n                    if (!map1.get(patternArray[i]).equals(strArray[i])) {\n                        return wordPattern;\n                    }\n                } else {\n                    if (uniqueValue.contains(strArray[i])) {\n                        return wordPattern;\n                    }\n                    uniqueValue.add(strArray[i]);\n                    map1.put(patternArray[i], strArray[i]);\n                }\n            }\n            wordPattern = true;\n        }\n        return wordPattern;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String pattern = \"abba\";\n        String str = \"dog dog dog dog\";\n        boolean wordPattern = solution.wordPattern(pattern, str);\n        System.out.println(wordPattern);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0290-word-pattern\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "290. Word Pattern"
        },
        {
            "location": "/leetcode-0290-word-pattern/#290-word-pattern",
            "text": "",
            "title": "290. Word Pattern"
        },
        {
            "location": "/leetcode-0290-word-pattern/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u79cd  pattern(\u6a21\u5f0f) \u00a0\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0 str \u00a0\uff0c\u5224\u65ad  str  \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002  \u8fd9\u91cc\u7684 \u9075\u5faa \u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c\u00a0 pattern \u00a0\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32\u00a0 str \u00a0 \u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002  \u793a\u4f8b1:  \u8f93\u5165:  pattern =  \"abba\" , str =  \"dog cat cat dog\"  \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165: pattern =  \"abba\" , str =  \"dog cat cat fish\"  \u8f93\u51fa:  false  \u793a\u4f8b 3:  \u8f93\u5165:  pattern =  \"aaaa\" , str =  \"dog cat cat dog\"  \u8f93\u51fa:  false  \u793a\u4f8b\u00a04:  \u8f93\u5165:  pattern =  \"abba\" , str =  \"dog dog dog dog\"  \u8f93\u51fa:  false  \u8bf4\u660e: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0 pattern \u00a0\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c\u00a0 str \u00a0\u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002\u00a0 \u00a0\u00a0    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 290. Word Pattern   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 290. \u5355\u8bcd\u6a21\u5f0f   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0290-word-pattern/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0290-word-pattern/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0290-word-pattern/#1",
            "text": "\u6211\u7684\u89e3\u7b54\uff1a\n\u6211\u7684\u601d\u8def\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5751\uff0c\u5c31\u662f\u5f53\u6d4b\u8bd5\u7528\u4f8b\u662f\uff1a\nString pattern = \"abba\";String str = \"dog dog dog dog\";\n\u7684\u65f6\u5019\uff0c\u6211\u4eec\u987b\u8981\u5224\u65ad\u51fa\u7ed3\u679c\u662f false\u3002  public class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        boolean wordPattern = false;\n        int patternLength = pattern.length();\n        String[] strArray = str.split(\" \");\n        if (patternLength == strArray.length) {\n\n            Map<Character, String> map1 = new HashMap<>();\n            Set<String> uniqueValue = new HashSet<>();\n            char[] patternArray = pattern.toCharArray();\n            for (int i = 0; i < patternLength; i++) {\n                if (map1.containsKey(patternArray[i])) {\n                    if (!map1.get(patternArray[i]).equals(strArray[i])) {\n                        return wordPattern;\n                    }\n                } else {\n                    if (uniqueValue.contains(strArray[i])) {\n                        return wordPattern;\n                    }\n                    uniqueValue.add(strArray[i]);\n                    map1.put(patternArray[i], strArray[i]);\n                }\n            }\n            wordPattern = true;\n        }\n        return wordPattern;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String pattern = \"abba\";\n        String str = \"dog dog dog dog\";\n        boolean wordPattern = solution.wordPattern(pattern, str);\n        System.out.println(wordPattern);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0290-word-pattern  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/",
            "text": "297. Serialize and Deserialize Binary Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002\n\n\n\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u4e00\u4e2a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002\n\n\n\u793a\u4f8b:\u00a0\n\n\n\u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n\u5e8f\u5217\u5316\u4e3a \n\"[1,2,3,null,null,4,5]\"\n\n\n\u63d0\u793a:\u00a0\n\u8fd9\u4e0eLeetCode\u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605\u00a0\nhow LeetCode OJ serializes a binary tree\n\u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u521b\u9020\u6027\u7684\u7528\u5176\u4ed6\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\n\u8bf4\u660e:\u00a0\n\u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u673a\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u673a\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n297. Serialize and Deserialize Binary Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528\u524d\u5e8f\u904d\u5386\uff0c\u5c31\u53ef\u4ee5\u5e8f\u5217\u5316\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u540c\u6837\uff0c\u5229\u7528\u53cd\u5e8f\u5217\u5316\uff0c\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.LinkedList;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        if (root == null) {\n            return \"\";\n        }\n        StringBuilder builder = new StringBuilder();\n        preOrder(root, builder);\n        return builder.toString();\n    }\n\n    private void preOrder(TreeNode node, StringBuilder builder) {\n        if (node == null) {\n            builder.append(\"#\");\n            builder.append(\",\");\n            return;\n        }\n        builder.append(node.val);\n        builder.append(\",\");\n        preOrder(node.left, builder);\n        preOrder(node.right, builder);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        if (data == null || data.length() == 0) {\n            return null;\n        }\n        LinkedList<String> queue = new LinkedList<>();\n        String[] split = data.split(\",\");\n        for(String s:split){\n            queue.addLast(s);\n        }\n        return preOrder(queue);\n    }\n\n    private TreeNode preOrder(LinkedList<String> queue ) {\n        if (queue.isEmpty()) {\n            return null;\n        }\n        String s = queue.removeFirst();\n        if(\"#\".equals(s)){\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.parseInt(s));\n        root.left = preOrder(queue);\n        root.right =  preOrder(queue);\n        return root;\n    }\n\n\n    //       1\n    //     2   3\n    //    4 5 6 7\n    public static void main(String[] args) {\n        TreeNode node1 = new TreeNode(1);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node3 = new TreeNode(3);\n        TreeNode node4 = new TreeNode(4);\n        TreeNode node5 = new TreeNode(5);\n        TreeNode node6 = new TreeNode(6);\n        TreeNode node7 = new TreeNode(7);\n\n        node1.left = node2;\n        node1.right = node3;\n\n        node2.left = node4;\n        node2.right = node5;\n\n        node3.left = node6;\n        node3.right = node7;\n\n        Codec codec = new Codec();\n        String serialize = codec.serialize(node1);\n        System.out.println(serialize);\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0297-serialize-and-deserialize-binary-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "297. Serialize and Deserialize Binary Tree"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/#297-serialize-and-deserialize-binary-tree",
            "text": "",
            "title": "297. Serialize and Deserialize Binary Tree"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002  \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u4e00\u4e2a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002  \u793a\u4f8b:\u00a0  \u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n\u5e8f\u5217\u5316\u4e3a  \"[1,2,3,null,null,4,5]\"  \u63d0\u793a:\u00a0 \u8fd9\u4e0eLeetCode\u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605\u00a0 how LeetCode OJ serializes a binary tree \u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u521b\u9020\u6027\u7684\u7528\u5176\u4ed6\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002  \u8bf4\u660e:\u00a0 \u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u673a\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u673a\u7684\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 297. Serialize and Deserialize Binary Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528\u524d\u5e8f\u904d\u5386\uff0c\u5c31\u53ef\u4ee5\u5e8f\u5217\u5316\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u540c\u6837\uff0c\u5229\u7528\u53cd\u5e8f\u5217\u5316\uff0c\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0297-serialize-and-deserialize-binary-tree/#1",
            "text": "import java.util.LinkedList;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        if (root == null) {\n            return \"\";\n        }\n        StringBuilder builder = new StringBuilder();\n        preOrder(root, builder);\n        return builder.toString();\n    }\n\n    private void preOrder(TreeNode node, StringBuilder builder) {\n        if (node == null) {\n            builder.append(\"#\");\n            builder.append(\",\");\n            return;\n        }\n        builder.append(node.val);\n        builder.append(\",\");\n        preOrder(node.left, builder);\n        preOrder(node.right, builder);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        if (data == null || data.length() == 0) {\n            return null;\n        }\n        LinkedList<String> queue = new LinkedList<>();\n        String[] split = data.split(\",\");\n        for(String s:split){\n            queue.addLast(s);\n        }\n        return preOrder(queue);\n    }\n\n    private TreeNode preOrder(LinkedList<String> queue ) {\n        if (queue.isEmpty()) {\n            return null;\n        }\n        String s = queue.removeFirst();\n        if(\"#\".equals(s)){\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.parseInt(s));\n        root.left = preOrder(queue);\n        root.right =  preOrder(queue);\n        return root;\n    }\n\n\n    //       1\n    //     2   3\n    //    4 5 6 7\n    public static void main(String[] args) {\n        TreeNode node1 = new TreeNode(1);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node3 = new TreeNode(3);\n        TreeNode node4 = new TreeNode(4);\n        TreeNode node5 = new TreeNode(5);\n        TreeNode node6 = new TreeNode(6);\n        TreeNode node7 = new TreeNode(7);\n\n        node1.left = node2;\n        node1.right = node3;\n\n        node2.left = node4;\n        node2.right = node5;\n\n        node3.left = node6;\n        node3.right = node7;\n\n        Codec codec = new Codec();\n        String serialize = codec.serialize(node1);\n        System.out.println(serialize);\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0297-serialize-and-deserialize-binary-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/",
            "text": "300. Longest Increasing Subsequence\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \n[10,9,2,5,3,7,101,18]\n\n\u8f93\u51fa: \n4 \n\n\u89e3\u91ca: \n\u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f\u00a0\n[2,3,7,101]\uff0c\n\u5b83\u7684\u957f\u5ea6\u662f \n4\n\u3002\n\n\n\u8bf4\u660e:\n\n\n\n\n\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002\n\n\n\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a\u00a0O(\nn\n2\n) \u3002\n\n\n\n\n\u8fdb\u9636:\n \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u00a0O(\nn\n log \nn\n) \u5417?\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n300. Longest Increasing Subsequence\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002\n\u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u4ee5 num[i] \n\u7ed3\u5c3e\n\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u7684\u6570\u4e2d\u6bd4 num[i] \u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\u3002  \n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9 + \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002\n\n\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.Arrays;\n\npublic class Solution4 {\n\n    // \u6709\u8d2a\u5fc3\u9009\u62e9\u7684\u610f\u601d\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        // \u5148\u8003\u8651\u6781\u7aef\u8f93\u5165\n        if (len <= 1) {\n            return len;\n        }\n        // tail \u6570\u7ec4\u7684\u5b9a\u4e49\uff1a\u957f\u5ea6\u4e3a i+1 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u6700\u5c0f\u662f\u51e0\n        int[] tail = new int[len];\n        // \u904d\u5386\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n        tail[0] = nums[0];\n        int res = 0;\n        for (int i = 1; i < len; i++) {\n            // \u6bd4 tail \u6570\u7ec4\u5b9e\u9645\u6709\u6548\u7684\u672b\u5c3e\u7684\u90a3\u4e2a\u5143\u7d20\u8fd8\u5927\n            if (nums[i] > tail[res]) {\n                // \u76f4\u63a5\u6dfb\u52a0\u5728\u90a3\u4e2a\u5143\u7d20\u7684\u540e\u9762\n                tail[++res] = nums[i];\n            } else {\n                // \u4e8c\u5206\u67e5\u627e\u5230\u7b2c 1 \u4e2a\u6bd4 nums[i] \u8fd8\u5927\u7684\u5143\u7d20\uff0c\u66f4\u65b0\u5230\u90a3\u4e2a\u4f4d\u7f6e\n                int l = 0;\n                int r = res;\n                while (l < r) {\n                    int mid = l + (r - l) / 2;\n                    // \u6709\u5c31\u5565\u90fd\u4e0d\u505a\u4e86\n                    if (tail[mid] == nums[i]) {\n                        l = mid;\n                        break;\n                    } else if (tail[mid] >= nums[i]) {\n                        r = mid;\n                    } else {\n                        l = mid + 1;\n                    }\n                }\n                tail[l] = nums[i];\n            }\n            printArray(nums[i], tail);\n        }\n        return ++res;\n    }\n\n    // \u8c03\u8bd5\u65b9\u6cd5\uff0c\u4ee5\u89c2\u5bdf\u662f\u5426\u8fd0\u884c\u6b63\u786e\n    private void printArray(int num, int[] tail) {\n        System.out.print(\"\u5f53\u524d\u6570\u5b57\uff1a\" + num);\n        System.out.print(\"\\t\u5f53\u524d tail \u6570\u7ec4\uff1a\");\n        int len = tail.length;\n        for (int i = 0; i < len; i++) {\n            if (tail[i] == 0) {\n                break;\n            }\n            System.out.print(tail[i] + \", \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12};\n        Solution4 solution4 = new Solution4();\n        int lengthOfLIS = solution4.lengthOfLIS(nums);\n        System.out.println(\"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff1a\" + lengthOfLIS);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0300-longest-increasing-subsequence\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "300. Longest Increasing Subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#300-longest-increasing-subsequence",
            "text": "",
            "title": "300. Longest Increasing Subsequence"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002  \u793a\u4f8b:  \u8f93\u5165:   [10,9,2,5,3,7,101,18] \u8f93\u51fa:  4  \u89e3\u91ca:  \u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f\u00a0 [2,3,7,101]\uff0c \u5b83\u7684\u957f\u5ea6\u662f  4 \u3002  \u8bf4\u660e:   \u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002  \u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a\u00a0O( n 2 ) \u3002   \u8fdb\u9636:  \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u00a0O( n  log  n ) \u5417?    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 300. Longest Increasing Subsequence   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002\n\u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u4ee5 num[i]  \u7ed3\u5c3e \u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u7684\u6570\u4e2d\u6bd4 num[i] \u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\u3002    \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9 + \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#1",
            "text": "import java.util.Arrays;\n\n// \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\n// 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n// https://leetcode-cn.com/problems/longest-increasing-subsequence/description/\npublic class Solution {\n\n    //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005\n    // \u4ee5\u6570\u7ec4  [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a\n    // dp \u7684\u503c\uff1a 1  1  1  2  2  3  4    4\n    // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684\n        for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c\n            int curVal = nums[i];\n            for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\n                if (curVal > nums[j]) {\n                    dp[i] = Integer.max(dp[j] + 1, dp[i]);\n                }\n            }\n        }\n        // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c\n        int res = dp[0];\n        for (int i = 0; i < len; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        Solution solution = new Solution();\n        int lengthOfLIS = solution.lengthOfLIS(nums);\n        System.out.println(lengthOfLIS);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0300-longest-increasing-subsequence/#2",
            "text": "import java.util.Arrays;\n\npublic class Solution4 {\n\n    // \u6709\u8d2a\u5fc3\u9009\u62e9\u7684\u610f\u601d\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        // \u5148\u8003\u8651\u6781\u7aef\u8f93\u5165\n        if (len <= 1) {\n            return len;\n        }\n        // tail \u6570\u7ec4\u7684\u5b9a\u4e49\uff1a\u957f\u5ea6\u4e3a i+1 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u6700\u5c0f\u662f\u51e0\n        int[] tail = new int[len];\n        // \u904d\u5386\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\n        tail[0] = nums[0];\n        int res = 0;\n        for (int i = 1; i < len; i++) {\n            // \u6bd4 tail \u6570\u7ec4\u5b9e\u9645\u6709\u6548\u7684\u672b\u5c3e\u7684\u90a3\u4e2a\u5143\u7d20\u8fd8\u5927\n            if (nums[i] > tail[res]) {\n                // \u76f4\u63a5\u6dfb\u52a0\u5728\u90a3\u4e2a\u5143\u7d20\u7684\u540e\u9762\n                tail[++res] = nums[i];\n            } else {\n                // \u4e8c\u5206\u67e5\u627e\u5230\u7b2c 1 \u4e2a\u6bd4 nums[i] \u8fd8\u5927\u7684\u5143\u7d20\uff0c\u66f4\u65b0\u5230\u90a3\u4e2a\u4f4d\u7f6e\n                int l = 0;\n                int r = res;\n                while (l < r) {\n                    int mid = l + (r - l) / 2;\n                    // \u6709\u5c31\u5565\u90fd\u4e0d\u505a\u4e86\n                    if (tail[mid] == nums[i]) {\n                        l = mid;\n                        break;\n                    } else if (tail[mid] >= nums[i]) {\n                        r = mid;\n                    } else {\n                        l = mid + 1;\n                    }\n                }\n                tail[l] = nums[i];\n            }\n            printArray(nums[i], tail);\n        }\n        return ++res;\n    }\n\n    // \u8c03\u8bd5\u65b9\u6cd5\uff0c\u4ee5\u89c2\u5bdf\u662f\u5426\u8fd0\u884c\u6b63\u786e\n    private void printArray(int num, int[] tail) {\n        System.out.print(\"\u5f53\u524d\u6570\u5b57\uff1a\" + num);\n        System.out.print(\"\\t\u5f53\u524d tail \u6570\u7ec4\uff1a\");\n        int len = tail.length;\n        for (int i = 0; i < len; i++) {\n            if (tail[i] == 0) {\n                break;\n            }\n            System.out.print(tail[i] + \", \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        int[] nums = new int[]{3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12};\n        Solution4 solution4 = new Solution4();\n        int lengthOfLIS = solution4.lengthOfLIS(nums);\n        System.out.println(\"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff1a\" + lengthOfLIS);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0300-longest-increasing-subsequence  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/",
            "text": "307. Range Sum Query - Mutable\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 \u00a0\nnums\n\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15\u00a0\ni\u00a0\n\u5230\u00a0\nj\u00a0\u00a0\n(\ni\n\u00a0\u2264\u00a0\nj\n) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b\u00a0\ni,\u00a0 j\u00a0\n\u4e24\u70b9\u3002\n\n\nupdate(i, val)\n \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a\u00a0\ni\u00a0\n\u7684\u6570\u503c\u66f4\u65b0\u4e3a\u00a0\nval\n\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002\n\n\n\u793a\u4f8b:\n\n\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8\n\n\n\n\u8bf4\u660e:\n\n\n\n\n\u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728\u00a0\nupdate\u00a0\n\u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002\n\n\n\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8c03\u7528\u00a0\nupdate\u00a0\n\u51fd\u6570\u548c\u00a0\nsumRange\u00a0\n\u51fd\u6570\u7684\u6b21\u6570\u662f\u76f8\u7b49\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n307. Range Sum Query - Mutable\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0307-range-sum-query-mutable\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "307. Range Sum Query - Mutable"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/#307-range-sum-query-mutable",
            "text": "",
            "title": "307. Range Sum Query - Mutable"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 \u00a0 nums \uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15\u00a0 i\u00a0 \u5230\u00a0 j\u00a0\u00a0 ( i \u00a0\u2264\u00a0 j ) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b\u00a0 i,\u00a0 j\u00a0 \u4e24\u70b9\u3002  update(i, val)  \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a\u00a0 i\u00a0 \u7684\u6570\u503c\u66f4\u65b0\u4e3a\u00a0 val \uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002  \u793a\u4f8b:  Given nums = [1, 3, 5]\n\nsumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8  \u8bf4\u660e:   \u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728\u00a0 update\u00a0 \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002  \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8c03\u7528\u00a0 update\u00a0 \u51fd\u6570\u548c\u00a0 sumRange\u00a0 \u51fd\u6570\u7684\u6b21\u6570\u662f\u76f8\u7b49\u7684\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 307. Range Sum Query - Mutable   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0307-range-sum-query-mutable/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0307-range-sum-query-mutable  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/",
            "text": "313. Super Ugly Number\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c \nn\n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002\n\n\n\u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u5728\u957f\u5ea6\u4e3a\u00a0\nk\n\u00a0\u7684\u8d28\u6570\u5217\u8868\u00a0\nprimes\n\u00a0\u4e2d\u7684\u6b63\u6574\u6570\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n n = 12, \nprimes\n = \n[2,7,13,19]\n\n\n\u8f93\u51fa:\n 32 \n\n\u89e3\u91ca: \n[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]\n\uff0c\u662f\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684 \u8d28\u6570\u5217\u8868 \nprimes\n = \n[2,7,13,19]\n\u7684\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002\n\n\n\u8bf4\u660e:\n\n\n\n\n1\n\u00a0\u662f\u4efb\u4f55\u7ed9\u5b9a\u00a0\nprimes\n\u00a0\u7684\u8d85\u7ea7\u4e11\u6570\u3002\n\n\n\u00a0\u7ed9\u5b9a\u00a0\nprimes\n\u00a0\u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002\n\n\n0 < \nk\n \u2264 100, 0 < \nn\n \u2264 10\n6\n, 0 < \nprimes[i]\n < 1000 \u3002\n\n\n\u7b2c\u00a0\nn\n\u00a0\u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u7684\u8303\u56f4\u5185\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n313. Super Ugly Number\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n313. \u8d85\u7ea7\u4e11\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        int[] dp = new int[n];\n        int plen = primes.length;\n        if (n <= 0 || plen == 0) {\n            return 0;\n        }\n        int[] indexes = new int[primes.length];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for (int j = 0; j < plen; j++) {\n                dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]);\n            }\n            for (int j = 0; j < plen; j++) {\n                if (dp[i] == dp[indexes[j]] * primes[j]) {\n                    indexes[j]++;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n\n    public static void main(String[] args) {\n        int n = 12;\n        int[] nums = {2, 7, 13, 19};\n        Solution solution = new Solution();\n        int nthSuperUglyNumber = solution.nthSuperUglyNumber(n, nums);\n        System.out.println(nthSuperUglyNumber);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0313-super-ugly-number\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "313. Super Ugly Number"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/#313-super-ugly-number",
            "text": "",
            "title": "313. Super Ugly Number"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c  n  \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002  \u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u5728\u957f\u5ea6\u4e3a\u00a0 k \u00a0\u7684\u8d28\u6570\u5217\u8868\u00a0 primes \u00a0\u4e2d\u7684\u6b63\u6574\u6570\u3002  \u793a\u4f8b:  \u8f93\u5165:  n = 12,  primes  =  [2,7,13,19]  \u8f93\u51fa:  32  \u89e3\u91ca:  [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] \uff0c\u662f\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684 \u8d28\u6570\u5217\u8868  primes  =  [2,7,13,19] \u7684\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002  \u8bf4\u660e:   1 \u00a0\u662f\u4efb\u4f55\u7ed9\u5b9a\u00a0 primes \u00a0\u7684\u8d85\u7ea7\u4e11\u6570\u3002  \u00a0\u7ed9\u5b9a\u00a0 primes \u00a0\u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002  0 <  k  \u2264 100, 0 <  n  \u2264 10 6 , 0 <  primes[i]  < 1000 \u3002  \u7b2c\u00a0 n \u00a0\u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u7684\u8303\u56f4\u5185\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 313. Super Ugly Number   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 313. \u8d85\u7ea7\u4e11\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0313-super-ugly-number/#1",
            "text": "public class Solution {\n\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        int[] dp = new int[n];\n        int plen = primes.length;\n        if (n <= 0 || plen == 0) {\n            return 0;\n        }\n        int[] indexes = new int[primes.length];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for (int j = 0; j < plen; j++) {\n                dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]);\n            }\n            for (int j = 0; j < plen; j++) {\n                if (dp[i] == dp[indexes[j]] * primes[j]) {\n                    indexes[j]++;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n\n    public static void main(String[] args) {\n        int n = 12;\n        int[] nums = {2, 7, 13, 19};\n        Solution solution = new Solution();\n        int nthSuperUglyNumber = solution.nthSuperUglyNumber(n, nums);\n        System.out.println(nthSuperUglyNumber);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0313-super-ugly-number  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0326-power-of-three/",
            "text": "326. Power of Three\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3\u00a0\u7684\u5e42\u6b21\u65b9\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 27\n\n\u8f93\u51fa:\n true\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 0\n\n\u8f93\u51fa:\n false\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n 9\n\n\u8f93\u51fa:\n true\n\n\n\u793a\u4f8b 4:\n\n\n\u8f93\u5165:\n 45\n\n\u8f93\u51fa:\n false\n\n\n\u8fdb\u9636\uff1a\n\n\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n326. Power of Three\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n326. 3\u7684\u5e42\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u8fd8\u86ee\u591a\u7684\uff0c\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\n\n\n1\u3001\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u5217\u51fa\u6765\uff0c\u653e\u5165\u54c8\u5e0c\u8868\u4e2d\u5224\u65ad\uff1b\n\n2\u3001\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution {\n\n    // \u6253\u8868\u6cd5\n    public boolean isPowerOfThree(int n) {\n        int[] nums = new int[]{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467};\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return set.contains(n);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> res = new ArrayList<>();\n        int n = 1;\n        System.out.println(Integer.MAX_VALUE);\n        while (n > 0 && n < 2147483647) {\n            res.add(n);\n            n = n * 3;\n        }\n        System.out.println(res);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    /**\n     * \u56e0\u4e3a 3 \u662f\u8d28\u6570\uff0c\u7528 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u503c\u53bb\u6574\u9664\u8fd9\u4e2a\u5f85\u68c0\u6d4b\u7684\u6570\u5373\u53ef\n     *\n     * @param n\n     * @return\n     */\n    public boolean isPowerOfThree(int n) {\n        return n > 0 && 1162261467 % n == 0;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\n\n\npublic class Solution3 {\n\n    /**\n     * \u8f6c\u6362\u6210\u4e00\u4e2a 3 \u8fdb\u5236\u7684\u6570\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e00\u5b9a\u662f\u4ee5 1 \u5f00\u5934\uff0c\u540e\u9762\u5168\u90e8\u662f 0\n     *\n     * @param n\n     * @return\n     */\n    public boolean isPowerOfThree(int n) {\n        return n > 0 && Integer.toString(n, 3).matches(\"^10*$\");\n    }\n\n    public static void main(String[] args) {\n        int num = 27;\n        System.out.println(Integer.toString(num, 3));\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0326-power-of-three\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "326. Power of Three"
        },
        {
            "location": "/leetcode-0326-power-of-three/#326-power-of-three",
            "text": "",
            "title": "326. Power of Three"
        },
        {
            "location": "/leetcode-0326-power-of-three/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3\u00a0\u7684\u5e42\u6b21\u65b9\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  27 \u8f93\u51fa:  true  \u793a\u4f8b 2:  \u8f93\u5165:  0 \u8f93\u51fa:  false  \u793a\u4f8b 3:  \u8f93\u5165:  9 \u8f93\u51fa:  true  \u793a\u4f8b 4:  \u8f93\u5165:  45 \u8f93\u51fa:  false  \u8fdb\u9636\uff1a \n\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 326. Power of Three   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 326. 3\u7684\u5e42   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0326-power-of-three/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u8fd8\u86ee\u591a\u7684\uff0c\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002  1\u3001\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u5217\u51fa\u6765\uff0c\u653e\u5165\u54c8\u5e0c\u8868\u4e2d\u5224\u65ad\uff1b \n2\u3001",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0326-power-of-three/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0326-power-of-three/#1",
            "text": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Solution {\n\n    // \u6253\u8868\u6cd5\n    public boolean isPowerOfThree(int n) {\n        int[] nums = new int[]{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467};\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        return set.contains(n);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> res = new ArrayList<>();\n        int n = 1;\n        System.out.println(Integer.MAX_VALUE);\n        while (n > 0 && n < 2147483647) {\n            res.add(n);\n            n = n * 3;\n        }\n        System.out.println(res);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0326-power-of-three/#2",
            "text": "public class Solution2 {\n\n    /**\n     * \u56e0\u4e3a 3 \u662f\u8d28\u6570\uff0c\u7528 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u503c\u53bb\u6574\u9664\u8fd9\u4e2a\u5f85\u68c0\u6d4b\u7684\u6570\u5373\u53ef\n     *\n     * @param n\n     * @return\n     */\n    public boolean isPowerOfThree(int n) {\n        return n > 0 && 1162261467 % n == 0;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0326-power-of-three/#3",
            "text": "public class Solution3 {\n\n    /**\n     * \u8f6c\u6362\u6210\u4e00\u4e2a 3 \u8fdb\u5236\u7684\u6570\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e00\u5b9a\u662f\u4ee5 1 \u5f00\u5934\uff0c\u540e\u9762\u5168\u90e8\u662f 0\n     *\n     * @param n\n     * @return\n     */\n    public boolean isPowerOfThree(int n) {\n        return n > 0 && Integer.toString(n, 3).matches(\"^10*$\");\n    }\n\n    public static void main(String[] args) {\n        int num = 27;\n        System.out.println(Integer.toString(num, 3));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0326-power-of-three  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/",
            "text": "328. Odd Even Linked List\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\n\n\n\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 1->2->3->4->5->NULL\n\n\u8f93\u51fa:\n 1->3->5->2->4->NULL\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 2->1->3->5->6->4->7->NULL \n\n\u8f93\u51fa:\n 2->3->6->7->1->5->4->NULL\n\n\n\u8bf4\u660e:\n\n\n\n\n\u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\n\n\n\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n328. Odd Even Linked List\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n328. \u5947\u5076\u94fe\u8868\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42\n\u539f\u5730\u7b97\u6cd5\n\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 \nLeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \n \u5b8c\u6210\u3002  \n\n\n\u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\n\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n\n\u6ce8\u610f2\uff1a\u5728 \nwhile\n \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 \nnext\n \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a \nnull\n \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 \nnext\n \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09\n\n\n\n\n\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n\n\u6ce8\u610f2\uff1a\u5728 \nwhile\n \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 \nnext\n \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a \nnull\n \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 \nnext\n \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def oddEvenList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None or head.next is None:\n            return head\n\n        # odd \u5947\u6570\n        odd_head = head\n        even_head = head.next\n\n        odd_cur = odd_head\n        even_cur = even_head\n\n        while even_cur and even_cur.next:\n            odd_cur.next = odd_cur.next.next\n            even_cur.next = even_cur.next.next\n\n            odd_cur = odd_cur.next\n            even_cur = even_cur.next\n\n        odd_cur.next = even_head\n        return odd_head\n\n\n\n\n\n\u601d\u8def\u6982\u8ff0\uff1a\n\n\n\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002\n\n\n\u6211\u7684\u89e3\u7b54\uff1a\n\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = oddHead.next;\n        ListNode oddNode = oddHead;\n        ListNode evenNode = evenHead;\n        ListNode currentNode = evenHead.next;\n        boolean isodd = true;\n        while (currentNode != null) {\n            if (isodd) {\n                oddNode.next = currentNode;\n                oddNode = currentNode;\n            } else {\n                evenNode.next = currentNode;\n                evenNode = currentNode;\n            }\n            isodd = !isodd;\n            currentNode = currentNode.next;\n        }\n        isodd = !isodd;\n        if (isodd) {\n            oddNode.next = evenHead;\n            evenNode.next = null;\n        } else {\n            oddNode.next = evenHead;\n        }\n        return oddHead;\n    }\n\n\n    public static void main(String[] args) {\n        ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5});\n        Solution solution = new Solution();\n        ListNode result1 = solution.oddEvenList(node1);\n        printLinkedList(result1);\n\n        System.out.println(\"------\");\n\n\n        ListNode node2 = createListNode(new int[]{1, 2, 3, 4});\n        ListNode result2 = solution.oddEvenList(node2);\n        printLinkedList(result2);\n\n        System.out.println(\"------\");\n\n\n        ListNode node3 = createListNode(new int[]{1, 2});\n        ListNode result3 = solution.oddEvenList(node3);\n        printLinkedList(result3);\n    }\n\n    public static ListNode createListNode(int[] nums) {\n        if (nums.length == 0) {\n            return null;\n        }\n        ListNode head = new ListNode(nums[0]);\n        ListNode curNode = head;\n        for (int i = 1; i < nums.length; i++) {\n            curNode.next = new ListNode(nums[i]);\n            curNode = curNode.next;\n        }\n        return head;\n    }\n\n    // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\n    public static void printLinkedList(ListNode head) {\n        ListNode curNode = head;\n        while (curNode != null) {\n            System.out.printf(\"%s\\t\", curNode.val);\n            curNode = curNode.next;\n        }\n        System.out.printf(\"null\");\n    }\n}\n\n\n\n\n\u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475\n\u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a\n\u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a\n\n\npublic class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        ListNode oddNode = head;\n        ListNode evenNode = head.next;\n        ListNode evenHead = evenNode;\n        while (evenNode != null && evenNode.next != null) {\n            oddNode.next = evenNode.next;\n            oddNode = oddNode.next;\n            evenNode.next = oddNode.next;\n            evenNode = evenNode.next;\n        }\n        oddNode.next = evenHead;\n        return head;\n    }\n\n\n    public static void main(String[] args) {\n        ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5});\n        Solution2 solution = new Solution2();\n        ListNode result1 = solution.oddEvenList(node1);\n        printLinkedList(result1);\n\n        System.out.println(\"------\");\n\n\n        ListNode node2 = createListNode(new int[]{1, 2, 3, 4});\n        ListNode result2 = solution.oddEvenList(node2);\n        printLinkedList(result2);\n\n        System.out.println(\"------\");\n\n\n        ListNode node3 = createListNode(new int[]{1, 2});\n        ListNode result3 = solution.oddEvenList(node3);\n        printLinkedList(result3);\n    }\n\n    public static ListNode createListNode(int[] nums) {\n        if (nums.length == 0) {\n            return null;\n        }\n        ListNode head = new ListNode(nums[0]);\n        ListNode curNode = head;\n        for (int i = 1; i < nums.length; i++) {\n            curNode.next = new ListNode(nums[i]);\n            curNode = curNode.next;\n        }\n        return head;\n    }\n\n    // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\n    public static void printLinkedList(ListNode head) {\n        ListNode curNode = head;\n        while (curNode != null) {\n            System.out.printf(\"%s\\t\", curNode.val);\n            curNode = curNode.next;\n        }\n        System.out.printf(\"null\");\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#328-odd-even-linked-list",
            "text": "",
            "title": "328. Odd Even Linked List"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002  \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  1->2->3->4->5->NULL \u8f93\u51fa:  1->3->5->2->4->NULL  \u793a\u4f8b 2:  \u8f93\u5165:  2->1->3->5->6->4->7->NULL  \u8f93\u51fa:  2->3->6->7->1->5->4->NULL  \u8bf4\u660e:   \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002  \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002    \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002   \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528  LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2   \u5b8c\u6210\u3002    \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#1",
            "text": "Java \u5199\u6cd5\uff1a  class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public ListNode(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = nums[0];\n        ListNode curr = this;\n        for (int i = 1; i < nums.length; i++) {\n            curr.next = new ListNode(nums[i]);\n            curr = curr.next;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        ListNode cur = this;\n        while (cur != null) {\n            s.append(cur.val + \" -> \");\n            cur = cur.next;\n        }\n        s.append(\"NULL\");\n        return s.toString();\n    }\n}\n\npublic class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        ListNode dummyNodeOdd = new ListNode(-1);\n        ListNode dummyNodeEven = new ListNode(-1);\n        ListNode curOdd = dummyNodeOdd;\n        ListNode curEven = dummyNodeEven;\n        int count = 0;\n        while (head != null) {\n            if (count % 2 == 0) {\n                curOdd.next = head;\n                curOdd = curOdd.next;\n            } else {\n                curEven.next = head;\n                curEven = curEven.next;\n            }\n            head = head.next;\n            count++;\n        }\n        curOdd.next = dummyNodeEven.next;\n        // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\n        curEven.next = null;\n        return dummyNodeOdd.next;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        ListNode head = new ListNode(nums);\n        Solution solution = new Solution();\n        ListNode oddEvenList = solution.oddEvenList(head);\n        System.out.println(oddEvenList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2",
            "text": "\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b  \u6ce8\u610f2\uff1a\u5728  while  \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684  next  \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a  null  \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8  next  \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a    public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0328-odd-even-linked-list/#2_1",
            "text": "\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b  \u6ce8\u610f2\uff1a\u5728  while  \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684  next  \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a  null  \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8  next  \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a    public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = head.next;\n\n        ListNode oddCur = oddHead;\n        ListNode evenCur = evenHead;\n        // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519\n        while (evenCur != null && evenCur.next != null) {\n            oddCur.next = oddCur.next.next;\n            evenCur.next = evenCur.next.next;\n\n            oddCur = oddCur.next;\n            evenCur = evenCur.next;\n        }\n        oddCur.next = evenHead;\n        return oddHead;\n    }\n}  Python \u5199\u6cd5\uff1a  # Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def oddEvenList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n\n        if head is None or head.next is None:\n            return head\n\n        # odd \u5947\u6570\n        odd_head = head\n        even_head = head.next\n\n        odd_cur = odd_head\n        even_cur = even_head\n\n        while even_cur and even_cur.next:\n            odd_cur.next = odd_cur.next.next\n            even_cur.next = even_cur.next.next\n\n            odd_cur = odd_cur.next\n            even_cur = even_cur.next\n\n        odd_cur.next = even_head\n        return odd_head  \u601d\u8def\u6982\u8ff0\uff1a  \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002  \u6211\u7684\u89e3\u7b54\uff1a  class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode oddHead = head;\n        ListNode evenHead = oddHead.next;\n        ListNode oddNode = oddHead;\n        ListNode evenNode = evenHead;\n        ListNode currentNode = evenHead.next;\n        boolean isodd = true;\n        while (currentNode != null) {\n            if (isodd) {\n                oddNode.next = currentNode;\n                oddNode = currentNode;\n            } else {\n                evenNode.next = currentNode;\n                evenNode = currentNode;\n            }\n            isodd = !isodd;\n            currentNode = currentNode.next;\n        }\n        isodd = !isodd;\n        if (isodd) {\n            oddNode.next = evenHead;\n            evenNode.next = null;\n        } else {\n            oddNode.next = evenHead;\n        }\n        return oddHead;\n    }\n\n\n    public static void main(String[] args) {\n        ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5});\n        Solution solution = new Solution();\n        ListNode result1 = solution.oddEvenList(node1);\n        printLinkedList(result1);\n\n        System.out.println(\"------\");\n\n\n        ListNode node2 = createListNode(new int[]{1, 2, 3, 4});\n        ListNode result2 = solution.oddEvenList(node2);\n        printLinkedList(result2);\n\n        System.out.println(\"------\");\n\n\n        ListNode node3 = createListNode(new int[]{1, 2});\n        ListNode result3 = solution.oddEvenList(node3);\n        printLinkedList(result3);\n    }\n\n    public static ListNode createListNode(int[] nums) {\n        if (nums.length == 0) {\n            return null;\n        }\n        ListNode head = new ListNode(nums[0]);\n        ListNode curNode = head;\n        for (int i = 1; i < nums.length; i++) {\n            curNode.next = new ListNode(nums[i]);\n            curNode = curNode.next;\n        }\n        return head;\n    }\n\n    // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\n    public static void printLinkedList(ListNode head) {\n        ListNode curNode = head;\n        while (curNode != null) {\n            System.out.printf(\"%s\\t\", curNode.val);\n            curNode = curNode.next;\n        }\n        System.out.printf(\"null\");\n    }\n}  \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475\n\u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a\n\u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a  public class Solution2 {\n\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        ListNode oddNode = head;\n        ListNode evenNode = head.next;\n        ListNode evenHead = evenNode;\n        while (evenNode != null && evenNode.next != null) {\n            oddNode.next = evenNode.next;\n            oddNode = oddNode.next;\n            evenNode.next = oddNode.next;\n            evenNode = evenNode.next;\n        }\n        oddNode.next = evenHead;\n        return head;\n    }\n\n\n    public static void main(String[] args) {\n        ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5});\n        Solution2 solution = new Solution2();\n        ListNode result1 = solution.oddEvenList(node1);\n        printLinkedList(result1);\n\n        System.out.println(\"------\");\n\n\n        ListNode node2 = createListNode(new int[]{1, 2, 3, 4});\n        ListNode result2 = solution.oddEvenList(node2);\n        printLinkedList(result2);\n\n        System.out.println(\"------\");\n\n\n        ListNode node3 = createListNode(new int[]{1, 2});\n        ListNode result3 = solution.oddEvenList(node3);\n        printLinkedList(result3);\n    }\n\n    public static ListNode createListNode(int[] nums) {\n        if (nums.length == 0) {\n            return null;\n        }\n        ListNode head = new ListNode(nums[0]);\n        ListNode curNode = head;\n        for (int i = 1; i < nums.length; i++) {\n            curNode.next = new ListNode(nums[i]);\n            curNode = curNode.next;\n        }\n        return head;\n    }\n\n    // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\n    public static void printLinkedList(ListNode head) {\n        ListNode curNode = head;\n        while (curNode != null) {\n            System.out.printf(\"%s\\t\", curNode.val);\n            curNode = curNode.next;\n        }\n        System.out.printf(\"null\");\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/",
            "text": "336. Palindrome Pairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u7ec4\n\u72ec\u7279\n\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u5728\u7ed9\u5b9a\u5217\u8868\u4e2d\n\u4e0d\u540c\u00a0\n\u7684\u7d22\u5f15\u5bf9\n(i, j)\n,\u4f7f\u5f97\u5173\u8054\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u4f8b\u5982\uff1a\nwords[i] + words[j]\n\u5f62\u6210\u56de\u6587\u3002\n\n\n\u793a\u4f8b 1:\n\n\u7ed9\u5b9a \nwords\n = \n[\"bat\", \"tab\", \"cat\"]\n\n\u8fd4\u56de \n[[0, 1], [1, 0]]\n\n\u56de\u6587\u662f \n[\"battab\", \"tabbat\"]\n\n\n\u793a\u4f8b 2:\n\n\u7ed9\u5b9a \nwords\n = \n[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]\n\n\u8fd4\u56de \n[[0, 1], [1, 0], [3, 2], [2, 4]]\n\n\u56de\u6587\u662f \n[\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]\n\n\n\u8d21\u732e\u8005:\n\n\u7279\u522b\u611f\u8c22 \n@dietpepsi\n \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u63d0\u4f9b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n336. Palindrome Pairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n336. \u56de\u6587\u5bf9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0336-palindrome-pairs\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "336. Palindrome Pairs"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/#336-palindrome-pairs",
            "text": "",
            "title": "336. Palindrome Pairs"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u7ec4 \u72ec\u7279 \u7684\u5355\u8bcd\uff0c \u627e\u51fa\u5728\u7ed9\u5b9a\u5217\u8868\u4e2d \u4e0d\u540c\u00a0 \u7684\u7d22\u5f15\u5bf9 (i, j) ,\u4f7f\u5f97\u5173\u8054\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u4f8b\u5982\uff1a words[i] + words[j] \u5f62\u6210\u56de\u6587\u3002  \u793a\u4f8b 1: \n\u7ed9\u5b9a  words  =  [\"bat\", \"tab\", \"cat\"] \n\u8fd4\u56de  [[0, 1], [1, 0]] \n\u56de\u6587\u662f  [\"battab\", \"tabbat\"]  \u793a\u4f8b 2: \n\u7ed9\u5b9a  words  =  [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"] \n\u8fd4\u56de  [[0, 1], [1, 0], [3, 2], [2, 4]] \n\u56de\u6587\u662f  [\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]  \u8d21\u732e\u8005: \n\u7279\u522b\u611f\u8c22  @dietpepsi  \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u63d0\u4f9b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 336. Palindrome Pairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 336. \u56de\u6587\u5bf9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0336-palindrome-pairs/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0336-palindrome-pairs  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/",
            "text": "337. House Robber III\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5c0f\u5077\u53c8\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u70b9\u3002 \u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u79f0\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u6839\u90e8\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u7236\u623f\u5b50\u3002 \u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u5f62\u6210\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002\n\n\n\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5c0f\u5077\u4e00\u665a\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002\n\n\n\u793a\u4f8b 1:\n\n\n     \n3\n\n    / \\\n   2   3\n    \\   \\ \n     \n3   1\n\n\n\n\n\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = \n3\n + \n3\n + \n1\n = \n7\n.\n\n\n\u793a\u4f8b 2:\n\n\n     3\n    / \\\n   \n4\n   \n5\n\n  / \\   \\ \n 1   3   1\n\n\n\n\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u00a0= \n4\n + \n5\n = \n9\n.\n\n\n\u81f4\u8c22:\n\n\u7279\u522b\u611f\u8c22\u00a0\n@dietpepsi\n\u00a0\u6dfb\u52a0\u6b64\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n337. House Robber III\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n337. \u6253\u5bb6\u52ab\u820d III\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int rob(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int val = root.val;\n\n        if(root.left!=null){\n            val+= rob(root.left.left) + rob(root.left.right);\n        }\n\n        if(root.right!=null){\n            val+= rob(root.right.left) + rob(root.right.right);\n        }\n        return Math.max(val,rob(root.left) + rob(root.right));\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0337-house-robber-iii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "337. House Robber III"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/#337-house-robber-iii",
            "text": "",
            "title": "337. House Robber III"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5c0f\u5077\u53c8\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u70b9\u3002 \u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u79f0\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u6839\u90e8\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u7236\u623f\u5b50\u3002 \u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u5f62\u6210\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002  \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5c0f\u5077\u4e00\u665a\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002  \u793a\u4f8b 1:        3 \n    / \\\n   2   3\n    \\   \\ \n      3   1   \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d =  3  +  3  +  1  =  7 .  \u793a\u4f8b 2:       3\n    / \\\n    4     5 \n  / \\   \\ \n 1   3   1  \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u00a0=  4  +  5  =  9 .  \u81f4\u8c22: \n\u7279\u522b\u611f\u8c22\u00a0 @dietpepsi \u00a0\u6dfb\u52a0\u6b64\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002   \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 337. House Robber III   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 337. \u6253\u5bb6\u52ab\u820d III   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0337-house-robber-iii/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public int rob(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int val = root.val;\n\n        if(root.left!=null){\n            val+= rob(root.left.left) + rob(root.left.right);\n        }\n\n        if(root.right!=null){\n            val+= rob(root.right.left) + rob(root.right.right);\n        }\n        return Math.max(val,rob(root.left) + rob(root.right));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0337-house-robber-iii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/",
            "text": "341. Flatten Nested List Iterator\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002\n\n\n\u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002\n\n\n\u793a\u4f8b 1:\n\n\u7ed9\u5b9a\u5217\u8868\u00a0\n[[1,1],2,[1,1]]\n,\n\n\n\u901a\u8fc7\u91cd\u590d\u8c03\u7528\u00a0\nnext \n\u76f4\u5230\u00a0\nhasNex\nt \u8fd4\u56defalse\uff0c\nnext\u00a0\n\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: \n[1,1,2,1,1]\n.\n\n\n\u793a\u4f8b\u00a02:\n\n\u7ed9\u5b9a\u5217\u8868\u00a0\n[1,[4,[6]]]\n,\n\n\n\u901a\u8fc7\u91cd\u590d\u8c03\u7528\u00a0\nnext\u00a0\n\u76f4\u5230\u00a0\nhasNex\nt \u8fd4\u56defalse\uff0c\nnext\u00a0\n\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: \n[1,4,6]\n.\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n341. Flatten Nested List Iterator\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nPython3 \u5199\u6cd5\uff1a\n\n\n# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        self.stack = nestedList[::-1]\n        # \u4e34\u65f6\u5b58\u653e\u503c\u7684\u5730\u65b9\n        self.value = None\n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n        result = self.hasNext()\n\n        if result:\n            ret = self.value\n            self.value = None\n            return ret\n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n        if self.value is not None:\n            # \u5c31\u4e0d\u6267\u884c\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u88ab\u53d6\u51fa\u6765\n            return True\n\n        # \u5982\u679c self.value \u4e3a None \u7684\u8bdd\n        # \u5c31\u8981\u4ece stack \u4e2d\u5f39\u51fa\u5143\u7d20\u4e86\n\n        while self.stack:\n            top = self.stack.pop()\n            # \u5982\u679c\u6808\u4e2d\u6709\u5143\u7d20\uff0c\u770b\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\n            if top.isInteger():\n                # \u662f\u6570\u5b57\uff0c\u5c31\u653e\u5728\u4e34\u65f6\u53d8\u91cf\u4e0a\n                self.value = top.getInteger()\n                return True\n            else:\n                self.stack.extend(top.getList()[::-1])\n        return False\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0341-flatten-nested-list-iterator\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "341. Flatten Nested List Iterator"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/#341-flatten-nested-list-iterator",
            "text": "",
            "title": "341. Flatten Nested List Iterator"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002  \u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002  \u793a\u4f8b 1: \n\u7ed9\u5b9a\u5217\u8868\u00a0 [[1,1],2,[1,1]] ,  \u901a\u8fc7\u91cd\u590d\u8c03\u7528\u00a0 next  \u76f4\u5230\u00a0 hasNex t \u8fd4\u56defalse\uff0c next\u00a0 \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f:  [1,1,2,1,1] .  \u793a\u4f8b\u00a02: \n\u7ed9\u5b9a\u5217\u8868\u00a0 [1,[4,[6]]] ,  \u901a\u8fc7\u91cd\u590d\u8c03\u7528\u00a0 next\u00a0 \u76f4\u5230\u00a0 hasNex t \u8fd4\u56defalse\uff0c next\u00a0 \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f:  [1,4,6] .    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 341. Flatten Nested List Iterator   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0341-flatten-nested-list-iterator/#1",
            "text": "Python3 \u5199\u6cd5\uff1a  # \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        self.stack = nestedList[::-1]\n        # \u4e34\u65f6\u5b58\u653e\u503c\u7684\u5730\u65b9\n        self.value = None\n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n        result = self.hasNext()\n\n        if result:\n            ret = self.value\n            self.value = None\n            return ret\n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n        if self.value is not None:\n            # \u5c31\u4e0d\u6267\u884c\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u88ab\u53d6\u51fa\u6765\n            return True\n\n        # \u5982\u679c self.value \u4e3a None \u7684\u8bdd\n        # \u5c31\u8981\u4ece stack \u4e2d\u5f39\u51fa\u5143\u7d20\u4e86\n\n        while self.stack:\n            top = self.stack.pop()\n            # \u5982\u679c\u6808\u4e2d\u6709\u5143\u7d20\uff0c\u770b\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\n            if top.isInteger():\n                # \u662f\u6570\u5b57\uff0c\u5c31\u653e\u5728\u4e34\u65f6\u53d8\u91cf\u4e0a\n                self.value = top.getInteger()\n                return True\n            else:\n                self.stack.extend(top.getList()[::-1])\n        return False\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0341-flatten-nested-list-iterator  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0342-power-of-four/",
            "text": "342. Power of Four\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 (32\u4f4d\u6709\u7b26\u6574\u6570\u578b)\uff0c\u8bf7\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u662f\u5426\u662f4\u7684\u5e42\u3002\n\n\n\u793a\u4f8b:\n\n\u5f53 num = 16 \u65f6 \uff0c\u8fd4\u56de true \u3002 \u5f53 num = 5\u65f6\uff0c\u8fd4\u56de false\u3002\n\n\n\u95ee\u9898\u8fdb\u9636\uff1a\n\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af/\u9012\u5f52\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\n\n\n\u81f4\u8c22:\n\n\u7279\u522b\u611f\u8c22 \n@yukuairoy \n\u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n342. Power of Four\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n342. 4\u7684\u5e42\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n1\u3001\u5217\u51fa $4^1$\u3001$4^1$\u3001$4^2$\u3001$4^3$ \u7b49\u7b49\uff0c\u627e\u51fa\u89c4\u5f8b\uff1b\n\n\n$4^1 = 2^2 = 2^2$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100$\uff0c$1$ \u540e\u9762 $2$ \u4e2a\u201c$0$\u201d\uff1b\n\n$4^2 = (2^2)^2 = 2^4$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000$\uff0c$1$ \u540e\u9762 $4$ \u4e2a\u201c$0$\u201d\uff1b\n\n$4^3 = (2^2)^3 = 2^6$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $1000000$\uff0c$1$ \u540e\u9762 $6$ \u4e2a\u201c$0$\u201d\uff1b\n\n$4^4 = (2^2)^4 = 2^8$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100000000$\uff0c$1$ \u540e\u9762 $8$ \u4e2a\u201c$0$\u201d\uff1b\n\n$4^5 = (2^2)^5 = 2^10$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000000000$\uff0c$1$ \u540e\u9762 $10$ \u4e2a\u201c$0$\u201d\u3002  \n\n\n2\u3001\u5982\u679c\u662f\u8d1f\u6570\uff0c\u76f4\u63a5\u8fd4\u56de false\uff1b\n3\u3001\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u4e0e\u8fd0\u7b97\u53bb\u505a\u5224\u65ad\uff1b\n4\u3001\u4e0d\u8981\u5fd8\u8bb0\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u4ee5\u540e\uff0c\u540e\u9762\u8ddf\u7684 0 \u662f\u5076\u6570\uff0c\u6240\u4ee5\u539f\u6765\u7684\u4f4d\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002\n\n\n\u4e0b\u9762\u7684\u89e3\u6cd5\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\u3002\n\n\npublic boolean isPowerOfFour(int num) {\n    return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0;\n}\n\n\n\n\n\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a\n1\u3001\nnum > 0\n \u5f88\u597d\u7406\u89e3\uff0c4 \u7684\u6574\u6570\u65b9\u5e42\u4e00\u5b9a\u662f\u6b63\u6570\uff1b\n\n2\u3001\nnum & (num - 1)\n \u8fd9\u4e2a\u8fd0\u7b97\u80fd\u591f\u5c06 num \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a \"1\" \u53d8\u6210 \"0\"\uff0c\u6839\u636e 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\uff0c\u8fd9\u4e2a\u6570\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u6570\u4f4d\u4e0a\u662f\u201c1\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u4f4d\u662f\u6700\u9ad8\u4f4d\uff0c\u56e0\u6b64 \nnum & (num - 1)\n \u4e00\u5b9a\u662f 0\uff1b\n\n3\u3001\n\u5728\u6ee1\u8db3\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \u7684\u524d\u63d0\u4e0b\n\uff0c $num - 1$ \u5168\u90e8\u6570\u4f4d\u4e0a\u53ea\u6709 1 (\u5e76\u4e14\u662f\u5076\u6570\u4e2a)\uff0c\u5e76\u4e14\u6bcf\u9694\u4e24\u4e2a\u6570\u4f4d\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u516c\u56e0\u5f0f\uff0c\u4e14\u4e00\u5b9a\u4f1a\u6709\u56e0\u5b50 \"11\"\uff08\u5341\u8fdb\u5236\u4e3a 3 \uff09\uff0c\u56e0\u6b64\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u51fa\u516c\u56e0\u5b50 3\uff0c\u4f8b\u5982\u4e8c\u8fdb\u5236\u6570 $111111$ \uff0c\u672c\u6765\u53ef\u4ee5\u8868\u793a\u6210\uff1a\n\n\n$$\n(111111)_2 = 1 \\times 2^5 +  1 \\times 2^4 + 1 \\times 2^3 +  1 \\times 2^2 +  1 \\times 2^1 +  1 \\times 2^0 \n$$\n\n\n\u5176\u4e2d $1 \\times 2^3 +  1 \\times 2^2$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a\n\n\n$$\n1 \\times 2^3 +  1 \\times 2^2 = 2^2 \\times (1 \\times 2^1 +  1 \\times 2^0 )\n$$\n\n\n\u5176\u4e2d $1 \\times 2^5 +  1 \\times 2^4$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a\n\n\n$$\n1 \\times 2^5 +  1 \\times 2^4 = 2^2 \\times (1 \\times 2^3 +  1 \\times 2^2 )\n$$\n\n\n\u8fd9\u79cd\u505a\u6cd5\u53ef\u4ee5\u9012\u5f52\u4e0b\u53bb\uff0c\u5f97\u5230\n\n\n$$\n(111111)_2 = 1 \\times 2^5 +  1 \\times 2^4 + 1 \\times 2^3 +  1 \\times 2^2 +  (1 \\times 2^1 +  1 \\times 2^0) \n$$\n\n\n$$\n(111111)_2 =  2^2 \\times [2^2 \\times (1 \\times 2^1 +  1 \\times 2^0)] +  2^2 \\times (1 \\times 2^1 +  1 \\times 2^0)  +  (1 \\times 2^1 +  1 \\times 2^0)\n$$\n\n\n$$\n(111111)_2 =  [2^2 \\times 2^2 + 2^2 + 1]  \\times (1 \\times 2^1 +  1 \\times 2^0) \n$$\n\n\n$$\n(111111)_2 =  [2^2 \\times 2^2 + 2^2 + 1] \\times 3\n$$\n\n\n\u4ee5\u4e0a\u7684 3 \u4e2a\u6761\u4ef6\u5747\u4e3a\u4e00\u4e2a\u6574\u6570\u4e3a 4 \u7684\u65b9\u5e42\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u540c\u65f6\u6210\u7acb\u5c31\u6210\u4e3a\u4e86\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5faa\u73af\u8fdb\u884c\u5224\u65ad\u3002\n\n\npublic boolean isPowerOfFour(int num) {\n    if (num <= 0) {\n        return false;\n    }\n    while (num % 4 == 0) {\n        num /= 4;\n    }\n    return num == 1;\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u89c2\u5bdf 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\u3002\n\n\npublic class Solution {\n\n    public boolean isPowerOfFour(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        String binaryString = Integer.toBinaryString(num);\n        // System.out.println(binaryString);\n        int len = binaryString.length();\n        return len % 2 == 1 && (num & 1 << (len - 1)) == num;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        boolean powerOfFour = solution.isPowerOfFour(-2147483648);\n        System.out.println(powerOfFour);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u5145\u5206\u6316\u6398\u6570\u5b66\u6027\u8d28\u3002\n\n\npublic class Solution2 {\n\n    public boolean isPowerOfFour(int num) {\n        return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0342-power-of-four\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }\n\n\n\n\n\nMathJax.Hub.Config({\ntex2jax: {\n  inlineMath: [['$','$'], ['\\\\(','\\\\)']],\n  processEscapes: true\n  },\ndisplayAlign : \"left\",\nTeX: {\n        equationNumbers: {\n            autoNumber: \"all\",\n            useLabelIds: true\n        }\n    },\n    \"HTML-CSS\": {\n        linebreaks: {\n            automatic: true\n        },\n        scale: 100,\n        styles: {\n          \".MathJax_Display\": {\n            \"text-align\": \"left\",\n            \"width\" : \"auto\",\n            \"margin\": \"10px 0px 10px 0px !important\",\n            \"background-color\": \"#f5f5f5 !important\",\n            \"border-radius\": \"3px !important\",\n            border:  \"1px solid #ccc !important\",\n            padding: \"5px 5px 5px 5px !important\"\n          },\n          \".MathJax\": {\n            \"background-color\": \"#f5f5f5 !important\",\n            padding: \"2px 2px 2px 2px !important\"\n          }\n        }\n    },\n    SVG: {\n        linebreaks: {\n            automatic: true\n        }\n    }\n});",
            "title": "342. Power of Four"
        },
        {
            "location": "/leetcode-0342-power-of-four/#342-power-of-four",
            "text": "",
            "title": "342. Power of Four"
        },
        {
            "location": "/leetcode-0342-power-of-four/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 (32\u4f4d\u6709\u7b26\u6574\u6570\u578b)\uff0c\u8bf7\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u662f\u5426\u662f4\u7684\u5e42\u3002  \u793a\u4f8b: \n\u5f53 num = 16 \u65f6 \uff0c\u8fd4\u56de true \u3002 \u5f53 num = 5\u65f6\uff0c\u8fd4\u56de false\u3002  \u95ee\u9898\u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af/\u9012\u5f52\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f  \u81f4\u8c22: \n\u7279\u522b\u611f\u8c22  @yukuairoy  \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 342. Power of Four   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 342. 4\u7684\u5e42   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0342-power-of-four/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  1\u3001\u5217\u51fa $4^1$\u3001$4^1$\u3001$4^2$\u3001$4^3$ \u7b49\u7b49\uff0c\u627e\u51fa\u89c4\u5f8b\uff1b  $4^1 = 2^2 = 2^2$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100$\uff0c$1$ \u540e\u9762 $2$ \u4e2a\u201c$0$\u201d\uff1b \n$4^2 = (2^2)^2 = 2^4$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000$\uff0c$1$ \u540e\u9762 $4$ \u4e2a\u201c$0$\u201d\uff1b \n$4^3 = (2^2)^3 = 2^6$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $1000000$\uff0c$1$ \u540e\u9762 $6$ \u4e2a\u201c$0$\u201d\uff1b \n$4^4 = (2^2)^4 = 2^8$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100000000$\uff0c$1$ \u540e\u9762 $8$ \u4e2a\u201c$0$\u201d\uff1b \n$4^5 = (2^2)^5 = 2^10$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000000000$\uff0c$1$ \u540e\u9762 $10$ \u4e2a\u201c$0$\u201d\u3002    2\u3001\u5982\u679c\u662f\u8d1f\u6570\uff0c\u76f4\u63a5\u8fd4\u56de false\uff1b\n3\u3001\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u4e0e\u8fd0\u7b97\u53bb\u505a\u5224\u65ad\uff1b\n4\u3001\u4e0d\u8981\u5fd8\u8bb0\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u4ee5\u540e\uff0c\u540e\u9762\u8ddf\u7684 0 \u662f\u5076\u6570\uff0c\u6240\u4ee5\u539f\u6765\u7684\u4f4d\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002  \u4e0b\u9762\u7684\u89e3\u6cd5\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\u3002  public boolean isPowerOfFour(int num) {\n    return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0;\n}  \u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a\n1\u3001 num > 0  \u5f88\u597d\u7406\u89e3\uff0c4 \u7684\u6574\u6570\u65b9\u5e42\u4e00\u5b9a\u662f\u6b63\u6570\uff1b \n2\u3001 num & (num - 1)  \u8fd9\u4e2a\u8fd0\u7b97\u80fd\u591f\u5c06 num \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a \"1\" \u53d8\u6210 \"0\"\uff0c\u6839\u636e 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\uff0c\u8fd9\u4e2a\u6570\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u6570\u4f4d\u4e0a\u662f\u201c1\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u4f4d\u662f\u6700\u9ad8\u4f4d\uff0c\u56e0\u6b64  num & (num - 1)  \u4e00\u5b9a\u662f 0\uff1b \n3\u3001 \u5728\u6ee1\u8db3\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \u7684\u524d\u63d0\u4e0b \uff0c $num - 1$ \u5168\u90e8\u6570\u4f4d\u4e0a\u53ea\u6709 1 (\u5e76\u4e14\u662f\u5076\u6570\u4e2a)\uff0c\u5e76\u4e14\u6bcf\u9694\u4e24\u4e2a\u6570\u4f4d\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u516c\u56e0\u5f0f\uff0c\u4e14\u4e00\u5b9a\u4f1a\u6709\u56e0\u5b50 \"11\"\uff08\u5341\u8fdb\u5236\u4e3a 3 \uff09\uff0c\u56e0\u6b64\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u51fa\u516c\u56e0\u5b50 3\uff0c\u4f8b\u5982\u4e8c\u8fdb\u5236\u6570 $111111$ \uff0c\u672c\u6765\u53ef\u4ee5\u8868\u793a\u6210\uff1a  $$\n(111111)_2 = 1 \\times 2^5 +  1 \\times 2^4 + 1 \\times 2^3 +  1 \\times 2^2 +  1 \\times 2^1 +  1 \\times 2^0 \n$$  \u5176\u4e2d $1 \\times 2^3 +  1 \\times 2^2$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a  $$\n1 \\times 2^3 +  1 \\times 2^2 = 2^2 \\times (1 \\times 2^1 +  1 \\times 2^0 )\n$$  \u5176\u4e2d $1 \\times 2^5 +  1 \\times 2^4$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a  $$\n1 \\times 2^5 +  1 \\times 2^4 = 2^2 \\times (1 \\times 2^3 +  1 \\times 2^2 )\n$$  \u8fd9\u79cd\u505a\u6cd5\u53ef\u4ee5\u9012\u5f52\u4e0b\u53bb\uff0c\u5f97\u5230  $$\n(111111)_2 = 1 \\times 2^5 +  1 \\times 2^4 + 1 \\times 2^3 +  1 \\times 2^2 +  (1 \\times 2^1 +  1 \\times 2^0) \n$$  $$\n(111111)_2 =  2^2 \\times [2^2 \\times (1 \\times 2^1 +  1 \\times 2^0)] +  2^2 \\times (1 \\times 2^1 +  1 \\times 2^0)  +  (1 \\times 2^1 +  1 \\times 2^0)\n$$  $$\n(111111)_2 =  [2^2 \\times 2^2 + 2^2 + 1]  \\times (1 \\times 2^1 +  1 \\times 2^0) \n$$  $$\n(111111)_2 =  [2^2 \\times 2^2 + 2^2 + 1] \\times 3\n$$  \u4ee5\u4e0a\u7684 3 \u4e2a\u6761\u4ef6\u5747\u4e3a\u4e00\u4e2a\u6574\u6570\u4e3a 4 \u7684\u65b9\u5e42\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u540c\u65f6\u6210\u7acb\u5c31\u6210\u4e3a\u4e86\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0342-power-of-four/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0342-power-of-four/#1",
            "text": "public boolean isPowerOfFour(int num) {\n    if (num <= 0) {\n        return false;\n    }\n    while (num % 4 == 0) {\n        num /= 4;\n    }\n    return num == 1;\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5faa\u73af\u8fdb\u884c\u5224\u65ad\u3002"
        },
        {
            "location": "/leetcode-0342-power-of-four/#2-4",
            "text": "public class Solution {\n\n    public boolean isPowerOfFour(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        String binaryString = Integer.toBinaryString(num);\n        // System.out.println(binaryString);\n        int len = binaryString.length();\n        return len % 2 == 1 && (num & 1 << (len - 1)) == num;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        boolean powerOfFour = solution.isPowerOfFour(-2147483648);\n        System.out.println(powerOfFour);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u89c2\u5bdf 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\u3002"
        },
        {
            "location": "/leetcode-0342-power-of-four/#3",
            "text": "public class Solution2 {\n\n    public boolean isPowerOfFour(int num) {\n        return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0342-power-of-four  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }  \nMathJax.Hub.Config({\ntex2jax: {\n  inlineMath: [['$','$'], ['\\\\(','\\\\)']],\n  processEscapes: true\n  },\ndisplayAlign : \"left\",\nTeX: {\n        equationNumbers: {\n            autoNumber: \"all\",\n            useLabelIds: true\n        }\n    },\n    \"HTML-CSS\": {\n        linebreaks: {\n            automatic: true\n        },\n        scale: 100,\n        styles: {\n          \".MathJax_Display\": {\n            \"text-align\": \"left\",\n            \"width\" : \"auto\",\n            \"margin\": \"10px 0px 10px 0px !important\",\n            \"background-color\": \"#f5f5f5 !important\",\n            \"border-radius\": \"3px !important\",\n            border:  \"1px solid #ccc !important\",\n            padding: \"5px 5px 5px 5px !important\"\n          },\n          \".MathJax\": {\n            \"background-color\": \"#f5f5f5 !important\",\n            padding: \"2px 2px 2px 2px !important\"\n          }\n        }\n    },\n    SVG: {\n        linebreaks: {\n            automatic: true\n        }\n    }\n});",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u5145\u5206\u6316\u6398\u6570\u5b66\u6027\u8d28\u3002"
        },
        {
            "location": "/leetcode-0344-reverse-string/",
            "text": "344. Reverse String\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u529f\u80fd\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165\uff1a\ns = \"hello\"\n\n\u8fd4\u56de\uff1a\n\"olleh\"\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n344. Reverse String\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n344. \u53cd\u8f6c\u5b57\u7b26\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u592a\u591a\u53ef\u4ee5\u8bf4\u660e\u7684\uff0c\u5c31\u662f\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u9010\u4e2a\u4ea4\u6362\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public String reverseString(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        reverseString(chars);\n        return String.valueOf(chars);\n    }\n\n    private void reverseString(char[] arr) {\n        int l = 0;\n        int r = arr.length - 1;\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        String s = \"hello\";\n        Solution solution  =new Solution();\n        String reverseString = solution.reverseString(s);\n        System.out.println(reverseString);\n    }\n}\n\n\n\n\n\u601d\u8def1\uff1a\u4f7f\u7528 Java \u8bed\u8a00\u63d0\u4f9b\u7684\u53cd\u8f6c API \u5b8c\u6210\n\n\npublic class Solution {\n    public String reverseString(String s) {\n        StringBuilder reverse = new StringBuilder();\n        for (int i = s.length()-1; i >=0 ; i--) {\n            reverse.append(s.charAt(i));\n        }\n        return reverse.toString();\n    }\n\n    // Given s = \"hello\", return \"olleh\".\n    public static void main(String[] args) {\n        String s = \"hello\";\n        Solution solution = new Solution();\n        String reverseString = solution.reverseString(s);\n        System.out.println(reverseString);\n    }\n}\n\n\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u6307\u9488\u5bf9\u649e\n\n\nJava \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\npublic class Solution {\n    public String reverseString(String s) {\n        char[] cArray = s.toCharArray();\n        int i = 0;\n        int j = cArray.length - 1;\n        while (i < j) {\n            swap(cArray, i, j);\n            i++;\n            j--;\n        }\n        return new String(cArray);\n    }\n\n    private void swap(char[] s, int index1, int index2) {\n        if (index1 == index2) return;\n        char temp = s[index1];\n        s[index1] = s[index2];\n        s[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String result = solution.reverseString(\"hello world\");\n        System.out.println(result);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0344-reverse-string\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "344. Reverse String"
        },
        {
            "location": "/leetcode-0344-reverse-string/#344-reverse-string",
            "text": "",
            "title": "344. Reverse String"
        },
        {
            "location": "/leetcode-0344-reverse-string/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u529f\u80fd\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002  \u793a\u4f8b\uff1a  \u8f93\u5165\uff1a s = \"hello\" \u8fd4\u56de\uff1a \"olleh\"    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 344. Reverse String   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 344. \u53cd\u8f6c\u5b57\u7b26\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0344-reverse-string/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u592a\u591a\u53ef\u4ee5\u8bf4\u660e\u7684\uff0c\u5c31\u662f\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u9010\u4e2a\u4ea4\u6362\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0344-reverse-string/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0344-reverse-string/#1",
            "text": "public class Solution {\n\n    public String reverseString(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        reverseString(chars);\n        return String.valueOf(chars);\n    }\n\n    private void reverseString(char[] arr) {\n        int l = 0;\n        int r = arr.length - 1;\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        String s = \"hello\";\n        Solution solution  =new Solution();\n        String reverseString = solution.reverseString(s);\n        System.out.println(reverseString);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0344-reverse-string/#1-java-api",
            "text": "public class Solution {\n    public String reverseString(String s) {\n        StringBuilder reverse = new StringBuilder();\n        for (int i = s.length()-1; i >=0 ; i--) {\n            reverse.append(s.charAt(i));\n        }\n        return reverse.toString();\n    }\n\n    // Given s = \"hello\", return \"olleh\".\n    public static void main(String[] args) {\n        String s = \"hello\";\n        Solution solution = new Solution();\n        String reverseString = solution.reverseString(s);\n        System.out.println(reverseString);\n    }\n}",
            "title": "\u601d\u8def1\uff1a\u4f7f\u7528 Java \u8bed\u8a00\u63d0\u4f9b\u7684\u53cd\u8f6c API \u5b8c\u6210"
        },
        {
            "location": "/leetcode-0344-reverse-string/#2",
            "text": "Java \u4ee3\u7801\u5b9e\u73b0\uff1a  public class Solution {\n    public String reverseString(String s) {\n        char[] cArray = s.toCharArray();\n        int i = 0;\n        int j = cArray.length - 1;\n        while (i < j) {\n            swap(cArray, i, j);\n            i++;\n            j--;\n        }\n        return new String(cArray);\n    }\n\n    private void swap(char[] s, int index1, int index2) {\n        if (index1 == index2) return;\n        char temp = s[index1];\n        s[index1] = s[index2];\n        s[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String result = solution.reverseString(\"hello world\");\n        System.out.println(result);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0344-reverse-string  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u601d\u8def2\uff1a\u4f7f\u7528\u6307\u9488\u5bf9\u649e"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/",
            "text": "345. Reverse Vowels of a String\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002\n\n\n\u793a\u4f8b 1\uff1a\n\n\u7ed9\u5b9a s = \"hello\", \u8fd4\u56de \"holle\".\n\n\n\u793a\u4f8b 2\uff1a\n\n\u7ed9\u5b9a s = \"leetcode\", \u8fd4\u56de \"leotcede\".\n\n\n\u6ce8\u610f:\n\n\u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u62ec \"y\".\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n345. Reverse Vowels of a String\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n345. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\n\ntitle: leetcode 345. Reverse Vowels of a String\ndate: 2017-09-23 16:16:36\ntags:\n\n\n\n\n\n\nReverse Vowels of a String\nhttps://leetcode.com/problems/reverse-vowels-of-a-string/description/\n\n\n\n\nWrite a function that takes a string as input and reverse only the vowels of a string.\n\n\nExample 1:\nGiven s = \"hello\", return \"holle\".\n\n\nExample 2:\nGiven s = \"leetcode\", return \"leotcede\".\n\n\nNote:\nThe vowels does not include the letter \"y\".\n\n\n\u6211\u7684\u601d\u8def\n\n\n\n\n\u4f7f\u7528\u6307\u9488\u5bf9\u649e\uff0c\u9047\u5230\u5143\u97f3\u5b57\u7b26\u7684\u65f6\u5019\u5c31\u542c\u4e0b\u6765\u4ea4\u6362\uff0c\u4ea4\u6362\u4ee5\u540e\u6307\u9488\u7ee7\u7eed\u5411\u524d\uff1b\n\n\n\u8fd9\u6837\u7684\u4ee3\u7801\u5176\u5b9e\u662f\u5957\u8def\uff0c\u591a\u5199\u51e0\u904d\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u4e86\uff0c\u6211\u4eec\u5728\u57fa\u7840\u7b97\u6cd5\u7684\u5b66\u4e60\u4e2d\uff0c\u66fe\u7ecf\u4e5f\u6709\u9047\u5230\u8fc7\u3002\n\n\n\n\n\u6211\u7684\u89e3\u7b54\n\n\nJava \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\npublic class Solution {\n    /**\n     * \u5199\u591a\u4e86\u5c31\u77e5\u9053\uff0c\u8fd9\u662f\u5957\u8def\u4e86\n     *\n     * @param s\n     * @return\n     */\n    public String reverseVowels(String s) {\n        if (s.length() == 0) return \"\";\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (true) {\n            // \u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\n            while (i < chars.length && !checkVowels(chars[i])) {\n                i++;\n            }\n            while (j >= 0 && !checkVowels(chars[j])) {\n                j--;\n            }\n            if (i < j) {\n                swap(chars, i, j);\n                i++;\n                j--;\n            } else {\n                break;\n            }\n        }\n        return new String(chars);\n    }\n\n    private void swap(char[] chars, int index1, int index2) {\n        if (index1 == index2) return;\n        char temp = chars[index1];\n        chars[index1] = chars[index2];\n        chars[index2] = temp;\n    }\n\n    private boolean checkVowels(char c) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'   ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        //String result1 = solution.reverseVowels(\"hello\");\n        //System.out.println(result1);\n        //String result2 = solution.reverseVowels(\"leetcode\");\n        //System.out.println(result2);\n\n        String result3 = solution.reverseVowels(\" \");\n        System.out.println(result3);\n\n    }\n}\n\n\n\n\n\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\n\n\n\n\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff1a\nif (s.length() == 0) return \"\";\n\uff1b\n\n\n\u8fd8\u6709\u4e00\u79cd\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff0c\u5c31\u662f i \u548c j \u53ef\u4ee5\u4e00\u76f4\u8d70\u5230\u5e95\u7684\u60c5\u51b5\uff0c\u7ffb\u8bd1\u6210\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n\n\n\nwhile (i < chars.length && !checkVowels(chars[i])) {\n    i++;\n}\nwhile (j >= 0 && !checkVowels(chars[j])) {\n    j--;\n}\n\n\n\n\n\u4e0a\u8ff0\u4ee3\u7801\u7279\u522b\u5bb9\u6613\u5ffd\u7565\u6389\uff1a\ni < chars.length\n \u548c \nj >= 0\n \u8fd9\u4e24\u4e2a\u524d\u63d0\u6761\u4ef6\u3002\n\n\n\u4e0a\u9762\u7684\u5199\u6cd5\u592a\u81c3\u80bf\uff1a\n\n\nclass Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n\n        s = list(s)\n\n        left = 0\n        right = len(s) - 1\n\n        while left < right:\n            if s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n            else:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n        return ''.join(s)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0345-reverse-vowels-of-a-string\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "345. Reverse Vowels of a String"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#345-reverse-vowels-of-a-string",
            "text": "",
            "title": "345. Reverse Vowels of a String"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002  \u793a\u4f8b 1\uff1a \n\u7ed9\u5b9a s = \"hello\", \u8fd4\u56de \"holle\".  \u793a\u4f8b 2\uff1a \n\u7ed9\u5b9a s = \"leetcode\", \u8fd4\u56de \"leotcede\".  \u6ce8\u610f: \n\u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u62ec \"y\".    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 345. Reverse Vowels of a String   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 345. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#1",
            "text": "title: leetcode 345. Reverse Vowels of a String\ndate: 2017-09-23 16:16:36\ntags:    Reverse Vowels of a String\nhttps://leetcode.com/problems/reverse-vowels-of-a-string/description/   Write a function that takes a string as input and reverse only the vowels of a string.  Example 1:\nGiven s = \"hello\", return \"holle\".  Example 2:\nGiven s = \"leetcode\", return \"leotcede\".  Note:\nThe vowels does not include the letter \"y\".",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_4",
            "text": "\u4f7f\u7528\u6307\u9488\u5bf9\u649e\uff0c\u9047\u5230\u5143\u97f3\u5b57\u7b26\u7684\u65f6\u5019\u5c31\u542c\u4e0b\u6765\u4ea4\u6362\uff0c\u4ea4\u6362\u4ee5\u540e\u6307\u9488\u7ee7\u7eed\u5411\u524d\uff1b  \u8fd9\u6837\u7684\u4ee3\u7801\u5176\u5b9e\u662f\u5957\u8def\uff0c\u591a\u5199\u51e0\u904d\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u4e86\uff0c\u6211\u4eec\u5728\u57fa\u7840\u7b97\u6cd5\u7684\u5b66\u4e60\u4e2d\uff0c\u66fe\u7ecf\u4e5f\u6709\u9047\u5230\u8fc7\u3002",
            "title": "\u6211\u7684\u601d\u8def"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_5",
            "text": "Java \u4ee3\u7801\u5b9e\u73b0\uff1a  public class Solution {\n    /**\n     * \u5199\u591a\u4e86\u5c31\u77e5\u9053\uff0c\u8fd9\u662f\u5957\u8def\u4e86\n     *\n     * @param s\n     * @return\n     */\n    public String reverseVowels(String s) {\n        if (s.length() == 0) return \"\";\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (true) {\n            // \u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\n            while (i < chars.length && !checkVowels(chars[i])) {\n                i++;\n            }\n            while (j >= 0 && !checkVowels(chars[j])) {\n                j--;\n            }\n            if (i < j) {\n                swap(chars, i, j);\n                i++;\n                j--;\n            } else {\n                break;\n            }\n        }\n        return new String(chars);\n    }\n\n    private void swap(char[] chars, int index1, int index2) {\n        if (index1 == index2) return;\n        char temp = chars[index1];\n        chars[index1] = chars[index2];\n        chars[index2] = temp;\n    }\n\n    private boolean checkVowels(char c) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'   ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        //String result1 = solution.reverseVowels(\"hello\");\n        //System.out.println(result1);\n        //String result2 = solution.reverseVowels(\"leetcode\");\n        //System.out.println(result2);\n\n        String result3 = solution.reverseVowels(\" \");\n        System.out.println(result3);\n\n    }\n}",
            "title": "\u6211\u7684\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0345-reverse-vowels-of-a-string/#_6",
            "text": "\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff1a if (s.length() == 0) return \"\"; \uff1b  \u8fd8\u6709\u4e00\u79cd\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff0c\u5c31\u662f i \u548c j \u53ef\u4ee5\u4e00\u76f4\u8d70\u5230\u5e95\u7684\u60c5\u51b5\uff0c\u7ffb\u8bd1\u6210\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a   while (i < chars.length && !checkVowels(chars[i])) {\n    i++;\n}\nwhile (j >= 0 && !checkVowels(chars[j])) {\n    j--;\n}  \u4e0a\u8ff0\u4ee3\u7801\u7279\u522b\u5bb9\u6613\u5ffd\u7565\u6389\uff1a i < chars.length  \u548c  j >= 0  \u8fd9\u4e24\u4e2a\u524d\u63d0\u6761\u4ef6\u3002  \u4e0a\u9762\u7684\u5199\u6cd5\u592a\u81c3\u80bf\uff1a  class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n\n        s = list(s)\n\n        left = 0\n        right = len(s) - 1\n\n        while left < right:\n            if s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n            else:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n        return ''.join(s)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0345-reverse-vowels-of-a-string  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u8981\u6ce8\u610f\u7684\u5730\u65b9"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/",
            "text": "349. Intersection of Two Arrays\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002\n\n\n\u4f8b\u5b50:\n\n\n\u00a0\u7ed9\u5b9a\n num1\n= \n[1, 2, 2, 1]\n, \nnums2\n = \n[2, 2]\n, \u8fd4\u56de\u00a0\n[2]\n.\n\n\n\u63d0\u793a:\n\n\n\n\n\u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n349. Intersection of Two Arrays\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n349. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u201c\u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u201d\uff0c\u8bbe\u8ba1\u4e00\u4e2a \nset\n \u5224\u65ad\u5143\u7d20\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\uff081\uff09\u5148\u8bb0\u5f55\u5230\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\uff1b\uff082\uff09\u4ece \nset\n \u4e2d\u5220\u9664\uff0c\u4ee5\u514d nums2 \u4e2d\u91cd\u590d\u7684\u8bb0\u5f55\u88ab\u8bb0\u5f55\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass Solution:\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        # \u53bb\u91cd\n        s = set(nums1)\n        for num in nums2:\n            if num in s:\n                result.append(num)\n                # \u53d1\u73b0\u4e00\u6837\u7684\u5143\u7d20\u4ee5\u540e\uff0c\u5c31\u4ece set \u91cc\u5220\u9664\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u590d\n                s.remove(num)\n        return result\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0349-intersection-of-two-arrays\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "349. Intersection of Two Arrays"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/#349-intersection-of-two-arrays",
            "text": "",
            "title": "349. Intersection of Two Arrays"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002  \u4f8b\u5b50:  \u00a0\u7ed9\u5b9a  num1 =  [1, 2, 2, 1] ,  nums2  =  [2, 2] , \u8fd4\u56de\u00a0 [2] .  \u63d0\u793a:   \u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u3002  \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 349. Intersection of Two Arrays   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 349. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u201c\u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u201d\uff0c\u8bbe\u8ba1\u4e00\u4e2a  set  \u5224\u65ad\u5143\u7d20\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\uff081\uff09\u5148\u8bb0\u5f55\u5230\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\uff1b\uff082\uff09\u4ece  set  \u4e2d\u5220\u9664\uff0c\u4ee5\u514d nums2 \u4e2d\u91cd\u590d\u7684\u8bb0\u5f55\u88ab\u8bb0\u5f55\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0349-intersection-of-two-arrays/#1",
            "text": "class Solution:\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        # \u53bb\u91cd\n        s = set(nums1)\n        for num in nums2:\n            if num in s:\n                result.append(num)\n                # \u53d1\u73b0\u4e00\u6837\u7684\u5143\u7d20\u4ee5\u540e\uff0c\u5c31\u4ece set \u91cc\u5220\u9664\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u590d\n                s.remove(num)\n        return result  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0349-intersection-of-two-arrays  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/",
            "text": "350. Intersection of Two Arrays II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002\n\n\n\u4f8b\u5982:\n\n\u7ed9\u5b9a\n\u00a0\nnums1\n = \n[1, 2, 2, 1]\n, \nnums2\n = \n[2, 2]\n, \u8fd4\u56de\u00a0\n[2, 2]\n.\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u00a0\n\u00a0 \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u3002\n\n\n\u00a0 \u00a0\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002\n\n\n\n\n\u8ddf\u8fdb:\n\n\n\n\n\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f\n\n\n\u5982\u679c\u00a0\nnums1\u00a0\n\u7684\u5927\u5c0f\u6bd4\u00a0\nnums2\u00a0\n\u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f\n\n\n\u5982\u679c\nnums2\n\u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n350. Intersection of Two Arrays II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\u201c\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u201d\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u8ba1\u6570\u5668\u3002\n\n\nclass Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        counter = {}\n        for num in nums1:\n            counter[num] = counter.get(num, 0) + 1\n\n        result = []\n        for num in nums2:\n            if num in counter and counter[num] > 0:\n                result.append(num)\n                counter[num] -= 1\n        return result\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002\n\n\nclass Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        p1 = 0\n        p2 = 0\n        l1 = len(nums1)\n        l2 = len(nums2)\n        result = []\n        while p1 < l1 and p2 < l2:\n            if nums1[p1] < nums2[p2]:\n                p1 += 1\n            elif nums1[p1] > nums2[p2]:\n                p2 += 1\n            else:\n                result.append(nums1[p1])\n                p1 += 1\n                p2 += 1\n        return result\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0350-intersection-of-two-arrays-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "350. Intersection of Two Arrays II"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#350-intersection-of-two-arrays-ii",
            "text": "",
            "title": "350. Intersection of Two Arrays II"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002  \u4f8b\u5982: \n\u7ed9\u5b9a \u00a0 nums1  =  [1, 2, 2, 1] ,  nums2  =  [2, 2] , \u8fd4\u56de\u00a0 [2, 2] .  \u6ce8\u610f\uff1a   \u00a0 \u00a0 \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u3002  \u00a0 \u00a0\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002   \u8ddf\u8fdb:   \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f  \u5982\u679c\u00a0 nums1\u00a0 \u7684\u5927\u5c0f\u6bd4\u00a0 nums2\u00a0 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f  \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 350. Intersection of Two Arrays II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\u201c\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u201d\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#1",
            "text": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        counter = {}\n        for num in nums1:\n            counter[num] = counter.get(num, 0) + 1\n\n        result = []\n        for num in nums2:\n            if num in counter and counter[num] > 0:\n                result.append(num)\n                counter[num] -= 1\n        return result",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u8ba1\u6570\u5668\u3002"
        },
        {
            "location": "/leetcode-0350-intersection-of-two-arrays-ii/#2",
            "text": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        p1 = 0\n        p2 = 0\n        l1 = len(nums1)\n        l2 = len(nums2)\n        result = []\n        while p1 < l1 and p2 < l2:\n            if nums1[p1] < nums2[p2]:\n                p1 += 1\n            elif nums1[p1] > nums2[p2]:\n                p2 += 1\n            else:\n                result.append(nums1[p1])\n                p1 += 1\n                p2 += 1\n        return result  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0350-intersection-of-two-arrays-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/",
            "text": "367. Valid Perfect Square\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \nnum\n\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c \nnum\n \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n\n\n\u6ce8\u610f\uff1a\n\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982\u00a0 \nsqrt\n\u3002\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\u8f93\u5165\uff1a\n 16\n\n\n\u8f93\u51fa\uff1a\n True\n\n\n\u00a0\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\u8f93\u5165\uff1a\n 14\n\n\n\u8f93\u51fa\uff1a\n False\n\n\n\u5f52\u529f\u4e8e:\n\n\n\u7279\u522b\u611f\u8c22 \n@elmirap\n \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n367. Valid Perfect Square\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0367-valid-perfect-square\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "367. Valid Perfect Square"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/#367-valid-perfect-square",
            "text": "",
            "title": "367. Valid Perfect Square"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570  num \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c  num  \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002  \u6ce8\u610f\uff1a \u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982\u00a0  sqrt \u3002  \u793a\u4f8b 1\uff1a  \u8f93\u5165\uff1a  16 \u8f93\u51fa\uff1a  True  \u00a0  \u793a\u4f8b 2\uff1a  \u8f93\u5165\uff1a  14 \u8f93\u51fa\uff1a  False  \u5f52\u529f\u4e8e:  \u7279\u522b\u611f\u8c22  @elmirap  \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 367. Valid Perfect Square   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0367-valid-perfect-square/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0367-valid-perfect-square  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/",
            "text": "371. Sum of Two Integers\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u4e0d\u4f7f\u7528\n\u8fd0\u7b97\u7b26\u00a0\n+\n \u548c\n-\n\uff0c\u8ba1\u7b97\u4e24\u6574\u6570\na\n\u00a0\u3001\nb\n\u4e4b\u548c\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\u82e5\u00a0\na\n = 1 \uff0c\nb\n = 2\uff0c\u8fd4\u56de 3\u3002\n\n\n\u81f4\u8c22\uff1a\n\n\u7279\u522b\u611f\u8c22\u00a0\n@fujiaozhu\n \u6dfb\u52a0\u8fd9\u9053\u95ee\u9898\u5e76\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n371. Sum of Two Integers\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n371. \u4e24\u6574\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4e86\u89e3\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002\n\n\n\n\n\u65e2\u7136\u4e0d\u5141\u8bb8\u4f7f\u7528\u52a0\u6cd5\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u5c31\u662f\u9996\u9009\u4e86\u3002\n\n\n\u4f4d\u8fd0\u7b97\u4e2d\u6709\u4e00\u79cd\u8fd0\u7b97\u53eb\u505a\u201c\u534a\u52a0\u8fd0\u7b97\u201d\uff0c\u4e5f\u79f0\u4f5c\u201c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u201d\uff0c\u5373\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u6210\u6ca1\u6709\u8fdb\u4f4d\u7684\u52a0\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u4f1a\u7528\u4e0a\u5b83\u3002\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u89e3\u51b3\u7684\u5c31\u662f\u8fdb\u4f4d\u7684\u95ee\u9898\u4e86\u3002\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u8fdb\u4f4d\u5462\uff0c\u540c\u4e3a 1 \u7684\u65f6\u5019\u624d\u8fdb\u4f4d\uff0c\u7279\u6b8a\u5904\u7406\u540c\u4e3a 1 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u201c\u4e0e\u201d\u8fd0\u7b97\u5e72\u7684\u4e8b\u60c5\uff0c\u8fdb\u4f4d\u662f\u5411\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u6211\u4eec\u628a\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u5de6\u79fb 1 \u4f4d\u5c31\u597d\u4e86\u3002\n\n\n\u6ce8\u610f\uff1a\u8fd9\u79cd\u8fdb\u4f4d\u53ef\u80fd\u662f\u63a5\u8fde\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u8981\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u8fdb\u884c\u3002\n\n\n\u5982\u679c\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u662f 0\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u4e0b\u53bb\u4e86\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    /**\n     * \u5148\u505a\u52a0\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u5f02\u6216\u8fd0\u7b97\n     * \u518d\u505a\u8fdb\u4f4d\n     * 1 0 1 1\n     * 1 1 1 1\n     * \u5f02\u6216\uff1a 0 1 0 0\n     * \u4e0e\u8fd0\u7b97 1 0 1 1\n     *\n     * @param a\n     * @param b\n     * @return\n     */\n    public int getSum(int a, int b) {\n        int sum;\n        while (true) {\n            sum = a ^ b;\n            int carry = a & b;\n            if (carry == 0) {\n                break;\n            }\n            a = sum;\n            b = carry << 1;\n        }\n        return sum;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002\n\n\npublic class Solution2 {\n\n    public int getSum(int a, int b) {\n        int sum;\n        int carry;\n        do {\n            sum = a ^ b;\n            carry = a & b;\n\n            a = sum;\n            b = carry << 1;\n        } while (carry != 0);\n        return sum;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002\n\n\npublic class Solution3 {\n\n    public int getSum(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while (true) {\n            sum = a ^ b;\n            // \u62ec\u53f7\u4e0d\u80fd\u4e22\n            carry = (a & b) << 1;\n            if (carry == 0) {\n                break;\n            }\n            a = sum;\n            b = carry;\n        }\n        return sum;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0371-sum-of-two-integers\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "371. Sum of Two Integers"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#371-sum-of-two-integers",
            "text": "",
            "title": "371. Sum of Two Integers"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u4e0d\u4f7f\u7528 \u8fd0\u7b97\u7b26\u00a0 +  \u548c - \uff0c\u8ba1\u7b97\u4e24\u6574\u6570 a \u00a0\u3001 b \u4e4b\u548c\u3002  \u793a\u4f8b\uff1a \n\u82e5\u00a0 a  = 1 \uff0c b  = 2\uff0c\u8fd4\u56de 3\u3002  \u81f4\u8c22\uff1a \n\u7279\u522b\u611f\u8c22\u00a0 @fujiaozhu  \u6dfb\u52a0\u8fd9\u9053\u95ee\u9898\u5e76\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 371. Sum of Two Integers   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 371. \u4e24\u6574\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4e86\u89e3\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002   \u65e2\u7136\u4e0d\u5141\u8bb8\u4f7f\u7528\u52a0\u6cd5\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u5c31\u662f\u9996\u9009\u4e86\u3002  \u4f4d\u8fd0\u7b97\u4e2d\u6709\u4e00\u79cd\u8fd0\u7b97\u53eb\u505a\u201c\u534a\u52a0\u8fd0\u7b97\u201d\uff0c\u4e5f\u79f0\u4f5c\u201c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u201d\uff0c\u5373\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u6210\u6ca1\u6709\u8fdb\u4f4d\u7684\u52a0\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u4f1a\u7528\u4e0a\u5b83\u3002  \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u89e3\u51b3\u7684\u5c31\u662f\u8fdb\u4f4d\u7684\u95ee\u9898\u4e86\u3002\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u8fdb\u4f4d\u5462\uff0c\u540c\u4e3a 1 \u7684\u65f6\u5019\u624d\u8fdb\u4f4d\uff0c\u7279\u6b8a\u5904\u7406\u540c\u4e3a 1 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u201c\u4e0e\u201d\u8fd0\u7b97\u5e72\u7684\u4e8b\u60c5\uff0c\u8fdb\u4f4d\u662f\u5411\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u6211\u4eec\u628a\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u5de6\u79fb 1 \u4f4d\u5c31\u597d\u4e86\u3002  \u6ce8\u610f\uff1a\u8fd9\u79cd\u8fdb\u4f4d\u53ef\u80fd\u662f\u63a5\u8fde\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u8981\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u8fdb\u884c\u3002  \u5982\u679c\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u662f 0\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u4e0b\u53bb\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#1",
            "text": "public class Solution {\n\n    /**\n     * \u5148\u505a\u52a0\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u5f02\u6216\u8fd0\u7b97\n     * \u518d\u505a\u8fdb\u4f4d\n     * 1 0 1 1\n     * 1 1 1 1\n     * \u5f02\u6216\uff1a 0 1 0 0\n     * \u4e0e\u8fd0\u7b97 1 0 1 1\n     *\n     * @param a\n     * @param b\n     * @return\n     */\n    public int getSum(int a, int b) {\n        int sum;\n        while (true) {\n            sum = a ^ b;\n            int carry = a & b;\n            if (carry == 0) {\n                break;\n            }\n            a = sum;\n            b = carry << 1;\n        }\n        return sum;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#2-1",
            "text": "public class Solution2 {\n\n    public int getSum(int a, int b) {\n        int sum;\n        int carry;\n        do {\n            sum = a ^ b;\n            carry = a & b;\n\n            a = sum;\n            b = carry << 1;\n        } while (carry != 0);\n        return sum;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002"
        },
        {
            "location": "/leetcode-0371-sum-of-two-integers/#3-1",
            "text": "public class Solution3 {\n\n    public int getSum(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while (true) {\n            sum = a ^ b;\n            // \u62ec\u53f7\u4e0d\u80fd\u4e22\n            carry = (a & b) << 1;\n            if (carry == 0) {\n                break;\n            }\n            a = sum;\n            b = carry;\n        }\n        return sum;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0371-sum-of-two-integers  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/",
            "text": "377. Combination Sum IV\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n377. Combination Sum IV\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n377. Combination Sum IV\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230\n\u9012\u5f52\u5173\u7cfb\u5f0f\n\uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1\n        // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1\n        // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a\n        dp[0] = 1;\n        for (int i = 1; i < target + 1; i++) {\n            for (int num : nums) {\n                if (i >= num) {\n                    dp[i] = dp[i] + dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 2, 3};\n        int target = 4;\n        int combinationSum4 = solution.combinationSum4(nums, target);\n        System.out.println(combinationSum4);\n    }\n}",
            "title": "377. Combination Sum IV"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#377-combination-sum-iv",
            "text": "",
            "title": "377. Combination Sum IV"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 377. Combination Sum IV   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 377. Combination Sum IV   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230 \u9012\u5f52\u5173\u7cfb\u5f0f \uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0377-combination-sum-iv/#1",
            "text": "public class Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1\n        // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1\n        // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a\n        dp[0] = 1;\n        for (int i = 1; i < target + 1; i++) {\n            for (int num : nums) {\n                if (i >= num) {\n                    dp[i] = dp[i] + dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {1, 2, 3};\n        int target = 4;\n        int combinationSum4 = solution.combinationSum4(nums, target);\n        System.out.println(combinationSum4);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0389-find-the-difference/",
            "text": "389. Find the Difference\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 \ns\n \u548c \nt\n\uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\u5b57\u7b26\u4e32\u00a0\nt\n\u00a0\u7531\u5b57\u7b26\u4e32\u00a0\ns\n\u00a0\u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002\n\n\n\u8bf7\u627e\u51fa\u5728 \nt\n \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002\n\n\n\u00a0\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165\uff1a\ns = \"abcd\"\nt = \"abcde\"\n\n\u8f93\u51fa\uff1a\ne\n\n\u89e3\u91ca\uff1a\n'e' \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n389. Find the Difference\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n389. \u627e\u4e0d\u540c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u53d7 LeetCode \u7b2c 136 \u9898\u4f7f\u7528\u4f4d\u8fd0\u7b97\u627e\u4e0d\u540c\u6570\u5b57\u7684\u542f\u53d1\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u5982\u6cd5\u70ae\u5236\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u53ea\u5305\u542b\u5c0f\u5199\u6570\u5b57\uff0c\u5e72\u8106\u5168\u90e8\u8f6c\u6210 0-25 \u7684\u6570\u5b57\u5c31\u597d\u4e86\n    // \u6839\u636e\u9898\u610f\uff0ct \u6bd4 s \u591a 1 \u4e2a\u5b57\u7b26\uff0c\u5e72\u8106\u521d\u59cb\u503c\u5c31\u53d6 t \u7684\u7b2c 1 \u4e2a\u5b57\u7b26\n    public char findTheDifference(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int res = t.charAt(0) - 'a';\n        for (int i = 0; i < slen; i++) {\n            res ^= (s.charAt(i) - 'a');\n        }\n        for (int i = 1; i < tlen; i++) {\n            res ^= (t.charAt(i) - 'a');\n        }\n        return (char) (res + 'a');\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    // \u5728\u7f16\u5199\u6ce8\u91ca\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u5176\u5b9e char \u5c31\u662f\u6574\u578b\u6570\u5b57\uff0c\u56e0\u6b64\u6839\u672c\u4e0d\u7528\u505a\u8f6c\u6362\n    public char findTheDifference(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int res = t.charAt(0);\n        for (int i = 0; i < slen; i++) {\n            res ^= (s.charAt(i));\n        }\n        for (int i = 1; i < tlen; i++) {\n            res ^= (t.charAt(i));\n        }\n        return (char) (res);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0389-find-the-difference\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "389. Find the Difference"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#389-find-the-difference",
            "text": "",
            "title": "389. Find the Difference"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32  s  \u548c  t \uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002  \u5b57\u7b26\u4e32\u00a0 t \u00a0\u7531\u5b57\u7b26\u4e32\u00a0 s \u00a0\u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002  \u8bf7\u627e\u51fa\u5728  t  \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002  \u00a0  \u793a\u4f8b:  \u8f93\u5165\uff1a\ns = \"abcd\"\nt = \"abcde\"\n\n\u8f93\u51fa\uff1a\ne\n\n\u89e3\u91ca\uff1a\n'e' \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 389. Find the Difference   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 389. \u627e\u4e0d\u540c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u53d7 LeetCode \u7b2c 136 \u9898\u4f7f\u7528\u4f4d\u8fd0\u7b97\u627e\u4e0d\u540c\u6570\u5b57\u7684\u542f\u53d1\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u5982\u6cd5\u70ae\u5236\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#1",
            "text": "public class Solution {\n\n    // \u53ea\u5305\u542b\u5c0f\u5199\u6570\u5b57\uff0c\u5e72\u8106\u5168\u90e8\u8f6c\u6210 0-25 \u7684\u6570\u5b57\u5c31\u597d\u4e86\n    // \u6839\u636e\u9898\u610f\uff0ct \u6bd4 s \u591a 1 \u4e2a\u5b57\u7b26\uff0c\u5e72\u8106\u521d\u59cb\u503c\u5c31\u53d6 t \u7684\u7b2c 1 \u4e2a\u5b57\u7b26\n    public char findTheDifference(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int res = t.charAt(0) - 'a';\n        for (int i = 0; i < slen; i++) {\n            res ^= (s.charAt(i) - 'a');\n        }\n        for (int i = 1; i < tlen; i++) {\n            res ^= (t.charAt(i) - 'a');\n        }\n        return (char) (res + 'a');\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0389-find-the-difference/#2",
            "text": "public class Solution2 {\n\n    // \u5728\u7f16\u5199\u6ce8\u91ca\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u5176\u5b9e char \u5c31\u662f\u6574\u578b\u6570\u5b57\uff0c\u56e0\u6b64\u6839\u672c\u4e0d\u7528\u505a\u8f6c\u6362\n    public char findTheDifference(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int res = t.charAt(0);\n        for (int i = 0; i < slen; i++) {\n            res ^= (s.charAt(i));\n        }\n        for (int i = 1; i < tlen; i++) {\n            res ^= (t.charAt(i));\n        }\n        return (char) (res);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0389-find-the-difference  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0392-is-subsequence/",
            "text": "392. Is Subsequence\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 \ns\n \u548c \nt\n \uff0c\u5224\u65ad \ns\n \u662f\u5426\u4e3a \nt\n \u7684\u5b50\u5e8f\u5217\u3002\n\n\n\u4f60\u53ef\u4ee5\u8ba4\u4e3a \ns\n \u548c \nt\n \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 \nt\n \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c \ns\n \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002\n\n\n\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\n\"ace\"\n\u662f\n\"abcde\"\n\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c\n\"aec\"\n\u4e0d\u662f\uff09\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\ns\n = \n\"abc\"\n, \nt\n = \n\"ahbgdc\"\n\n\n\u8fd4\u56de\u00a0\ntrue\n.\n\n\n\u793a\u4f8b\u00a02:\n\n\ns\n = \n\"axc\"\n, \nt\n = \n\"ahbgdc\"\n\n\n\u8fd4\u56de\u00a0\nfalse\n.\n\n\n\u540e\u7eed\u6311\u6218\n \n:\n\n\n\u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f\n\n\n\u81f4\u8c22:\n\n\n\u7279\u522b\u611f\u8c22\n \n@pbrother\u00a0\n\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n392. Is Subsequence\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n392. \u5224\u65ad\u5b50\u5e8f\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u8574\u542b\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u60f3\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\n\n\npublic class Solution {\n\n    public boolean isSubsequence(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int sl = 0;\n        int tl = 0;\n        while (sl < slen && tl < tlen) {\n            while (tl < tlen && s.charAt(sl) != t.charAt(tl)) {\n                tl++;\n            }\n            if (tl == tlen) {\n                break;\n            }\n            sl++;\n            tl++;\n        }\n        return sl == slen;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e2a\u4f18\u5316\u7684\u7248\u672c\n\n\npublic class Solution2 {\n\n    public boolean isSubsequence(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int i = 0;\n        int j = 0;\n        while (i < slen && j < tlen) {\n            if (s.charAt(i) == t.charAt(j)) {\n                i++;\n            }\n            j++;\n        }\n        return i == slen;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0392-is-subsequence\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "392. Is Subsequence"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#392-is-subsequence",
            "text": "",
            "title": "392. Is Subsequence"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u5b57\u7b26\u4e32  s  \u548c  t  \uff0c\u5224\u65ad  s  \u662f\u5426\u4e3a  t  \u7684\u5b50\u5e8f\u5217\u3002  \u4f60\u53ef\u4ee5\u8ba4\u4e3a  s  \u548c  t  \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32  t  \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c  s  \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002  \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c \"ace\" \u662f \"abcde\" \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c \"aec\" \u4e0d\u662f\uff09\u3002  \u793a\u4f8b\u00a01:  s  =  \"abc\" ,  t  =  \"ahbgdc\"  \u8fd4\u56de\u00a0 true .  \u793a\u4f8b\u00a02:  s  =  \"axc\" ,  t  =  \"ahbgdc\"  \u8fd4\u56de\u00a0 false .  \u540e\u7eed\u6311\u6218   :  \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f  \u81f4\u8c22:  \u7279\u522b\u611f\u8c22   @pbrother\u00a0 \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 392. Is Subsequence   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 392. \u5224\u65ad\u5b50\u5e8f\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u8574\u542b\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u60f3\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#1",
            "text": "public class Solution {\n\n    public boolean isSubsequence(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int sl = 0;\n        int tl = 0;\n        while (sl < slen && tl < tlen) {\n            while (tl < tlen && s.charAt(sl) != t.charAt(tl)) {\n                tl++;\n            }\n            if (tl == tlen) {\n                break;\n            }\n            sl++;\n            tl++;\n        }\n        return sl == slen;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a"
        },
        {
            "location": "/leetcode-0392-is-subsequence/#21",
            "text": "public class Solution2 {\n\n    public boolean isSubsequence(String s, String t) {\n        int slen = s.length();\n        int tlen = t.length();\n        int i = 0;\n        int j = 0;\n        while (i < slen && j < tlen) {\n            if (s.charAt(i) == t.charAt(j)) {\n                i++;\n            }\n            j++;\n        }\n        return i == slen;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0392-is-subsequence  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e2a\u4f18\u5316\u7684\u7248\u672c"
        },
        {
            "location": "/leetcode-0397-integer-replacement/",
            "text": "397. Integer Replacement\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u00a0\nn\n\uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n\n1. \u5982\u679c\u00a0\nn\u00a0\n\u662f\u5076\u6570\uff0c\u5219\u7528\u00a0\nn / 2\n\u66ff\u6362\u00a0\nn\n\u3002\n\n2. \u5982\u679c\u00a0\nn\u00a0\n\u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528\u00a0\nn + 1\n\u6216\nn - 1\n\u66ff\u6362\u00a0\nn\n\u3002\n\n\nn\u00a0\n\u53d8\u4e3a 1 \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n\n8\n\n\n\u8f93\u51fa:\n\n3\n\n\n\u89e3\u91ca:\n\n8 -> 4 -> 2 -> 1\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n\n7\n\n\n\u8f93\u51fa:\n\n4\n\n\n\u89e3\u91ca:\n\n7 -> 8 -> 4 -> 2 -> 1\n\u6216\n7 -> 6 -> 3 -> 2 -> 1\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n397. Integer Replacement\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n397. \u6574\u6570\u66ff\u6362\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u505a\u6cd5\u662f\u6839\u636e\u9898\u610f\uff0c\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u3002\n\n\n\n\n\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662f\u6574\u578b\u6570\u7684\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\uff1a1111111111111111111111111111111\uff0c\u5bf9\u4e8e\u5b83\u7684\u7ed3\u679c\u662f 32\uff08\u6211\u662f\u4ece\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u770b\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8fd9\u4e2a\u6570\u8981\u53d8\u6210 1 \u5e94\u8be5\u7ecf\u8fc7 33 \u6b65\uff09\uff0c\u4e0d\u8fc7\u53ea\u6709\u8fd9\u4e00\u4e2a\u7279\u6b8a\u7684\u7528\u4f8b\uff0c\u6211\u4eec\u6682\u4e14\u8fd9\u6837\u5199\u662f\u4e0d\u4f1a\u9519\u7684\u3002\n\n\n\n\npublic class Solution6 {\n\n    public int integerReplacement(int n) {\n        if (n == Integer.MAX_VALUE) {\n            return 32;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 1 + integerReplacement(n / 2);\n        }\n        return 1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1));\n    }\n}\n\n\n\n\n\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\n\n\npublic class Solution {\n\n    public int integerReplacement(int n) {\n        return longReplacement(n);\n    }\n\n    private int longReplacement(long n) {\n        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return longReplacement(n / 2) + 1;\n        }\n        return 1 + Math.min(longReplacement(n + 1), longReplacement(n - 1));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = Integer.MAX_VALUE;\n        int integerReplacement = solution.integerReplacement(n);\n        System.out.println(integerReplacement);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\u3002\n\n\n\n\n\u4f7f\u7528\u4e86\u9012\u5f52\uff0c\u90a3\u4e48\u6839\u636e\u5957\u8def\uff0c\u53ef\u4ee5\u5c06\u8fd9\u9053\u95ee\u9898\u7684\u89e3\u6cd5\u6539\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7528\u52a8\u6001\u89c4\u5212\u8bd5\u8bd5\u3002\n\n\n\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f83\u5c11\u7684\u6570\u7684\u7ed3\u679c\u8ba1\u7b97\u5f97\u5230\uff0c\u4e8e\u662f\uff0c\u5f88\u5bb9\u6613\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002\n\n\n\u4f46\u662f\uff0c\u63d0\u4ea4\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e0b\u5b50\u8981\u5f00\u8f9f\u90a3\u4e48\u591a\u7a7a\u95f4\u5176\u5b9e\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6211\u4eec\u8981\u8ba1\u7b97 8 \uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981 1\u30012\u30014 \u7684\u7ed3\u679c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u4f9d\u6b21\u8ba1\u7b97 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u66f4\u6d6a\u8d39\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\n\n\n\n\n(\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u79cd\u505a\u6cd5\u4e0d\u80fd\u901a\u8fc7\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u53cd\u4f8b\u3002)\n\n\npublic class Solution2 {\n\n    // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u901a\u4e0d\u8fc7\uff0c\u4e0d\u8fc7\u91c7\u7528\u52a8\u6001\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86\n    // \u8fd9\u884c\u89e3\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236\n\n    public int integerReplacement(int n) {\n        // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50\n\n        if (n <= 1) {\n            return 0;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                dp[i] = dp[i / 2] + 1;\n            } else {\n                // \u8fd9\u6837\u5199\u5c31\u592a\u6b7b\u677f\u4e86\n                // dp[i] = 1 + Math.min(dp[i - 1], dp[i + 1]);\n                dp[i] = Math.min(dp[i - 1] + 1, dp[(i + 1) / 2] + 2);\n            }\n        }\n        return dp[n];\n    }\n}\n\n\n\n\n\n\n\u4e0d\u8fc7\uff0c\u6211\u4eec\u4e0d\u7528\u90a3\u4e48\u6b7b\u677f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\n\u4e0b\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\u66f4\u50cf\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\n\n\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution2 {\n\n    // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528 Hash \u8868\n    // \u4f7f\u7528\u52a8\u6001\u7684\u7ea2\u9ed1\u6811\u5c31\u4e0d\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 \u4e86\n\n    public int integerReplacement(int n) {\n        // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50\n        if (n <= 1) {\n            return 0;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        map.put(1, 0);\n        return helper(n, map);\n    }\n\n    private int helper(int n, Map<Integer, Integer> map) {\n        Integer value = map.get(n);\n        if (value == null) {\n            if (n % 2 == 0) {\n                value = helper(n / 2, map) + 1;\n            } else {\n                // n-1 /2\n                // n+1 /2\n                value = 2 + Math.min(helper(n / 2, map), helper(n / 2 + 1, map));\n            }\n        }\n        return value;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u8fd9\u79cd\u5199\u6cd5\u8981\u4f7f\u7528\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\u3002\n\n\n\n\n\u6839\u636e\u89c4\u5219\uff0c\u5982\u679c\u9047\u5230\u5947\u6570\uff0c\u8981\u5148\u53d8\u6210\u5076\u6570\u3002\n\n\n\u4e8c\u8fdb\u5236\u540e\u9762\u7684 0 \u8d8a\u591a\uff0c\u8868\u793a\u9664\u4ee5 2 \u4e00\u76f4\u53ef\u4ee5\u6574\u9664\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5199\u51fa\u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u53ef\u4ee5\u63d0\u53d6\u51fa 2 \u7684\u6b21\u65b9\u6570\u3002\n\n\n\n\n\u6839\u636e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002\n\n\npublic class Solution3 {\n\n    // https://www.cnblogs.com/maizi-1993/p/5909887.html\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\n\n    public int integerReplacement(int n) {\n        // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5\n        if (n == Integer.MAX_VALUE) {\n            return 32;\n        }\n        int res = 0;\n        while (n != 1) {\n            // \u5f53 n \u4e0d\u8bba\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u53d8\u6210\u5076\u6570\uff0c\u6d88\u8017\u4e00\u4e2a\u64cd\u4f5c\n            res++;\n            if ((n & 1) == 0) {\n                n >>= 1;\n            } else {\n                // \u8c01\u672b\u5c3e\u7684 0 \u591a\uff0c\u5c31\u53d8\u6210\u8c01\n                // \u53ea\u6709 3 \u8fd9\u4e00\u4e2a\u7279\u4f8b\n                if (n == 3 || countTailZeros(n - 1) > countTailZeros(n + 1)) {\n                    n--;\n                } else {\n                    n++;\n                }\n            }\n        }\n        return res;\n    }\n\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // 110100 52 26 13\n\n    // \u8fd9\u4e2a\u505a\u6cd5\u6709\u70b9\"\u8fc7\"\uff0c\u662f\u5f88\u5145\u5206\u7684\u505a\u6cd5\n    private int countTailZeros(int num) {\n        int count = 0;\n        while (num % 2 == 0) {\n            count++;\n            num >>= 1;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Integer.toBinaryString(Integer.MAX_VALUE));\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u8fd9\u79cd\u89e3\u6cd5\u66f4\u6df1\u5730\u6316\u6398\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u7684\u6027\u8d28\u3002\n\n\npublic class Solution4 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttps://segmentfault.com/a/1190000007318944\n\n    public int integerReplacement(int n) {\n        long num = n;\n        int res = 0;\n        while (num != 1) {\n            res++;\n            if ((num & 1) == 0) {\n                // \u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u53f3\u79fb\n                num >>= 1;\n            } else {\n                // \u662f\u5947\u6570\u7684\u65f6\u5019\n                // 2 \u7684\u4e8c\u8fdb\u5236\u662f 10\uff0c\u5373\u5982\u679c\u5012\u6570\u7b2c 2 \u4f4d\u662f 1 \u7684\u8bdd\n                // \u52a0 1 \u80fd\u6d88\u8017\u6389\u66f4\u591a\u7684 1\n                // \u4f8b\u5982\uff1a\n                // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 0\uff0c\u90a3\u4e48 n - 1 \u7684\u64cd\u4f5c\u6bd4 n + 1 \u7684\u64cd\u4f5c\u80fd\u6d88\u6389\u66f4\u591a\u7684 1\n                // 1001 + 1 = 1010\n                // 1001 - 1 = 1000\n                // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 1\uff0c\u90a3\u4e48 n + 1 \u7684\u64cd\u4f5c\u80fd\u6bd4 n - 1\u7684\u64cd\u4f5c\u6d88\u6389\u66f4\u591a\u7684 1\n                // 1011 + 1 = 1100\n                // 1111 + 1 = 10000\n                if ((num & 2) != 0 && num != 3) {\n                    num++;\n                } else {\n                    num--;\n                }\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0397-integer-replacement\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "397. Integer Replacement"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#397-integer-replacement",
            "text": "",
            "title": "397. Integer Replacement"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u00a0 n \uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a  1. \u5982\u679c\u00a0 n\u00a0 \u662f\u5076\u6570\uff0c\u5219\u7528\u00a0 n / 2 \u66ff\u6362\u00a0 n \u3002 \n2. \u5982\u679c\u00a0 n\u00a0 \u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528\u00a0 n + 1 \u6216 n - 1 \u66ff\u6362\u00a0 n \u3002  n\u00a0 \u53d8\u4e3a 1 \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f  \u793a\u4f8b 1:  \u8f93\u5165: \n8 \u8f93\u51fa: \n3 \u89e3\u91ca: \n8 -> 4 -> 2 -> 1  \u793a\u4f8b 2:  \u8f93\u5165: \n7 \u8f93\u51fa: \n4 \u89e3\u91ca: \n7 -> 8 -> 4 -> 2 -> 1\n\u6216\n7 -> 6 -> 3 -> 2 -> 1     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 397. Integer Replacement   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 397. \u6574\u6570\u66ff\u6362   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#1",
            "text": "\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662f\u6574\u578b\u6570\u7684\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\uff1a1111111111111111111111111111111\uff0c\u5bf9\u4e8e\u5b83\u7684\u7ed3\u679c\u662f 32\uff08\u6211\u662f\u4ece\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u770b\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8fd9\u4e2a\u6570\u8981\u53d8\u6210 1 \u5e94\u8be5\u7ecf\u8fc7 33 \u6b65\uff09\uff0c\u4e0d\u8fc7\u53ea\u6709\u8fd9\u4e00\u4e2a\u7279\u6b8a\u7684\u7528\u4f8b\uff0c\u6211\u4eec\u6682\u4e14\u8fd9\u6837\u5199\u662f\u4e0d\u4f1a\u9519\u7684\u3002   public class Solution6 {\n\n    public int integerReplacement(int n) {\n        if (n == Integer.MAX_VALUE) {\n            return 32;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 1 + integerReplacement(n / 2);\n        }\n        return 1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1));\n    }\n}  \u5199\u6210\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a  public class Solution {\n\n    public int integerReplacement(int n) {\n        return longReplacement(n);\n    }\n\n    private int longReplacement(long n) {\n        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return longReplacement(n / 2) + 1;\n        }\n        return 1 + Math.min(longReplacement(n + 1), longReplacement(n - 1));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = Integer.MAX_VALUE;\n        int integerReplacement = solution.integerReplacement(n);\n        System.out.println(integerReplacement);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u505a\u6cd5\u662f\u6839\u636e\u9898\u610f\uff0c\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u3002"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#2",
            "text": "\u4f7f\u7528\u4e86\u9012\u5f52\uff0c\u90a3\u4e48\u6839\u636e\u5957\u8def\uff0c\u53ef\u4ee5\u5c06\u8fd9\u9053\u95ee\u9898\u7684\u89e3\u6cd5\u6539\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7528\u52a8\u6001\u89c4\u5212\u8bd5\u8bd5\u3002  \u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f83\u5c11\u7684\u6570\u7684\u7ed3\u679c\u8ba1\u7b97\u5f97\u5230\uff0c\u4e8e\u662f\uff0c\u5f88\u5bb9\u6613\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002  \u4f46\u662f\uff0c\u63d0\u4ea4\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e0b\u5b50\u8981\u5f00\u8f9f\u90a3\u4e48\u591a\u7a7a\u95f4\u5176\u5b9e\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6211\u4eec\u8981\u8ba1\u7b97 8 \uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981 1\u30012\u30014 \u7684\u7ed3\u679c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u4f9d\u6b21\u8ba1\u7b97 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u66f4\u6d6a\u8d39\u65f6\u95f4\u548c\u7a7a\u95f4\u3002   (\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u79cd\u505a\u6cd5\u4e0d\u80fd\u901a\u8fc7\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u53cd\u4f8b\u3002)  public class Solution2 {\n\n    // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u901a\u4e0d\u8fc7\uff0c\u4e0d\u8fc7\u91c7\u7528\u52a8\u6001\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86\n    // \u8fd9\u884c\u89e3\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236\n\n    public int integerReplacement(int n) {\n        // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50\n\n        if (n <= 1) {\n            return 0;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                dp[i] = dp[i / 2] + 1;\n            } else {\n                // \u8fd9\u6837\u5199\u5c31\u592a\u6b7b\u677f\u4e86\n                // dp[i] = 1 + Math.min(dp[i - 1], dp[i + 1]);\n                dp[i] = Math.min(dp[i - 1] + 1, dp[(i + 1) / 2] + 2);\n            }\n        }\n        return dp[n];\n    }\n}   \u4e0d\u8fc7\uff0c\u6211\u4eec\u4e0d\u7528\u90a3\u4e48\u6b7b\u677f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\u3002  \u4e0b\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\u66f4\u50cf\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u3002   import java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution2 {\n\n    // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528 Hash \u8868\n    // \u4f7f\u7528\u52a8\u6001\u7684\u7ea2\u9ed1\u6811\u5c31\u4e0d\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 \u4e86\n\n    public int integerReplacement(int n) {\n        // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50\n        if (n <= 1) {\n            return 0;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        map.put(1, 0);\n        return helper(n, map);\n    }\n\n    private int helper(int n, Map<Integer, Integer> map) {\n        Integer value = map.get(n);\n        if (value == null) {\n            if (n % 2 == 0) {\n                value = helper(n / 2, map) + 1;\n            } else {\n                // n-1 /2\n                // n+1 /2\n                value = 2 + Math.min(helper(n / 2, map), helper(n / 2 + 1, map));\n            }\n        }\n        return value;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\u3002"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#3",
            "text": "\u6839\u636e\u89c4\u5219\uff0c\u5982\u679c\u9047\u5230\u5947\u6570\uff0c\u8981\u5148\u53d8\u6210\u5076\u6570\u3002  \u4e8c\u8fdb\u5236\u540e\u9762\u7684 0 \u8d8a\u591a\uff0c\u8868\u793a\u9664\u4ee5 2 \u4e00\u76f4\u53ef\u4ee5\u6574\u9664\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5199\u51fa\u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u53ef\u4ee5\u63d0\u53d6\u51fa 2 \u7684\u6b21\u65b9\u6570\u3002   \u6839\u636e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002  public class Solution3 {\n\n    // https://www.cnblogs.com/maizi-1993/p/5909887.html\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\n\n    public int integerReplacement(int n) {\n        // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5\n        if (n == Integer.MAX_VALUE) {\n            return 32;\n        }\n        int res = 0;\n        while (n != 1) {\n            // \u5f53 n \u4e0d\u8bba\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u53d8\u6210\u5076\u6570\uff0c\u6d88\u8017\u4e00\u4e2a\u64cd\u4f5c\n            res++;\n            if ((n & 1) == 0) {\n                n >>= 1;\n            } else {\n                // \u8c01\u672b\u5c3e\u7684 0 \u591a\uff0c\u5c31\u53d8\u6210\u8c01\n                // \u53ea\u6709 3 \u8fd9\u4e00\u4e2a\u7279\u4f8b\n                if (n == 3 || countTailZeros(n - 1) > countTailZeros(n + 1)) {\n                    n--;\n                } else {\n                    n++;\n                }\n            }\n        }\n        return res;\n    }\n\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01\n    // 110100 52 26 13\n\n    // \u8fd9\u4e2a\u505a\u6cd5\u6709\u70b9\"\u8fc7\"\uff0c\u662f\u5f88\u5145\u5206\u7684\u505a\u6cd5\n    private int countTailZeros(int num) {\n        int count = 0;\n        while (num % 2 == 0) {\n            count++;\n            num >>= 1;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Integer.toBinaryString(Integer.MAX_VALUE));\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u8fd9\u79cd\u5199\u6cd5\u8981\u4f7f\u7528\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\u3002"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#4",
            "text": "public class Solution4 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttps://segmentfault.com/a/1190000007318944\n\n    public int integerReplacement(int n) {\n        long num = n;\n        int res = 0;\n        while (num != 1) {\n            res++;\n            if ((num & 1) == 0) {\n                // \u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u53f3\u79fb\n                num >>= 1;\n            } else {\n                // \u662f\u5947\u6570\u7684\u65f6\u5019\n                // 2 \u7684\u4e8c\u8fdb\u5236\u662f 10\uff0c\u5373\u5982\u679c\u5012\u6570\u7b2c 2 \u4f4d\u662f 1 \u7684\u8bdd\n                // \u52a0 1 \u80fd\u6d88\u8017\u6389\u66f4\u591a\u7684 1\n                // \u4f8b\u5982\uff1a\n                // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 0\uff0c\u90a3\u4e48 n - 1 \u7684\u64cd\u4f5c\u6bd4 n + 1 \u7684\u64cd\u4f5c\u80fd\u6d88\u6389\u66f4\u591a\u7684 1\n                // 1001 + 1 = 1010\n                // 1001 - 1 = 1000\n                // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 1\uff0c\u90a3\u4e48 n + 1 \u7684\u64cd\u4f5c\u80fd\u6bd4 n - 1\u7684\u64cd\u4f5c\u6d88\u6389\u66f4\u591a\u7684 1\n                // 1011 + 1 = 1100\n                // 1111 + 1 = 10000\n                if ((num & 2) != 0 && num != 3) {\n                    num++;\n                } else {\n                    num--;\n                }\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u8fd9\u79cd\u89e3\u6cd5\u66f4\u6df1\u5730\u6316\u6398\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u7684\u6027\u8d28\u3002"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#1_1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0397-integer-replacement/#1_2",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0397-integer-replacement  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0398-random-pick-index/",
            "text": "398. Random Pick Index\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002\n\n\n\u793a\u4f8b:\n\n\nint[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002\nsolution.pick(3);\n\n// pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002\nsolution.pick(1);\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n398. Random Pick Index\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n398. \u968f\u673a\u6570\u7d22\u5f15\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0398-random-pick-index\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "398. Random Pick Index"
        },
        {
            "location": "/leetcode-0398-random-pick-index/#398-random-pick-index",
            "text": "",
            "title": "398. Random Pick Index"
        },
        {
            "location": "/leetcode-0398-random-pick-index/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002  \u6ce8\u610f\uff1a \n\u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002  \u793a\u4f8b:  int[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002\nsolution.pick(3);\n\n// pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002\nsolution.pick(1);     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 398. Random Pick Index   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 398. \u968f\u673a\u6570\u7d22\u5f15   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0398-random-pick-index/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0398-random-pick-index/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0398-random-pick-index/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0398-random-pick-index  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/",
            "text": "405. Convert a Number to Hexadecimal\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u00a0\n\u8865\u7801\u8fd0\u7b97\n\u00a0\u65b9\u6cd5\u3002\n\n\n\u6ce8\u610f:\n\n\n\n\n\u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd(\na-f\n)\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002\n\n\n\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26\n'0'\n\u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002\u00a0\n\n\n\u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002\n\n\n\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002\n\n\n\n\n\u793a\u4f8b 1\uff1a\n\n\n\u8f93\u5165:\n26\n\n\u8f93\u51fa:\n\"1a\"\n\n\n\n\u793a\u4f8b 2\uff1a\n\n\n\u8f93\u5165:\n-1\n\n\u8f93\u51fa:\n\"ffffffff\"\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n405. Convert a Number to Hexadecimal\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u4e5f\u6bd4\u8f83\u5178\u578b\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u4f4e 4 \u4f4d\u505a\u4e00\u4e2a\u6620\u5c04\u3002\n\n\n\n\n\u7279\u522b\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u524d\u5bfc \u201c0\u201d\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u4ee5\u540e\u9ad8\u4f4d\u662f 0 \u7684\u60c5\u51b5\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    /**\n     * \u7d22\u5f15\u5230\u5b57\u7b26\u7684\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u5b57\u5178\u7684\u529f\u80fd\n     */\n    private static char[] map = {'0', '1', '2', '3', '4', '5', '6', '7',\n            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n\n    /**\n     * 15 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5c31\u662f 1111\n     */\n    private static final int MASK = 15;\n\n    public String toHex(int num) {\n        // \u6ce8\u610f\u70b9 1\uff1a\u5bf9\u4e8e 0 \u7684\u7279\u6b8a\u5904\u7406\n        if (num == 0) {\n            return \"0\";\n        }\n        StringBuilder hex = new StringBuilder();\n        // \u6ce8\u610f\u70b9 2\uff1a\u5982\u679c\u9ad8\u4f4d\u5df2\u7ecf\u662f 0 \uff0c\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\uff0c\u8fd9\u662f\u9898\u76ee\u4e2d\u7684\u8981\u6c42\n        for (int i = 0; i < 8 && num != 0; i++) {\n            // \u53d6\u6700\u4f4e 4 \u4f4d\uff0c\u8fdb\u884c\u8f6c\u6362\n            hex.insert(0, map[num & MASK]);\n            // \u65e0\u7b26\u53f7\u53f3\u79fb 4 \u4f4d\n            // 10001011\n            num >>>= 4;\n        }\n        return hex.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 16;\n        String toHex = solution.toHex(num);\n        System.out.println(toHex);\n\n        System.out.println(-1);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0405-convert-a-number-to-hexadecimal\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "405. Convert a Number to Hexadecimal"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/#405-convert-a-number-to-hexadecimal",
            "text": "",
            "title": "405. Convert a Number to Hexadecimal"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u00a0 \u8865\u7801\u8fd0\u7b97 \u00a0\u65b9\u6cd5\u3002  \u6ce8\u610f:   \u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd( a-f )\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002  \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26 '0' \u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002\u00a0  \u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002  \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002   \u793a\u4f8b 1\uff1a  \u8f93\u5165:\n26\n\n\u8f93\u51fa:\n\"1a\"  \u793a\u4f8b 2\uff1a  \u8f93\u5165:\n-1\n\n\u8f93\u51fa:\n\"ffffffff\"     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 405. Convert a Number to Hexadecimal   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u4e5f\u6bd4\u8f83\u5178\u578b\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u4f4e 4 \u4f4d\u505a\u4e00\u4e2a\u6620\u5c04\u3002   \u7279\u522b\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u524d\u5bfc \u201c0\u201d\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u4ee5\u540e\u9ad8\u4f4d\u662f 0 \u7684\u60c5\u51b5\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0405-convert-a-number-to-hexadecimal/#1",
            "text": "public class Solution {\n\n    /**\n     * \u7d22\u5f15\u5230\u5b57\u7b26\u7684\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u5b57\u5178\u7684\u529f\u80fd\n     */\n    private static char[] map = {'0', '1', '2', '3', '4', '5', '6', '7',\n            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n\n    /**\n     * 15 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5c31\u662f 1111\n     */\n    private static final int MASK = 15;\n\n    public String toHex(int num) {\n        // \u6ce8\u610f\u70b9 1\uff1a\u5bf9\u4e8e 0 \u7684\u7279\u6b8a\u5904\u7406\n        if (num == 0) {\n            return \"0\";\n        }\n        StringBuilder hex = new StringBuilder();\n        // \u6ce8\u610f\u70b9 2\uff1a\u5982\u679c\u9ad8\u4f4d\u5df2\u7ecf\u662f 0 \uff0c\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\uff0c\u8fd9\u662f\u9898\u76ee\u4e2d\u7684\u8981\u6c42\n        for (int i = 0; i < 8 && num != 0; i++) {\n            // \u53d6\u6700\u4f4e 4 \u4f4d\uff0c\u8fdb\u884c\u8f6c\u6362\n            hex.insert(0, map[num & MASK]);\n            // \u65e0\u7b26\u53f7\u53f3\u79fb 4 \u4f4d\n            // 10001011\n            num >>>= 4;\n        }\n        return hex.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 16;\n        String toHex = solution.toHex(num);\n        System.out.println(toHex);\n\n        System.out.println(-1);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0405-convert-a-number-to-hexadecimal  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0415-add-strings/",
            "text": "415. Add Strings\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570\u00a0\nnum1\n \u548c\nnum2\n\u00a0\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\nnum1\n \u548c\nnum2\n\u00a0\u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100.\n\n\nnum1\n \u548c\nnum2\n \u90fd\u53ea\u5305\u542b\u6570\u5b57\u00a0\n0-9\n.\n\n\nnum1\n \u548c\nnum2\n \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002\n\n\n\u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c\u00a0\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n415. Add Strings\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n415. \u5b57\u7b26\u4e32\u76f8\u52a0\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7b97\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u4e86\uff0c\u548c LeetCode \u7b2c 2 \u9898\u662f\u4e00\u7c7b\u95ee\u9898\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public String addStrings(String num1, String num2) {\n        StringBuilder stringBuilder = new StringBuilder();\n        int len1 = num1.length();\n        int len2 = num2.length();\n\n        // \u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\n        if (len1 == 0) {\n            return num2;\n        }\n        if (len2 == 0) {\n            return num1;\n        }\n\n        int index1 = len1 - 1;\n        int index2 = len2 - 1;\n        int sum = 0;\n        while (index1 >= 0 || index2 >= 0) {\n            if (index1 >= 0) {\n                int a = num1.charAt(index1) - '0';\n                sum += a;\n                index1--;\n            }\n\n            if (index2 >= 0) {\n                int b = num2.charAt(index2) - '0';\n                sum += b;\n                index2--;\n            }\n\n            stringBuilder.append(sum % 10);\n            // \u8868\u793a\u662f\u5426\u8fdb\u4f4d\n            sum /= 10;\n        }\n\n        // \u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86\n        if (sum == 1) {\n            stringBuilder.append(1);\n        }\n        return stringBuilder.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String num1 = \"1234\";\n        String num2 = \"5678\";\n        String addStrings = solution.addStrings(num1, num2);\n        System.out.println(addStrings);\n\n        System.out.println(Integer.valueOf(num1) + Integer.valueOf(num2));\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0415-add-strings\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "415. Add Strings"
        },
        {
            "location": "/leetcode-0415-add-strings/#415-add-strings",
            "text": "",
            "title": "415. Add Strings"
        },
        {
            "location": "/leetcode-0415-add-strings/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570\u00a0 num1  \u548c num2 \u00a0\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002  \u6ce8\u610f\uff1a   num1  \u548c num2 \u00a0\u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100.  num1  \u548c num2  \u90fd\u53ea\u5305\u542b\u6570\u5b57\u00a0 0-9 .  num1  \u548c num2  \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002  \u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c\u00a0\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 415. Add Strings   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 415. \u5b57\u7b26\u4e32\u76f8\u52a0   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0415-add-strings/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7b97\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u4e86\uff0c\u548c LeetCode \u7b2c 2 \u9898\u662f\u4e00\u7c7b\u95ee\u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0415-add-strings/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0415-add-strings/#1",
            "text": "public class Solution {\n\n    public String addStrings(String num1, String num2) {\n        StringBuilder stringBuilder = new StringBuilder();\n        int len1 = num1.length();\n        int len2 = num2.length();\n\n        // \u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\n        if (len1 == 0) {\n            return num2;\n        }\n        if (len2 == 0) {\n            return num1;\n        }\n\n        int index1 = len1 - 1;\n        int index2 = len2 - 1;\n        int sum = 0;\n        while (index1 >= 0 || index2 >= 0) {\n            if (index1 >= 0) {\n                int a = num1.charAt(index1) - '0';\n                sum += a;\n                index1--;\n            }\n\n            if (index2 >= 0) {\n                int b = num2.charAt(index2) - '0';\n                sum += b;\n                index2--;\n            }\n\n            stringBuilder.append(sum % 10);\n            // \u8868\u793a\u662f\u5426\u8fdb\u4f4d\n            sum /= 10;\n        }\n\n        // \u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86\n        if (sum == 1) {\n            stringBuilder.append(1);\n        }\n        return stringBuilder.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String num1 = \"1234\";\n        String num2 = \"5678\";\n        String addStrings = solution.addStrings(num1, num2);\n        System.out.println(addStrings);\n\n        System.out.println(Integer.valueOf(num1) + Integer.valueOf(num2));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0415-add-strings  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/",
            "text": "421. Maximum XOR of Two Numbers in an Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a\n0\n, a\n1\n, a\n2\n, \u2026 , a\nn-1\n\uff0c\u5176\u4e2d 0 \u2264 a\ni\n < 2\n31\u00a0\n\u3002\n\n\n\u627e\u5230 a\ni\n \u548ca\nj\u00a0\n\u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 \u2264 \ni\n,\u00a0\u00a0\nj\n < \nn\u00a0\n\u3002\n\n\n\u4f60\u80fd\u5728O(\nn\n)\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n [3, 10, 5, 25, 2, 8]\n\n\n\u8f93\u51fa:\n 28\n\n\n\u89e3\u91ca:\n \u6700\u5927\u7684\u7ed3\u679c\u662f \n5\n ^ \n25\n = 28.\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n421. Maximum XOR of Two Numbers in an Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u4f46\u4e0d\u63a8\u8350\u3002\n\n\npublic class Solution {\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        int res = 0;\n        // i \u5230 len -2 \u5c31\u53ef\u4ee5\u4e86\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                res = Math.max(res, nums[i] ^ nums[j]);\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u51b3\u5b9a\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\u3002\n\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public int findMaximumXOR(int[] nums) {\n        int res = 0;\n        int mask = 0;\n        for (int i = 31; i >= 0; i--) {\n            // \u6ce8\u610f\u70b91\uff1a\u6ce8\u610f\u4fdd\u7559\u524d\u7f00\u7684\u65b9\u6cd5\uff0cmask \u662f\u8fd9\u6837\u5f97\u6765\u7684\n            // \u7528\u5f02\u6216\u4e5f\u662f\u53ef\u4ee5\u7684 mask = mask ^ (1 << i);\n            mask = mask | (1 << i);\n            Set<Integer> set = new HashSet<>();\n            for (int num : nums) {\n                // \u6ce8\u610f\u70b92\uff1a\u8fd9\u91cc\u4f7f\u7528 & \uff0c\u4fdd\u7559\u524d\u7f00\u7684\u610f\u601d\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09\n                set.add(num & mask);\n            }\n\n            // \u8fd9\u91cc\u5148\u5047\u5b9a\u7b2c n \u4f4d\u4e3a 1 \uff0c\u524d n-1 \u4f4d res \u4e3a\u4e4b\u524d\u8fed\u4ee3\u6c42\u5f97\n            int temp = res | (1 << i);\n            for (Integer prefix : set) {\n                // \u5229\u7528\u6027\u8d28 a ^ b = c \uff0c\u5219 a ^ c = b\uff0c\u4e14 b ^ c = a\n                if (set.contains(prefix ^ temp)) {\n                    res = temp;\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002\n\n\npublic class Solution3 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html\n\n    private class TrieNode {\n        private TrieNode[] next;\n\n        public TrieNode() {\n            next = new TrieNode[2];\n        }\n    }\n\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        TrieNode root = new TrieNode();\n        // \u5c06\u6240\u6709\u7684 num \u6784\u5efa\u5230 Trie \u6570\u4e2d\n        for (int num : nums) {\n            TrieNode node = root;\n            for (int i = 30; i >= 0; i--) {\n                // \u770b\u770b\u6700\u9ad8\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\n                int cur = (num >>> i) & 1;\n                if (node.next[cur] == null) {\n                    node.next[cur] = new TrieNode();\n                }\n                node = node.next[cur];\n            }\n        }\n        int res = 0;\n        for (int num : nums) {\n            TrieNode node = root;\n            int xor = 0;\n            for (int i = 30; i >= 0; i--) {\n                int cur = (num >>> i) & 1;\n                if (node.next[cur ^ 1] != null) {\n                    xor |= (1 << i);\n                    node = node.next[cur ^ 1];\n                } else {\n                    node = node.next[cur];\n                }\n            }\n            res = Math.max(res, xor);\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002\n\n\npublic class Solution4 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html\n\n    private class TrieNode {\n        private TrieNode[] next;\n\n        public TrieNode() {\n            this.next = new TrieNode[2];\n        }\n    }\n\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        TrieNode root = new TrieNode();\n        int res = 0;\n        for (int num : nums) {\n            int xor = 0;\n            TrieNode insert = root;\n            TrieNode search = root;\n            for (int i = 30; i >= 0; i--) {\n                int bit = (num >>> i) & 1;\n                // 1 \u53d8\u6210 0 \uff0c0 \u53d8\u6210 1\n                int rbit = bit ^ 1;\n                if (insert.next[bit] == null) {\n                    insert.next[bit] = new TrieNode();\n                }\n                insert = insert.next[bit];\n                if (search != null) {\n                    if (search.next[rbit] != null) {\n                        xor += (1 << i);\n                        search = search.next[rbit];\n                    } else {\n                        search = search.next[bit];\n                    }\n                }\n            }\n            res = Math.max(res, xor);\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0421-maximum-xor-of-two-numbers-in-an-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "421. Maximum XOR of Two Numbers in an Array"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#421-maximum-xor-of-two-numbers-in-an-array",
            "text": "",
            "title": "421. Maximum XOR of Two Numbers in an Array"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a 0 , a 1 , a 2 , \u2026 , a n-1 \uff0c\u5176\u4e2d 0 \u2264 a i  < 2 31\u00a0 \u3002  \u627e\u5230 a i  \u548ca j\u00a0 \u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 \u2264  i ,\u00a0\u00a0 j  <  n\u00a0 \u3002  \u4f60\u80fd\u5728O( n )\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f  \u793a\u4f8b:  \u8f93\u5165:  [3, 10, 5, 25, 2, 8] \u8f93\u51fa:  28 \u89e3\u91ca:  \u6700\u5927\u7684\u7ed3\u679c\u662f  5  ^  25  = 28.     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 421. Maximum XOR of Two Numbers in an Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#1",
            "text": "public class Solution {\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        int res = 0;\n        // i \u5230 len -2 \u5c31\u53ef\u4ee5\u4e86\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                res = Math.max(res, nums[i] ^ nums[j]);\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u4f46\u4e0d\u63a8\u8350\u3002"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#2-1-0",
            "text": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public int findMaximumXOR(int[] nums) {\n        int res = 0;\n        int mask = 0;\n        for (int i = 31; i >= 0; i--) {\n            // \u6ce8\u610f\u70b91\uff1a\u6ce8\u610f\u4fdd\u7559\u524d\u7f00\u7684\u65b9\u6cd5\uff0cmask \u662f\u8fd9\u6837\u5f97\u6765\u7684\n            // \u7528\u5f02\u6216\u4e5f\u662f\u53ef\u4ee5\u7684 mask = mask ^ (1 << i);\n            mask = mask | (1 << i);\n            Set<Integer> set = new HashSet<>();\n            for (int num : nums) {\n                // \u6ce8\u610f\u70b92\uff1a\u8fd9\u91cc\u4f7f\u7528 & \uff0c\u4fdd\u7559\u524d\u7f00\u7684\u610f\u601d\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09\n                set.add(num & mask);\n            }\n\n            // \u8fd9\u91cc\u5148\u5047\u5b9a\u7b2c n \u4f4d\u4e3a 1 \uff0c\u524d n-1 \u4f4d res \u4e3a\u4e4b\u524d\u8fed\u4ee3\u6c42\u5f97\n            int temp = res | (1 << i);\n            for (Integer prefix : set) {\n                // \u5229\u7528\u6027\u8d28 a ^ b = c \uff0c\u5219 a ^ c = b\uff0c\u4e14 b ^ c = a\n                if (set.contains(prefix ^ temp)) {\n                    res = temp;\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u51b3\u5b9a\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\u3002"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#3trie",
            "text": "public class Solution3 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html\n\n    private class TrieNode {\n        private TrieNode[] next;\n\n        public TrieNode() {\n            next = new TrieNode[2];\n        }\n    }\n\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        TrieNode root = new TrieNode();\n        // \u5c06\u6240\u6709\u7684 num \u6784\u5efa\u5230 Trie \u6570\u4e2d\n        for (int num : nums) {\n            TrieNode node = root;\n            for (int i = 30; i >= 0; i--) {\n                // \u770b\u770b\u6700\u9ad8\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\n                int cur = (num >>> i) & 1;\n                if (node.next[cur] == null) {\n                    node.next[cur] = new TrieNode();\n                }\n                node = node.next[cur];\n            }\n        }\n        int res = 0;\n        for (int num : nums) {\n            TrieNode node = root;\n            int xor = 0;\n            for (int i = 30; i >= 0; i--) {\n                int cur = (num >>> i) & 1;\n                if (node.next[cur ^ 1] != null) {\n                    xor |= (1 << i);\n                    node = node.next[cur ^ 1];\n                } else {\n                    node = node.next[cur];\n                }\n            }\n            res = Math.max(res, xor);\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002"
        },
        {
            "location": "/leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#4trie",
            "text": "public class Solution4 {\n\n    // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html\n\n    private class TrieNode {\n        private TrieNode[] next;\n\n        public TrieNode() {\n            this.next = new TrieNode[2];\n        }\n    }\n\n    public int findMaximumXOR(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        TrieNode root = new TrieNode();\n        int res = 0;\n        for (int num : nums) {\n            int xor = 0;\n            TrieNode insert = root;\n            TrieNode search = root;\n            for (int i = 30; i >= 0; i--) {\n                int bit = (num >>> i) & 1;\n                // 1 \u53d8\u6210 0 \uff0c0 \u53d8\u6210 1\n                int rbit = bit ^ 1;\n                if (insert.next[bit] == null) {\n                    insert.next[bit] = new TrieNode();\n                }\n                insert = insert.next[bit];\n                if (search != null) {\n                    if (search.next[rbit] != null) {\n                        xor += (1 << i);\n                        search = search.next[rbit];\n                    } else {\n                        search = search.next[bit];\n                    }\n                }\n            }\n            res = Math.max(res, xor);\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0421-maximum-xor-of-two-numbers-in-an-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/",
            "text": "435. Non-overlapping Intervals\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002\n\n\n\u6ce8\u610f:\n\n\n\n\n\u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002\n\n\n\u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002\n\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [ [1,2], [2,3], [3,4], [1,3] ]\n\n\n\u8f93\u51fa:\n 1\n\n\n\u89e3\u91ca:\n \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n [ [1,2], [1,2], [1,2] ]\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n [ [1,2], [2,3] ]\n\n\n\u8f93\u51fa:\n 0\n\n\n\u89e3\u91ca:\n \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n435. Non-overlapping Intervals\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n435. \u65e0\u91cd\u53e0\u533a\u95f4\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9996\u5148\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u8fd9\u4e9b\u5b50\u533a\u95f4\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e2a\u4e0d\u91cd\u5408\u7684\u5b50\u533a\u95f4\u3002\n\n\n\u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u7528\u7c7b\u4f3c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e00\u6837\u7684\u601d\u8def\u6765\u6c42\u89e3\u3002\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nclass Interval {\n    int start;\n    int end;\n\n    Interval() {\n        start = 0;\n        end = 0;\n    }\n\n    Interval(int s, int e) {\n        start = s;\n        end = e;\n    }\n}\n\n/**\n * \u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\uff1a\n * \u5148\u5c06\u539f\u95ee\u9898\u8f6c\u6362\u6210\uff0c\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u533a\u95f4\n * \u7136\u540e\u4e3a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\n * \u6700\u540e\u5c06\u5b50\u533a\u95f4\u7684\u6570\u91cf - \u4e0a\u4e00\u6b65\u6240\u5f97\u7684\u7ed3\u679c\n */\npublic class Solution {\n    public int eraseOverlapIntervals(Interval[] intervals) {\n        int ilen = intervals.length;\n        if (ilen == 0) {\n            return 0;\n        }\n\n        Arrays.sort(intervals, new Comparator<Interval>() {\n            @Override\n            public int compare(Interval o1, Interval o2) {\n                if (o1.start != o2.start) {\n                    return o1.start - o2.start;\n                }\n                return o1.end - o2.end;\n            }\n        });\n\n        // dp[i] \u8868\u793a\u4ee5 intervals[i] \u4e3a\u7ed3\u5c3e\u7684\u533a\u95f4\u80fd\u591f\u6210\u7684\u6700\u957f\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u5e8f\u5217\u6709\u51e0\u4e2a\n        int[] dp = new int[ilen];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i < ilen; i++) {\n            for (int j = 0; j < i; j++) {\n                if (intervals[i].start >= intervals[j].end) {\n                    dp[i] = Integer.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        // System.out.println(Arrays.toString(dp));\n        int res = dp[0];\n        for (int i = 1; i < ilen; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return ilen - res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\n/**\n * \u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5982\u679c\u533a\u95f4\u7ed3\u5c3e\u5f97\u8d8a\u65e9\uff0c\u540e\u9762\u80fd\u591f\u63a5\u4e0a\u4e00\u4e2a\u65b0\u533a\u95f4\u7684\u6982\u7387\u5c31\u8d8a\u5927\n */\npublic class Solution2 {\n\n    public int eraseOverlapIntervals(Interval[] intervals) {\n        int ilen = intervals.length;\n        if (ilen == 0) {\n            return 0;\n        }\n        Arrays.sort(intervals, new Comparator<Interval>() {\n            @Override\n            public int compare(Interval o1, Interval o2) {\n                if (o1.end != o2.end) {\n                    return o1.end - o2.end;\n                }\n                return o1.start - o2.start;\n            }\n        });\n        int res = 1;\n        int pre = 0;\n        for (int i = 1; i < ilen; i++) {\n            if (intervals[i].start >= intervals[pre].end) {\n                res++;\n                pre = i;\n            }\n        }\n        return ilen - res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0435-non-overlapping-intervals\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "435. Non-overlapping Intervals"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#435-non-overlapping-intervals",
            "text": "",
            "title": "435. Non-overlapping Intervals"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002  \u6ce8\u610f:   \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002  \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002   \u793a\u4f8b 1:  \u8f93\u5165:  [ [1,2], [2,3], [3,4], [1,3] ] \u8f93\u51fa:  1 \u89e3\u91ca:  \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  [ [1,2], [1,2], [1,2] ] \u8f93\u51fa:  2 \u89e3\u91ca:  \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002  \u793a\u4f8b 3:  \u8f93\u5165:  [ [1,2], [2,3] ] \u8f93\u51fa:  0 \u89e3\u91ca:  \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 435. Non-overlapping Intervals   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 435. \u65e0\u91cd\u53e0\u533a\u95f4   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9996\u5148\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u8fd9\u4e9b\u5b50\u533a\u95f4\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e2a\u4e0d\u91cd\u5408\u7684\u5b50\u533a\u95f4\u3002  \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u7528\u7c7b\u4f3c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e00\u6837\u7684\u601d\u8def\u6765\u6c42\u89e3\u3002  \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#1",
            "text": "import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Interval {\n    int start;\n    int end;\n\n    Interval() {\n        start = 0;\n        end = 0;\n    }\n\n    Interval(int s, int e) {\n        start = s;\n        end = e;\n    }\n}\n\n/**\n * \u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\uff1a\n * \u5148\u5c06\u539f\u95ee\u9898\u8f6c\u6362\u6210\uff0c\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u533a\u95f4\n * \u7136\u540e\u4e3a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\n * \u6700\u540e\u5c06\u5b50\u533a\u95f4\u7684\u6570\u91cf - \u4e0a\u4e00\u6b65\u6240\u5f97\u7684\u7ed3\u679c\n */\npublic class Solution {\n    public int eraseOverlapIntervals(Interval[] intervals) {\n        int ilen = intervals.length;\n        if (ilen == 0) {\n            return 0;\n        }\n\n        Arrays.sort(intervals, new Comparator<Interval>() {\n            @Override\n            public int compare(Interval o1, Interval o2) {\n                if (o1.start != o2.start) {\n                    return o1.start - o2.start;\n                }\n                return o1.end - o2.end;\n            }\n        });\n\n        // dp[i] \u8868\u793a\u4ee5 intervals[i] \u4e3a\u7ed3\u5c3e\u7684\u533a\u95f4\u80fd\u591f\u6210\u7684\u6700\u957f\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u5e8f\u5217\u6709\u51e0\u4e2a\n        int[] dp = new int[ilen];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i < ilen; i++) {\n            for (int j = 0; j < i; j++) {\n                if (intervals[i].start >= intervals[j].end) {\n                    dp[i] = Integer.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        // System.out.println(Arrays.toString(dp));\n        int res = dp[0];\n        for (int i = 1; i < ilen; i++) {\n            res = Integer.max(res, dp[i]);\n        }\n        return ilen - res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0435-non-overlapping-intervals/#2",
            "text": "import java.util.Arrays;\nimport java.util.Comparator;\n\n/**\n * \u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5982\u679c\u533a\u95f4\u7ed3\u5c3e\u5f97\u8d8a\u65e9\uff0c\u540e\u9762\u80fd\u591f\u63a5\u4e0a\u4e00\u4e2a\u65b0\u533a\u95f4\u7684\u6982\u7387\u5c31\u8d8a\u5927\n */\npublic class Solution2 {\n\n    public int eraseOverlapIntervals(Interval[] intervals) {\n        int ilen = intervals.length;\n        if (ilen == 0) {\n            return 0;\n        }\n        Arrays.sort(intervals, new Comparator<Interval>() {\n            @Override\n            public int compare(Interval o1, Interval o2) {\n                if (o1.end != o2.end) {\n                    return o1.end - o2.end;\n                }\n                return o1.start - o2.start;\n            }\n        });\n        int res = 1;\n        int pre = 0;\n        for (int i = 1; i < ilen; i++) {\n            if (intervals[i].start >= intervals[pre].end) {\n                res++;\n                pre = i;\n            }\n        }\n        return ilen - res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0435-non-overlapping-intervals  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/",
            "text": "438. Find All Anagrams in a String\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0\ns\u00a0\n\u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\u00a0\np\n\uff0c\u627e\u5230\u00a0\ns\u00a0\n\u4e2d\u6240\u6709\u662f\u00a0\np\u00a0\n\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002\n\n\n\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u00a0\ns\u00a0\n\u548c \np\u00a0\n\u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002\n\n\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n\ns: \"cbaebabacd\" p: \"abc\"\n\n\n\u8f93\u51fa:\n\n[0, 6]\n\n\n\u89e3\u91ca:\n\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\n\n\n\u00a0\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n\ns: \"abab\" p: \"ab\"\n\n\n\u8f93\u51fa:\n\n[0, 1, 2]\n\n\n\u89e3\u91ca:\n\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n438. Find All Anagrams in a String\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u6211\u7528\u4e86\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\u624d\u628a\u8fd9\u4e2a\u89e3\u7b54\u5199\u6e05\u695a\uff0c\u786e\u5b9e\u6709\u70b9\u7ed5\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n\n    // \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u89e3\u51b3\uff0c\u6807\u8bb0\u4e3a\u7b80\u5355\u54e6\n    // s = \"cbaebabacd\"\uff0cp = \"abc\"\n    // \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/chenwuji91/article/details/52981530\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n\n        // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5\n        if (s == null || s.length() == 0 || p == null || p.length() == 0) {\n            return res;\n        }\n\n        // \u8fd9\u4e2a hash \u8868\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5373\u8ba1\u6570\u503c\n        // ASCII \u7684\u957f\u5ea6\u662f 256 \u4f4d\n\n        int[] hash = new int[256];\n\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\n        int l = 0;\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\n        int r = 0;\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\n        int distance = p.length();\n        for (char c : p.toCharArray()) {\n            hash[c]++;\n        }\n\n        int sLen = s.length();\n        while (r < sLen) {\n            if (hash[s.charAt(r)] > 0) {\n                // \u5438\u7eb3\u8fdb\u6765\u4ee5\u540e\uff0c\u8bf4\u660e\u5dee\u8ddd\u51cf\u5c11 1\n                distance--;\n            }\n            // \u5982\u679c\u662f\u7b49\u4e8e 0 \u7684\u5c31\u8bf4\u660e\u6ca1\u6709\u51fa\u73b0\u5728 p \u4e2d\uff0c\u4e5f --\uff0c\u4ee5\u540e\u5de6\u8fb9\u754c\u626b\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u5b83\u4e0d\u5728 p \u6307\u5b9a\u7684\u8303\u56f4\u4e2d\u4e86\n            // \u4e0d\u7ba1\u5f53\u524d\u5b57\u7b26\u5728\u4e0d\u5728 hash \u8868\u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\uff08\u542c\u4e0b\u6765\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\n            hash[s.charAt(r)]--;\n            r++;\n            if (distance == 0) {\n                // \u5dee\u8ddd\u4e3a 0 \u4e86\uff0c\u5c31\u8868\u793a\u662f\u4e00\u4e2a\u7ed3\u679c\uff0c\u5de6\u7aef\u70b9\u52a0\u5165\u7ed3\u679c\u96c6\n                res.add(l);\n            }\n            if (r - l == p.length()) {\n                // \u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u5b57\u7b26\u5728 p \u4e2d\uff0c\u90a3\u4e9b\u662f\u8d1f\u7684\u5b57\u7b26\u8bf4\u660e\u4e0d\u5728 p \u4e2d\n                if (hash[s.charAt(l)] >= 0) {\n                    // \u5dee\u8ddd\u53c8\u62c9\u5927\u4e86 1\n                    // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\uff0c\u5dee\u8ddd\u52a0\u5927 1\n                    distance++;\n                }\n                // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\n                // \u4e0d\u7ba1 \u5b57\u7b26 \u5728\u4e0d\u5728 p \u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\n                hash[s.charAt(l)]++;\n                l++;\n            }\n        }\n        // System.out.println(Arrays.toString(hash));\n        return res;\n    }\n\n    // c b a e b a b a c d\n    // 0 1 2 3 4\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"cbaebabacd\";\n        String p = \"abc\";\n        List<Integer> anagrams = solution.findAnagrams(s, p);\n        System.out.println(anagrams);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n        // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\uff0c\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\n        int[] chars = new int[26];\n        if (s == null || s.length() == 0 || p == null || p.length() == 0) {\n            return res;\n        }\n        for (char c : p.toCharArray()) {\n            chars[c - 'a']++;\n        }\n        int left = 0;\n        int right = 0;\n        int distance = p.length();\n        while (right < s.length()) {\n            if (chars[s.charAt(right) - 'a'] > 0) {\n                distance--;\n            }\n            chars[s.charAt(right) - 'a']--;\n            right++;\n            if (distance == 0) {\n                res.add(left);\n            }\n\n            if (right - left == p.length()) {\n                if (chars[s.charAt(left) - 'a'] >= 0) {\n                    distance++;\n                }\n                chars[s.charAt(left) - 'a']++;\n                left++;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution3 {\n\n    // \u53c2\u8003\u4e86\u5c0f Q \u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd8\u662f\u6ed1\u52a8\u7a97\u53e3\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n        int[] cntp = new int[256];\n        int[] cnts = new int[256];\n        for (char c : p.toCharArray()) {\n            cntp[c]++;\n        }\n        int same = 0;\n        for (int i = 0; i < 256; i++) {\n            if (cntp[i] == 0) {\n                same++;\n            }\n        }\n        int plen = p.length();\n        int slen = s.length();\n        for (int i = 0; i < slen; i++) {\n            int curChar = s.charAt(i);\n            cnts[curChar]++;\n            if (cnts[curChar] == cntp[curChar]) {\n                same++;\n            } else if (cnts[curChar] == cntp[curChar] + 1) {\n                // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86\n                same--;\n            }\n            // \u5f53 i>= p.lenght() \u7684\u65f6\u5019\uff0c\u5de6\u8fb9\u7a97\u53e3\u8981\u8003\u8651\u5de6\u79fb\u4e86\n            if (i >= plen) {\n                int deleteChar = s.charAt(i - plen);\n                cnts[deleteChar]--;\n                if (cnts[deleteChar] == cntp[deleteChar]) {\n                    same++;\n                } else if (cnts[deleteChar] == cntp[deleteChar] - 1) {\n                    // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86\n                    same--;\n                }\n            }\n            if (same == 256) {\n                res.add(i - plen + 1);\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b543 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution5 {\n\n    // \u8fd9\u79cd\u89e3\u6cd5\u4ece\u8bed\u4e49\u4e0a\u66f4\u597d\u7406\u89e3\u4e00\u4e9b\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n\n        int[] cntp = new int[26];\n        int[] cnts = new int[26];\n\n        int plen = p.length();\n        int slen = s.length();\n\n        // \u6570\u7ec4 cntp \u5728\u9884\u5904\u7406\u4ee5\u540e\u662f\u6ca1\u6709\u53d8\u5316\u7684\n        for (int i = 0; i < plen; i++) {\n            cntp[p.charAt(i) - 'a']++;\n        }\n\n        int same = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cntp[i] == 0) {\n                same++;\n            }\n        }\n\n        for (int i = 0; i < slen; i++) {\n            char curChar = s.charAt(i);\n            cnts[curChar - 'a']++;\n            if (cnts[curChar - 'a'] == cntp[curChar - 'a']) {\n                same++;\n            } else if (cnts[curChar - 'a'] == cntp[curChar - 'a'] + 1) {\n                same--;\n            }\n\n            if (i >= plen) {\n                int deleteIndex = i - plen;\n                char deleteChar = s.charAt(deleteIndex);\n                cnts[deleteChar - 'a']--;\n                if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a']) {\n                    same++;\n                } else if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a'] - 1) {\n                    same--;\n                }\n            }\n\n            if (same == 26) {\n                res.add(i - plen + 1);\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0438-find-all-anagrams-in-a-string\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "438. Find All Anagrams in a String"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#438-find-all-anagrams-in-a-string",
            "text": "",
            "title": "438. Find All Anagrams in a String"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0 s\u00a0 \u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\u00a0 p \uff0c\u627e\u5230\u00a0 s\u00a0 \u4e2d\u6240\u6709\u662f\u00a0 p\u00a0 \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002  \u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u00a0 s\u00a0 \u548c  p\u00a0 \u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002  \u8bf4\u660e\uff1a   \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002  \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002   \u793a\u4f8b\u00a01:  \u8f93\u5165: \ns: \"cbaebabacd\" p: \"abc\" \u8f93\u51fa: \n[0, 6] \u89e3\u91ca: \n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002  \u00a0\u793a\u4f8b 2:  \u8f93\u5165: \ns: \"abab\" p: \"ab\" \u8f93\u51fa: \n[0, 1, 2] \u89e3\u91ca: \n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 438. Find All Anagrams in a String   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n\n    // \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u89e3\u51b3\uff0c\u6807\u8bb0\u4e3a\u7b80\u5355\u54e6\n    // s = \"cbaebabacd\"\uff0cp = \"abc\"\n    // \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/chenwuji91/article/details/52981530\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n\n        // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5\n        if (s == null || s.length() == 0 || p == null || p.length() == 0) {\n            return res;\n        }\n\n        // \u8fd9\u4e2a hash \u8868\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5373\u8ba1\u6570\u503c\n        // ASCII \u7684\u957f\u5ea6\u662f 256 \u4f4d\n\n        int[] hash = new int[256];\n\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\n        int l = 0;\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\n        int r = 0;\n        // \u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\n        int distance = p.length();\n        for (char c : p.toCharArray()) {\n            hash[c]++;\n        }\n\n        int sLen = s.length();\n        while (r < sLen) {\n            if (hash[s.charAt(r)] > 0) {\n                // \u5438\u7eb3\u8fdb\u6765\u4ee5\u540e\uff0c\u8bf4\u660e\u5dee\u8ddd\u51cf\u5c11 1\n                distance--;\n            }\n            // \u5982\u679c\u662f\u7b49\u4e8e 0 \u7684\u5c31\u8bf4\u660e\u6ca1\u6709\u51fa\u73b0\u5728 p \u4e2d\uff0c\u4e5f --\uff0c\u4ee5\u540e\u5de6\u8fb9\u754c\u626b\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u5b83\u4e0d\u5728 p \u6307\u5b9a\u7684\u8303\u56f4\u4e2d\u4e86\n            // \u4e0d\u7ba1\u5f53\u524d\u5b57\u7b26\u5728\u4e0d\u5728 hash \u8868\u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\uff08\u542c\u4e0b\u6765\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\n            hash[s.charAt(r)]--;\n            r++;\n            if (distance == 0) {\n                // \u5dee\u8ddd\u4e3a 0 \u4e86\uff0c\u5c31\u8868\u793a\u662f\u4e00\u4e2a\u7ed3\u679c\uff0c\u5de6\u7aef\u70b9\u52a0\u5165\u7ed3\u679c\u96c6\n                res.add(l);\n            }\n            if (r - l == p.length()) {\n                // \u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u5b57\u7b26\u5728 p \u4e2d\uff0c\u90a3\u4e9b\u662f\u8d1f\u7684\u5b57\u7b26\u8bf4\u660e\u4e0d\u5728 p \u4e2d\n                if (hash[s.charAt(l)] >= 0) {\n                    // \u5dee\u8ddd\u53c8\u62c9\u5927\u4e86 1\n                    // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\uff0c\u5dee\u8ddd\u52a0\u5927 1\n                    distance++;\n                }\n                // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\n                // \u4e0d\u7ba1 \u5b57\u7b26 \u5728\u4e0d\u5728 p \u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\n                hash[s.charAt(l)]++;\n                l++;\n            }\n        }\n        // System.out.println(Arrays.toString(hash));\n        return res;\n    }\n\n    // c b a e b a b a c d\n    // 0 1 2 3 4\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"cbaebabacd\";\n        String p = \"abc\";\n        List<Integer> anagrams = solution.findAnagrams(s, p);\n        System.out.println(anagrams);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u6211\u7528\u4e86\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\u624d\u628a\u8fd9\u4e2a\u89e3\u7b54\u5199\u6e05\u695a\uff0c\u786e\u5b9e\u6709\u70b9\u7ed5\u3002"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#21",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n        // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\uff0c\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\n        int[] chars = new int[26];\n        if (s == null || s.length() == 0 || p == null || p.length() == 0) {\n            return res;\n        }\n        for (char c : p.toCharArray()) {\n            chars[c - 'a']++;\n        }\n        int left = 0;\n        int right = 0;\n        int distance = p.length();\n        while (right < s.length()) {\n            if (chars[s.charAt(right) - 'a'] > 0) {\n                distance--;\n            }\n            chars[s.charAt(right) - 'a']--;\n            right++;\n            if (distance == 0) {\n                res.add(left);\n            }\n\n            if (right - left == p.length()) {\n                if (chars[s.charAt(left) - 'a'] >= 0) {\n                    distance++;\n                }\n                chars[s.charAt(left) - 'a']++;\n                left++;\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#3",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution3 {\n\n    // \u53c2\u8003\u4e86\u5c0f Q \u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd8\u662f\u6ed1\u52a8\u7a97\u53e3\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n        int[] cntp = new int[256];\n        int[] cnts = new int[256];\n        for (char c : p.toCharArray()) {\n            cntp[c]++;\n        }\n        int same = 0;\n        for (int i = 0; i < 256; i++) {\n            if (cntp[i] == 0) {\n                same++;\n            }\n        }\n        int plen = p.length();\n        int slen = s.length();\n        for (int i = 0; i < slen; i++) {\n            int curChar = s.charAt(i);\n            cnts[curChar]++;\n            if (cnts[curChar] == cntp[curChar]) {\n                same++;\n            } else if (cnts[curChar] == cntp[curChar] + 1) {\n                // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86\n                same--;\n            }\n            // \u5f53 i>= p.lenght() \u7684\u65f6\u5019\uff0c\u5de6\u8fb9\u7a97\u53e3\u8981\u8003\u8651\u5de6\u79fb\u4e86\n            if (i >= plen) {\n                int deleteChar = s.charAt(i - plen);\n                cnts[deleteChar]--;\n                if (cnts[deleteChar] == cntp[deleteChar]) {\n                    same++;\n                } else if (cnts[deleteChar] == cntp[deleteChar] - 1) {\n                    // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86\n                    same--;\n                }\n            }\n            if (same == 256) {\n                res.add(i - plen + 1);\n            }\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a"
        },
        {
            "location": "/leetcode-0438-find-all-anagrams-in-a-string/#43",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution5 {\n\n    // \u8fd9\u79cd\u89e3\u6cd5\u4ece\u8bed\u4e49\u4e0a\u66f4\u597d\u7406\u89e3\u4e00\u4e9b\n\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res = new ArrayList<>();\n\n        int[] cntp = new int[26];\n        int[] cnts = new int[26];\n\n        int plen = p.length();\n        int slen = s.length();\n\n        // \u6570\u7ec4 cntp \u5728\u9884\u5904\u7406\u4ee5\u540e\u662f\u6ca1\u6709\u53d8\u5316\u7684\n        for (int i = 0; i < plen; i++) {\n            cntp[p.charAt(i) - 'a']++;\n        }\n\n        int same = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cntp[i] == 0) {\n                same++;\n            }\n        }\n\n        for (int i = 0; i < slen; i++) {\n            char curChar = s.charAt(i);\n            cnts[curChar - 'a']++;\n            if (cnts[curChar - 'a'] == cntp[curChar - 'a']) {\n                same++;\n            } else if (cnts[curChar - 'a'] == cntp[curChar - 'a'] + 1) {\n                same--;\n            }\n\n            if (i >= plen) {\n                int deleteIndex = i - plen;\n                char deleteChar = s.charAt(deleteIndex);\n                cnts[deleteChar - 'a']--;\n                if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a']) {\n                    same++;\n                } else if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a'] - 1) {\n                    same--;\n                }\n            }\n\n            if (same == 26) {\n                res.add(i - plen + 1);\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0438-find-all-anagrams-in-a-string  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b543 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/",
            "text": "442. Find All Duplicates in an Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 \u2264 a[i] \u2264 \nn\n \uff08\nn\n\u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0\n\u4e24\u6b21\n\u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0\n\u4e00\u6b21\n\u3002\n\n\n\u627e\u5230\u6240\u6709\u51fa\u73b0\n\u4e24\u6b21\n\u7684\u5143\u7d20\u3002\n\n\n\u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O(\nn\n)\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165:\n\n[4,3,2,7,8,2,3,1]\n\n\n\u8f93\u51fa:\n\n[2,3]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n442. Find All Duplicates in an Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<Integer> findDuplicates(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        for (int i = 0; i < len; i++) {\n            while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            if (nums[i] - 1 != i) {\n                res.add(nums[i]);\n            }\n        }\n        return res;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};\n        Solution solution = new Solution();\n        List<Integer> duplicates = solution.findDuplicates(nums);\n        System.out.println(duplicates);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0442-find-all-duplicates-in-an-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "442. Find All Duplicates in an Array"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/#442-find-all-duplicates-in-an-array",
            "text": "",
            "title": "442. Find All Duplicates in an Array"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 \u2264 a[i] \u2264  n  \uff08 n \u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0 \u4e24\u6b21 \u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0 \u4e00\u6b21 \u3002  \u627e\u5230\u6240\u6709\u51fa\u73b0 \u4e24\u6b21 \u7684\u5143\u7d20\u3002  \u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O( n )\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f  \u793a\u4f8b\uff1a  \u8f93\u5165: \n[4,3,2,7,8,2,3,1] \u8f93\u51fa: \n[2,3]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 442. Find All Duplicates in an Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0442-find-all-duplicates-in-an-array/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<Integer> findDuplicates(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        for (int i = 0; i < len; i++) {\n            while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            if (nums[i] - 1 != i) {\n                res.add(nums[i]);\n            }\n        }\n        return res;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};\n        Solution solution = new Solution();\n        List<Integer> duplicates = solution.findDuplicates(nums);\n        System.out.println(duplicates);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0442-find-all-duplicates-in-an-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/",
            "text": "445. Add Two Numbers II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\n\u975e\u7a7a\n\u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002\n\n\n\u00a0\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002\n\n\n\u8fdb\u9636:\n\n\n\u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\n\n\u8f93\u51fa:\n 7 -> 8 -> 0 -> 7\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n445. Add Two Numbers II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n445. \u4e24\u6570\u76f8\u52a0 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6808\u5c06\u4e24\u4e2a\u94fe\u8868\u9006\u5411\u5b58\u50a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u4e2a\u4f4d\u5f00\u59cb\u5bf9\u9f50\u76f8\u52a0\u3001\u8fdb\u4f4d\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        stack1 = []\n        stack2 = []\n        p1 = l1\n        p2 = l2\n        while p1:\n            stack1.append(p1.val)\n            p1 = p1.next\n        while p2:\n            stack2.append(p2.val)\n            p2 = p2.next\n        res = []\n        s = 0\n        while stack1 or stack2:\n            if stack1:\n                s += stack1.pop()\n            if stack2:\n                s += stack2.pop()\n            res.append(s % 10)\n            s //= 10\n        if s == 1:\n            res.append(1)\n        head = ListNode(res.pop())\n        cur_node = head\n        while len(res):\n            cur_node.next = ListNode(res.pop())\n            cur_node = cur_node.next\n        return head\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "445. Add Two Numbers II"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/#445-add-two-numbers-ii",
            "text": "",
            "title": "445. Add Two Numbers II"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002  \u00a0  \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002  \u8fdb\u9636:  \u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002  \u793a\u4f8b:  \u8f93\u5165:  (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa:  7 -> 8 -> 0 -> 7    \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 445. Add Two Numbers II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 445. \u4e24\u6570\u76f8\u52a0 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6808\u5c06\u4e24\u4e2a\u94fe\u8868\u9006\u5411\u5b58\u50a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u4e2a\u4f4d\u5f00\u59cb\u5bf9\u9f50\u76f8\u52a0\u3001\u8fdb\u4f4d",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0445-add-two-numbers-ii/#1",
            "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        stack1 = []\n        stack2 = []\n        p1 = l1\n        p2 = l2\n        while p1:\n            stack1.append(p1.val)\n            p1 = p1.next\n        while p2:\n            stack2.append(p2.val)\n            p2 = p2.next\n        res = []\n        s = 0\n        while stack1 or stack2:\n            if stack1:\n                s += stack1.pop()\n            if stack2:\n                s += stack2.pop()\n            res.append(s % 10)\n            s //= 10\n        if s == 1:\n            res.append(1)\n        head = ListNode(res.pop())\n        cur_node = head\n        while len(res):\n            cur_node.next = ListNode(res.pop())\n            cur_node = cur_node.next\n        return head  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/",
            "text": "448. Find All Numbers Disappeared in an Array\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728\u00a0 1 \u2264 a[i] \u2264 \nn\n (\u00a0\nn\n = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\u627e\u5230\u6240\u6709\u5728 [1, \nn\n] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002\n\n\n\u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\nO(n)\n\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n\n[4,3,2,7,8,2,3,1]\n\n\n\u8f93\u51fa:\n\n[5,6]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n448. Find All Numbers Disappeared in an Array\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // 4 3 2 1 6 8 7 6\n        for (int i = 0; i < len; i++) {\n            while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                swap(nums, nums[i] - 1, i);\n            }\n        }\n\n        // System.out.println(Arrays.toString(nums));\n        // 1 2 3 4\n        for (int i = 0; i < len; i++) {\n            if (nums[i] - 1 != i) {\n                res.add(i + 1);\n            }\n        }\n        return res;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};\n        Solution solution = new Solution();\n        List<Integer> disappearedNumbers = solution.findDisappearedNumbers(nums);\n        System.out.println(disappearedNumbers);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0448-find-all-numbers-disappeared-in-an-array\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "448. Find All Numbers Disappeared in an Array"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/#448-find-all-numbers-disappeared-in-an-array",
            "text": "",
            "title": "448. Find All Numbers Disappeared in an Array"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728\u00a0 1 \u2264 a[i] \u2264  n  (\u00a0 n  = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002  \u627e\u5230\u6240\u6709\u5728 [1,  n ] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002  \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002  \u793a\u4f8b:  \u8f93\u5165: \n[4,3,2,7,8,2,3,1] \u8f93\u51fa: \n[5,6]     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 448. Find All Numbers Disappeared in an Array   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0448-find-all-numbers-disappeared-in-an-array/#1",
            "text": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        int len = nums.length;\n        if (len == 0) {\n            return res;\n        }\n        // 4 3 2 1 6 8 7 6\n        for (int i = 0; i < len; i++) {\n            while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) {\n                swap(nums, nums[i] - 1, i);\n            }\n        }\n\n        // System.out.println(Arrays.toString(nums));\n        // 1 2 3 4\n        for (int i = 0; i < len; i++) {\n            if (nums[i] - 1 != i) {\n                res.add(i + 1);\n            }\n        }\n        return res;\n    }\n\n    private void swap(int[] nums, int index1, int index2) {\n        if (index1 == index2) {\n            return;\n        }\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};\n        Solution solution = new Solution();\n        List<Integer> disappearedNumbers = solution.findDisappearedNumbers(nums);\n        System.out.println(disappearedNumbers);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0448-find-all-numbers-disappeared-in-an-array  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/",
            "text": "450. Delete Node in a BST\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 \nroot \n\u548c\u4e00\u4e2a\u503c \nkey\n\uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u00a0\nkey\u00a0\n\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a\n\n\n\n\n\u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b\n\n\n\u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002\n\n\n\n\n\u8bf4\u660e\uff1a\n \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002\n\n\n\u793a\u4f8b:\n\n\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n\u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002\n\n\u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n\u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n450. Delete Node in a BST\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1aBST \u7684\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u5728\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b\u8fd9\u4e00\u7c7b\u7684\u6559\u79d1\u4e66\u4e0a\u90fd\u6709\u4ecb\u7ecd\u3002\n\n\n\n\n\u867d\u7136\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Hibbard \u53d1\u660e\u7684\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\u4e14\u76f4\u89c2\u3002  \n\n\n\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\uff0c\u5f53\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8ba9\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u6216\u8005\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff\u5b83\uff0c\u8fd9\u6837\u5c31\u80fd\u6210\u4e3a\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8fd8\u662f BST\uff0c\u5426\u5219\u5c31\u53d8\u6210\u68ee\u6797\uff0c\u6216\u8005\u4e0d\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\u4e86\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5728\u8349\u7a3f\u7eb8\u4e0a\u5f88\u5bb9\u6613\u753b\u51fa BST \u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u7684\u8fd9 3 \u79cd\u60c5\u51b5\u3002\n\n\n\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u7528\u524d\u9a71\u7ed3\u70b9\u4ee3\u66ff\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n\n        if (key < root.val) {\n            root.left = deleteNode(root.left, key);\n            return root;\n        }\n        if (key > root.val) {\n            root.right = deleteNode(root.right, key);\n            return root;\n        }\n\n        assert key == root.val;\n\n        if (root.left == null) {\n            TreeNode right = root.right;\n            root.right = null;\n            return right;\n        }\n\n        if (root.right == null) {\n            TreeNode left = root.left;\n            root.left = null;\n            return left;\n        }\n        TreeNode predecessor = maximum(root.left);\n        TreeNode predecessorCopy = new TreeNode(predecessor.val);\n        predecessorCopy.left = removeMax(root.left);\n        predecessorCopy.right = root.right;\n        root.left = null;\n        root.right = null;\n        return predecessorCopy;\n    }\n\n    private TreeNode removeMax(TreeNode node) {\n        if (node.right == null) {\n            TreeNode left = node.left;\n            node.left = null;\n            return left;\n        }\n        node.right = removeMax(node.right);\n        return node;\n    }\n\n    private TreeNode maximum(TreeNode node) {\n        if (node.right == null) {\n            return node;\n        }\n        return maximum(node.right);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u7528\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * https://leetcode-cn.com/problems/delete-node-in-a-bst/description/\n *\n * @author liwei\n */\npublic class Solution {\n\n    private TreeNode minNode(TreeNode node) {\n        while (node.left != null) {\n            node = node.left;\n        }\n        return node;\n    }\n\n    /**\n     * \u5220\u9664\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6811\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u628a\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\u8fd4\u56de\u56de\u53bb\n     * \u4f7f\u7528\u9012\u5f52\uff0c\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5b9a\u4e49\u7684\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\uff0c\u5220\u9664\u4e86\u6700\u5c0f\u503c\u8282\u70b9\u4ee5\u540e\u7684\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\n     *\n     * @param node\n     * @return\n     */\n    private TreeNode removeMin(TreeNode node) {\n        if (node.left == null) {\n            // \u5c31\u662f\u90a3\u4e2a\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\n            TreeNode rightNode = node.right;\n            node.right = null;\n            return rightNode;\n        }\n        node.left = removeMin(node.left);\n        return node;\n    }\n\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n        if (root.val < key) {\n            root.right = deleteNode(root.right, key);\n            return root;\n        } else if (root.val > key) {\n            root.left = deleteNode(root.left, key);\n            return root;\n        } else {\n            // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u5de6\u5b69\u5b50\u4e3a\u7a7a\n            if (root.left == null) {\n                TreeNode rightNode = root.right;\n                root.right = null;\n                return rightNode;\n            }\n            // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u53f3\u5b69\u5b50\n            if (root.right == null) {\n                TreeNode leftNode = root.left;\n                root.left = null;\n                return leftNode;\n            }\n            // \u4ece\u5b83\u7684\u53f3\u5b50\u6811\u4e2d\u62ff\u5230\u6700\u5c0f\u7684\n            TreeNode successor = new TreeNode(minNode(root.right).val);\n            successor.left = root.left;\n            successor.right = removeMin(root.right);\n            root.left = null;\n            root.right = null;\n            return successor;\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0450-delete-node-in-a-bst\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "450. Delete Node in a BST"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#450-delete-node-in-a-bst",
            "text": "",
            "title": "450. Delete Node in a BST"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9  root  \u548c\u4e00\u4e2a\u503c  key \uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u00a0 key\u00a0 \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a   \u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b  \u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002   \u8bf4\u660e\uff1a  \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002  \u793a\u4f8b:  root = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n\u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002\n\n\u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n\u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 450. Delete Node in a BST   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1aBST \u7684\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u5728\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b\u8fd9\u4e00\u7c7b\u7684\u6559\u79d1\u4e66\u4e0a\u90fd\u6709\u4ecb\u7ecd\u3002   \u867d\u7136\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Hibbard \u53d1\u660e\u7684\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\u4e14\u76f4\u89c2\u3002    \u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\uff0c\u5f53\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8ba9\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u6216\u8005\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff\u5b83\uff0c\u8fd9\u6837\u5c31\u80fd\u6210\u4e3a\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8fd8\u662f BST\uff0c\u5426\u5219\u5c31\u53d8\u6210\u68ee\u6797\uff0c\u6216\u8005\u4e0d\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\u4e86\u3002        \u5728\u8349\u7a3f\u7eb8\u4e0a\u5f88\u5bb9\u6613\u753b\u51fa BST \u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u7684\u8fd9 3 \u79cd\u60c5\u51b5\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n\n        if (key < root.val) {\n            root.left = deleteNode(root.left, key);\n            return root;\n        }\n        if (key > root.val) {\n            root.right = deleteNode(root.right, key);\n            return root;\n        }\n\n        assert key == root.val;\n\n        if (root.left == null) {\n            TreeNode right = root.right;\n            root.right = null;\n            return right;\n        }\n\n        if (root.right == null) {\n            TreeNode left = root.left;\n            root.left = null;\n            return left;\n        }\n        TreeNode predecessor = maximum(root.left);\n        TreeNode predecessorCopy = new TreeNode(predecessor.val);\n        predecessorCopy.left = removeMax(root.left);\n        predecessorCopy.right = root.right;\n        root.left = null;\n        root.right = null;\n        return predecessorCopy;\n    }\n\n    private TreeNode removeMax(TreeNode node) {\n        if (node.right == null) {\n            TreeNode left = node.left;\n            node.left = null;\n            return left;\n        }\n        node.right = removeMax(node.right);\n        return node;\n    }\n\n    private TreeNode maximum(TreeNode node) {\n        if (node.right == null) {\n            return node;\n        }\n        return maximum(node.right);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u7528\u524d\u9a71\u7ed3\u70b9\u4ee3\u66ff"
        },
        {
            "location": "/leetcode-0450-delete-node-in-a-bst/#2",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * https://leetcode-cn.com/problems/delete-node-in-a-bst/description/\n *\n * @author liwei\n */\npublic class Solution {\n\n    private TreeNode minNode(TreeNode node) {\n        while (node.left != null) {\n            node = node.left;\n        }\n        return node;\n    }\n\n    /**\n     * \u5220\u9664\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6811\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u628a\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\u8fd4\u56de\u56de\u53bb\n     * \u4f7f\u7528\u9012\u5f52\uff0c\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5b9a\u4e49\u7684\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\uff0c\u5220\u9664\u4e86\u6700\u5c0f\u503c\u8282\u70b9\u4ee5\u540e\u7684\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\n     *\n     * @param node\n     * @return\n     */\n    private TreeNode removeMin(TreeNode node) {\n        if (node.left == null) {\n            // \u5c31\u662f\u90a3\u4e2a\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\n            TreeNode rightNode = node.right;\n            node.right = null;\n            return rightNode;\n        }\n        node.left = removeMin(node.left);\n        return node;\n    }\n\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n        if (root.val < key) {\n            root.right = deleteNode(root.right, key);\n            return root;\n        } else if (root.val > key) {\n            root.left = deleteNode(root.left, key);\n            return root;\n        } else {\n            // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u5de6\u5b69\u5b50\u4e3a\u7a7a\n            if (root.left == null) {\n                TreeNode rightNode = root.right;\n                root.right = null;\n                return rightNode;\n            }\n            // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u53f3\u5b69\u5b50\n            if (root.right == null) {\n                TreeNode leftNode = root.left;\n                root.left = null;\n                return leftNode;\n            }\n            // \u4ece\u5b83\u7684\u53f3\u5b50\u6811\u4e2d\u62ff\u5230\u6700\u5c0f\u7684\n            TreeNode successor = new TreeNode(minNode(root.right).val);\n            successor.left = root.left;\n            successor.right = removeMin(root.right);\n            root.left = null;\n            root.right = null;\n            return successor;\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0450-delete-node-in-a-bst  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u7528\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/",
            "text": "452. Minimum Number of Arrows to Burst Balloons\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5y\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684x\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002\u5e73\u9762\u5185\u6700\u591a\u5b58\u572810\n4\n\u4e2a\u6c14\u7403\u3002\n\n\n\u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740x\u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807x\u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a x\nstart\uff0c\nx\nend\uff0c\n \u4e14\u6ee1\u8db3 \u00a0x\nstart\n\u00a0\u2264 x \u2264 x\nend\uff0c\n\u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206\n\u3002\n\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002\n\n\nExample:\n\n\n\u8f93\u5165:\n\n[[10,16], [2,8], [1,6], [7,12]]\n\n\n\u8f93\u51fa:\n\n2\n\n\n\u89e3\u91ca:\n\n\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728x = 6\uff08\u5c04\u7206[2,8],[1,6]\u4e24\u4e2a\u6c14\u7403\uff09\u548c x = 11\uff08\u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403\uff09\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n452. Minimum Number of Arrows to Burst Balloons\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n1\u3001\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u6765\u505a\u7684\u9898\uff0c\u56e0\u4e3a\u5c40\u90e8\u6700\u4f18\u89e3\u5c31\u7b49\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u9996\u5148\u7ed9\u533a\u95f4\u6392\u5e8f\uff1b\n\n\n2\u3001\u7136\u540e\u6211\u4eec\u5c06 res \u521d\u59cb\u5316\u4e3a 1 \uff0c\u56e0\u4e3a\u6c14\u7403\u6570\u91cf\u4e0d\u4e3a 0 \uff0c\u6240\u4ee5\u600e\u4e48\u4e5f\u5f97\u5148\u6765\u4e00\u53d1\u554a\uff0c\u7136\u540e\u8fd9\u4e00\u7bad\u80fd\u8986\u76d6\u7684\u6700\u8fdc\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u4e2a\u6c14\u7403\u7684\u7ed3\u675f\u70b9\uff0c\u7528\u53d8\u91cf end \u6765\u8868\u793a\uff1b\n\n\n3\u3001\u7136\u540e\u6211\u4eec\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u6c14\u7403\uff0c\u5982\u679c\u5f53\u524d\u6c14\u7403\u7684\u5f00\u59cb\u70b9\u5c0f\u4e8e\u7b49\u4e8e end \uff0c\u8bf4\u660e\u8ddf\u4e4b\u524d\u7684\u6c14\u7403\u6709\u91cd\u5408\uff0c\u4e4b\u524d\u90a3\u4e00\u7bad\u4e5f\u53ef\u4ee5\u7167\u987e\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u66f4\u65b0 end \u7684\u4f4d\u7f6e\uff0c end \u66f4\u65b0\u4e3a\u4e24\u4e2a\u6c14\u7403\u7ed3\u675f\u70b9\u4e4b\u95f4\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e5f\u662f\u5f53\u524d\u6c14\u7403\u548c\u4e4b\u524d\u6c14\u7403\u7684\u91cd\u5408\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u540e\u9762\u7684\u6c14\u7403\uff1b\n\n\n4\u3001\u5982\u679c\u67d0\u4e2a\u6c14\u7403\u7684\u8d77\u59cb\u70b9\u5927\u4e8e end \u4e86\uff0c\u8bf4\u660e\u524d\u9762\u7684\u7bad\u65e0\u6cd5\u8986\u76d6\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u90a3\u4e48\u5c31\u5f97\u518d\u6765\u4e00\u53d1\uff0c\u65e2\u7136\u53c8\u6765\u4e86\u4e00\u53d1\uff0c\u90a3\u4e48\u6211\u4eec\u6b64\u65f6\u5c31\u8981\u628a end \u8bbe\u4e3a\u5f53\u524d\u6c14\u7403\u7684\u7ed3\u675f\u70b9\u4e86\uff0c\u8fd9\u6837\u8d2a\u5a6a\u7b97\u6cd5\u904d\u5386\u7ed3\u675f\u540e\u5c31\u80fd\u5f97\u5230\u6700\u5c11\u7684\u7bad\u6570\u4e86\u3002\n\u753b\u56fe\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002\n\n\n\u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/grandyang/p/6050562.html\nhttp://bgmeow.xyz/2016/12/30/LeetCode-452/\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002\n\n\n\n\nPython \u7684\u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 2:\n            return len(points)\n        # \u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n        points = sorted(points, key=lambda x: x[0])\n        min_arrow_shots = 1\n        end = points[0][1]\n        for point in points[1:]:\n            if point[0] <= end:\n                end = min(end, point[1])\n            else:\n                min_arrow_shots += 1\n                end = point[1]\n        return min_arrow_shots\n\n\nif __name__ == '__main__':\n    points = [[10, 16], [2, 8], [1, 6], [7, 12]]\n\n    s = Solution()\n\n    result = s.findMinArrowShots(points)\n    print(result)\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8ba8\u8bba\u80fd\u591f\u5c11\u4e00\u4e9b\u3002\n\n\n\u53c2\u8003\u4e86\u82b1\u82b1\u9171\u7684\u89e3\u7b54\u3002\n\n\n\n\nPython \u7684\u5199\u6cd5\uff1a\n\n\nclass Solution:\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 2:\n            return len(points)\n        # \u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\n        points = sorted(points, key=lambda x: x[1])\n        min_arrow_shots = 1\n        end = points[0][1]\n        for point in points[1:]:\n            if point[0] > end:\n                end = point[1]\n                min_arrow_shots += 1\n        return min_arrow_shots\n\nif __name__ == '__main__':\n    points = [[10, 16], [2, 8], [1, 6], [7, 12]]\n\n    s = Solution()\n\n    result = s.findMinArrowShots(points)\n    print(result)\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0452-minimum-number-of-arrows-to-burst-balloons\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "452. Minimum Number of Arrows to Burst Balloons"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#452-minimum-number-of-arrows-to-burst-balloons",
            "text": "",
            "title": "452. Minimum Number of Arrows to Burst Balloons"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5y\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684x\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002\u5e73\u9762\u5185\u6700\u591a\u5b58\u572810 4 \u4e2a\u6c14\u7403\u3002  \u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740x\u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807x\u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a x start\uff0c x end\uff0c  \u4e14\u6ee1\u8db3 \u00a0x start \u00a0\u2264 x \u2264 x end\uff0c \u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206 \u3002 \u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002  Example:  \u8f93\u5165: \n[[10,16], [2,8], [1,6], [7,12]] \u8f93\u51fa: \n2 \u89e3\u91ca: \n\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728x = 6\uff08\u5c04\u7206[2,8],[1,6]\u4e24\u4e2a\u6c14\u7403\uff09\u548c x = 11\uff08\u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403\uff09\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 452. Minimum Number of Arrows to Burst Balloons   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  1\u3001\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u6765\u505a\u7684\u9898\uff0c\u56e0\u4e3a\u5c40\u90e8\u6700\u4f18\u89e3\u5c31\u7b49\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u9996\u5148\u7ed9\u533a\u95f4\u6392\u5e8f\uff1b  2\u3001\u7136\u540e\u6211\u4eec\u5c06 res \u521d\u59cb\u5316\u4e3a 1 \uff0c\u56e0\u4e3a\u6c14\u7403\u6570\u91cf\u4e0d\u4e3a 0 \uff0c\u6240\u4ee5\u600e\u4e48\u4e5f\u5f97\u5148\u6765\u4e00\u53d1\u554a\uff0c\u7136\u540e\u8fd9\u4e00\u7bad\u80fd\u8986\u76d6\u7684\u6700\u8fdc\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u4e2a\u6c14\u7403\u7684\u7ed3\u675f\u70b9\uff0c\u7528\u53d8\u91cf end \u6765\u8868\u793a\uff1b  3\u3001\u7136\u540e\u6211\u4eec\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u6c14\u7403\uff0c\u5982\u679c\u5f53\u524d\u6c14\u7403\u7684\u5f00\u59cb\u70b9\u5c0f\u4e8e\u7b49\u4e8e end \uff0c\u8bf4\u660e\u8ddf\u4e4b\u524d\u7684\u6c14\u7403\u6709\u91cd\u5408\uff0c\u4e4b\u524d\u90a3\u4e00\u7bad\u4e5f\u53ef\u4ee5\u7167\u987e\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u66f4\u65b0 end \u7684\u4f4d\u7f6e\uff0c end \u66f4\u65b0\u4e3a\u4e24\u4e2a\u6c14\u7403\u7ed3\u675f\u70b9\u4e4b\u95f4\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e5f\u662f\u5f53\u524d\u6c14\u7403\u548c\u4e4b\u524d\u6c14\u7403\u7684\u91cd\u5408\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u540e\u9762\u7684\u6c14\u7403\uff1b  4\u3001\u5982\u679c\u67d0\u4e2a\u6c14\u7403\u7684\u8d77\u59cb\u70b9\u5927\u4e8e end \u4e86\uff0c\u8bf4\u660e\u524d\u9762\u7684\u7bad\u65e0\u6cd5\u8986\u76d6\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u90a3\u4e48\u5c31\u5f97\u518d\u6765\u4e00\u53d1\uff0c\u65e2\u7136\u53c8\u6765\u4e86\u4e00\u53d1\uff0c\u90a3\u4e48\u6211\u4eec\u6b64\u65f6\u5c31\u8981\u628a end \u8bbe\u4e3a\u5f53\u524d\u6c14\u7403\u7684\u7ed3\u675f\u70b9\u4e86\uff0c\u8fd9\u6837\u8d2a\u5a6a\u7b97\u6cd5\u904d\u5386\u7ed3\u675f\u540e\u5c31\u80fd\u5f97\u5230\u6700\u5c11\u7684\u7bad\u6570\u4e86\u3002\n\u753b\u56fe\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002  \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/grandyang/p/6050562.html\nhttp://bgmeow.xyz/2016/12/30/LeetCode-452/",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#1",
            "text": "Python \u7684\u5199\u6cd5\uff1a  class Solution:\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 2:\n            return len(points)\n        # \u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n        points = sorted(points, key=lambda x: x[0])\n        min_arrow_shots = 1\n        end = points[0][1]\n        for point in points[1:]:\n            if point[0] <= end:\n                end = min(end, point[1])\n            else:\n                min_arrow_shots += 1\n                end = point[1]\n        return min_arrow_shots\n\n\nif __name__ == '__main__':\n    points = [[10, 16], [2, 8], [1, 6], [7, 12]]\n\n    s = Solution()\n\n    result = s.findMinArrowShots(points)\n    print(result)",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002"
        },
        {
            "location": "/leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#2",
            "text": "\u53c2\u8003\u4e86\u82b1\u82b1\u9171\u7684\u89e3\u7b54\u3002   Python \u7684\u5199\u6cd5\uff1a  class Solution:\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 2:\n            return len(points)\n        # \u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\n        points = sorted(points, key=lambda x: x[1])\n        min_arrow_shots = 1\n        end = points[0][1]\n        for point in points[1:]:\n            if point[0] > end:\n                end = point[1]\n                min_arrow_shots += 1\n        return min_arrow_shots\n\nif __name__ == '__main__':\n    points = [[10, 16], [2, 8], [1, 6], [7, 12]]\n\n    s = Solution()\n\n    result = s.findMinArrowShots(points)\n    print(result)  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0452-minimum-number-of-arrows-to-burst-balloons  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8ba8\u8bba\u80fd\u591f\u5c11\u4e00\u4e9b\u3002"
        },
        {
            "location": "/leetcode-0454-4sum-ii/",
            "text": "454. 4Sum II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868\u00a0A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 \n(i, j, k, l)\n\u00a0\uff0c\u4f7f\u5f97\u00a0\nA[i] + B[j] + C[k] + D[l] = 0\n\u3002\n\n\n\u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u00a0N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2\n28\n \u5230 2\n28\n - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\u00a02\n31\n - 1 \u3002\n\n\n\u4f8b\u5982:\n\n\n\u8f93\u5165:\n\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n\n\u8f93\u51fa:\n\n2\n\n\n\u89e3\u91ca:\n\n\u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n454. 4Sum II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n454. \u56db\u6570\u76f8\u52a0 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashMap;\n\npublic class Solution {\n\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n        // key \u662f A \u548c B \u6570\u7ec4\u5206\u522b\u53d6\u4e00\u4e2a\u6570\u53ef\u80fd\u7684\u548c\uff0cvalue \u662f\u8fd9\u4e2a\u548c\u53ef\u80fd\u7531\u51e0\u4e2a\u4e0d\u540c\u7684\u7ec4\u5408\n        HashMap<Integer, Integer> map = new HashMap<>();\n        // \u8ba1\u6570\u5668\n        int res = 0;\n        for (int a : A) {\n            for (int b : B) {\n                int sum = a + b;\n                if (map.containsKey(sum)) {\n                    map.put(sum, map.get(sum) + 1);\n                } else {\n                    map.put(sum, 1);\n                }\n            }\n        }\n        for (int c : C) {\n            for (int d : D) {\n                int target = -c - d;\n                if (map.containsKey(target)) {\n                    res += map.get(target);\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] A = {1, 2};\n        int[] B = {-2, -1};\n        int[] C = {-1, 2};\n        int[] D = {0, 2};\n        Solution solution = new Solution();\n        int fourSumCount = solution.fourSumCount(A, B, C, D);\n        System.out.println(fourSumCount);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0454-4sum-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "454. 4Sum II"
        },
        {
            "location": "/leetcode-0454-4sum-ii/#454-4sum-ii",
            "text": "",
            "title": "454. 4Sum II"
        },
        {
            "location": "/leetcode-0454-4sum-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868\u00a0A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4  (i, j, k, l) \u00a0\uff0c\u4f7f\u5f97\u00a0 A[i] + B[j] + C[k] + D[l] = 0 \u3002  \u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u00a0N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2 28  \u5230 2 28  - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\u00a02 31  - 1 \u3002  \u4f8b\u5982:  \u8f93\u5165: \nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2] \u8f93\u51fa: \n2 \u89e3\u91ca: \n\u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 454. 4Sum II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 454. \u56db\u6570\u76f8\u52a0 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0454-4sum-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0454-4sum-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0454-4sum-ii/#1",
            "text": "import java.util.HashMap;\n\npublic class Solution {\n\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n        // key \u662f A \u548c B \u6570\u7ec4\u5206\u522b\u53d6\u4e00\u4e2a\u6570\u53ef\u80fd\u7684\u548c\uff0cvalue \u662f\u8fd9\u4e2a\u548c\u53ef\u80fd\u7531\u51e0\u4e2a\u4e0d\u540c\u7684\u7ec4\u5408\n        HashMap<Integer, Integer> map = new HashMap<>();\n        // \u8ba1\u6570\u5668\n        int res = 0;\n        for (int a : A) {\n            for (int b : B) {\n                int sum = a + b;\n                if (map.containsKey(sum)) {\n                    map.put(sum, map.get(sum) + 1);\n                } else {\n                    map.put(sum, 1);\n                }\n            }\n        }\n        for (int c : C) {\n            for (int d : D) {\n                int target = -c - d;\n                if (map.containsKey(target)) {\n                    res += map.get(target);\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] A = {1, 2};\n        int[] B = {-2, -1};\n        int[] C = {-1, 2};\n        int[] D = {0, 2};\n        Solution solution = new Solution();\n        int fourSumCount = solution.fourSumCount(A, B, C, D);\n        System.out.println(fourSumCount);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0454-4sum-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/",
            "text": "459. Repeated Substring Pattern\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \"abab\"\n\n\n\u8f93\u51fa:\n True\n\n\n\u89e3\u91ca:\n \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"ab\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \"aba\"\n\n\n\u8f93\u51fa:\n False\n\n\n\n\u793a\u4f8b 3:\n\n\n\u8f93\u5165:\n \"abcabcabcabc\"\n\n\n\u8f93\u51fa:\n True\n\n\n\u89e3\u91ca:\n \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"abc\" \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 \"abcabc\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002)\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n459. Repeated Substring Pattern\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n459. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f9d\u636e\u9898\u76ee\u7684\u8981\u6c42\uff0c\u9010\u4e2a\u8fdb\u884c\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n1\u3001\u9996\u5148\u5206\u6790\u51fa\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u6700\u5c0f\u662f 1 \uff0c\u6700\u5927\u662f len/2\uff08\u5411\u4e0b\u53d6\u6574\uff09\uff1b\n\n2\u3001\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u80fd\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\uff0c\u8fd9\u4e00\u8f6e\u5faa\u73af\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e86\uff1b\n\n3\u3001\u63a5\u7740\u5c31\u662f\u6bd4\u8f83\uff0c\u89e3\u6cd5 1 \u662f\u6211\u7684\u5199\u6cd5\uff0c\u89e3\u6cd5 2 \u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u5229\u7528\u4e86\u6c42\u6a21\u8fd0\u7b97\uff1b\n\n4\u3001\u89e3\u6cd5 3 \u4e5f\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u6bd4\u8f83\u5de7\u5999\uff0c\u975e\u5e38\u7b80\u6d01\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public boolean repeatedSubstringPattern(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return false;\n        }\n        for (int i = 1; i <= len / 2; i++) {\n            // \u53ea\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad\n            if (len % i == 0) {\n                // \u7b2c 1 \u4e2a\u91cd\u590d\u5355\u5143\u7684\u5b57\u7b26\u4e32\n                String template = s.substring(0, i);\n                // \u6bcf\u4e00\u8f6e\u5185\u5c42\u5faa\u73af\u90fd\u5047\u8bbe\u80fd\u627e\u5230\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\uff0c\u8fd9\u4e2a\u503c\u5c31\u4f1a\u88ab\u7f6e\u4e3a false\uff0c\u7136\u540e\u9000\u51fa\u5185\u5c42\u5faa\u73af\n                boolean found = true;\n                // \u6ce8\u610f\uff1asubstring \u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u53f3\u8fb9\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230\n                for (int j = i; j + i <= len; j += i) {\n                    String segment = s.substring(j, j + i);\n                    if (!template.equals(segment)) {\n                        found = false;\n                        break;\n                    }\n                }\n                // \u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u90fd\u6ca1\u6709\u5c06 found \u6539\u4e3a false\uff0c\u5c31\u8bf4\u660e\uff0c\u8be5\u5b57\u7b26\u4e32\u7b26\u5408\u9898\u610f\uff0c\u5b58\u5728\u6027\u6210\u7acb\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\u90fd\u4e0d\u80fd\u8fd4\u56de true\uff0c\u5c31\u5f97\u8fd4\u56de false\n        return false;\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution {\n\n    public boolean repeatedSubstringPattern(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return false;\n        }\n        // 5 \u5230 2 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\n        // 6 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\n        // 7 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\n        // i \u8868\u793a\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\n        for (int i = 1; i <= len / 2; i++) {\n            // \u5982\u679c\u4e0d\u80fd\u88ab\u91cd\u590d\u5355\u5143\u6574\u9664\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u7b26\u5408\u9898\u610f\n            if (len % i != 0) {\n                continue;\n            }\n            int j = i;\n            // \u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u5224\u65ad\u662f\u5173\u952e\n            while (j < len && s.charAt(j) == s.charAt(j % i)) {\n                j++;\n            }\n            if (j == len) {\n                // \u5982\u679c\u5b58\u5728\u5c31\u9a6c\u4e0a\u8fd4\u56de\n                return true;\n            }\n        }\n        // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\uff0c\u5c31\u5f97\u8fd4\u56de false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        String s = \"abab\";\n        Solution solution = new Solution();\n        boolean repeatedSubstringPattern = solution.repeatedSubstringPattern(s);\n        System.out.println(repeatedSubstringPattern);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\n\n\npublic class Solution {\n\n    public boolean repeatedSubstringPattern3(String s) {\n        // \u91cd\u590d\u4e00\u6b21\uff0c\u6390\u5934\u53bb\u5c3e\uff0c\u53ea\u8981\u5305\u542b\u5c31\u53ef\u4ee5\u4e86\n        return ((s + s).substring(1, 2 * s.length() - 1).contains(s));\n    }\n}\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0459-repeated-substring-pattern\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "459. Repeated Substring Pattern"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#459-repeated-substring-pattern",
            "text": "",
            "title": "459. Repeated Substring Pattern"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \"abab\" \u8f93\u51fa:  True \u89e3\u91ca:  \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"ab\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  \"aba\" \u8f93\u51fa:  False  \u793a\u4f8b 3:  \u8f93\u5165:  \"abcabcabcabc\" \u8f93\u51fa:  True \u89e3\u91ca:  \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"abc\" \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 \"abcabc\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002)     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 459. Repeated Substring Pattern   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 459. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f9d\u636e\u9898\u76ee\u7684\u8981\u6c42\uff0c\u9010\u4e2a\u8fdb\u884c\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002  1\u3001\u9996\u5148\u5206\u6790\u51fa\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u6700\u5c0f\u662f 1 \uff0c\u6700\u5927\u662f len/2\uff08\u5411\u4e0b\u53d6\u6574\uff09\uff1b \n2\u3001\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u80fd\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\uff0c\u8fd9\u4e00\u8f6e\u5faa\u73af\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e86\uff1b \n3\u3001\u63a5\u7740\u5c31\u662f\u6bd4\u8f83\uff0c\u89e3\u6cd5 1 \u662f\u6211\u7684\u5199\u6cd5\uff0c\u89e3\u6cd5 2 \u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u5229\u7528\u4e86\u6c42\u6a21\u8fd0\u7b97\uff1b \n4\u3001\u89e3\u6cd5 3 \u4e5f\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u6bd4\u8f83\u5de7\u5999\uff0c\u975e\u5e38\u7b80\u6d01\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#1",
            "text": "public class Solution {\n\n    public boolean repeatedSubstringPattern(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return false;\n        }\n        for (int i = 1; i <= len / 2; i++) {\n            // \u53ea\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad\n            if (len % i == 0) {\n                // \u7b2c 1 \u4e2a\u91cd\u590d\u5355\u5143\u7684\u5b57\u7b26\u4e32\n                String template = s.substring(0, i);\n                // \u6bcf\u4e00\u8f6e\u5185\u5c42\u5faa\u73af\u90fd\u5047\u8bbe\u80fd\u627e\u5230\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\uff0c\u8fd9\u4e2a\u503c\u5c31\u4f1a\u88ab\u7f6e\u4e3a false\uff0c\u7136\u540e\u9000\u51fa\u5185\u5c42\u5faa\u73af\n                boolean found = true;\n                // \u6ce8\u610f\uff1asubstring \u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u53f3\u8fb9\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230\n                for (int j = i; j + i <= len; j += i) {\n                    String segment = s.substring(j, j + i);\n                    if (!template.equals(segment)) {\n                        found = false;\n                        break;\n                    }\n                }\n                // \u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u90fd\u6ca1\u6709\u5c06 found \u6539\u4e3a false\uff0c\u5c31\u8bf4\u660e\uff0c\u8be5\u5b57\u7b26\u4e32\u7b26\u5408\u9898\u610f\uff0c\u5b58\u5728\u6027\u6210\u7acb\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\u90fd\u4e0d\u80fd\u8fd4\u56de true\uff0c\u5c31\u5f97\u8fd4\u56de false\n        return false;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#2",
            "text": "public class Solution {\n\n    public boolean repeatedSubstringPattern(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return false;\n        }\n        // 5 \u5230 2 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\n        // 6 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\n        // 7 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\n        // i \u8868\u793a\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\n        for (int i = 1; i <= len / 2; i++) {\n            // \u5982\u679c\u4e0d\u80fd\u88ab\u91cd\u590d\u5355\u5143\u6574\u9664\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u7b26\u5408\u9898\u610f\n            if (len % i != 0) {\n                continue;\n            }\n            int j = i;\n            // \u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u5224\u65ad\u662f\u5173\u952e\n            while (j < len && s.charAt(j) == s.charAt(j % i)) {\n                j++;\n            }\n            if (j == len) {\n                // \u5982\u679c\u5b58\u5728\u5c31\u9a6c\u4e0a\u8fd4\u56de\n                return true;\n            }\n        }\n        // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\uff0c\u5c31\u5f97\u8fd4\u56de false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        String s = \"abab\";\n        Solution solution = new Solution();\n        boolean repeatedSubstringPattern = solution.repeatedSubstringPattern(s);\n        System.out.println(repeatedSubstringPattern);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0459-repeated-substring-pattern/#3",
            "text": "public class Solution {\n\n    public boolean repeatedSubstringPattern3(String s) {\n        // \u91cd\u590d\u4e00\u6b21\uff0c\u6390\u5934\u53bb\u5c3e\uff0c\u53ea\u8981\u5305\u542b\u5c31\u53ef\u4ee5\u4e86\n        return ((s + s).substring(1, 2 * s.length() - 1).contains(s));\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0459-repeated-substring-pattern  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543"
        },
        {
            "location": "/leetcode-0460-lfu-cache/",
            "text": "460. LFU Cache\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u8bbe\u8ba1\u5e76\u5b9e\u73b0\n\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09\n\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\nget\n\u00a0\u548c\u00a0\nput\n\u3002\n\n\nget(key)\n\u00a0- \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002\n\n\nput(key, value)\n\u00a0- \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u8bbe\u7f6e\u6216\u63d2\u5165\u503c\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u76ee\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u76ee\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c\n\u6700\u8fd1\n\u6700\u5c11\u4f7f\u7528\u7684\u952e\u5c06\u88ab\u53bb\u9664\u3002\n\n\n\u8fdb\u9636\uff1a\n\n\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u00a0\nO(1)\u00a0\n\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f\n\n\n\u793a\u4f8b\uff1a\n\n\nLFUCache cache = new LFUCache( 2 /* capacity (\u7f13\u5b58\u5bb9\u91cf) */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de 1\ncache.put(3, 3);    // \u53bb\u9664 key 2\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230key 2)\ncache.get(3);       // \u8fd4\u56de 3\ncache.put(4, 4);    // \u53bb\u9664 key 1\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230 key 1)\ncache.get(3);       // \u8fd4\u56de 3\ncache.get(4);       // \u8fd4\u56de 4\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u56f0\u96be\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n460. LFU Cache\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n460. LFU\u7f13\u5b58\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0460-lfu-cache\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "460. LFU Cache"
        },
        {
            "location": "/leetcode-0460-lfu-cache/#460-lfu-cache",
            "text": "",
            "title": "460. LFU Cache"
        },
        {
            "location": "/leetcode-0460-lfu-cache/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u8bbe\u8ba1\u5e76\u5b9e\u73b0 \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09 \u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a get \u00a0\u548c\u00a0 put \u3002  get(key) \u00a0- \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002  put(key, value) \u00a0- \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u8bbe\u7f6e\u6216\u63d2\u5165\u503c\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u76ee\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u76ee\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c \u6700\u8fd1 \u6700\u5c11\u4f7f\u7528\u7684\u952e\u5c06\u88ab\u53bb\u9664\u3002  \u8fdb\u9636\uff1a \n\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u00a0 O(1)\u00a0 \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f  \u793a\u4f8b\uff1a  LFUCache cache = new LFUCache( 2 /* capacity (\u7f13\u5b58\u5bb9\u91cf) */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de 1\ncache.put(3, 3);    // \u53bb\u9664 key 2\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230key 2)\ncache.get(3);       // \u8fd4\u56de 3\ncache.put(4, 4);    // \u53bb\u9664 key 1\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230 key 1)\ncache.get(3);       // \u8fd4\u56de 3\ncache.get(4);       // \u8fd4\u56de 4     \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002  \u82f1\u6587\u7f51\u5740\uff1a 460. LFU Cache   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 460. LFU\u7f13\u5b58   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0460-lfu-cache/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0460-lfu-cache/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0460-lfu-cache/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0460-lfu-cache  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0461-hamming-distance/",
            "text": "461. Hamming Distance\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\n\u6c49\u660e\u8ddd\u79bb\n\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002\n\n\n\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 \nx\n \u548c \ny\n\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002\n\n\n\u6ce8\u610f\uff1a\n\n0 \u2264 \nx\n, \ny\n < 2\n31\n.\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n x = 1, y = 4\n\n\n\u8f93\u51fa:\n 2\n\n\n\u89e3\u91ca:\n\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\n\n\u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n461. Hamming Distance\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n461. \u6c49\u660e\u8ddd\u79bb\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570\u5c31\u662f\u6c49\u660e\u8ddd\u79bb\u3002\n\n\n\n\n\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c 1 \u8868\u793a\u4e0d\u540c\uff0c\u6b63\u597d\u4e3a\u6c49\u660e\u8ddd\u79bb\u8d21\u732e 1\uff0c 0 \u8868\u793a\u76f8\u540c\uff0c\u6539\u4f4d\u5bf9\u6c49\u660e\u8ddd\u79bb\u6ca1\u6709\u8d21\u732e\u503c\u3002\n\n\n\u7edf\u8ba1\u4e8c\u8fdb\u5236 1 \u7684\u4e2a\u6570\u53ef\u4ee5\u4f7f\u7528 \na & (a - 1)\n \u76f4\u5230\u8fd9\u4e2a\u6570\u4e3a 0\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u4e86\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int hammingDistance(int x, int y) {\n        int a = x ^ y;\n        int count = 0;\n        while (a != 0) {\n            a = a & (a - 1);\n            count++;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0461-hamming-distance\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "461. Hamming Distance"
        },
        {
            "location": "/leetcode-0461-hamming-distance/#461-hamming-distance",
            "text": "",
            "title": "461. Hamming Distance"
        },
        {
            "location": "/leetcode-0461-hamming-distance/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002  \u7ed9\u51fa\u4e24\u4e2a\u6574\u6570  x  \u548c  y \uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002  \u6ce8\u610f\uff1a \n0 \u2264  x ,  y  < 2 31 .  \u793a\u4f8b:  \u8f93\u5165:  x = 1, y = 4 \u8f93\u51fa:  2 \u89e3\u91ca: \n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\n\n\u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 461. Hamming Distance   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 461. \u6c49\u660e\u8ddd\u79bb   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0461-hamming-distance/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570\u5c31\u662f\u6c49\u660e\u8ddd\u79bb\u3002   \u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c 1 \u8868\u793a\u4e0d\u540c\uff0c\u6b63\u597d\u4e3a\u6c49\u660e\u8ddd\u79bb\u8d21\u732e 1\uff0c 0 \u8868\u793a\u76f8\u540c\uff0c\u6539\u4f4d\u5bf9\u6c49\u660e\u8ddd\u79bb\u6ca1\u6709\u8d21\u732e\u503c\u3002  \u7edf\u8ba1\u4e8c\u8fdb\u5236 1 \u7684\u4e2a\u6570\u53ef\u4ee5\u4f7f\u7528  a & (a - 1)  \u76f4\u5230\u8fd9\u4e2a\u6570\u4e3a 0\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0461-hamming-distance/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0461-hamming-distance/#1",
            "text": "public class Solution {\n\n    public int hammingDistance(int x, int y) {\n        int a = x ^ y;\n        int count = 0;\n        while (a != 0) {\n            a = a & (a - 1);\n            count++;\n        }\n        return count;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0461-hamming-distance  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0476-number-complement/",
            "text": "476. Number Complement\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002\n\n\n\u6ce8\u610f:\n\n\n\n\n\u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u572832\u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002\n\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 5\n\n\u8f93\u51fa:\n 2\n\n\u89e3\u91ca:\n 5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa2\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 1\n\n\u8f93\u51fa:\n 0\n\n\u89e3\u91ca:\n 1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa0\u3002\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n476. Number Complement\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n476. \u6570\u5b57\u7684\u8865\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n1\u3001\u4f7f\u7528\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\uff1b\n2\u3001\u4f7f\u7528 mask \u5c0f\u6280\u5de7\u4ee5\u53ca\u5f02\u6216\u8fd0\u7b97\u5b8c\u6210 1 \u53d8 0 \uff0c 0 \u53d8 1\uff1b\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u5bb9\u6613\u60f3\u5230\n\n\npublic class Solution {\n\n    /**\n     * \u4f7f\u7528 Java \u5e93\u51fd\u6570 Integer.toBinaryString() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\n     * @param num\n     * @return\n     */\n    public int findComplement(int num) {\n        if (num <= 0) {\n            throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\");\n        }\n        String numStr = Integer.toBinaryString(num);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Character c : numStr.toCharArray()) {\n            if (c == '0') {\n                stringBuilder.append(1);\n            } else {\n                stringBuilder.append(0);\n            }\n        }\n        numStr = stringBuilder.toString();\n        return Integer.valueOf(numStr, 2);\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u5178\u578b\n\n\npublic class Solution2 {\n\n    public int findComplement(int num) {\n        if (num <= 0) {\n            throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\");\n        }\n        // \u8fd9\u4e2a\u590d\u5236\u51fa\u6765\u7684\u6570\u5bf9\u8fd0\u7b97\u7ed3\u679c\u4e0d\u8d77\u76f4\u63a5\u4f5c\u7528\uff0c\u53ea\u662f\u7528\u6765\u5224\u65ad\u9700\u8981\u53d6\u53cd\u7684\u64cd\u4f5c\u7684\u6b21\u6570\n        int numCopy = num;\n        int mask = 1;\n        // \u6b63\u6574\u6570\uff0c\u53f3\u79fb\uff0c\u5de6\u8fb9\u8865 0\n        while (numCopy > 0) {\n            // \u548c 1 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a0 1 -> 1 \uff0c1 1 -> 0\uff1a\n            // \u548c 0 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a1 0 -> 1 \uff0c0 0 -> 0\uff1a\n            num ^= mask;\n            mask <<= 1;\n            numCopy >>= 1;\n        }\n        return num;\n    }\n}\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0476-number-complement\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "476. Number Complement"
        },
        {
            "location": "/leetcode-0476-number-complement/#476-number-complement",
            "text": "",
            "title": "476. Number Complement"
        },
        {
            "location": "/leetcode-0476-number-complement/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002  \u6ce8\u610f:   \u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u572832\u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002  \u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002   \u793a\u4f8b 1:  \u8f93\u5165:  5 \u8f93\u51fa:  2 \u89e3\u91ca:  5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa2\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  1 \u8f93\u51fa:  0 \u89e3\u91ca:  1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa0\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 476. Number Complement   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 476. \u6570\u5b57\u7684\u8865\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0476-number-complement/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  1\u3001\u4f7f\u7528\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\uff1b\n2\u3001\u4f7f\u7528 mask \u5c0f\u6280\u5de7\u4ee5\u53ca\u5f02\u6216\u8fd0\u7b97\u5b8c\u6210 1 \u53d8 0 \uff0c 0 \u53d8 1\uff1b",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0476-number-complement/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0476-number-complement/#1",
            "text": "public class Solution {\n\n    /**\n     * \u4f7f\u7528 Java \u5e93\u51fd\u6570 Integer.toBinaryString() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\n     * @param num\n     * @return\n     */\n    public int findComplement(int num) {\n        if (num <= 0) {\n            throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\");\n        }\n        String numStr = Integer.toBinaryString(num);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Character c : numStr.toCharArray()) {\n            if (c == '0') {\n                stringBuilder.append(1);\n            } else {\n                stringBuilder.append(0);\n            }\n        }\n        numStr = stringBuilder.toString();\n        return Integer.valueOf(numStr, 2);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u5bb9\u6613\u60f3\u5230"
        },
        {
            "location": "/leetcode-0476-number-complement/#2",
            "text": "public class Solution2 {\n\n    public int findComplement(int num) {\n        if (num <= 0) {\n            throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\");\n        }\n        // \u8fd9\u4e2a\u590d\u5236\u51fa\u6765\u7684\u6570\u5bf9\u8fd0\u7b97\u7ed3\u679c\u4e0d\u8d77\u76f4\u63a5\u4f5c\u7528\uff0c\u53ea\u662f\u7528\u6765\u5224\u65ad\u9700\u8981\u53d6\u53cd\u7684\u64cd\u4f5c\u7684\u6b21\u6570\n        int numCopy = num;\n        int mask = 1;\n        // \u6b63\u6574\u6570\uff0c\u53f3\u79fb\uff0c\u5de6\u8fb9\u8865 0\n        while (numCopy > 0) {\n            // \u548c 1 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a0 1 -> 1 \uff0c1 1 -> 0\uff1a\n            // \u548c 0 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a1 0 -> 1 \uff0c0 0 -> 0\uff1a\n            num ^= mask;\n            mask <<= 1;\n            numCopy >>= 1;\n        }\n        return num;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0476-number-complement  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u5178\u578b"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/",
            "text": "477. Total Hamming Distance\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u4e24\u4e2a\u6574\u6570\u7684\u00a0\n\u6c49\u660e\u8ddd\u79bb\n \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002\n\n\n\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n 4, 14, 2\n\n\n\u8f93\u51fa:\n 6\n\n\n\u89e3\u91ca:\n \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09\n\u6240\u4ee5\u7b54\u6848\u4e3a\uff1a\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece\u00a0\n0\n\u5230\u00a0\n10^9\n\u3002\n\n\n\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7\u00a0\n10^4\n\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n477. Total Hamming Distance\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n477. \u6c49\u660e\u8ddd\u79bb\u603b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u201c\n\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002\u201d\u8fd9\u91cc\u7684\u5173\u952e\u5b57\u662f\u201c\u4efb\u610f\u201d\u548c\u201c\u603b\u548c\u201d\u3002\n\n\n\n\n\u4e00\u4e2a\u6570\u8981\u4e0e\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u6570\u90fd\u8fdb\u884c\u4e00\u6b21\u6c49\u660e\u8ddd\u79bb\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u518d\u628a\u6240\u6709\u7684\u6c49\u660e\u8ddd\u79bb\u6c42\u548c\u3002\n\n\n\u4e00\u4e2a\u6574\u6570\u6709 32 \u4f4d\uff0c\u53ef\u4ee5\u7edf\u8ba1\u8ba1\u7b97\u6bcf 1 \u4f4d\u4e0a\uff0c\u6240\u6709\u6570\u7ec4\u4e2d\u7684\u8fd9\u4e9b\u6570\u4e0a\u7684 1 \u548c 0 \u7684\u4e2a\u6570\uff0c\u628a\u5b83\u4eec\u76f8\u4e58\uff0c\u5c31\u662f\u8fd9\u4e2a\u6570\u4f4d\u4e0a\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u201c\u8d21\u732e\u201d\u3002\n\n\n\u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5176\u5b9e\u65e0\u975e\u5c31\u662f\u628a\u52a0\u6cd5\u53d8\u6210\u4e86\u4e58\u6cd5\u3002\n\n\n\n\n\u4f8b\u5982\uff1a\n\n\n1000\n\n1100\n\n0111\n\n0101  \n\n\n\u8fd9 4 \u4e2a\u6570\uff0c\u5148\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u770b\u8d77\uff0c\u6709 2 \u4e2a 0 \u548c 2 \u4e2a 1\uff1a1 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u8d21\u732e\u4e86 2 \u4e2a\u6c49\u660e\u8ddd\u79bb\uff0c\u90a3\u4e48 2 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u5c31\u8d21\u732e\u4e86 $2 \\times 2 = 4$ \u4e2a\u6c49\u660e\u8ddd\u79bb\u3002\n\n\n\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u6280\u5de7\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a mask \u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u7f16\u7801\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \uff0c\u5176\u4f59\u4f4d\u90fd\u662f 0\uff0c\u53bb\u5224\u65ad\u4e00\u4e2a\u6570\u4f4d\u662f\u5426\u662f 1\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution2 {\n\n    public int totalHammingDistance(int[] nums) {\n        int len = nums.length;\n        int mask = 1;\n        int res = 0;\n        for (int i = 0; i < 32; i++) {\n            // 0 \u7684\u4e2a\u6570\n            int zeros = 0;\n            for (int num : nums) {\n                if ((num & mask) == 0) {\n                    zeros++;\n                }\n            }\n            res += ((len - zeros) * zeros);\n            mask <<= 1;\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0477-total-hamming-distance\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "477. Total Hamming Distance"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/#477-total-hamming-distance",
            "text": "",
            "title": "477. Total Hamming Distance"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u4e24\u4e2a\u6574\u6570\u7684\u00a0 \u6c49\u660e\u8ddd\u79bb  \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002  \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002  \u793a\u4f8b:  \u8f93\u5165:  4, 14, 2 \u8f93\u51fa:  6 \u89e3\u91ca:  \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09\n\u6240\u4ee5\u7b54\u6848\u4e3a\uff1a\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.  \u6ce8\u610f:   \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece\u00a0 0 \u5230\u00a0 10^9 \u3002  \u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7\u00a0 10^4 \u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 477. Total Hamming Distance   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 477. \u6c49\u660e\u8ddd\u79bb\u603b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u201c\n\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002\u201d\u8fd9\u91cc\u7684\u5173\u952e\u5b57\u662f\u201c\u4efb\u610f\u201d\u548c\u201c\u603b\u548c\u201d\u3002   \u4e00\u4e2a\u6570\u8981\u4e0e\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u6570\u90fd\u8fdb\u884c\u4e00\u6b21\u6c49\u660e\u8ddd\u79bb\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u518d\u628a\u6240\u6709\u7684\u6c49\u660e\u8ddd\u79bb\u6c42\u548c\u3002  \u4e00\u4e2a\u6574\u6570\u6709 32 \u4f4d\uff0c\u53ef\u4ee5\u7edf\u8ba1\u8ba1\u7b97\u6bcf 1 \u4f4d\u4e0a\uff0c\u6240\u6709\u6570\u7ec4\u4e2d\u7684\u8fd9\u4e9b\u6570\u4e0a\u7684 1 \u548c 0 \u7684\u4e2a\u6570\uff0c\u628a\u5b83\u4eec\u76f8\u4e58\uff0c\u5c31\u662f\u8fd9\u4e2a\u6570\u4f4d\u4e0a\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u201c\u8d21\u732e\u201d\u3002  \u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5176\u5b9e\u65e0\u975e\u5c31\u662f\u628a\u52a0\u6cd5\u53d8\u6210\u4e86\u4e58\u6cd5\u3002   \u4f8b\u5982\uff1a  1000 \n1100 \n0111 \n0101    \u8fd9 4 \u4e2a\u6570\uff0c\u5148\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u770b\u8d77\uff0c\u6709 2 \u4e2a 0 \u548c 2 \u4e2a 1\uff1a1 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u8d21\u732e\u4e86 2 \u4e2a\u6c49\u660e\u8ddd\u79bb\uff0c\u90a3\u4e48 2 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u5c31\u8d21\u732e\u4e86 $2 \\times 2 = 4$ \u4e2a\u6c49\u660e\u8ddd\u79bb\u3002   \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u6280\u5de7\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a mask \u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u7f16\u7801\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \uff0c\u5176\u4f59\u4f4d\u90fd\u662f 0\uff0c\u53bb\u5224\u65ad\u4e00\u4e2a\u6570\u4f4d\u662f\u5426\u662f 1\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0477-total-hamming-distance/#1",
            "text": "public class Solution2 {\n\n    public int totalHammingDistance(int[] nums) {\n        int len = nums.length;\n        int mask = 1;\n        int res = 0;\n        for (int i = 0; i < 32; i++) {\n            // 0 \u7684\u4e2a\u6570\n            int zeros = 0;\n            for (int num : nums) {\n                if ((num & mask) == 0) {\n                    zeros++;\n                }\n            }\n            res += ((len - zeros) * zeros);\n            mask <<= 1;\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0477-total-hamming-distance  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/",
            "text": "515. Find Largest Value in Each Tree Row\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165:\n\n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n\n\u8f93\u51fa:\n [1, 3, 9]\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n515. Find Largest Value in Each Tree Row\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u95ee\u9898\u4e86\uff0c\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public List<Integer> largestValues(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        // \u6b64\u65f6 root \u4e00\u5b9a\u4e0d\u4e3a\u7a7a\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.removeFirst();\n                max = Math.max(max, node.val);\n                if (node.left != null) {\n                    queue.addLast(node.left);\n                }\n                if (node.right != null) {\n                    queue.addLast(node.right);\n                }\n            }\n            res.add(max);\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0515-find-largest-value-in-each-tree-row\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "515. Find Largest Value in Each Tree Row"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/#515-find-largest-value-in-each-tree-row",
            "text": "",
            "title": "515. Find Largest Value in Each Tree Row"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002  \u793a\u4f8b\uff1a  \u8f93\u5165: \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9  \u8f93\u51fa:  [1, 3, 9]     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 515. Find Largest Value in Each Tree Row   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u95ee\u9898\u4e86\uff0c\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0515-find-largest-value-in-each-tree-row/#1",
            "text": "import java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public List<Integer> largestValues(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        // \u6b64\u65f6 root \u4e00\u5b9a\u4e0d\u4e3a\u7a7a\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.addLast(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.removeFirst();\n                max = Math.max(max, node.val);\n                if (node.left != null) {\n                    queue.addLast(node.left);\n                }\n                if (node.right != null) {\n                    queue.addLast(node.right);\n                }\n            }\n            res.add(max);\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0515-find-largest-value-in-each-tree-row  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/",
            "text": "538. Convert BST to Greater Tree\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\n\u8f93\u5165:\n \u4e8c\u53c9\u641c\u7d22\u6811:\n              5\n            /   \\\n           2     13\n\n\n\u8f93\u51fa:\n \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811:\n             18\n            /   \\\n          20     13\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n538. Convert BST to Greater Tree\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u89e3\u8fd9\u9053\u9898\u6211\u91c7\u7528\u7684\u662f\u548c\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\uff08LeetCode \u7b2c 94 \u9898\uff09\uff0c\u501f\u52a9\u6808\u6765\u5b8c\u6210\u3002\n\n\n\n\n\u53ef\u4ee5\u5148\u4e86\u89e3\u4e00\u4e0b LeetCode \u7b2c 94 \u9898\u3002\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Stack;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode convertBST(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        Stack<TreeNode> stack = new Stack<>();\n        TreeNode p = root;\n        int cumSum = 0;\n        while (p != null || !stack.empty()) {\n            while (p != null) {\n                stack.push(p);\n                p = p.right;\n            }\n            TreeNode pop = stack.pop();\n            int curVal = pop.val;\n            pop.val += cumSum;\n            cumSum += curVal;\n            p = pop.left;\n        }\n        return root;\n    }\n\n\n    /**\n     * \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u6253\u5370\u8f93\u51fa BST\n     *\n     * @param node\n     */\n    private void printBST(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        printBST(node.left);\n        System.out.println(node.val);\n        printBST(node.right);\n    }\n\n    public static void main(String[] args) {\n        TreeNode node5 = new TreeNode(5);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node13 = new TreeNode(13);\n        node5.left = node2;\n        node5.right = node13;\n\n        Solution solution = new Solution();\n        solution.convertBST(node5);\n        System.out.println(\"\u4e2d\u5e8f\u904d\u5386 BST\uff1a\");\n        solution.printBST(node5);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0538-convert-bst-to-greater-tree\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "538. Convert BST to Greater Tree"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/#538-convert-bst-to-greater-tree",
            "text": "",
            "title": "538. Convert BST to Greater Tree"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002  \u4f8b\u5982\uff1a  \u8f93\u5165:  \u4e8c\u53c9\u641c\u7d22\u6811:\n              5\n            /   \\\n           2     13 \u8f93\u51fa:  \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811:\n             18\n            /   \\\n          20     13     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 538. Convert BST to Greater Tree   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u89e3\u8fd9\u9053\u9898\u6211\u91c7\u7528\u7684\u662f\u548c\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\uff08LeetCode \u7b2c 94 \u9898\uff09\uff0c\u501f\u52a9\u6808\u6765\u5b8c\u6210\u3002   \u53ef\u4ee5\u5148\u4e86\u89e3\u4e00\u4e0b LeetCode \u7b2c 94 \u9898\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0538-convert-bst-to-greater-tree/#1",
            "text": "import java.util.Stack;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode convertBST(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        Stack<TreeNode> stack = new Stack<>();\n        TreeNode p = root;\n        int cumSum = 0;\n        while (p != null || !stack.empty()) {\n            while (p != null) {\n                stack.push(p);\n                p = p.right;\n            }\n            TreeNode pop = stack.pop();\n            int curVal = pop.val;\n            pop.val += cumSum;\n            cumSum += curVal;\n            p = pop.left;\n        }\n        return root;\n    }\n\n\n    /**\n     * \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u6253\u5370\u8f93\u51fa BST\n     *\n     * @param node\n     */\n    private void printBST(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        printBST(node.left);\n        System.out.println(node.val);\n        printBST(node.right);\n    }\n\n    public static void main(String[] args) {\n        TreeNode node5 = new TreeNode(5);\n        TreeNode node2 = new TreeNode(2);\n        TreeNode node13 = new TreeNode(13);\n        node5.left = node2;\n        node5.right = node13;\n\n        Solution solution = new Solution();\n        solution.convertBST(node5);\n        System.out.println(\"\u4e2d\u5e8f\u904d\u5386 BST\uff1a\");\n        solution.printBST(node5);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0538-convert-bst-to-greater-tree  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/",
            "text": "541. Reverse String II\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u4e2a 2k \u4e2a\u5b57\u7b26\u7684\u524dk\u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002\u5982\u679c\u5269\u4f59\u5c11\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u5c06\u5269\u4f59\u7684\u6240\u6709\u5168\u90e8\u53cd\u8f6c\u3002\u5982\u679c\u6709\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n s = \"abcdefg\", k = 2\n\n\u8f93\u51fa:\n \"bacdfeg\"\n\n\n\n\u8981\u6c42:\n\n\n\n\n\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u3002\n\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728[1, 10000]\u8303\u56f4\u5185\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n541. Reverse String II\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u5355\u8bcd\u7684\u8fb9\u754c\u8fd9\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n    public String reverseStr(String s, int k) {\n        int len = s.length();\n        char[] charArr = s.toCharArray();\n        int begin = 0;\n        int step = 2 * k;\n        while (begin < len) {\n            int end = begin + k - 1;\n            reverseCharArr(charArr, begin, end > len - 1 ? len - 1 : end);\n            begin += step;\n        }\n        return String.valueOf(charArr);\n    }\n\n    // \u53cd\u8f6c\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u90e8\u5206\n    private void reverseCharArr(char[] arr, int l, int r) {\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        String s = \"abcdefg\";\n        int k = 2;\n        //  \"bacdfeg\"\n        Solution solution = new Solution();\n        String reverseStr = solution.reverseStr(s, k);\n        System.out.println(reverseStr);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0541-reverse-string-ii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "541. Reverse String II"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/#541-reverse-string-ii",
            "text": "",
            "title": "541. Reverse String II"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u4e2a 2k \u4e2a\u5b57\u7b26\u7684\u524dk\u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002\u5982\u679c\u5269\u4f59\u5c11\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u5c06\u5269\u4f59\u7684\u6240\u6709\u5168\u90e8\u53cd\u8f6c\u3002\u5982\u679c\u6709\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002  \u793a\u4f8b:  \u8f93\u5165:  s = \"abcdefg\", k = 2 \u8f93\u51fa:  \"bacdfeg\"  \u8981\u6c42:   \u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u3002  \u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728[1, 10000]\u8303\u56f4\u5185\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 541. Reverse String II   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u5355\u8bcd\u7684\u8fb9\u754c\u8fd9\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0541-reverse-string-ii/#1",
            "text": "public class Solution {\n    public String reverseStr(String s, int k) {\n        int len = s.length();\n        char[] charArr = s.toCharArray();\n        int begin = 0;\n        int step = 2 * k;\n        while (begin < len) {\n            int end = begin + k - 1;\n            reverseCharArr(charArr, begin, end > len - 1 ? len - 1 : end);\n            begin += step;\n        }\n        return String.valueOf(charArr);\n    }\n\n    // \u53cd\u8f6c\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u90e8\u5206\n    private void reverseCharArr(char[] arr, int l, int r) {\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        String s = \"abcdefg\";\n        int k = 2;\n        //  \"bacdfeg\"\n        Solution solution = new Solution();\n        String reverseStr = solution.reverseStr(s, k);\n        System.out.println(reverseStr);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0541-reverse-string-ii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0542-01-matrix/",
            "text": "542. 01 Matrix\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002\n\n\n\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002\n\n\n\u793a\u4f8b 1: \n\n\u8f93\u5165:\n\n\n0 0 0\n0 1 0\n0 0 0\n\n\n\n\u8f93\u51fa:\n\n\n0 0 0\n0 1 0\n0 0 0\n\n\n\n\u793a\u4f8b 2: \n\n\u8f93\u5165:\n\n\n0 0 0\n0 1 0\n1 1 1\n\n\n\n\u8f93\u51fa:\n\n\n0 0 0\n0 1 0\n1 2 1\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002\n\n\n\u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002\n\n\n\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n542. 01 Matrix\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n542. 01 \u77e9\u9635\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Solution {\n\n    /**\n     * x-1,y\n     * x,y-1  x,y    x,y+1\n     * x+1,y\n     */\n    private static int[][] directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};\n\n    public int[][] updateMatrix(int[][] matrix) {\n        int row = matrix.length;\n        if (row == 0) {\n            return new int[0][0];\n        }\n        int col = matrix[0].length;\n        LinkedList<Integer[]> queue = new LinkedList<>();\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (matrix[i][j] == 0) {\n                    // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u5411\u5916\u6269\u6563\n                    queue.addLast(new Integer[]{i, j});\n                } else {\n                    // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u8bf4\u660e\u5f53\u524d\u8fd9\u4e2a\u5750\u6807\u7684\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u6269\u6563\u5230\n                    matrix[i][j] = -1;\n                }\n            }\n        }\n        // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\n        while (!queue.isEmpty()) {\n            // \u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\"0\" \u6b63\u597d\uff0c\u5230\"0\" \u7684\u8ddd\u79bb\u4e5f\u662f 0 \uff0c\u7b26\u5408\u9898\u610f\n            Integer[] curPostion = queue.removeFirst();\n            // \u73b0\u5728\u8981\u5f80 4 \u4e2a\u65b9\u5411\u6269\u6563\n            for (int i = 0; i < 4; i++) {\n                int newX = curPostion[0] + directions[i][0];\n                int newY = curPostion[1] + directions[i][1];\n                // \u5728\u6709\u6548\u7684\u5750\u6807\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n                if (inArea(newX, newY, row, col) && matrix[newX][newY] == -1) {\n                    matrix[newX][newY] = matrix[curPostion[0]][curPostion[1]] + 1;\n                    queue.addLast(new Integer[]{newX, newY});\n                }\n            }\n        }\n        return matrix;\n    }\n\n    private boolean inArea(int x, int y, int row, int col) {\n        return x >= 0 && x < row && y >= 0 && y < col;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = new int[][]{\n                {0, 0, 0},\n                {0, 1, 0},\n                {1, 1, 1}\n        };\n        Solution solution = new Solution();\n        int[][] updateMatrix = solution.updateMatrix(matrix);\n        for (int i = 0; i < updateMatrix.length; i++) {\n            System.out.println(Arrays.toString(updateMatrix[i]));\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0542-01-matrix\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "542. 01 Matrix"
        },
        {
            "location": "/leetcode-0542-01-matrix/#542-01-matrix",
            "text": "",
            "title": "542. 01 Matrix"
        },
        {
            "location": "/leetcode-0542-01-matrix/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002  \u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002  \u793a\u4f8b 1:  \n\u8f93\u5165:  0 0 0\n0 1 0\n0 0 0  \u8f93\u51fa:  0 0 0\n0 1 0\n0 0 0  \u793a\u4f8b 2:  \n\u8f93\u5165:  0 0 0\n0 1 0\n1 1 1  \u8f93\u51fa:  0 0 0\n0 1 0\n1 2 1  \u6ce8\u610f:   \u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002  \u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002  \u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 542. 01 Matrix   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 542. 01 \u77e9\u9635   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0542-01-matrix/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0542-01-matrix/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0542-01-matrix/#1",
            "text": "import java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Solution {\n\n    /**\n     * x-1,y\n     * x,y-1  x,y    x,y+1\n     * x+1,y\n     */\n    private static int[][] directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};\n\n    public int[][] updateMatrix(int[][] matrix) {\n        int row = matrix.length;\n        if (row == 0) {\n            return new int[0][0];\n        }\n        int col = matrix[0].length;\n        LinkedList<Integer[]> queue = new LinkedList<>();\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (matrix[i][j] == 0) {\n                    // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u5411\u5916\u6269\u6563\n                    queue.addLast(new Integer[]{i, j});\n                } else {\n                    // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u8bf4\u660e\u5f53\u524d\u8fd9\u4e2a\u5750\u6807\u7684\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u6269\u6563\u5230\n                    matrix[i][j] = -1;\n                }\n            }\n        }\n        // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\n        while (!queue.isEmpty()) {\n            // \u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\"0\" \u6b63\u597d\uff0c\u5230\"0\" \u7684\u8ddd\u79bb\u4e5f\u662f 0 \uff0c\u7b26\u5408\u9898\u610f\n            Integer[] curPostion = queue.removeFirst();\n            // \u73b0\u5728\u8981\u5f80 4 \u4e2a\u65b9\u5411\u6269\u6563\n            for (int i = 0; i < 4; i++) {\n                int newX = curPostion[0] + directions[i][0];\n                int newY = curPostion[1] + directions[i][1];\n                // \u5728\u6709\u6548\u7684\u5750\u6807\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n                if (inArea(newX, newY, row, col) && matrix[newX][newY] == -1) {\n                    matrix[newX][newY] = matrix[curPostion[0]][curPostion[1]] + 1;\n                    queue.addLast(new Integer[]{newX, newY});\n                }\n            }\n        }\n        return matrix;\n    }\n\n    private boolean inArea(int x, int y, int row, int col) {\n        return x >= 0 && x < row && y >= 0 && y < col;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = new int[][]{\n                {0, 0, 0},\n                {0, 1, 0},\n                {1, 1, 1}\n        };\n        Solution solution = new Solution();\n        int[][] updateMatrix = solution.updateMatrix(matrix);\n        for (int i = 0; i < updateMatrix.length; i++) {\n            System.out.println(Arrays.toString(updateMatrix[i]));\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0542-01-matrix  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/",
            "text": "557. Reverse Words in a String III\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165: \"Let's take LeetCode contest\"\n\u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\"\n\u00a0\n\n\n\n\n\u6ce8\u610f\uff1a\n\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n557. Reverse Words in a String III\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n557. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5b9e\u73b0\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u628a\u5269\u4e0b\u6ca1\u6709\u7ffb\u8f6c\u7684\uff0c\u518d\u7ffb\u8f6c\u4e00\u6b21\u5373\u53ef\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public String reverseWords(String s) {\n        int len = s.length();\n        if (len == 1) {\n            return s;\n        }\n        char[] charArr = s.toCharArray();\n        int begin = 0;\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == ' ') {\n                reverseCharArray(charArr, begin, i - 1);\n                begin = i + 1;\n            }\n        }\n        reverseCharArray(charArr, begin, len - 1);\n        return String.valueOf(charArr);\n    }\n\n    private void reverseCharArray(char[] arr, int l, int r) {\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: \"Let's take LeetCode contest\"\n        // \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\"\n        String s = \"Let's take LeetCode contest\";\n        Solution solution =new Solution();\n        String reverseWords = solution.reverseWords(s);\n        System.out.println(reverseWords);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0557-reverse-words-in-a-string-iii\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "557. Reverse Words in a String III"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/#557-reverse-words-in-a-string-iii",
            "text": "",
            "title": "557. Reverse Words in a String III"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165: \"Let's take LeetCode contest\"\n\u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\" \u00a0   \u6ce8\u610f\uff1a \u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 557. Reverse Words in a String III   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 557. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5b9e\u73b0\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u628a\u5269\u4e0b\u6ca1\u6709\u7ffb\u8f6c\u7684\uff0c\u518d\u7ffb\u8f6c\u4e00\u6b21\u5373\u53ef\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0557-reverse-words-in-a-string-iii/#1",
            "text": "public class Solution {\n\n    public String reverseWords(String s) {\n        int len = s.length();\n        if (len == 1) {\n            return s;\n        }\n        char[] charArr = s.toCharArray();\n        int begin = 0;\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == ' ') {\n                reverseCharArray(charArr, begin, i - 1);\n                begin = i + 1;\n            }\n        }\n        reverseCharArray(charArr, begin, len - 1);\n        return String.valueOf(charArr);\n    }\n\n    private void reverseCharArray(char[] arr, int l, int r) {\n        while (l < r) {\n            swap(arr, l, r);\n            l++;\n            r--;\n        }\n    }\n\n    private void swap(char[] arr, int l, int r) {\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: \"Let's take LeetCode contest\"\n        // \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\"\n        String s = \"Let's take LeetCode contest\";\n        Solution solution =new Solution();\n        String reverseWords = solution.reverseWords(s);\n        System.out.println(reverseWords);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0557-reverse-words-in-a-string-iii  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/",
            "text": "566. Reshape the Matrix\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 \nreshape\n\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570\nr\n\u548c\nc\n\uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\n\n\n\u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684\n\u884c\u904d\u5386\u987a\u5e8f\n\u586b\u5145\u3002\n\n\n\u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684\nreshape\n\u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n\n\u8f93\u51fa:\n \n[[1,2,3,4]]\n\n\u89e3\u91ca:\n\n\u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n\n\u8f93\u51fa:\n \n[[1,2],\n [3,4]]\n\n\u89e3\u91ca:\n\n\u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002\n\n\n\u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n566. Reshape the Matrix\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n566. \u91cd\u5851\u77e9\u9635\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6211\u7b54\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u4efb\u4f55\u7b97\u6cd5\u7684\u77e5\u8bc6\u3002\n\n\u8d77\u521d\u6211\u60f3\u628a\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u590d\u5236\u5230\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\uff0c\u518d\u5199\u5165\u65b0\u77e9\u9635\u3002\n\n\u540e\u6765\u6211\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\u590d\u5236\u4e00\u4e2a\u77e9\u9635\u51fa\u6765\uff0c\u76f4\u63a5\u5728\u904d\u5386\u7684\u65f6\u5019\u8fb9\u8bfb\u8fb9\u5199\u5c31\u53ef\u4ee5\u4e86\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u5373\u53ef\u3002\n\n\u5c31\u5982\u540c\u6211\u4eec\u5199\u5b57\uff0c\u5199\u5b8c\u4e00\u884c\uff0c\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u4ece\u5934\u5f00\u59cb\u5199\u4e00\u6837\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int row = nums.length;\n        if (row == 0) {\n            return nums;\n        }\n        int col = nums[0].length;\n        // \u5982\u679c\u578b\u53f7\u4e0d\u76f8\u7b49\uff0c\u5219\u6ca1\u6709\u529e\u6cd5\u8f6c\u6362\uff0c\u6839\u636e\u9898\u610f\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u77e9\u9635\n        if (row * col != r * c) {\n            return nums;\n        }\n        int[][] ret = new int[r][c];\n        // \u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\n        int counter = 0;\n        // \u65b0\u77e9\u9635\u7684\u884c\u5750\u6807\n        int x = 0;\n        // \u5728\u904d\u5386\u539f\u77e9\u9635\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ed9\u65b0\u77e9\u9635\u8d4b\u503c\u4e86\n        // \u89c4\u5219\u5c31\u662f\u4ece\u5de6\u5411\u53f3\uff0c\u5982\u679c\u8d8a\u754c\u4e86\uff0c\u5c31\u91cd\u7f6e\uff0c\u5e76\u4e14\u884c\u53f7\u52a0 1\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                ret[x][counter] = nums[i][j];\n                counter++;\n                if (counter == c) {\n                    // \u8d8a\u754c\uff0c\u91cd\u7f6e\u5217\u5750\u6807\uff0c\u884c\u53f7 + 1\n                    counter = 0;\n                    x++;\n                }\n            }\n        }\n        return ret;\n    }\n\n    public static void main(String[] args) {\n        int[][] nums = new int[][]{\n                {1, 2, 3, 4, 5, 6},\n                {7, 8, 9, 10, 11, 12}\n        };\n        int r = 4;\n        int c = 3;\n        Solution solution = new Solution();\n        int[][] matrixReshape = solution.matrixReshape(nums, r, c);\n        for (int i = 0; i < matrixReshape.length; i++) {\n            System.out.println(Arrays.toString(matrixReshape[i]));\n        }\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0566-reshape-the-matrix\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "566. Reshape the Matrix"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/#566-reshape-the-matrix",
            "text": "",
            "title": "566. Reshape the Matrix"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570  reshape \uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002  \u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570 r \u548c c \uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002  \u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684 \u884c\u904d\u5386\u987a\u5e8f \u586b\u5145\u3002  \u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684 reshape \u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4 \u8f93\u51fa:  \n[[1,2,3,4]] \u89e3\u91ca: \n\u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4 \u8f93\u51fa:  \n[[1,2],\n [3,4]] \u89e3\u91ca: \n\u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002  \u6ce8\u610f\uff1a   \u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002  \u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 566. Reshape the Matrix   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 566. \u91cd\u5851\u77e9\u9635   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6211\u7b54\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u4efb\u4f55\u7b97\u6cd5\u7684\u77e5\u8bc6\u3002 \n\u8d77\u521d\u6211\u60f3\u628a\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u590d\u5236\u5230\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\uff0c\u518d\u5199\u5165\u65b0\u77e9\u9635\u3002 \n\u540e\u6765\u6211\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\u590d\u5236\u4e00\u4e2a\u77e9\u9635\u51fa\u6765\uff0c\u76f4\u63a5\u5728\u904d\u5386\u7684\u65f6\u5019\u8fb9\u8bfb\u8fb9\u5199\u5c31\u53ef\u4ee5\u4e86\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u5373\u53ef\u3002 \n\u5c31\u5982\u540c\u6211\u4eec\u5199\u5b57\uff0c\u5199\u5b8c\u4e00\u884c\uff0c\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u4ece\u5934\u5f00\u59cb\u5199\u4e00\u6837\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0566-reshape-the-matrix/#1",
            "text": "import java.util.Arrays;\n\npublic class Solution {\n\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int row = nums.length;\n        if (row == 0) {\n            return nums;\n        }\n        int col = nums[0].length;\n        // \u5982\u679c\u578b\u53f7\u4e0d\u76f8\u7b49\uff0c\u5219\u6ca1\u6709\u529e\u6cd5\u8f6c\u6362\uff0c\u6839\u636e\u9898\u610f\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u77e9\u9635\n        if (row * col != r * c) {\n            return nums;\n        }\n        int[][] ret = new int[r][c];\n        // \u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\n        int counter = 0;\n        // \u65b0\u77e9\u9635\u7684\u884c\u5750\u6807\n        int x = 0;\n        // \u5728\u904d\u5386\u539f\u77e9\u9635\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ed9\u65b0\u77e9\u9635\u8d4b\u503c\u4e86\n        // \u89c4\u5219\u5c31\u662f\u4ece\u5de6\u5411\u53f3\uff0c\u5982\u679c\u8d8a\u754c\u4e86\uff0c\u5c31\u91cd\u7f6e\uff0c\u5e76\u4e14\u884c\u53f7\u52a0 1\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                ret[x][counter] = nums[i][j];\n                counter++;\n                if (counter == c) {\n                    // \u8d8a\u754c\uff0c\u91cd\u7f6e\u5217\u5750\u6807\uff0c\u884c\u53f7 + 1\n                    counter = 0;\n                    x++;\n                }\n            }\n        }\n        return ret;\n    }\n\n    public static void main(String[] args) {\n        int[][] nums = new int[][]{\n                {1, 2, 3, 4, 5, 6},\n                {7, 8, 9, 10, 11, 12}\n        };\n        int r = 4;\n        int c = 3;\n        Solution solution = new Solution();\n        int[][] matrixReshape = solution.matrixReshape(nums, r, c);\n        for (int i = 0; i < matrixReshape.length; i++) {\n            System.out.println(Arrays.toString(matrixReshape[i]));\n        }\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0566-reshape-the-matrix  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/",
            "text": "620. Not Boring Movies\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002\n\n\n\u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a\n\u975e\n\u00a0\nboring\n\u00a0(\u4e0d\u65e0\u804a)\u00a0\u7684\u5e76\u4e14\n id \u4e3a\u5947\u6570\u00a0\n\u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7 \nrating\n \u6392\u5217\u3002\n\n\n\u00a0\n\n\n\u4f8b\u5982\uff0c\u4e0b\u8868 \ncinema\n:\n\n\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n\n\n\n\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a\n\n\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n620. Not Boring Movies\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n620. \u6709\u8da3\u7684\u7535\u5f71\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\ndrop table if exists cinema;\ncreate table cinema(\n  id int primary key auto_increment,\n  movie varchar(100),\n  description varchar(100),\n  rating double\n);\n\ninsert into cinema(movie,description,rating) values('War','great 3D',8.9);\ninsert into cinema(movie,description,rating) values('Science','fiction',8.5);\ninsert into cinema(movie,description,rating) values('irish','boring',6.2);\ninsert into cinema(movie,description,rating) values('Ice song','Fantacy',8.6);\ninsert into cinema(movie,description,rating) values('House card','Interesting',9.1);\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nselect id, movie, description, rating \nfrom cinema \nwhere description != 'boring' and id % 2 = 1\norder by rating desc;\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0620-not-boring-movies\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "620. Not Boring Movies"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/#620-not-boring-movies",
            "text": "",
            "title": "620. Not Boring Movies"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002  \u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a \u975e \u00a0 boring \u00a0(\u4e0d\u65e0\u804a)\u00a0\u7684\u5e76\u4e14  id \u4e3a\u5947\u6570\u00a0 \u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7  rating  \u6392\u5217\u3002  \u00a0  \u4f8b\u5982\uff0c\u4e0b\u8868  cinema :  +---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+  \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a  +---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+  \u00a0    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 620. Not Boring Movies   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 620. \u6709\u8da3\u7684\u7535\u5f71   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  drop table if exists cinema;\ncreate table cinema(\n  id int primary key auto_increment,\n  movie varchar(100),\n  description varchar(100),\n  rating double\n);\n\ninsert into cinema(movie,description,rating) values('War','great 3D',8.9);\ninsert into cinema(movie,description,rating) values('Science','fiction',8.5);\ninsert into cinema(movie,description,rating) values('irish','boring',6.2);\ninsert into cinema(movie,description,rating) values('Ice song','Fantacy',8.6);\ninsert into cinema(movie,description,rating) values('House card','Interesting',9.1);",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0620-not-boring-movies/#1",
            "text": "select id, movie, description, rating \nfrom cinema \nwhere description != 'boring' and id % 2 = 1\norder by rating desc;  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0620-not-boring-movies  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0627-swap-salary/",
            "text": "627. Swap Salary\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u00a0\nsalary\n\u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709m=\u7537\u6027 \u548c f=\u5973\u6027\u7684\u503c \u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c(\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136)\u3002\u8981\u6c42\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\u67e5\u8be2\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u4e34\u65f6\u8868\u3002\n\n\n\u4f8b\u5982:\n\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n\n\n\n\u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868:\n\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n627. Swap Salary\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n627. \u4ea4\u6362\u5de5\u8d44\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a\n\n\ndrop table if exists salary;\n\ncreate table salary(\n  id int primary key auto_increment,\n  name varchar(200),\n  sex char(1),\n  salary int\n);\n\ninsert into salary(name,sex,salary) values('A','m',2500);\ninsert into salary(name,sex,salary) values('B','f',1500);\ninsert into salary(name,sex,salary) values('C','m',5500);\ninsert into salary(name,sex,salary) values('D','f',500);\n\nselect * from salary;\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nUPDATE `salary` SET sex = IF(sex='m','f','m');\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nUPDATE `salary` SET sex = (CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END);\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0627-swap-salary\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "627. Swap Salary"
        },
        {
            "location": "/leetcode-0627-swap-salary/#627-swap-salary",
            "text": "",
            "title": "627. Swap Salary"
        },
        {
            "location": "/leetcode-0627-swap-salary/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u00a0 salary \u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709m=\u7537\u6027 \u548c f=\u5973\u6027\u7684\u503c \u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c(\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136)\u3002\u8981\u6c42\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\u67e5\u8be2\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u4e34\u65f6\u8868\u3002  \u4f8b\u5982:  | id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |  \u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868:  | id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 627. Swap Salary   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 627. \u4ea4\u6362\u5de5\u8d44   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0627-swap-salary/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a  \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a  drop table if exists salary;\n\ncreate table salary(\n  id int primary key auto_increment,\n  name varchar(200),\n  sex char(1),\n  salary int\n);\n\ninsert into salary(name,sex,salary) values('A','m',2500);\ninsert into salary(name,sex,salary) values('B','f',1500);\ninsert into salary(name,sex,salary) values('C','m',5500);\ninsert into salary(name,sex,salary) values('D','f',500);\n\nselect * from salary;",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0627-swap-salary/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0627-swap-salary/#1",
            "text": "UPDATE `salary` SET sex = IF(sex='m','f','m');",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0627-swap-salary/#2",
            "text": "UPDATE `salary` SET sex = (CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END);  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0627-swap-salary  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/",
            "text": "633. Sum of Square Numbers\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u00a0\nc\n\u00a0\uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 \na\n \u548c \nb\n\uff0c\u4f7f\u5f97\u00a0a\n2\n + b\n2\n = c\u3002\n\n\n\u793a\u4f8b1:\n\n\n\u8f93\u5165:\n 5\n\n\u8f93\u51fa:\n True\n\n\u89e3\u91ca:\n 1 * 1 + 2 * 2 = 5\n\n\n\n\u00a0\n\n\n\u793a\u4f8b2:\n\n\n\u8f93\u5165:\n 3\n\n\u8f93\u51fa:\n False\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n633. Sum of Square Numbers\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n633. \u5e73\u65b9\u6570\u4e4b\u548c\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0633-sum-of-square-numbers\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "633. Sum of Square Numbers"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/#633-sum-of-square-numbers",
            "text": "",
            "title": "633. Sum of Square Numbers"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u00a0 c \u00a0\uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570  a  \u548c  b \uff0c\u4f7f\u5f97\u00a0a 2  + b 2  = c\u3002  \u793a\u4f8b1:  \u8f93\u5165:  5 \u8f93\u51fa:  True \u89e3\u91ca:  1 * 1 + 2 * 2 = 5  \u00a0  \u793a\u4f8b2:  \u8f93\u5165:  3 \u8f93\u51fa:  False    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 633. Sum of Square Numbers   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 633. \u5e73\u65b9\u6570\u4e4b\u548c   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0633-sum-of-square-numbers/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0633-sum-of-square-numbers  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0648-replace-words/",
            "text": "648. Replace Words\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a\u00a0\n\u8bcd\u6839\n(root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a\u00a0\n\u7ee7\u627f\u8bcd\n(successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839\nan\n\uff0c\u8ddf\u968f\u7740\u5355\u8bcd\u00a0\nother\n(\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd\u00a0\nanother\n(\u53e6\u4e00\u4e2a)\u3002\n\n\n\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709\n\u7ee7\u627f\u8bcd\n\u7528\n\u8bcd\u6839\n\u66ff\u6362\u6389\u3002\u5982\u679c\n\u7ee7\u627f\u8bcd\n\u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684\n\u8bcd\u6839\n\uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002\n\n\n\u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n dict(\u8bcd\u5178) = [\"cat\", \"bat\", \"rat\"]\nsentence(\u53e5\u5b50) = \"the cattle was rattled by the battery\"\n\n\u8f93\u51fa:\n \"the cat was rat by the bat\"\n\n\n\n\u6ce8:\n\n\n\n\n\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n1 <= \u5b57\u5178\u5355\u8bcd\u6570 <=1000\n\n\n1 <=\u00a0 \u53e5\u4e2d\u8bcd\u8bed\u6570\u00a0<= 1000\n\n\n1 <= \u8bcd\u6839\u957f\u5ea6 <= 100\n\n\n1 <= \u53e5\u4e2d\u8bcd\u8bed\u957f\u5ea6\u00a0<= 1000\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n648. Replace Words\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n648. \u5355\u8bcd\u66ff\u6362\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    // \u6211\u81ea\u5df1\u5199\u7684\u4ee3\u7801\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b57\u5178\u6811 Trie\n\n    private class Trie {\n\n        private Node root;\n\n        private class Node {\n            private Node[] next;\n            private boolean isEnd;\n\n            public Node() {\n                this.next = new Node[26];\n                this.isEnd = false;\n            }\n        }\n\n        public Trie() {\n            root = new Node();\n        }\n\n        /**\n         * insert \u65b9\u6cd5\u548c\u4e00\u534a\u524d\u7f00\u6811\u65e0\u5f02\n         *\n         * @param word\n         */\n        public void insert(String word) {\n            Node curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    curNode.next[c - 'a'] = new Node();\n                }\n                curNode = curNode.next[c - 'a'];\n            }\n            if (!curNode.isEnd) {\n                curNode.isEnd = true;\n            }\n        }\n\n        /**\n         * @param word \u8bcd\u6839\n         * @return \u5982\u679c\u662f\u8bcd\u6839\uff0c\u5219\u8fd4\u56de\u5230\u8bcd\u6839\u7684\u7d22\u5f15\u503c\uff08\u4e0d\u5305\u542b\u8be5\u7d22\u5f15\uff09\uff0c\u5982\u679c\u4e0d\u662f\u8bcd\u6839\uff0c\u8fd4\u56de 0\n         */\n        public int startsWith(String word) {\n            int index = 0;\n            Node curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    return 0;\n                }\n                curNode = curNode.next[c - 'a'];\n                index++;\n                if (curNode.isEnd) {\n                    return index;\n                }\n            }\n            // \u5982\u679c\u662f\u524d\u7f00\uff0c\u5219\u8fd4\u56de 0 \uff0c\u4f8b\u5982\uff1a\u5b57\u5178\u91cc\u9762\u662f hello\uff0c\u800c\u904d\u5386\u7684\u5355\u8bcd\u662f he\n            return 0;\n        }\n    }\n\n    public String replaceWords(List<String> dict, String sentence) {\n        if (dict == null || dict.size() == 0 || sentence == null || sentence.length() == 0) {\n            return \"\";\n        }\n        Trie trie = new Trie();\n        for (String word : dict) {\n            trie.insert(word);\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String word : sentence.split(\" \")) {\n            int index = trie.startsWith(word);\n            if (index == 0) {\n                stringBuilder.append(word);\n            } else {\n                stringBuilder.append(word.substring(0, index));\n            }\n            stringBuilder.append(\" \");\n        }\n        // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"});\n        String sentence = \"the cattle was rattled by the battery\";\n        String replaceWords = solution.replaceWords(dict, sentence);\n        System.out.println(replaceWords);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public String replaceWords(List<String> dict, String sentence) {\n        Set<String> set = new HashSet<>();\n        set.addAll(dict);\n        StringBuilder stringBuilder = new StringBuilder();\n\n        String[] words = sentence.split(\" \");\n        int len = words.length;\n        for (int i = 0; i < len; i++) {\n            for (int j = 1; j <= words[i].length(); j++) {\n                String prefix = words[i].substring(0, j);\n                if (set.contains(prefix)) {\n                    words[i] = prefix;\n                    break;\n                }\n            }\n            stringBuilder.append(words[i]);\n            stringBuilder.append(\" \");\n        }\n        return stringBuilder.substring(0, stringBuilder.length() - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"});\n        String sentence = \"the cattle was rattled by the battery\";\n        String replaceWords = solution2.replaceWords(dict, sentence);\n        System.out.println(replaceWords);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0648-replace-words\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "648. Replace Words"
        },
        {
            "location": "/leetcode-0648-replace-words/#648-replace-words",
            "text": "",
            "title": "648. Replace Words"
        },
        {
            "location": "/leetcode-0648-replace-words/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a\u00a0 \u8bcd\u6839 (root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a\u00a0 \u7ee7\u627f\u8bcd (successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839 an \uff0c\u8ddf\u968f\u7740\u5355\u8bcd\u00a0 other (\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd\u00a0 another (\u53e6\u4e00\u4e2a)\u3002  \u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709 \u7ee7\u627f\u8bcd \u7528 \u8bcd\u6839 \u66ff\u6362\u6389\u3002\u5982\u679c \u7ee7\u627f\u8bcd \u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684 \u8bcd\u6839 \uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002  \u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  dict(\u8bcd\u5178) = [\"cat\", \"bat\", \"rat\"]\nsentence(\u53e5\u5b50) = \"the cattle was rattled by the battery\" \u8f93\u51fa:  \"the cat was rat by the bat\"  \u6ce8:   \u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002  1 <= \u5b57\u5178\u5355\u8bcd\u6570 <=1000  1 <=\u00a0 \u53e5\u4e2d\u8bcd\u8bed\u6570\u00a0<= 1000  1 <= \u8bcd\u6839\u957f\u5ea6 <= 100  1 <= \u53e5\u4e2d\u8bcd\u8bed\u957f\u5ea6\u00a0<= 1000     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 648. Replace Words   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 648. \u5355\u8bcd\u66ff\u6362   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0648-replace-words/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0648-replace-words/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0648-replace-words/#1",
            "text": "import java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n\n    // \u6211\u81ea\u5df1\u5199\u7684\u4ee3\u7801\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b57\u5178\u6811 Trie\n\n    private class Trie {\n\n        private Node root;\n\n        private class Node {\n            private Node[] next;\n            private boolean isEnd;\n\n            public Node() {\n                this.next = new Node[26];\n                this.isEnd = false;\n            }\n        }\n\n        public Trie() {\n            root = new Node();\n        }\n\n        /**\n         * insert \u65b9\u6cd5\u548c\u4e00\u534a\u524d\u7f00\u6811\u65e0\u5f02\n         *\n         * @param word\n         */\n        public void insert(String word) {\n            Node curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    curNode.next[c - 'a'] = new Node();\n                }\n                curNode = curNode.next[c - 'a'];\n            }\n            if (!curNode.isEnd) {\n                curNode.isEnd = true;\n            }\n        }\n\n        /**\n         * @param word \u8bcd\u6839\n         * @return \u5982\u679c\u662f\u8bcd\u6839\uff0c\u5219\u8fd4\u56de\u5230\u8bcd\u6839\u7684\u7d22\u5f15\u503c\uff08\u4e0d\u5305\u542b\u8be5\u7d22\u5f15\uff09\uff0c\u5982\u679c\u4e0d\u662f\u8bcd\u6839\uff0c\u8fd4\u56de 0\n         */\n        public int startsWith(String word) {\n            int index = 0;\n            Node curNode = root;\n            for (char c : word.toCharArray()) {\n                if (curNode.next[c - 'a'] == null) {\n                    return 0;\n                }\n                curNode = curNode.next[c - 'a'];\n                index++;\n                if (curNode.isEnd) {\n                    return index;\n                }\n            }\n            // \u5982\u679c\u662f\u524d\u7f00\uff0c\u5219\u8fd4\u56de 0 \uff0c\u4f8b\u5982\uff1a\u5b57\u5178\u91cc\u9762\u662f hello\uff0c\u800c\u904d\u5386\u7684\u5355\u8bcd\u662f he\n            return 0;\n        }\n    }\n\n    public String replaceWords(List<String> dict, String sentence) {\n        if (dict == null || dict.size() == 0 || sentence == null || sentence.length() == 0) {\n            return \"\";\n        }\n        Trie trie = new Trie();\n        for (String word : dict) {\n            trie.insert(word);\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String word : sentence.split(\" \")) {\n            int index = trie.startsWith(word);\n            if (index == 0) {\n                stringBuilder.append(word);\n            } else {\n                stringBuilder.append(word.substring(0, index));\n            }\n            stringBuilder.append(\" \");\n        }\n        // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"});\n        String sentence = \"the cattle was rattled by the battery\";\n        String replaceWords = solution.replaceWords(dict, sentence);\n        System.out.println(replaceWords);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0648-replace-words/#2",
            "text": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public String replaceWords(List<String> dict, String sentence) {\n        Set<String> set = new HashSet<>();\n        set.addAll(dict);\n        StringBuilder stringBuilder = new StringBuilder();\n\n        String[] words = sentence.split(\" \");\n        int len = words.length;\n        for (int i = 0; i < len; i++) {\n            for (int j = 1; j <= words[i].length(); j++) {\n                String prefix = words[i].substring(0, j);\n                if (set.contains(prefix)) {\n                    words[i] = prefix;\n                    break;\n                }\n            }\n            stringBuilder.append(words[i]);\n            stringBuilder.append(\" \");\n        }\n        return stringBuilder.substring(0, stringBuilder.length() - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution2 solution2 = new Solution2();\n        List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"});\n        String sentence = \"the cattle was rattled by the battery\";\n        String replaceWords = solution2.replaceWords(dict, sentence);\n        System.out.println(replaceWords);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0648-replace-words  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/",
            "text": "653. Two Sum IV - Input is a BST\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002\n\n\n\u6848\u4f8b 1:\n\n\n\u8f93\u5165:\n \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n\n\u8f93\u51fa:\n True\n\n\n\n\u00a0\n\n\n\u6848\u4f8b 2:\n\n\n\u8f93\u5165:\n \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n\n\u8f93\u51fa:\n False\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n653. Two Sum IV - Input is a BST\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n653. \u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u662f LeetCode \u7b2c 1 \u9898\u548c\u7b2c 167 \u9898\u7684\u6269\u5c55\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5229\u7528\u5b83\u4eec\u4e24\u9053\u9898\u7684\u601d\u8def\u6765\u5b8c\u6210\u3002\n\n\n1\u3001\u91c7\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u5230\u4e86\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\uff1b\n2\u3001\u5982\u679c\u501f\u52a9\u54c8\u5e0c\u8868\uff0c\u5404\u79cd\u904d\u5386\u65b9\u5f0f\u5c31\u90fd\u53ef\u4ee5\u4e86\uff08\u6ca1\u6709\u5229\u7528\u5230\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        if (root == null) {\n            return false;\n        }\n        List<Integer> list = new ArrayList<>();\n        // \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\n        inOrder(root, list);\n        int len = list.size();\n        int l = 0;\n        int r = len - 1;\n\n        // \u5728\u987a\u5e8f\u6570\u7ec4\u4e2d\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\n        while (l < r) {\n            int sum = list.get(l) + list.get(r);\n\n            if (sum > k) {\n                r--;\n            } else if (sum < k) {\n                l++;\n            } else {\n                assert sum == k;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private void inOrder(TreeNode node, List<Integer> list) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, list);\n        list.add(node.val);\n        inOrder(node.right, list);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\nimport java.util.HashSet;\n\n/**\n * @author liwei\n * @date 18/6/22 \u4e0b\u53482:18\n */\npublic class Solution2 {\n\n    /**\n     * \u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\uff0c\u5176\u5b9e\u524d\u4e2d\u540e\u5e8f\u90fd\u80fd\u901a\u8fc7\uff0c\u751a\u81f3\u5c42\u5e8f\u904d\u5386\u4e5f\u884c\n     * @param root\n     * @param k\n     * @return\n     */\n    public boolean findTarget(TreeNode root, int k) {\n        if (root == null) {\n            return false;\n        }\n        // \u56e0\u4e3a BST \u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Set\n        HashSet<Integer> set = new HashSet<>();\n        boolean[] res = new boolean[1];\n        preOrder(root, set, k, res);\n        return res[0];\n    }\n\n    private void preOrder(TreeNode node, HashSet<Integer> set, int k, boolean[] res) {\n        if (node == null) {\n            return;\n        }\n        // 2 * node.val == k \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a BST \u4e2d\uff0c\u6240\u6709\u7684\u6570\u90fd\u4e0d\u76f8\u540c\uff08\u5373 k \u7684\u4e00\u534a\u8fd9\u4e2a\u6570\u4e00\u5b9a\u4e0d\u662f\u6211\u4eec\u8981\u627e\u7684 \uff09\n        if (set.contains(k - node.val) && 2 * node.val != k) {\n            res[0] = true;\n            return;\n        } else {\n            set.add(node.val);\n        }\n        preOrder(node.left, set, k, res);\n        preOrder(node.right, set, k, res);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0653-two-sum-iv-input-is-a-bst\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "653. Two Sum IV - Input is a BST"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#653-two-sum-iv-input-is-a-bst",
            "text": "",
            "title": "653. Two Sum IV - Input is a BST"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002  \u6848\u4f8b 1:  \u8f93\u5165:  \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9 \u8f93\u51fa:  True  \u00a0  \u6848\u4f8b 2:  \u8f93\u5165:  \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28 \u8f93\u51fa:  False  \u00a0     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 653. Two Sum IV - Input is a BST   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 653. \u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u662f LeetCode \u7b2c 1 \u9898\u548c\u7b2c 167 \u9898\u7684\u6269\u5c55\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5229\u7528\u5b83\u4eec\u4e24\u9053\u9898\u7684\u601d\u8def\u6765\u5b8c\u6210\u3002  1\u3001\u91c7\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u5230\u4e86\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\uff1b\n2\u3001\u5982\u679c\u501f\u52a9\u54c8\u5e0c\u8868\uff0c\u5404\u79cd\u904d\u5386\u65b9\u5f0f\u5c31\u90fd\u53ef\u4ee5\u4e86\uff08\u6ca1\u6709\u5229\u7528\u5230\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        if (root == null) {\n            return false;\n        }\n        List<Integer> list = new ArrayList<>();\n        // \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\n        inOrder(root, list);\n        int len = list.size();\n        int l = 0;\n        int r = len - 1;\n\n        // \u5728\u987a\u5e8f\u6570\u7ec4\u4e2d\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\n        while (l < r) {\n            int sum = list.get(l) + list.get(r);\n\n            if (sum > k) {\n                r--;\n            } else if (sum < k) {\n                l++;\n            } else {\n                assert sum == k;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private void inOrder(TreeNode node, List<Integer> list) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, list);\n        list.add(node.val);\n        inOrder(node.right, list);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0653-two-sum-iv-input-is-a-bst/#2",
            "text": "import java.util.HashSet;\n\n/**\n * @author liwei\n * @date 18/6/22 \u4e0b\u53482:18\n */\npublic class Solution2 {\n\n    /**\n     * \u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\uff0c\u5176\u5b9e\u524d\u4e2d\u540e\u5e8f\u90fd\u80fd\u901a\u8fc7\uff0c\u751a\u81f3\u5c42\u5e8f\u904d\u5386\u4e5f\u884c\n     * @param root\n     * @param k\n     * @return\n     */\n    public boolean findTarget(TreeNode root, int k) {\n        if (root == null) {\n            return false;\n        }\n        // \u56e0\u4e3a BST \u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Set\n        HashSet<Integer> set = new HashSet<>();\n        boolean[] res = new boolean[1];\n        preOrder(root, set, k, res);\n        return res[0];\n    }\n\n    private void preOrder(TreeNode node, HashSet<Integer> set, int k, boolean[] res) {\n        if (node == null) {\n            return;\n        }\n        // 2 * node.val == k \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a BST \u4e2d\uff0c\u6240\u6709\u7684\u6570\u90fd\u4e0d\u76f8\u540c\uff08\u5373 k \u7684\u4e00\u534a\u8fd9\u4e2a\u6570\u4e00\u5b9a\u4e0d\u662f\u6211\u4eec\u8981\u627e\u7684 \uff09\n        if (set.contains(k - node.val) && 2 * node.val != k) {\n            res[0] = true;\n            return;\n        } else {\n            set.add(node.val);\n        }\n        preOrder(node.left, set, k, res);\n        preOrder(node.right, set, k, res);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0653-two-sum-iv-input-is-a-bst  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/",
            "text": "677. Map Sum Pairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n677. Map Sum Pairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n677. \u952e\u503c\u6620\u5c04\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528 \nTrie\n \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684 \nisWord\n \u8bbe\u8ba1\u6210 \nvalue\n \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765 \nisWord\n \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nJava \u5199\u6cd5\uff1a\n\n\nimport java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}\n\n\n\n\nPython \u5199\u6cd5\uff1a\n\n\nclass MapSum(object):\n    # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053\n    class TrieNode:\n        def __init__(self):\n            self.val = 0\n            self.next = {}\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = MapSum.TrieNode()\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n\n        cur_node = self.root\n\n        for c in key:\n            if c not in cur_node.next.keys():\n                cur_node.next[c] = MapSum.TrieNode()\n            cur_node = cur_node.next[c]\n        cur_node.val = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        cur_node = self.root\n\n        for c in prefix:\n            if c in cur_node.next.keys():\n                cur_node = cur_node.next[c]\n            else:\n                return 0\n        return self.__sum(cur_node)\n\n    # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52\n    def __sum(self, node):\n        res = node.val  # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0\n        for c in node.next.keys():\n            res += self.__sum(node.next[c])\n        return res\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#677-map-sum-pairs",
            "text": "",
            "title": "677. Map Sum Pairs"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002  \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002  \u82f1\u6587\u7f51\u5740\uff1a 677. Map Sum Pairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 677. \u952e\u503c\u6620\u5c04   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528  Trie  \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684  isWord  \u8bbe\u8ba1\u6210  value  \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765  isWord  \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002\n+ \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002\n+ \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0677-map-sum-pairs/#1",
            "text": "Java \u5199\u6cd5\uff1a  import java.util.HashMap;\n\npublic class MapSum {\n\n    private Node root;\n\n    private class Node {\n        private int value;\n        private HashMap<Character, Node> next;\n\n        public Node() {\n            this(0);\n        }\n\n        public Node(int value) {\n            this.value = value;\n            this.next = new HashMap<>();\n        }\n    }\n\n    /**\n     * Initialize your data structure here.\n     */\n    public MapSum() {\n        root = new Node();\n    }\n\n    public void insert(String key, int val) {\n        Node curNode = root;\n        for (int i = 0; i < key.length(); i++) {\n            Character c = key.charAt(i);\n            if (!curNode.next.containsKey(c)) {\n                curNode.next.put(c, new Node());\n            }\n            curNode = curNode.next.get(c);\n        }\n        curNode.value = val;\n    }\n\n    // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83\n    public int sum(String prefix) {\n        Node curNode = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            Character c = prefix.charAt(i);\n            if (curNode.next.containsKey(c)) {\n                curNode = curNode.next.get(c);\n            } else {\n                return 0;\n            }\n        }\n        return sum(curNode);\n    }\n\n    // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c\n    private int sum(Node node) {\n        int res = node.value;\n        for (Character key : node.next.keySet()) {\n            // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9\n            res += sum(node.next.get(key));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3\n        // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null\n        // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5\n        MapSum2 mapSum = new MapSum2();\n        mapSum.insert(\"apple\", 3);\n        int sum1 = mapSum.sum(\"ap\");\n        System.out.println(sum1);\n        mapSum.insert(\"app\", 2);\n        int sum2 = mapSum.sum(\"ap\");\n        System.out.println(sum2);\n    }\n}  Python \u5199\u6cd5\uff1a  class MapSum(object):\n    # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053\n    class TrieNode:\n        def __init__(self):\n            self.val = 0\n            self.next = {}\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = MapSum.TrieNode()\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n\n        cur_node = self.root\n\n        for c in key:\n            if c not in cur_node.next.keys():\n                cur_node.next[c] = MapSum.TrieNode()\n            cur_node = cur_node.next[c]\n        cur_node.val = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        cur_node = self.root\n\n        for c in prefix:\n            if c in cur_node.next.keys():\n                cur_node = cur_node.next[c]\n            else:\n                return 0\n        return self.__sum(cur_node)\n\n    # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52\n    def __sum(self, node):\n        res = node.val  # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0\n        for c in node.next.keys():\n            res += self.__sum(node.next[c])\n        return res\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/",
            "text": "686. Repeated String Match\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 A \u548c B, \u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32A\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32B\u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32A\u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0cA = \"abcd\"\uff0cB = \"cdabcdab\"\u3002\n\n\n\u7b54\u6848\u4e3a 3\uff0c\u00a0\u56e0\u4e3a A \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a\u00a0\u201cabcdabcdabcd\u201d\uff0c\u6b64\u65f6 B \u662f\u5176\u5b50\u4e32\uff1bA \u91cd\u590d\u53e0\u52a0\u4e24\u904d\u540e\u4e3a\"abcdabcd\"\uff0cB \u5e76\u4e0d\u662f\u5176\u5b50\u4e32\u3002\n\n\n\u6ce8\u610f:\n\n\n\u00a0\nA\n\u00a0\u4e0e\u00a0\nB\n\u00a0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u57281\u548c10000\u533a\u95f4\u8303\u56f4\u5185\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n686. Repeated String Match\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n686. \u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\uff1a A=\"abc\", B=\"cab\"\n    // A   \"abcd\"\uff0c\n    //     \"abcdabcd\"\n    //   B = \"cdabcdab\"\u3002\n    public int repeatedStringMatch(String A, String B) {\n        int blen = B.length();\n        int count = 1;\n        StringBuilder stringBuilder = new StringBuilder(A);\n        while (stringBuilder.length() < blen) {\n            stringBuilder.append(A);\n            count++;\n        }\n        if (stringBuilder.indexOf(B) >= 0) {\n            return count;\n        }\n        stringBuilder.append(A);\n        if (stringBuilder.indexOf(B) >= 0) {\n            return count + 1;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        String A = \"abcd\";\n        String B = \"cdabcdab\";\n        Solution solution = new Solution();\n        int repeatedStringMatch = solution.repeatedStringMatch(A, B);\n        System.out.println(repeatedStringMatch);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0686-repeated-string-match\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "686. Repeated String Match"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/#686-repeated-string-match",
            "text": "",
            "title": "686. Repeated String Match"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 A \u548c B, \u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32A\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32B\u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32A\u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0cA = \"abcd\"\uff0cB = \"cdabcdab\"\u3002  \u7b54\u6848\u4e3a 3\uff0c\u00a0\u56e0\u4e3a A \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a\u00a0\u201cabcdabcdabcd\u201d\uff0c\u6b64\u65f6 B \u662f\u5176\u5b50\u4e32\uff1bA \u91cd\u590d\u53e0\u52a0\u4e24\u904d\u540e\u4e3a\"abcdabcd\"\uff0cB \u5e76\u4e0d\u662f\u5176\u5b50\u4e32\u3002  \u6ce8\u610f:  \u00a0 A \u00a0\u4e0e\u00a0 B \u00a0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u57281\u548c10000\u533a\u95f4\u8303\u56f4\u5185\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 686. Repeated String Match   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 686. \u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0686-repeated-string-match/#1",
            "text": "public class Solution {\n\n    // \u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\uff1a A=\"abc\", B=\"cab\"\n    // A   \"abcd\"\uff0c\n    //     \"abcdabcd\"\n    //   B = \"cdabcdab\"\u3002\n    public int repeatedStringMatch(String A, String B) {\n        int blen = B.length();\n        int count = 1;\n        StringBuilder stringBuilder = new StringBuilder(A);\n        while (stringBuilder.length() < blen) {\n            stringBuilder.append(A);\n            count++;\n        }\n        if (stringBuilder.indexOf(B) >= 0) {\n            return count;\n        }\n        stringBuilder.append(A);\n        if (stringBuilder.indexOf(B) >= 0) {\n            return count + 1;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        String A = \"abcd\";\n        String B = \"cdabcdab\";\n        Solution solution = new Solution();\n        int repeatedStringMatch = solution.repeatedStringMatch(A, B);\n        System.out.println(repeatedStringMatch);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0686-repeated-string-match  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/",
            "text": "687. Longest Univalue Path\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002\n\n\n\u6ce8\u610f\n\uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n\n\n              5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5\n\n\n\n\u8f93\u51fa:\n\n\n2\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n\n\n              1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5\n\n\n\n\u8f93\u51fa:\n\n\n2\n\n\n\n\u6ce8\u610f:\n \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002\u00a0\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n687. Longest Univalue Path\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n687. \u6700\u957f\u540c\u503c\u8def\u5f84\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * 687. \u6700\u957f\u540c\u503c\u8def\u5f84\n * https://leetcode-cn.com/problems/longest-univalue-path/description/\n *\n * @author liwei\n */\npublic class Solution {\n\n    public int longestUnivaluePath(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int[] res = new int[1];\n        longestUnivaluePath(root, res);\n        return res[0];\n    }\n\n    /**\n     * \u9014\u5f84 node \u7684\u76f8\u540c\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\n     *\n     * @param node\n     * @param res\n     * @return\n     */\n    private int longestUnivaluePath(TreeNode node, int[] res) {\n        if (node == null) {\n            return 0;\n        }\n        int l = longestUnivaluePath(node.left, res);\n        int r = longestUnivaluePath(node.right, res);\n        int pl = 0;\n        int pr = 0;\n        if (node.left != null && node.val == node.left.val) {\n            pl = l + 1;\n        }\n        if (node.right != null && node.val == node.right.val) {\n            pr = r + 1;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u8fd9\u4e00\u6b65\u5728\u66f4\u65b0\u5168\u5c40\u7684 answer\n        res[0] = Math.max(res[0], pl + pr);\n        // \u8fd4\u56de\u53ea\u80fd\u4f7f\u7528\u5355\u8fb9\u6700\u957f\u7684\u989d\u8def\u5f84\n        return Math.max(pl, pr);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0687-longest-univalue-path\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "687. Longest Univalue Path"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/#687-longest-univalue-path",
            "text": "",
            "title": "687. Longest Univalue Path"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002  \u6ce8\u610f \uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002  \u793a\u4f8b 1:  \u8f93\u5165:                5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5  \u8f93\u51fa:  2  \u793a\u4f8b 2:  \u8f93\u5165:                1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5  \u8f93\u51fa:  2  \u6ce8\u610f:  \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002\u00a0\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 687. Longest Univalue Path   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 687. \u6700\u957f\u540c\u503c\u8def\u5f84   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0687-longest-univalue-path/#1",
            "text": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\n/**\n * 687. \u6700\u957f\u540c\u503c\u8def\u5f84\n * https://leetcode-cn.com/problems/longest-univalue-path/description/\n *\n * @author liwei\n */\npublic class Solution {\n\n    public int longestUnivaluePath(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int[] res = new int[1];\n        longestUnivaluePath(root, res);\n        return res[0];\n    }\n\n    /**\n     * \u9014\u5f84 node \u7684\u76f8\u540c\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\n     *\n     * @param node\n     * @param res\n     * @return\n     */\n    private int longestUnivaluePath(TreeNode node, int[] res) {\n        if (node == null) {\n            return 0;\n        }\n        int l = longestUnivaluePath(node.left, res);\n        int r = longestUnivaluePath(node.right, res);\n        int pl = 0;\n        int pr = 0;\n        if (node.left != null && node.val == node.left.val) {\n            pl = l + 1;\n        }\n        if (node.right != null && node.val == node.right.val) {\n            pr = r + 1;\n        }\n        // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u8fd9\u4e00\u6b65\u5728\u66f4\u65b0\u5168\u5c40\u7684 answer\n        res[0] = Math.max(res[0], pl + pr);\n        // \u8fd4\u56de\u53ea\u80fd\u4f7f\u7528\u5355\u8fb9\u6700\u957f\u7684\u989d\u8def\u5f84\n        return Math.max(pl, pr);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0687-longest-univalue-path  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0690-employee-importance/",
            "text": "690. Employee Importance\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5\n\u552f\u4e00\u7684id\n\uff0c\n\u91cd\u8981\u5ea6\u00a0\n\u548c \n\u76f4\u7cfb\u4e0b\u5c5e\u7684id\n\u3002\n\n\n\u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e\n\u5e76\u4e0d\u662f\u76f4\u7cfb\n\u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\n\n\n\u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n\n\u8f93\u51fa:\n 11\n\n\u89e3\u91ca:\n\n\u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a\n\u76f4\u7cfb\n\u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a\n\u76f4\u7cfb\n\u4e0b\u5c5e\n\n\n\u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n690. Employee Importance\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n690. \u5458\u5de5\u7684\u91cd\u8981\u6027\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u56fe\u7b97\u6cd5\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u904d\u5386\u5230\u6ca1\u6709\u4e0b\u5c5e\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u4e24\u79cd\u904d\u5386\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u4f7f\u7528\n+ \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9690\u5f0f\u5730\u8c03\u7528\u6808\u3002\n+ \u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u663e\u793a\u5730\u4f7f\u7528\u961f\u5217\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1aDFS\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nclass Employee {\n    // It's the unique id of each node;\n    // unique id of this employee\n    public int id;\n    // the importance value of this employee\n    public int importance;\n    // the id of direct subordinates\n    public List<Integer> subordinates;\n};\n\npublic class Solution {\n\n    private int sum = 0;\n    private Set<Integer> visited;\n    private Map<Integer, Employee> map;\n\n    // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\n\n    public int getImportance(List<Employee> employees, int id) {\n        map = new HashMap<>();\n        for (Employee employee : employees) {\n            map.put(employee.id, employee);\n        }\n        visited = new HashSet<>();\n        dfs(map.get(id));\n        return this.sum;\n    }\n\n    private void dfs(Employee employee) {\n        if (!visited.contains(employee.id)) {\n            visited.add(employee.id);\n            this.sum += employee.importance;\n            for (Integer id : employee.subordinates) {\n                dfs(map.get(id));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Employee employee1 = new Employee();\n        employee1.id = 1;\n        employee1.importance = 5;\n        List<Integer> subordinates1 = new ArrayList<>();\n        subordinates1.add(2);\n        subordinates1.add(3);\n        employee1.subordinates = subordinates1;\n\n        Employee employee2 = new Employee();\n        employee2.id = 2;\n        employee2.importance = 3;\n        employee2.subordinates = new ArrayList<>();\n\n        Employee employee3 = new Employee();\n        employee3.id = 3;\n        employee3.importance = 3;\n        employee3.subordinates = new ArrayList<>();\n\n        List<Employee> employees = new ArrayList<>();\n        employees.add(employee1);\n        employees.add(employee2);\n        employees.add(employee3);\n\n        Solution solution = new Solution();\n        int importance = solution.getImportance(employees, 1);\n        System.out.println(importance);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1aBFS\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public int getImportance(List<Employee> employees, int id) {\n        Map<Integer, Employee> map = new HashMap<>();\n        for (Employee employee : employees) {\n            map.put(employee.id, employee);\n        }\n        Set<Integer> visited = new HashSet<>();\n        LinkedList<Integer> queue = new LinkedList<>();\n        int res = 0;\n        queue.addLast(id);\n        while (!queue.isEmpty()) {\n            Integer curId = queue.removeFirst();\n            if (!visited.contains(curId)) {\n                Employee curEmp = map.get(curId);\n                res += curEmp.importance;\n                for (Integer eid : curEmp.subordinates) {\n                    queue.addLast(eid);\n                }\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0690-employee-importance\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "690. Employee Importance"
        },
        {
            "location": "/leetcode-0690-employee-importance/#690-employee-importance",
            "text": "",
            "title": "690. Employee Importance"
        },
        {
            "location": "/leetcode-0690-employee-importance/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5 \u552f\u4e00\u7684id \uff0c \u91cd\u8981\u5ea6\u00a0 \u548c  \u76f4\u7cfb\u4e0b\u5c5e\u7684id \u3002  \u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e \u5e76\u4e0d\u662f\u76f4\u7cfb \u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002  \u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1 \u8f93\u51fa:  11 \u89e3\u91ca: \n\u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002  \u6ce8\u610f:   \u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a \u76f4\u7cfb \u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a \u76f4\u7cfb \u4e0b\u5c5e  \u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 690. Employee Importance   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 690. \u5458\u5de5\u7684\u91cd\u8981\u6027   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0690-employee-importance/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u56fe\u7b97\u6cd5\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u904d\u5386\u5230\u6ca1\u6709\u4e0b\u5c5e\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002  \u4e24\u79cd\u904d\u5386\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u4f7f\u7528\n+ \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9690\u5f0f\u5730\u8c03\u7528\u6808\u3002\n+ \u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u663e\u793a\u5730\u4f7f\u7528\u961f\u5217\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0690-employee-importance/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0690-employee-importance/#1dfs",
            "text": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nclass Employee {\n    // It's the unique id of each node;\n    // unique id of this employee\n    public int id;\n    // the importance value of this employee\n    public int importance;\n    // the id of direct subordinates\n    public List<Integer> subordinates;\n};\n\npublic class Solution {\n\n    private int sum = 0;\n    private Set<Integer> visited;\n    private Map<Integer, Employee> map;\n\n    // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\n\n    public int getImportance(List<Employee> employees, int id) {\n        map = new HashMap<>();\n        for (Employee employee : employees) {\n            map.put(employee.id, employee);\n        }\n        visited = new HashSet<>();\n        dfs(map.get(id));\n        return this.sum;\n    }\n\n    private void dfs(Employee employee) {\n        if (!visited.contains(employee.id)) {\n            visited.add(employee.id);\n            this.sum += employee.importance;\n            for (Integer id : employee.subordinates) {\n                dfs(map.get(id));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Employee employee1 = new Employee();\n        employee1.id = 1;\n        employee1.importance = 5;\n        List<Integer> subordinates1 = new ArrayList<>();\n        subordinates1.add(2);\n        subordinates1.add(3);\n        employee1.subordinates = subordinates1;\n\n        Employee employee2 = new Employee();\n        employee2.id = 2;\n        employee2.importance = 3;\n        employee2.subordinates = new ArrayList<>();\n\n        Employee employee3 = new Employee();\n        employee3.id = 3;\n        employee3.importance = 3;\n        employee3.subordinates = new ArrayList<>();\n\n        List<Employee> employees = new ArrayList<>();\n        employees.add(employee1);\n        employees.add(employee2);\n        employees.add(employee3);\n\n        Solution solution = new Solution();\n        int importance = solution.getImportance(employees, 1);\n        System.out.println(importance);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1aDFS\u3002"
        },
        {
            "location": "/leetcode-0690-employee-importance/#2bfs",
            "text": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Solution2 {\n\n    public int getImportance(List<Employee> employees, int id) {\n        Map<Integer, Employee> map = new HashMap<>();\n        for (Employee employee : employees) {\n            map.put(employee.id, employee);\n        }\n        Set<Integer> visited = new HashSet<>();\n        LinkedList<Integer> queue = new LinkedList<>();\n        int res = 0;\n        queue.addLast(id);\n        while (!queue.isEmpty()) {\n            Integer curId = queue.removeFirst();\n            if (!visited.contains(curId)) {\n                Employee curEmp = map.get(curId);\n                res += curEmp.importance;\n                for (Integer eid : curEmp.subordinates) {\n                    queue.addLast(eid);\n                }\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0690-employee-importance  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1aBFS\u3002"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/",
            "text": "693. Binary Number with Alternating Bits\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u4ed6\u662f\u5426\u4e3a\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4ed6\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u6570\u6c38\u4e0d\u76f8\u7b49\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n 5\n\n\u8f93\u51fa:\n True\n\n\u89e3\u91ca:\n\n5\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 101\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n 7\n\n\u8f93\u51fa:\n False\n\n\u89e3\u91ca:\n\n7\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 111\n\n\n\n\u793a\u4f8b\u00a03:\n\n\n\u8f93\u5165:\n 11\n\n\u8f93\u51fa:\n False\n\n\u89e3\u91ca:\n\n11\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1011\n\n\n\n\u00a0\u793a\u4f8b 4:\n\n\n\u8f93\u5165:\n 10\n\n\u8f93\u51fa:\n True\n\n\u89e3\u91ca:\n\n10\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1010\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n693. Binary Number with Alternating Bits\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n693. \u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u4e00\u7248\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6bd4\u8f83\u5e38\u89c4\uff0c\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u3002\n\n\npublic class Solution {\n\n    public boolean hasAlternatingBits(int n) {\n        // \u9898\u76ee\u8bf4\u4e86\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u8d1f\u6570\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\u4e86\n        if (n <= 0) {\n            return false;\n        }\n        boolean flag = ((n & 1) == 0);\n        while ((n != 0)) {\n            n >>= 1;\n            boolean curFlag = ((n & 1) == 0);\n            if (flag == curFlag) {\n                return false;\n            } else {\n                flag = curFlag;\n            }\n        }\n        // \u8fd9\u79cd\u68c0\u6d4b\uff0c\u4e00\u5b9a\u4f1a\u5c06\u6240\u6709\u7684\u6570\u4f4d\u90fd\u68c0\u67e5\u5b8c\uff0c\u56e0\u6b64\uff0c\n        // \u80fd\u8fd0\u884c\u5230\u6700\u540e\u7684\uff0c\u4e00\u5b9a\u90fd\u4f1a\u8fd4\u56de true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        System.out.println(Integer.toBinaryString(n));\n        boolean hasAlternatingBits = solution.hasAlternatingBits(n);\n        System.out.println(hasAlternatingBits);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 \nInteger.toBinaryString(n)\n \u7ecf\u5e38\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u5173\u4e8e\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u3002\n\n\n/**\n * @author liwei\n * @date 18/6/29 \u4e0b\u53488:43\n */\npublic class Solution2 {\n\n    public boolean hasAlternatingBits(int n) {\n        String nStr = Integer.toBinaryString(n);\n        int len = nStr.length();\n        for (int i = 0; i < len - 1; i++) {\n            if (nStr.charAt(i) == nStr.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 \nInteger.toBinaryString(n)\n \u5e76\u7ed3\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u5224\u65ad\u3002\n\n\npublic class Solution3 {\n\n    public boolean hasAlternatingBits(int n) {\n        String nStr = Integer.toBinaryString(n);\n        // \u56e0\u4e3a\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4ee5 1 \u5f00\u5934\n        return nStr.matches(\"(10)*1?\");\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0693-binary-number-with-alternating-bits\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "693. Binary Number with Alternating Bits"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#693-binary-number-with-alternating-bits",
            "text": "",
            "title": "693. Binary Number with Alternating Bits"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u4ed6\u662f\u5426\u4e3a\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4ed6\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u6570\u6c38\u4e0d\u76f8\u7b49\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  5 \u8f93\u51fa:  True \u89e3\u91ca: \n5\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 101  \u793a\u4f8b 2:  \u8f93\u5165:  7 \u8f93\u51fa:  False \u89e3\u91ca: \n7\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 111  \u793a\u4f8b\u00a03:  \u8f93\u5165:  11 \u8f93\u51fa:  False \u89e3\u91ca: \n11\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1011  \u00a0\u793a\u4f8b 4:  \u8f93\u5165:  10 \u8f93\u51fa:  True \u89e3\u91ca: \n10\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1010    \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 693. Binary Number with Alternating Bits   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 693. \u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#1",
            "text": "public class Solution {\n\n    public boolean hasAlternatingBits(int n) {\n        // \u9898\u76ee\u8bf4\u4e86\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u8d1f\u6570\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\u4e86\n        if (n <= 0) {\n            return false;\n        }\n        boolean flag = ((n & 1) == 0);\n        while ((n != 0)) {\n            n >>= 1;\n            boolean curFlag = ((n & 1) == 0);\n            if (flag == curFlag) {\n                return false;\n            } else {\n                flag = curFlag;\n            }\n        }\n        // \u8fd9\u79cd\u68c0\u6d4b\uff0c\u4e00\u5b9a\u4f1a\u5c06\u6240\u6709\u7684\u6570\u4f4d\u90fd\u68c0\u67e5\u5b8c\uff0c\u56e0\u6b64\uff0c\n        // \u80fd\u8fd0\u884c\u5230\u6700\u540e\u7684\uff0c\u4e00\u5b9a\u90fd\u4f1a\u8fd4\u56de true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        System.out.println(Integer.toBinaryString(n));\n        boolean hasAlternatingBits = solution.hasAlternatingBits(n);\n        System.out.println(hasAlternatingBits);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u4e00\u7248\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6bd4\u8f83\u5e38\u89c4\uff0c\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u3002"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#2-java-integertobinarystringn",
            "text": "/**\n * @author liwei\n * @date 18/6/29 \u4e0b\u53488:43\n */\npublic class Solution2 {\n\n    public boolean hasAlternatingBits(int n) {\n        String nStr = Integer.toBinaryString(n);\n        int len = nStr.length();\n        for (int i = 0; i < len - 1; i++) {\n            if (nStr.charAt(i) == nStr.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u7ecf\u5e38\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u5173\u4e8e\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u3002"
        },
        {
            "location": "/leetcode-0693-binary-number-with-alternating-bits/#3-java-integertobinarystringn",
            "text": "public class Solution3 {\n\n    public boolean hasAlternatingBits(int n) {\n        String nStr = Integer.toBinaryString(n);\n        // \u56e0\u4e3a\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4ee5 1 \u5f00\u5934\n        return nStr.matches(\"(10)*1?\");\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0693-binary-number-with-alternating-bits  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u5e76\u7ed3\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u5224\u65ad\u3002"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/",
            "text": "717. 1-bit and 2-bit Characters\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279\n0\n\u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279(\n10\n\u00a0\u6216\u00a0\n11\n)\u6765\u8868\u793a\u3002\n\n\n\u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n \nbits = [1, 0, 0]\n\n\u8f93\u51fa:\n True\n\n\u89e3\u91ca:\n \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n\n\n\n\u793a\u4f8b\u00a02:\n\n\n\u8f93\u5165:\n \nbits = [1, 1, 1, 0]\n\n\u8f93\u51fa:\n False\n\n\u89e3\u91ca:\n \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n\n\n\n\u6ce8\u610f:\n\n\n\n\n1 <= len(bits) <= 1000\n.\n\n\nbits[i]\n \u603b\u662f\n0\n \u6216\u00a0\n1\n.\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n717. 1-bit and 2-bit Characters\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n717. 1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\n\n    public boolean isOneBitCharacter(int[] bits) {\n        int len = bits.length;\n        if (len == 0) {\n            return false;\n        }\n        if (len == 1) {\n            return true;\n        }\n        int i = 0;\n        // \u6700\u591a\u770b\u5230 len-2 \uff0clen - 1 \u4e0d\u7528\u770b\u4e86\n        // 1 0 1 1 1 1 0\n        // 1 0 1 1 1 0 0\n        while (i < len - 1) {\n            if (bits[i] == 0) {\n                i++;\n            } else {\n                i += 2;\n            }\n        }\n        return i == len - 1;\n    }\n\n    public static void main(String[] args) {\n        int[] bits = {1, 1, 1, 0};\n        Solution solution = new Solution();\n        boolean oneBitCharacter = solution.isOneBitCharacter(bits);\n        System.out.println(oneBitCharacter);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0717-1-bit-and-2-bit-characters\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "717. 1-bit and 2-bit Characters"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/#717-1-bit-and-2-bit-characters",
            "text": "",
            "title": "717. 1-bit and 2-bit Characters"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279 0 \u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279( 10 \u00a0\u6216\u00a0 11 )\u6765\u8868\u793a\u3002  \u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  \nbits = [1, 0, 0] \u8f93\u51fa:  True \u89e3\u91ca:  \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002  \u793a\u4f8b\u00a02:  \u8f93\u5165:  \nbits = [1, 1, 1, 0] \u8f93\u51fa:  False \u89e3\u91ca:  \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002  \u6ce8\u610f:   1 <= len(bits) <= 1000 .  bits[i]  \u603b\u662f 0  \u6216\u00a0 1 .     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 717. 1-bit and 2-bit Characters   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 717. 1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0717-1-bit-and-2-bit-characters/#1",
            "text": "public class Solution {\n\n    // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\n\n    public boolean isOneBitCharacter(int[] bits) {\n        int len = bits.length;\n        if (len == 0) {\n            return false;\n        }\n        if (len == 1) {\n            return true;\n        }\n        int i = 0;\n        // \u6700\u591a\u770b\u5230 len-2 \uff0clen - 1 \u4e0d\u7528\u770b\u4e86\n        // 1 0 1 1 1 1 0\n        // 1 0 1 1 1 0 0\n        while (i < len - 1) {\n            if (bits[i] == 0) {\n                i++;\n            } else {\n                i += 2;\n            }\n        }\n        return i == len - 1;\n    }\n\n    public static void main(String[] args) {\n        int[] bits = {1, 1, 1, 0};\n        Solution solution = new Solution();\n        boolean oneBitCharacter = solution.isOneBitCharacter(bits);\n        System.out.println(oneBitCharacter);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0717-1-bit-and-2-bit-characters  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/",
            "text": "720. Longest Word in Dictionary\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\nwords\n\u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531\nwords\n\u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002\n\n\n\u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n \nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\n\n\u8f93\u51fa:\n \"world\"\n\n\u89e3\u91ca:\n \n\u5355\u8bcd\"world\"\u53ef\u7531\"w\", \"wo\", \"wor\", \u548c \"worl\"\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n \nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\n\n\u8f93\u51fa:\n \"apple\"\n\n\u89e3\u91ca:\n \n\"apply\"\u548c\"apple\"\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f\"apple\"\u5f97\u5b57\u5178\u5e8f\u5c0f\u4e8e\"apply\"\u3002\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\nwords\n\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a\n[1,1000]\n\u3002\n\n\nwords[i]\n\u7684\u957f\u5ea6\u8303\u56f4\u4e3a\n[1,30]\n\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n720. Longest Word in Dictionary\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n720. \u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0720-longest-word-in-dictionary\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "720. Longest Word in Dictionary"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/#720-longest-word-in-dictionary",
            "text": "",
            "title": "720. Longest Word in Dictionary"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words \u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531 words \u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002  \u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"] \u8f93\u51fa:  \"world\" \u89e3\u91ca:  \n\u5355\u8bcd\"world\"\u53ef\u7531\"w\", \"wo\", \"wor\", \u548c \"worl\"\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002  \u793a\u4f8b 2:  \u8f93\u5165:  \nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"] \u8f93\u51fa:  \"apple\" \u89e3\u91ca:  \n\"apply\"\u548c\"apple\"\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f\"apple\"\u5f97\u5b57\u5178\u5e8f\u5c0f\u4e8e\"apply\"\u3002  \u6ce8\u610f:   \u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002  words \u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1,1000] \u3002  words[i] \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1,30] \u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 720. Longest Word in Dictionary   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 720. \u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0720-longest-word-in-dictionary/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0720-longest-word-in-dictionary  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/",
            "text": "746. Min Cost Climbing Stairs\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c\u00a0\ni\n\u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c\u00a0\ncost[i]\n(\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002\n\n\n\u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002\n\n\n\u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002\n\n\n\u793a\u4f8b\u00a01:\n\n\n\u8f93\u5165:\n cost = [10, 15, 20]\n\n\u8f93\u51fa:\n 15\n\n\u89e3\u91ca:\n \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002\n\n\n\n\u00a0\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n\n\u8f93\u51fa:\n 6\n\n\u89e3\u91ca:\n \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\ncost\n\u00a0\u7684\u957f\u5ea6\u5c06\u4f1a\u5728\u00a0\n[2, 1000]\n\u3002\n\n\n\u6bcf\u4e00\u4e2a\u00a0\ncost[i]\n \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a\u00a0\n[0, 999]\n\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n746. Min Cost Climbing Stairs\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u72b6\u6001\u7684\u5b9a\u4e49\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\uff1a\n\n\n\n\n\u5b9a\u4e49\u72b6\u6001 dp[i] \uff1a\u7b2c i \u5c42\u5fc5\u987b\u722c\uff0c\u6d88\u8017\u7684\u4f53\u529b\u82b1\u8d39\u6700\u5c0f\u503c\u3002\n\n\n\u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8981\u722c\u5230\u7b2c len-1 \u5c42\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n\n\uff081\uff09\u722c\u5230 len-1 \u5c42\uff0c\u518d\u4e0a\u4e00\u5c42\u5230\u697c\u9876\n\n\n\uff082\uff09\u722c\u5230 len-2 \u5c42\uff0c\u518d\u4e0a\u4e24\u5c42\u5230\u697c\u9876\n\n\n\n\npublic class Solution {\n\n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        if (len == 0) {\n            return 0;\n        }\n        if (len == 1) {\n            return cost[0];\n        }\n        if (len == 2) {\n            return Integer.min(cost[0], cost[1]);\n        }\n        int[] dp = new int[len];\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        for (int i = 2; i < len; i++) {\n            dp[i] = cost[i] + Integer.min(dp[i - 1], dp[i - 2]);\n        }\n        return Integer.min(dp[len - 1], dp[len - 2]);\n    }\n\n    public static void main(String[] args) {\n        int[] cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1};\n        Solution solution = new Solution();\n        int minCostClimbingStairs = solution.minCostClimbingStairs(cost);\n        System.out.println(minCostClimbingStairs);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\n/**\n * \u5b9a\u4e49\u72b6\u6001\u4e0e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n * dp[i]\uff1a\u722c\u5230\u7b2c i \u5c42\uff08\u4ece 0 \u5f00\u59cb\uff09\uff0c\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c\n * \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u722c\u5230\u8fd9\u4e00\u5c42\uff0c\u4e0d\u6d88\u8017\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\u53ea\u8868\u793a\u5411\u4e0a\u8df3\u8981\u6d88\u8017\u7684\u4f53\u529b\u503c\n * \u5f88\u5bb9\u6613\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n * dp[i] = min(cost[i-1] + dp[i-1], cost[i-2] + dp[i-2])\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        if (len == 0) {\n            return 0;\n        }\n        if (len == 1) {\n            return cost[0];\n        }\n        if (len == 2) {\n            return Math.min(cost[0], cost[1]);\n        }\n        int[] dp = new int[len + 1];\n        // \u6ce8\u610f\uff1a\u8df3\u5230\u7b2c 0 \u9636\u548c\u7b2c 1 \u9636\u662f\u4e0d\u7528\u6d88\u8017\u4f53\u529b\u503c\u7684\n        // \u56e0\u4e3a\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8df3\u53f0\u9636\u7684\u8d77\u70b9(\u9898\u76ee\u4e2d\u8bf4\uff1a\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002)\n        dp[0] = 0;\n        dp[1] = 0;\n        for (int i = 2; i <= len; i++) {\n            dp[i] = Math.min(cost[i - 1] + dp[i - 1], cost[i - 2] + dp[i - 2]);\n        }\n        return dp[len];\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0746-min-cost-climbing-stairs\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "746. Min Cost Climbing Stairs"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#746-min-cost-climbing-stairs",
            "text": "",
            "title": "746. Min Cost Climbing Stairs"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c\u00a0 i \u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c\u00a0 cost[i] (\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002  \u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002  \u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002  \u793a\u4f8b\u00a01:  \u8f93\u5165:  cost = [10, 15, 20] \u8f93\u51fa:  15 \u89e3\u91ca:  \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002  \u00a0\u793a\u4f8b 2:  \u8f93\u5165:  cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] \u8f93\u51fa:  6 \u89e3\u91ca:  \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002  \u6ce8\u610f\uff1a   cost \u00a0\u7684\u957f\u5ea6\u5c06\u4f1a\u5728\u00a0 [2, 1000] \u3002  \u6bcf\u4e00\u4e2a\u00a0 cost[i]  \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a\u00a0 [0, 999] \u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 746. Min Cost Climbing Stairs   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u72b6\u6001\u7684\u5b9a\u4e49\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#1",
            "text": "\u5b9a\u4e49\u72b6\u6001 dp[i] \uff1a\u7b2c i \u5c42\u5fc5\u987b\u722c\uff0c\u6d88\u8017\u7684\u4f53\u529b\u82b1\u8d39\u6700\u5c0f\u503c\u3002  \u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8981\u722c\u5230\u7b2c len-1 \u5c42\u6709\u4e24\u79cd\u9009\u62e9\uff1a  \uff081\uff09\u722c\u5230 len-1 \u5c42\uff0c\u518d\u4e0a\u4e00\u5c42\u5230\u697c\u9876  \uff082\uff09\u722c\u5230 len-2 \u5c42\uff0c\u518d\u4e0a\u4e24\u5c42\u5230\u697c\u9876   public class Solution {\n\n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        if (len == 0) {\n            return 0;\n        }\n        if (len == 1) {\n            return cost[0];\n        }\n        if (len == 2) {\n            return Integer.min(cost[0], cost[1]);\n        }\n        int[] dp = new int[len];\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        for (int i = 2; i < len; i++) {\n            dp[i] = cost[i] + Integer.min(dp[i - 1], dp[i - 2]);\n        }\n        return Integer.min(dp[len - 1], dp[len - 2]);\n    }\n\n    public static void main(String[] args) {\n        int[] cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1};\n        Solution solution = new Solution();\n        int minCostClimbingStairs = solution.minCostClimbingStairs(cost);\n        System.out.println(minCostClimbingStairs);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541\uff1a"
        },
        {
            "location": "/leetcode-0746-min-cost-climbing-stairs/#2",
            "text": "/**\n * \u5b9a\u4e49\u72b6\u6001\u4e0e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n * dp[i]\uff1a\u722c\u5230\u7b2c i \u5c42\uff08\u4ece 0 \u5f00\u59cb\uff09\uff0c\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c\n * \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u722c\u5230\u8fd9\u4e00\u5c42\uff0c\u4e0d\u6d88\u8017\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\u53ea\u8868\u793a\u5411\u4e0a\u8df3\u8981\u6d88\u8017\u7684\u4f53\u529b\u503c\n * \u5f88\u5bb9\u6613\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n * dp[i] = min(cost[i-1] + dp[i-1], cost[i-2] + dp[i-2])\n *\n * @author liwei\n */\npublic class Solution2 {\n\n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        if (len == 0) {\n            return 0;\n        }\n        if (len == 1) {\n            return cost[0];\n        }\n        if (len == 2) {\n            return Math.min(cost[0], cost[1]);\n        }\n        int[] dp = new int[len + 1];\n        // \u6ce8\u610f\uff1a\u8df3\u5230\u7b2c 0 \u9636\u548c\u7b2c 1 \u9636\u662f\u4e0d\u7528\u6d88\u8017\u4f53\u529b\u503c\u7684\n        // \u56e0\u4e3a\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8df3\u53f0\u9636\u7684\u8d77\u70b9(\u9898\u76ee\u4e2d\u8bf4\uff1a\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002)\n        dp[0] = 0;\n        dp[1] = 0;\n        for (int i = 2; i <= len; i++) {\n            dp[i] = Math.min(cost[i - 1] + dp[i - 1], cost[i - 2] + dp[i - 2]);\n        }\n        return dp[len];\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0746-min-cost-climbing-stairs  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/",
            "text": "762. Prime Number of Set Bits in Binary Representation\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u00a0\nL\n\u00a0\u548c\u00a0\nR\n\u00a0\uff0c\u627e\u5230\u95ed\u533a\u95f4\u00a0\n[L, R]\n\u00a0\u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002\n\n\n\uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982\u00a0\n21\n\u00a0\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u00a0\n10101\n\u00a0\u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\n L = 6, R = 10\n\n\u8f93\u51fa:\n 4\n\n\u89e3\u91ca:\n\n6 -> 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n7 -> 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570)\n9 -> 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n10-> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\n L = 10, R = 15\n\n\u8f93\u51fa:\n 5\n\n\u89e3\u91ca:\n\n10 -> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n11 -> 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n12 -> 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n13 -> 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n14 -> 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n15 -> 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570)\n\n\n\n\u6ce8\u610f:\n\n\n\n\nL, R\n\u00a0\u662f\u00a0\nL <= R\n\u00a0\u4e14\u5728\u00a0\n[1, 10^6]\n\u00a0\u4e2d\u7684\u6574\u6570\u3002\n\n\nR - L\n\u00a0\u7684\u6700\u5927\u503c\u4e3a 10000\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n762. Prime Number of Set Bits in Binary Representation\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n762. \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int countPrimeSetBits(int L, int R) {\n        // int \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u8868\u793a 1 \u7684\u4e2a\u6570\u6700\u591a\u662f 32\n        // \u6240\u4ee5 32 \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u5b8c\u5168\u53ef\u4ee5\u6253\u8868\u5217\u4e3e\u51fa\u6765\n        boolean[] isPrime = new boolean[32];\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\n\n        // \u8d28\u6570\u7684\u4e2a\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u662f\u4e0d\u662f\u8d28\u6570\u4f53\u73b0\u5728\u7d22\u5f15\u5bf9\u5e94\u7684\u503c\n        for (int prime : primes) {\n            isPrime[prime] = true;\n        }\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            if (isPrime[Integer.bitCount(i)]) {\n                res++;\n            }\n\n        }\n        return res;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution3 {\n\n    public int countPrimeSetBits(int L, int R) {\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            int count = countPrimeSetBit(i);\n            if (isPrime(count)) {\n                res++;\n            }\n        }\n        return res;\n    }\n\n    private boolean isPrime(int num) {\n        if (num == 1) {\n            return false;\n        }\n        if (num == 2 || num == 3) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int countPrimeSetBit(int num) {\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 1) {\n                count++;\n            }\n            num >>>= 1;\n        }\n        return count;\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b543\n\n\npublic class Solution4 {\n\n    public int countPrimeSetBits(int L, int R) {\n        boolean[] primes = new boolean[32];\n        int[] primeNums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\n        for (int prime : primeNums) {\n            primes[prime] = true;\n        }\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            int bitCount = 0;\n            int num = i;\n            while (num != 0) {\n                num = num & (num - 1);\n                bitCount++;\n            }\n            if (primes[bitCount]) {\n                res++;\n            }\n        }\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0762-prime-number-of-set-bits-in-binary-representation\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "762. Prime Number of Set Bits in Binary Representation"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#762-prime-number-of-set-bits-in-binary-representation",
            "text": "",
            "title": "762. Prime Number of Set Bits in Binary Representation"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u00a0 L \u00a0\u548c\u00a0 R \u00a0\uff0c\u627e\u5230\u95ed\u533a\u95f4\u00a0 [L, R] \u00a0\u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002  \uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982\u00a0 21 \u00a0\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u00a0 10101 \u00a0\u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09  \u793a\u4f8b 1:  \u8f93\u5165:  L = 6, R = 10 \u8f93\u51fa:  4 \u89e3\u91ca: \n6 -> 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n7 -> 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570)\n9 -> 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n10-> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)  \u793a\u4f8b 2:  \u8f93\u5165:  L = 10, R = 15 \u8f93\u51fa:  5 \u89e3\u91ca: \n10 -> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n11 -> 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n12 -> 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n13 -> 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n14 -> 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n15 -> 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570)  \u6ce8\u610f:   L, R \u00a0\u662f\u00a0 L <= R \u00a0\u4e14\u5728\u00a0 [1, 10^6] \u00a0\u4e2d\u7684\u6574\u6570\u3002  R - L \u00a0\u7684\u6700\u5927\u503c\u4e3a 10000\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 762. Prime Number of Set Bits in Binary Representation   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 762. \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#1",
            "text": "public class Solution {\n\n    public int countPrimeSetBits(int L, int R) {\n        // int \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u8868\u793a 1 \u7684\u4e2a\u6570\u6700\u591a\u662f 32\n        // \u6240\u4ee5 32 \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u5b8c\u5168\u53ef\u4ee5\u6253\u8868\u5217\u4e3e\u51fa\u6765\n        boolean[] isPrime = new boolean[32];\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\n\n        // \u8d28\u6570\u7684\u4e2a\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u662f\u4e0d\u662f\u8d28\u6570\u4f53\u73b0\u5728\u7d22\u5f15\u5bf9\u5e94\u7684\u503c\n        for (int prime : primes) {\n            isPrime[prime] = true;\n        }\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            if (isPrime[Integer.bitCount(i)]) {\n                res++;\n            }\n\n        }\n        return res;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#2",
            "text": "public class Solution3 {\n\n    public int countPrimeSetBits(int L, int R) {\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            int count = countPrimeSetBit(i);\n            if (isPrime(count)) {\n                res++;\n            }\n        }\n        return res;\n    }\n\n    private boolean isPrime(int num) {\n        if (num == 1) {\n            return false;\n        }\n        if (num == 2 || num == 3) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int countPrimeSetBit(int num) {\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 1) {\n                count++;\n            }\n            num >>>= 1;\n        }\n        return count;\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0762-prime-number-of-set-bits-in-binary-representation/#3",
            "text": "public class Solution4 {\n\n    public int countPrimeSetBits(int L, int R) {\n        boolean[] primes = new boolean[32];\n        int[] primeNums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\n        for (int prime : primeNums) {\n            primes[prime] = true;\n        }\n        int res = 0;\n        for (int i = L; i <= R; i++) {\n            int bitCount = 0;\n            int num = i;\n            while (num != 0) {\n                num = num & (num - 1);\n                bitCount++;\n            }\n            if (primes[bitCount]) {\n                res++;\n            }\n        }\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0762-prime-number-of-set-bits-in-binary-representation  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b543"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/",
            "text": "783. Minimum Distance Between BST Nodes\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9\u00a0\nroot\n, \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002\n\n\n\u793a\u4f8b\uff1a\n\n\n\u8f93\u5165:\n root = [4,2,6,1,3,null,null]\n\n\u8f93\u51fa:\n 1\n\n\u89e3\u91ca:\n\n\u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\n\u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n\u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 \n2\n \u5230\u00a0\n100\n\u3002\n\n\n\u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n783. Minimum Distance Between BST Nodes\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n783. \u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u70b9\u6700\u5c0f\u8ddd\u79bb\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5f97\u5230\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\u3002\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u6bd4\u8f83\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\uff0c\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u81f3\u5e38\u6570\u7ea7\u522b\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    // \u6211\u8d77\u521d\u7684\u601d\u8def\u662f\u4f7f\u7528\u4e2d\u7eed\u904d\u5386\uff0c\u8fd4\u56de\u6700\u5c0f\u503c\n\n    public int minDiffInBST(TreeNode root) {\n        List<Integer> inOrderList = new ArrayList<>();\n        inOrder(root, inOrderList);\n\n        int len = inOrderList.size();\n        int ret = Integer.MAX_VALUE;\n        for (int i = 0; i < len - 1; i++) {\n            ret = Math.min(ret, inOrderList.get(i + 1) - inOrderList.get(i));\n        }\n        return ret;\n    }\n\n    private void inOrder(TreeNode node, List<Integer> inOrderList) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, inOrderList);\n        inOrderList.add(node.val);\n        inOrder(node.right, inOrderList);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\n\n\npublic class Solution2 {\n\n    public int minDiffInBST(TreeNode root) {\n        // \u8bbe\u7f6e\u4e3a Integer \u662f\u4e3a\u4e86\u68c0\u6d4b\u51fa\u6ca1\u6709\u8d4b\u503c\u7684\u60c5\u51b5\n        Integer[] preVal = new Integer[1];\n        int[] ret = new int[]{Integer.MAX_VALUE};\n        inOrder(root,preVal,ret);\n        return ret[0];\n    }\n\n    private void inOrder(TreeNode node, Integer[] preVal, int[] ret) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, preVal, ret);\n        if (preVal[0] != null) {\n            int diff = node.val - preVal[0];\n            ret[0] = Math.min(ret[0], diff);\n        }\n        // \u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e4b\u524d\u7684\u503c\n        preVal[0] = node.val;\n        inOrder(node.right, preVal, ret);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0783-minimum-distance-between-bst-nodes\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "783. Minimum Distance Between BST Nodes"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#783-minimum-distance-between-bst-nodes",
            "text": "",
            "title": "783. Minimum Distance Between BST Nodes"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9\u00a0 root , \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002  \u793a\u4f8b\uff1a  \u8f93\u5165:  root = [4,2,6,1,3,null,null] \u8f93\u51fa:  1 \u89e3\u91ca: \n\u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\n\u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n\u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002  \u6ce8\u610f\uff1a   \u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728  2  \u5230\u00a0 100 \u3002  \u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 783. Minimum Distance Between BST Nodes   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 783. \u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u70b9\u6700\u5c0f\u8ddd\u79bb   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5f97\u5230\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\u3002\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u6bd4\u8f83\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\uff0c\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u81f3\u5e38\u6570\u7ea7\u522b\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    // \u6211\u8d77\u521d\u7684\u601d\u8def\u662f\u4f7f\u7528\u4e2d\u7eed\u904d\u5386\uff0c\u8fd4\u56de\u6700\u5c0f\u503c\n\n    public int minDiffInBST(TreeNode root) {\n        List<Integer> inOrderList = new ArrayList<>();\n        inOrder(root, inOrderList);\n\n        int len = inOrderList.size();\n        int ret = Integer.MAX_VALUE;\n        for (int i = 0; i < len - 1; i++) {\n            ret = Math.min(ret, inOrderList.get(i + 1) - inOrderList.get(i));\n        }\n        return ret;\n    }\n\n    private void inOrder(TreeNode node, List<Integer> inOrderList) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, inOrderList);\n        inOrderList.add(node.val);\n        inOrder(node.right, inOrderList);\n    }\n}",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0783-minimum-distance-between-bst-nodes/#2",
            "text": "public class Solution2 {\n\n    public int minDiffInBST(TreeNode root) {\n        // \u8bbe\u7f6e\u4e3a Integer \u662f\u4e3a\u4e86\u68c0\u6d4b\u51fa\u6ca1\u6709\u8d4b\u503c\u7684\u60c5\u51b5\n        Integer[] preVal = new Integer[1];\n        int[] ret = new int[]{Integer.MAX_VALUE};\n        inOrder(root,preVal,ret);\n        return ret[0];\n    }\n\n    private void inOrder(TreeNode node, Integer[] preVal, int[] ret) {\n        if (node == null) {\n            return;\n        }\n        inOrder(node.left, preVal, ret);\n        if (preVal[0] != null) {\n            int diff = node.val - preVal[0];\n            ret[0] = Math.min(ret[0], diff);\n        }\n        // \u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e4b\u524d\u7684\u503c\n        preVal[0] = node.val;\n        inOrder(node.right, preVal, ret);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0783-minimum-distance-between-bst-nodes  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b542"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/",
            "text": "784. Letter Case Permutation\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\nS\n\uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\nS\n\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n S = \"a1b2\"\n\n\u8f93\u51fa:\n [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"]\n\n\n\u8f93\u5165:\n S = \"3z4\"\n\n\u8f93\u51fa:\n [\"3z4\", \"3Z4\"]\n\n\n\u8f93\u5165:\n S = \"12345\"\n\n\u8f93\u51fa:\n [\"12345\"]\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\nS\n\u00a0\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7\n12\n\u3002\n\n\nS\n\u00a0\u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n784. Letter Case Permutation\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n784. \u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4f7f\u7528\u7b80\u5355\u7684\u9012\u5f52\u56de\u6eaf\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private void helper(char[] chars, int len, int begin, List<String> res) {\n        if (begin == len) {\n            res.add(new String(chars));\n            return;\n        }\n        // \u4e0d\u53d8\u5316\u7684\u65f6\u5019\u9012\u5f52\u641c\u7d22\u4e00\u6b21\n        helper(chars, len, begin + 1, res);\n        if ((chars[begin] + \"\").matches(\"[a-zA-Z]\")) {\n            change(chars, begin);\n            // \u53d8\u5316\u4e86\u4ee5\u540e\u9012\u5f52\u641c\u7d22\u4e00\u6b21\n            helper(chars, len, begin + 1, res);\n        }\n    }\n\n    /**\n     * \u5c06 chars \u6570\u7ec4\u4e2d index \u6570\u4f4d\u4e0a\u7684\u5b57\u7b26\u6539\u53d8\u5927\u5c0f\u5199\n     *\n     * @param chars\n     * @param index\n     */\n    private void change(char[] chars, int index) {\n        if (chars[index] >= 97) {\n            chars[index] -= 32;\n            return;\n        }\n        if (chars[index] >= 65) {\n            chars[index] += 32;\n        }\n    }\n\n    public List<String> letterCasePermutation(String S) {\n        List<String> res = new ArrayList<>();\n        int len = S.length();\n        if (len == 0) {\n            res.add(S);\n            return res;\n        }\n        char[] chars = S.toCharArray();\n        helper(chars, len, 0, res);\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // 97\n        System.out.println((int) 'a');\n        // 65\n        System.out.println((int) 'A');\n\n        Solution solution = new Solution();\n        String S = \"\";\n        List<String> letterCasePermutation = solution.letterCasePermutation(S);\n        System.out.println(letterCasePermutation);\n    }\n}\n\n\n\n\n\u53c2\u8003\u89e3\u7b542\uff1a\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    private static final int MASK = 1 << 5;\n\n    private void helper(char[] chars, int len, int begin, List<String> res) {\n        if (begin == len) {\n            res.add(new String(chars));\n            return;\n        }\n        helper(chars, len, begin + 1, res);\n        if (Character.isLetter(chars[begin])) {\n            chars[begin] ^= MASK;\n            helper(chars, len, begin + 1, res);\n        }\n    }\n\n    public List<String> letterCasePermutation(String S) {\n        List<String> res = new ArrayList<>();\n        int len = S.length();\n        if (len == 0) {\n            res.add(S);\n            return res;\n        }\n        char[] chars = S.toCharArray();\n        helper(chars, len, 0, res);\n        return res;\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0784-letter-case-permutation\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "784. Letter Case Permutation"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/#784-letter-case-permutation",
            "text": "",
            "title": "784. Letter Case Permutation"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32 S \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002  \u793a\u4f8b:  \u8f93\u5165:  S = \"a1b2\" \u8f93\u51fa:  [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"] \u8f93\u5165:  S = \"3z4\" \u8f93\u51fa:  [\"3z4\", \"3Z4\"] \u8f93\u5165:  S = \"12345\" \u8f93\u51fa:  [\"12345\"]  \u6ce8\u610f\uff1a   S \u00a0\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 12 \u3002  S \u00a0\u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002      \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 784. Letter Case Permutation   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 784. \u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4f7f\u7528\u7b80\u5355\u7684\u9012\u5f52\u56de\u6eaf\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0784-letter-case-permutation/#1",
            "text": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n\n    private void helper(char[] chars, int len, int begin, List<String> res) {\n        if (begin == len) {\n            res.add(new String(chars));\n            return;\n        }\n        // \u4e0d\u53d8\u5316\u7684\u65f6\u5019\u9012\u5f52\u641c\u7d22\u4e00\u6b21\n        helper(chars, len, begin + 1, res);\n        if ((chars[begin] + \"\").matches(\"[a-zA-Z]\")) {\n            change(chars, begin);\n            // \u53d8\u5316\u4e86\u4ee5\u540e\u9012\u5f52\u641c\u7d22\u4e00\u6b21\n            helper(chars, len, begin + 1, res);\n        }\n    }\n\n    /**\n     * \u5c06 chars \u6570\u7ec4\u4e2d index \u6570\u4f4d\u4e0a\u7684\u5b57\u7b26\u6539\u53d8\u5927\u5c0f\u5199\n     *\n     * @param chars\n     * @param index\n     */\n    private void change(char[] chars, int index) {\n        if (chars[index] >= 97) {\n            chars[index] -= 32;\n            return;\n        }\n        if (chars[index] >= 65) {\n            chars[index] += 32;\n        }\n    }\n\n    public List<String> letterCasePermutation(String S) {\n        List<String> res = new ArrayList<>();\n        int len = S.length();\n        if (len == 0) {\n            res.add(S);\n            return res;\n        }\n        char[] chars = S.toCharArray();\n        helper(chars, len, 0, res);\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // 97\n        System.out.println((int) 'a');\n        // 65\n        System.out.println((int) 'A');\n\n        Solution solution = new Solution();\n        String S = \"\";\n        List<String> letterCasePermutation = solution.letterCasePermutation(S);\n        System.out.println(letterCasePermutation);\n    }\n}  \u53c2\u8003\u89e3\u7b542\uff1a  import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution2 {\n\n    private static final int MASK = 1 << 5;\n\n    private void helper(char[] chars, int len, int begin, List<String> res) {\n        if (begin == len) {\n            res.add(new String(chars));\n            return;\n        }\n        helper(chars, len, begin + 1, res);\n        if (Character.isLetter(chars[begin])) {\n            chars[begin] ^= MASK;\n            helper(chars, len, begin + 1, res);\n        }\n    }\n\n    public List<String> letterCasePermutation(String S) {\n        List<String> res = new ArrayList<>();\n        int len = S.length();\n        if (len == 0) {\n            res.add(S);\n            return res;\n        }\n        char[] chars = S.toCharArray();\n        helper(chars, len, 0, res);\n        return res;\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0784-letter-case-permutation  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/",
            "text": "792. Number of Matching Subsequences\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 \nS\n \u548c\u5355\u8bcd\u5b57\u5178 \nwords\n, \u6c42\u00a0\nwords[i]\n\u00a0\u4e2d\u662f\u00a0\nS\n\u00a0\u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \nS = \"abcde\"\nwords = [\"a\", \"bb\", \"acd\", \"ace\"]\n\n\u8f93\u51fa:\n 3\n\n\u89e3\u91ca:\n \u6709\u4e09\u4e2a\u662f\u00a0S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u6240\u6709\u5728\nwords\n\u548c\u00a0\nS\n\u00a0\u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\n\n\nS\n \u7684\u957f\u5ea6\u5728\u00a0\n[1, 50000]\n\u3002\n\n\nwords\n\u00a0\u7684\u957f\u5ea6\u5728\u00a0\n[1, 5000]\n\u3002\n\n\nwords[i]\n\u7684\u957f\u5ea6\u5728\n[1, 50]\n\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u4e2d\u7b49\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n792. Number of Matching Subsequences\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\n\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0792-number-of-matching-subsequences\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "792. Number of Matching Subsequences"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/#792-number-of-matching-subsequences",
            "text": "",
            "title": "792. Number of Matching Subsequences"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u5b57\u7b26\u4e32  S  \u548c\u5355\u8bcd\u5b57\u5178  words , \u6c42\u00a0 words[i] \u00a0\u4e2d\u662f\u00a0 S \u00a0\u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002  \u793a\u4f8b:  \u8f93\u5165:  \nS = \"abcde\"\nwords = [\"a\", \"bb\", \"acd\", \"ace\"] \u8f93\u51fa:  3 \u89e3\u91ca:  \u6709\u4e09\u4e2a\u662f\u00a0S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002  \u6ce8\u610f:   \u6240\u6709\u5728 words \u548c\u00a0 S \u00a0\u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002  S  \u7684\u957f\u5ea6\u5728\u00a0 [1, 50000] \u3002  words \u00a0\u7684\u957f\u5ea6\u5728\u00a0 [1, 5000] \u3002  words[i] \u7684\u957f\u5ea6\u5728 [1, 50] \u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 792. Number of Matching Subsequences   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0792-number-of-matching-subsequences/#1",
            "text": "\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0792-number-of-matching-subsequences  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0819-most-common-word/",
            "text": "819. Most Common Word\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002\n\n\n\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\u793a\u4f8b:\n\n\n\u8f93\u5165:\n \nparagraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"\nbanned = [\"hit\"]\n\n\u8f93\u51fa:\n \"ball\"\n\n\u89e3\u91ca:\n \n\"hit\" \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002\n\"ball\" \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \n\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 \"ball,\"\uff09\uff0c \n\"hit\"\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002\n\n\n\n\u8bf4\u660e: \n\n\n\n\n1 <= \u6bb5\u843d\u957f\u5ea6 <= 1000\n.\n\n\n1 <= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 <= 100\n.\n\n\n1 <= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 <= 10\n.\n\n\n\u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u00a0(\u5373\u4f7f\u5728 \nparagraph\n \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002)\n\n\nparagraph\n\u00a0\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7\n!?',;.\n\n\nparagraph\n\u00a0\u91cc\u5355\u8bcd\u4e4b\u95f4\u90fd\u7531\u7a7a\u683c\u9694\u5f00\u3002\n\n\n\u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002\n\n\n\u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n819. Most Common Word\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n819. \u6700\u5e38\u89c1\u7684\u5355\u8bcd\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u7528\u4ec0\u4e48\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\n\npublic class Solution {\n\n    public String mostCommonWord(String paragraph, String[] banned) {\n\n        HashSet<String> set = new HashSet<>(Arrays.asList(banned));\n        HashMap<String, Integer> map = new HashMap<>();\n        String[] ps = paragraph.toLowerCase().split(\"[^a-z]\");\n        // \u6ce8\u610f\u4f1a\u6709\u7a7a\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\n        // System.out.println(Arrays.toString(ps));\n        for (String p : ps) {\n            if (\"\".equals(p)) {\n                continue;\n            }\n            if (!set.contains(p)) {\n                if (map.containsKey(p)) {\n                    map.put(p, map.get(p) + 1);\n                } else {\n                    map.put(p, 1);\n                }\n            }\n        }\n        int max = 0;\n        String mcw = \"\";\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                mcw = entry.getKey();\n            }\n        }\n        return mcw;\n    }\n\n    public static void main(String[] args) {\n        String paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\";\n        String[] banned = {\"hit\"};\n        Solution solution = new Solution();\n        String mostCommonWord = solution.mostCommonWord(paragraph, banned);\n        System.out.println(mostCommonWord);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0819-most-common-word\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "819. Most Common Word"
        },
        {
            "location": "/leetcode-0819-most-common-word/#819-most-common-word",
            "text": "",
            "title": "819. Most Common Word"
        },
        {
            "location": "/leetcode-0819-most-common-word/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002  \u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002  \u793a\u4f8b:  \u8f93\u5165:  \nparagraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"\nbanned = [\"hit\"] \u8f93\u51fa:  \"ball\" \u89e3\u91ca:  \n\"hit\" \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002\n\"ball\" \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \n\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 \"ball,\"\uff09\uff0c \n\"hit\"\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002  \u8bf4\u660e:    1 <= \u6bb5\u843d\u957f\u5ea6 <= 1000 .  1 <= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 <= 100 .  1 <= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 <= 10 .  \u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u00a0(\u5373\u4f7f\u5728  paragraph  \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002)  paragraph \u00a0\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7 !?',;.  paragraph \u00a0\u91cc\u5355\u8bcd\u4e4b\u95f4\u90fd\u7531\u7a7a\u683c\u9694\u5f00\u3002  \u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002  \u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 819. Most Common Word   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 819. \u6700\u5e38\u89c1\u7684\u5355\u8bcd   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0819-most-common-word/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u7528\u4ec0\u4e48\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0819-most-common-word/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0819-most-common-word/#1",
            "text": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\n\npublic class Solution {\n\n    public String mostCommonWord(String paragraph, String[] banned) {\n\n        HashSet<String> set = new HashSet<>(Arrays.asList(banned));\n        HashMap<String, Integer> map = new HashMap<>();\n        String[] ps = paragraph.toLowerCase().split(\"[^a-z]\");\n        // \u6ce8\u610f\u4f1a\u6709\u7a7a\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\n        // System.out.println(Arrays.toString(ps));\n        for (String p : ps) {\n            if (\"\".equals(p)) {\n                continue;\n            }\n            if (!set.contains(p)) {\n                if (map.containsKey(p)) {\n                    map.put(p, map.get(p) + 1);\n                } else {\n                    map.put(p, 1);\n                }\n            }\n        }\n        int max = 0;\n        String mcw = \"\";\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                mcw = entry.getKey();\n            }\n        }\n        return mcw;\n    }\n\n    public static void main(String[] args) {\n        String paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\";\n        String[] banned = {\"hit\"};\n        Solution solution = new Solution();\n        String mostCommonWord = solution.mostCommonWord(paragraph, banned);\n        System.out.println(mostCommonWord);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0819-most-common-word  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0824-goat-latin/",
            "text": "824. Goat Latin\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50\u00a0\nS\n\u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\n\u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a\u00a0\n\u201cGoat Latin\u201d\n\uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587\u00a0- Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002\n\n\n\u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a\n\n\n\n\n\u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0\n\"ma\"\n\u3002\n\n    \u4f8b\u5982\uff0c\u5355\u8bcd\n\"apple\"\n\u53d8\u4e3a\n\"applema\"\n\u3002\n\n\n\n\n\u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0\n\"ma\"\n\u3002\n\n    \u4f8b\u5982\uff0c\u5355\u8bcd\n\"goat\"\n\u53d8\u4e3a\n\"oatgma\"\n\u3002\n\n\n\n\n\u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd\n'a'\n\uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002\n\n    \u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0\n\"a\"\n\uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0\n\"aa\"\n\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n\n\n\u8fd4\u56de\u5c06\u00a0\nS\n\u00a0\u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165: \n\"I speak Goat Latin\"\n\n\u8f93\u51fa: \n\"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165: \n\"The quick brown fox jumped over the lazy dog\"\n\n\u8f93\u51fa: \n\"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n\n\n\n\u8bf4\u660e:\n\n\n\n\nS\n\u00a0\u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002\n\n\n1 <= S.length <= 150\n\u3002\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n824. Goat Latin\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n824. \u5c71\u7f8a\u62c9\u4e01\u6587\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u62fc\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution {\n\n    public String toGoatLatin(String S) {\n        // vowel \u5143\u97f3\u5b57\u7b26\n        Set<Character> vowel = new HashSet<>();\n        for (char c : new char[]{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}) {\n            vowel.add(c);\n        }\n        // \u7d22\u5f15\u7684\u4e2a\u6570\n        int t = 1;\n        StringBuilder ans = new StringBuilder();\n        for (String word : S.split(\"\\\\s\")) {\n            char first = word.charAt(0);\n            // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 1 \u6761\n            if (vowel.contains(first)) {\n                ans.append(word);\n            } else {\n                // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 2 \u6761\n                ans.append(word.substring(1));\n                ans.append(word.substring(0, 1));\n            }\n            ans.append(\"ma\");\n            // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 3 \u6761\n            for (int i = 0; i < t; i++) {\n                ans.append('a');\n            }\n            ans.append(\" \");\n            t++;\n        }\n        // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        ans.deleteCharAt(ans.length() - 1);\n        return ans.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String S = \"I speak Goat Latin\";\n        String goatLatin = solution.toGoatLatin(S);\n        System.out.println(goatLatin);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0824-goat-latin\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "824. Goat Latin"
        },
        {
            "location": "/leetcode-0824-goat-latin/#824-goat-latin",
            "text": "",
            "title": "824. Goat Latin"
        },
        {
            "location": "/leetcode-0824-goat-latin/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   \u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50\u00a0 S \u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002  \u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a\u00a0 \u201cGoat Latin\u201d \uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587\u00a0- Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002  \u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a   \u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0 \"ma\" \u3002 \n    \u4f8b\u5982\uff0c\u5355\u8bcd \"apple\" \u53d8\u4e3a \"applema\" \u3002   \u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0 \"ma\" \u3002 \n    \u4f8b\u5982\uff0c\u5355\u8bcd \"goat\" \u53d8\u4e3a \"oatgma\" \u3002   \u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd 'a' \uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002 \n    \u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"a\" \uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"aa\" \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002   \u8fd4\u56de\u5c06\u00a0 S \u00a0\u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  \"I speak Goat Latin\" \u8f93\u51fa:  \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"  \u793a\u4f8b 2:  \u8f93\u5165:  \"The quick brown fox jumped over the lazy dog\" \u8f93\u51fa:  \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"  \u8bf4\u660e:   S \u00a0\u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002  1 <= S.length <= 150 \u3002     \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 824. Goat Latin   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 824. \u5c71\u7f8a\u62c9\u4e01\u6587   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0824-goat-latin/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u62fc\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0824-goat-latin/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0824-goat-latin/#1",
            "text": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution {\n\n    public String toGoatLatin(String S) {\n        // vowel \u5143\u97f3\u5b57\u7b26\n        Set<Character> vowel = new HashSet<>();\n        for (char c : new char[]{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}) {\n            vowel.add(c);\n        }\n        // \u7d22\u5f15\u7684\u4e2a\u6570\n        int t = 1;\n        StringBuilder ans = new StringBuilder();\n        for (String word : S.split(\"\\\\s\")) {\n            char first = word.charAt(0);\n            // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 1 \u6761\n            if (vowel.contains(first)) {\n                ans.append(word);\n            } else {\n                // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 2 \u6761\n                ans.append(word.substring(1));\n                ans.append(word.substring(0, 1));\n            }\n            ans.append(\"ma\");\n            // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 3 \u6761\n            for (int i = 0; i < t; i++) {\n                ans.append('a');\n            }\n            ans.append(\" \");\n            t++;\n        }\n        // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        ans.deleteCharAt(ans.length() - 1);\n        return ans.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String S = \"I speak Goat Latin\";\n        String goatLatin = solution.toGoatLatin(S);\n        System.out.println(goatLatin);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0824-goat-latin  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/",
            "text": "840. Magic Squares In Grid\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\n\n3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709\n\u4ece 1 \u5230 9\n \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 N \u00d7 N \u77e9\u9635\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 \u00d7 3 \u7684 \u201c\u5e7b\u65b9\u201d \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002\n\n\n\u00a0\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165: \n[[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n\n\u8f93\u51fa: \n1\n\n\u89e3\u91ca: \n\n\u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a\n438\n951\n276\n\n\u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a\n384\n519\n762\n\n\u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002\n\n\n\n\u63d0\u793a:\n\n\n\n\n1 <= grid.length = grid[0].length\u00a0<= 10\n\n\n0 <= grid[i][j] <= 15\n\n\n\n\n\n\n\n\n\n\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\n\u7b80\u5355\n\u3002\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n840. Magic Squares In Grid\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n840. \u77e9\u9635\u4e2d\u7684\u5e7b\u65b9\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541\n\n\npublic class Solution {\n\n    public int numMagicSquaresInside(int[][] grid) {\n        int row = grid.length;\n        if (row == 0) {\n            return 0;\n        }\n        int col = grid[0].length;\n        if (row < 3 || col < 3) {\n            return 0;\n        }\n\n        int res = 0;\n        int[] temp = new int[8];\n        // \u627e\u4e2d\u5fc3\u662f 5 \u7684\u77e9\u9635\n        for (int i = 1; i < row - 1; i++) {\n            for (int j = 1; j < col - 1; j++) {\n                System.out.println(i + \" \" + j);\n                if (magicSquares(grid, temp, i, j)) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n\n    // \u4ee5\u5750\u6807 i j \u4e3a\u4e2d\u5fc3\u7684\u77e9\u9635\u662f\u4e0d\u662f\u6cb3\u56fe\u77e9\u9635\n    private boolean magicSquares(int[][] grid, int[] temp, int i, int j) {\n        if (grid[i][j] != 5) {\n            return false;\n        }\n\n        for (int k = 0; k < 3; k++) {\n            for (int l = 0; l < 3; l++) {\n                if (grid[i - 1 + k][j - 1 + l] < 1 || grid[i - 1 + k][j - 1 + l] > 9) {\n                    return false;\n                }\n            }\n        }\n\n        temp[0] = grid[i - 1][j - 1] + grid[i - 1][j] + grid[i - 1][j + 1];\n        if (temp[0] != 15) {\n            return false;\n        }\n        temp[1] = grid[i][j - 1] + grid[i][j] + grid[i][j + 1];\n        if (temp[1] != 15) {\n            return false;\n        }\n        temp[2] = grid[i + 1][j - 1] + grid[i + 1][j] + grid[i + 1][j + 1];\n        if (temp[2] != 15) {\n            return false;\n        }\n        temp[3] = grid[i - 1][j - 1] + grid[i][j - 1] + grid[i + 1][j - 1];\n        if (temp[3] != 15) {\n            return false;\n        }\n        temp[4] = grid[i - 1][j] + grid[i][j] + grid[i + 1][j];\n        if (temp[4] != 15) {\n            return false;\n        }\n        temp[5] = grid[i - 1][j + 1] + grid[i][j + 1] + grid[i + 1][j + 1];\n        if (temp[5] != 15) {\n            return false;\n        }\n        temp[6] = grid[i - 1][j - 1] + grid[i][j] + grid[i + 1][j + 1];\n        if (temp[6] != 15) {\n            return false;\n        }\n        temp[7] = grid[i + 1][j - 1] + grid[i][j] + grid[i - 1][j + 1];\n        if (temp[7] != 15) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[][] grid = new int[][]{\n                {5, 2, 9, 5, 4},\n                {8, 1, 6, 1, 4},\n                {7, 2, 4, 7, 8},\n                {1, 8, 3, 5, 9},\n                {5, 7, 2, 6, 1}};\n\n        Solution solution = new Solution();\n        int numMagicSquaresInside = solution.numMagicSquaresInside(grid);\n        System.out.println(numMagicSquaresInside);\n    }\n}\n\n\n\n\n\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a \nhttps://liweiwei1419.github.io/leetcode-solution/leetcode-0840-magic-squares-in-grid\n \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 \nliweiwei1419@gmail.com\n  \u3002\n\n\n\n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "840. Magic Squares In Grid"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/#840-magic-squares-in-grid",
            "text": "",
            "title": "840. Magic Squares In Grid"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/#_1",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a   3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709 \u4ece 1 \u5230 9  \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002  \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 N \u00d7 N \u77e9\u9635\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 \u00d7 3 \u7684 \u201c\u5e7b\u65b9\u201d \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002  \u00a0  \u793a\u4f8b 1:  \u8f93\u5165:  [[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]] \u8f93\u51fa:  1 \u89e3\u91ca:  \n\u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a\n438\n951\n276\n\n\u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a\n384\n519\n762\n\n\u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002  \u63d0\u793a:   1 <= grid.length = grid[0].length\u00a0<= 10  0 <= grid[i][j] <= 15      \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002  \u82f1\u6587\u7f51\u5740\uff1a 840. Magic Squares In Grid   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a 840. \u77e9\u9635\u4e2d\u7684\u5e7b\u65b9   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/#_2",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/#_3",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-0840-magic-squares-in-grid/#1",
            "text": "public class Solution {\n\n    public int numMagicSquaresInside(int[][] grid) {\n        int row = grid.length;\n        if (row == 0) {\n            return 0;\n        }\n        int col = grid[0].length;\n        if (row < 3 || col < 3) {\n            return 0;\n        }\n\n        int res = 0;\n        int[] temp = new int[8];\n        // \u627e\u4e2d\u5fc3\u662f 5 \u7684\u77e9\u9635\n        for (int i = 1; i < row - 1; i++) {\n            for (int j = 1; j < col - 1; j++) {\n                System.out.println(i + \" \" + j);\n                if (magicSquares(grid, temp, i, j)) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n\n    // \u4ee5\u5750\u6807 i j \u4e3a\u4e2d\u5fc3\u7684\u77e9\u9635\u662f\u4e0d\u662f\u6cb3\u56fe\u77e9\u9635\n    private boolean magicSquares(int[][] grid, int[] temp, int i, int j) {\n        if (grid[i][j] != 5) {\n            return false;\n        }\n\n        for (int k = 0; k < 3; k++) {\n            for (int l = 0; l < 3; l++) {\n                if (grid[i - 1 + k][j - 1 + l] < 1 || grid[i - 1 + k][j - 1 + l] > 9) {\n                    return false;\n                }\n            }\n        }\n\n        temp[0] = grid[i - 1][j - 1] + grid[i - 1][j] + grid[i - 1][j + 1];\n        if (temp[0] != 15) {\n            return false;\n        }\n        temp[1] = grid[i][j - 1] + grid[i][j] + grid[i][j + 1];\n        if (temp[1] != 15) {\n            return false;\n        }\n        temp[2] = grid[i + 1][j - 1] + grid[i + 1][j] + grid[i + 1][j + 1];\n        if (temp[2] != 15) {\n            return false;\n        }\n        temp[3] = grid[i - 1][j - 1] + grid[i][j - 1] + grid[i + 1][j - 1];\n        if (temp[3] != 15) {\n            return false;\n        }\n        temp[4] = grid[i - 1][j] + grid[i][j] + grid[i + 1][j];\n        if (temp[4] != 15) {\n            return false;\n        }\n        temp[5] = grid[i - 1][j + 1] + grid[i][j + 1] + grid[i + 1][j + 1];\n        if (temp[5] != 15) {\n            return false;\n        }\n        temp[6] = grid[i - 1][j - 1] + grid[i][j] + grid[i + 1][j + 1];\n        if (temp[6] != 15) {\n            return false;\n        }\n        temp[7] = grid[i + 1][j - 1] + grid[i][j] + grid[i - 1][j + 1];\n        if (temp[7] != 15) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[][] grid = new int[][]{\n                {5, 2, 9, 5, 4},\n                {8, 1, 6, 1, 4},\n                {7, 2, 4, 7, 8},\n                {1, 8, 3, 5, 9},\n                {5, 7, 2, 6, 1}};\n\n        Solution solution = new Solution();\n        int numMagicSquaresInside = solution.numMagicSquaresInside(grid);\n        System.out.println(numMagicSquaresInside);\n    }\n}  \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a  https://liweiwei1419.github.io/leetcode-solution/leetcode-0840-magic-squares-in-grid  \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211  liweiwei1419@gmail.com   \u3002  \n    .label-warning {\n        background-color: #f0ad4e;\n    }\n\n    .label-success {\n        background-color: #5cb85c;\n    }\n\n    .label-danger {\n        background-color: #d9534f;\n    }\n\n    .label {\n        display: inline;\n        padding: .2em .6em .3em;\n        font-size: 75%;\n        font-weight: 700;\n        line-height: 1;\n        color: #fff;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: baseline;\n        border-radius: .25em;\n    }",
            "title": "\u53c2\u8003\u89e3\u7b541"
        },
        {
            "location": "/leetcode-articles-template/",
            "text": "\u586b\u5199\n\n\n\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6\n\n\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be\n\n\n\u82f1\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\u4e2d\u6587\u7f51\u5740\uff1a\n  \u3002\n\n\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u6c42\u89e3\u5173\u952e\uff1a\n\n\n\n\n\u53c2\u8003\u89e3\u7b54\n\n\n\u53c2\u8003\u89e3\u7b541",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_1",
            "text": "",
            "title": "\u586b\u5199"
        },
        {
            "location": "/leetcode-articles-template/#_2",
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be  \u82f1\u6587\u7f51\u5740\uff1a   \u3002  \u4e2d\u6587\u7f51\u5740\uff1a   \u3002",
            "title": "\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"
        },
        {
            "location": "/leetcode-articles-template/#_3",
            "text": "\u6c42\u89e3\u5173\u952e\uff1a",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/leetcode-articles-template/#_4",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b54"
        },
        {
            "location": "/leetcode-articles-template/#1",
            "text": "",
            "title": "\u53c2\u8003\u89e3\u7b541"
        }
    ]
}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u76ee\u5f55 \u8fd9\u4e2a\u7f51\u7ad9\u8bb0\u5f55\u4e86\u6211\u5728 2018 \u5e74\u5237 LeetCode \u7684\u65f6\u5019\u7684\u4e00\u4e9b\u9898\u89e3\uff0c\u4e3b\u8981\u4f7f\u7528 Java\uff0c\u90e8\u5206\u9898\u76ee\u4f7f\u7528\u4e86 Python\u3002","title":"\u76ee\u5f55"},{"location":"#_1","text":"\u8fd9\u4e2a\u7f51\u7ad9\u8bb0\u5f55\u4e86\u6211\u5728 2018 \u5e74\u5237 LeetCode \u7684\u65f6\u5019\u7684\u4e00\u4e9b\u9898\u89e3\uff0c\u4e3b\u8981\u4f7f\u7528 Java\uff0c\u90e8\u5206\u9898\u76ee\u4f7f\u7528\u4e86 Python\u3002","title":"\u76ee\u5f55"},{"location":"leetcode-0001-two-sum/","text":"1. Two Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u548c\u4e3a\u76ee\u6807\u503c\u7684 \u4e24\u4e2a \u6570\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u4e00\u79cd\u7b54\u6848\uff0c\u4e14\u540c\u6837\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u91cd\u590d\u5229\u7528\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[ 0 ] + nums[ 1 ] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [ 0, 1 ] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 1. Two Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 1. \u4e24\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"1. Two Sum"},{"location":"leetcode-0001-two-sum/#1-two-sum","text":"","title":"1. Two Sum"},{"location":"leetcode-0001-two-sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u548c\u4e3a\u76ee\u6807\u503c\u7684 \u4e24\u4e2a \u6570\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u4e00\u79cd\u7b54\u6848\uff0c\u4e14\u540c\u6837\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u91cd\u590d\u5229\u7528\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[ 0 ] + nums[ 1 ] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [ 0, 1 ] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 1. Two Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 1. \u4e24\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0001-two-sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0001-two-sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0001-two-sum/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0002-add-two-numbers/","text":"2. Add Two Numbers \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167 \u9006\u5e8f \u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a (2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a 7 -> 0 -> 8 \u539f\u56e0\uff1a 342 + 465 = 807 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 2. Add Two Numbers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 2. \u4e24\u6570\u76f8\u52a0 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"2. Add Two Numbers"},{"location":"leetcode-0002-add-two-numbers/#2-add-two-numbers","text":"","title":"2. Add Two Numbers"},{"location":"leetcode-0002-add-two-numbers/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167 \u9006\u5e8f \u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a (2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a 7 -> 0 -> 8 \u539f\u56e0\uff1a 342 + 465 = 807 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 2. Add Two Numbers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 2. \u4e24\u6570\u76f8\u52a0 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0002-add-two-numbers/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0002-add-two-numbers/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0002-add-two-numbers/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/","text":"3. Longest Substring Without Repeating Characters \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a \"abcabcbb\" \uff0c\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\" \uff0c\u90a3\u4e48\u957f\u5ea6\u5c31\u662f3\u3002 \u7ed9\u5b9a \"bbbbb\" \uff0c\u6700\u957f\u7684\u5b50\u4e32\u5c31\u662f \"b\" \uff0c\u957f\u5ea6\u662f1\u3002 \u7ed9\u5b9a \"pwwkew\" \uff0c\u6700\u957f\u5b50\u4e32\u662f \"wke\" \uff0c\u957f\u5ea6\u662f3\u3002\u8bf7\u6ce8\u610f\u7b54\u6848\u5fc5\u987b\u662f\u4e00\u4e2a \u5b50\u4e32 \uff0c \"pwke\" \u662f \u5b50\u5e8f\u5217 \u800c\u4e0d\u662f\u5b50\u4e32\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 3. Longest Substring Without Repeating Characters \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"3. Longest Substring Without Repeating Characters"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/#3-longest-substring-without-repeating-characters","text":"","title":"3. Longest Substring Without Repeating Characters"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a \"abcabcbb\" \uff0c\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\" \uff0c\u90a3\u4e48\u957f\u5ea6\u5c31\u662f3\u3002 \u7ed9\u5b9a \"bbbbb\" \uff0c\u6700\u957f\u7684\u5b50\u4e32\u5c31\u662f \"b\" \uff0c\u957f\u5ea6\u662f1\u3002 \u7ed9\u5b9a \"pwwkew\" \uff0c\u6700\u957f\u5b50\u4e32\u662f \"wke\" \uff0c\u957f\u5ea6\u662f3\u3002\u8bf7\u6ce8\u610f\u7b54\u6848\u5fc5\u987b\u662f\u4e00\u4e2a \u5b50\u4e32 \uff0c \"pwke\" \u662f \u5b50\u5e8f\u5217 \u800c\u4e0d\u662f\u5b50\u4e32\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 3. Longest Substring Without Repeating Characters \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0003-longest-substring-without-repeating-characters/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0004-median-of-two-sorted-arrays/","text":"4. Median of Two Sorted Arrays \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2 \u3002 \u8bf7\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u3002 \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 4. Median of Two Sorted Arrays \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 4. \u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"4. Median of Two Sorted Arrays"},{"location":"leetcode-0004-median-of-two-sorted-arrays/#4-median-of-two-sorted-arrays","text":"","title":"4. Median of Two Sorted Arrays"},{"location":"leetcode-0004-median-of-two-sorted-arrays/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2 \u3002 \u8bf7\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u3002 \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 4. Median of Two Sorted Arrays \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 4. \u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0004-median-of-two-sorted-arrays/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0004-median-of-two-sorted-arrays/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0004-median-of-two-sorted-arrays/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0005-longest-palindromic-substring/","text":"5. Longest Palindromic Substring \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\"\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\" \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 5. Longest Palindromic Substring \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5\uff1a\u679a\u4e3e\u56de\u6587\u4e32\u7684\u4e2d\u5fc3\uff08\u6ce8\u610f\u5206\u56de\u6587\u4e32\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u65f6\u5019\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u540c\u4e00\u8bbe\u8ba1\u4e00\u4e2a\u65b9\u6cd5\uff09\uff0c\u5f97\u5230\u56de\u6587\u4e32\uff0c\u4ece\u4e2d\u7edf\u8ba1\u4e2d\u6700\u957f\u7684\u56de\u6587\u4e32\u5373\u53ef\u3002 \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u3002 \u601d\u8def3\uff1a\u4e13\u95e8\u89e3\u51b3\u56de\u6587\u4e32\u7684\u4e00\u4e2a\u8457\u540d\u7b97\u6cd5 Manacher \u7b97\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5 public class Solution { public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); for (int i = 0; i < len; i++) { String palindromeOdd = centerSpread(s, len, i, i); String palindromeEven = centerSpread(s, len, i, i + 1); String maxLen = palindromeOdd.length() > palindromeEven.length() ? palindromeOdd : palindromeEven; if (maxLen.length() > longestPalindrome) { longestPalindrome = maxLen.length(); longestPalindromeStr = maxLen; } } return longestPalindromeStr; } private String centerSpread(String s, int len, int left, int right) { int l = left; int r = right; while (l >= 0 && r < len && s.charAt(l) == s.charAt(r)) { l--; r++; } // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u8df3\u51fa while \u5faa\u73af\u7684\u65f6\u5019\uff0c\u662f\u7b2c 1 \u4e2a\u6ee1\u8db3 s.charAt(l) != s.charAt(r) \u7684\u65f6\u5019 // \u6240\u4ee5\uff0c\u4e0d\u80fd\u53d6 l\uff0c\u4e0d\u80fd\u53d6 r return s.substring(l + 1, r); } } \u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212 public class Solution2 { public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); boolean[][] dp = new boolean[len][len]; // abcdedcba // j i // \u5982\u679c dp[j,i] = true \u90a3\u4e48 dp[j+1,i-1] \u4e5f\u4e00\u5b9a\u4e3a true // [j+1,i-1] \u4e00\u5b9a\u8981\u6784\u6210\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\u989d\u533a\u95f4\uff08 1 \u4e2a\u5143\u7d20\u7684\u533a\u95f4\uff0cs.charAt(i)==s.charAt(j) \u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff09 // \u5373 j+1 < i-1\uff0c\u5373 i > j + 2 (\u4e0d\u80fd\u53d6\u7b49\u53f7\uff0c\u53d6\u5230\u7b49\u53f7\uff0c\u5c31\u9000\u5316\u6210 1 \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e86) // \u5e94\u8be5\u53cd\u8fc7\u6765\u5199 for (int i = 0; i < len; i++) { for (int j = 0; j <= i; j++) { // \u533a\u95f4\u5e94\u8be5\u6162\u6162\u653e\u5927 if (s.charAt(i) == s.charAt(j) && (i <= j + 2 || dp[j + 1][i - 1])) { // \u5199\u6210 dp[j][i] \u5c31\u5927\u9519\u7279\u9519\u4e86\uff0c\u4e0d\u8981\u987a\u624b\u5199\u4e60\u60ef\u4e86 dp[j][i] = true; if (i - j + 1 > longestPalindrome) { longestPalindrome = i - j + 1; longestPalindromeStr = s.substring(j, i + 1); } } } } return longestPalindromeStr; } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Manacher \u7b97\u6cd5 /** * \u4f7f\u7528 Manacher \u7b97\u6cd5 */ public class Solution3 { /** * \u521b\u5efa\u5206\u9694\u7b26\u5206\u5272\u7684\u5b57\u7b26\u4e32 * * @param s \u539f\u59cb\u5b57\u7b26\u4e32 * @param divide \u5206\u9694\u5b57\u7b26 * @return \u4f7f\u7528\u5206\u9694\u5b57\u7b26\u5904\u7406\u4ee5\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32 */ private String generateSDivided(String s, char divide) { int len = s.length(); if (len == 0) { return \"\"; } if (s.indexOf(divide) != -1) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\uff0c\u60a8\u4f20\u9012\u7684\u5206\u5272\u5b57\u7b26\uff0c\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5b58\u5728\uff01\"); } StringBuilder sBuilder = new StringBuilder(); sBuilder.append(divide); for (int i = 0; i < len; i++) { sBuilder.append(s.charAt(i)); sBuilder.append(divide); } return sBuilder.toString(); } public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } String sDivided = generateSDivided(s, '#'); int slen = sDivided.length(); int[] p = new int[slen]; int mx = 0; // id \u662f\u7531 mx \u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\uff0c\u53ea\u8981\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86 int id = 0; int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); for (int i = 0; i < slen; i++) { if (i < mx) { // \u8fd9\u4e00\u6b65\u662f Manacher \u7b97\u6cd5\u7684\u5173\u952e\u6240\u5728\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u56fe\u5f62\u6765\u7406\u89e3 // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u5173\u952e\uff0c\u53ef\u4ee5\u628a\u4e24\u79cd\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5408\u5e76 p[i] = Integer.min(p[2 * id - i], mx - i); } else { // \u8d70\u5230\u8fd9\u91cc\uff0c\u53ea\u53ef\u80fd\u662f\u56e0\u4e3a i = mx if (i > mx) { throw new IllegalArgumentException(\"\u7a0b\u5e8f\u51fa\u9519\uff01\"); } p[i] = 1; } while (i - p[i] >= 0 && i + p[i] < slen && sDivided.charAt(i - p[i]) == sDivided.charAt(i + p[i])) { p[i]++; } // \u6211\u4eec\u60f3\u8c61 mx \u7684\u5b9a\u4e49\uff0c\u5b83\u662f\u904d\u5386\u8fc7\u7684 i \u7684 i + p[i] \u7684\u6700\u5927\u8005 // \u5199\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c mx \u7684\u503c\u8d8a\u5927\uff0c // \u8fdb\u5165\u4e0a\u9762 i < mx \u7684\u5224\u65ad\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u4e4b\u524d\u5224\u65ad\u8fc7\u7684\u56de\u6587\u4fe1\u606f\u4e86 if (i + p[i] > mx) { mx = i + p[i]; id = i; } if (p[i] - 1 > longestPalindrome) { longestPalindrome = p[i] - 1; longestPalindromeStr = sDivided.substring(i - p[i] + 1, i + p[i]).replace(\"#\", \"\"); } } return longestPalindromeStr; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0005-longest-palindromic-substring \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"5. Longest Palindromic Substring"},{"location":"leetcode-0005-longest-palindromic-substring/#5-longest-palindromic-substring","text":"","title":"5. Longest Palindromic Substring"},{"location":"leetcode-0005-longest-palindromic-substring/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\"\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\" \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 5. Longest Palindromic Substring \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0005-longest-palindromic-substring/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5\uff1a\u679a\u4e3e\u56de\u6587\u4e32\u7684\u4e2d\u5fc3\uff08\u6ce8\u610f\u5206\u56de\u6587\u4e32\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u65f6\u5019\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u540c\u4e00\u8bbe\u8ba1\u4e00\u4e2a\u65b9\u6cd5\uff09\uff0c\u5f97\u5230\u56de\u6587\u4e32\uff0c\u4ece\u4e2d\u7edf\u8ba1\u4e2d\u6700\u957f\u7684\u56de\u6587\u4e32\u5373\u53ef\u3002 \u601d\u8def2\uff1a\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u3002 \u601d\u8def3\uff1a\u4e13\u95e8\u89e3\u51b3\u56de\u6587\u4e32\u7684\u4e00\u4e2a\u8457\u540d\u7b97\u6cd5 Manacher \u7b97\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0005-longest-palindromic-substring/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0005-longest-palindromic-substring/#1","text":"public class Solution { public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); for (int i = 0; i < len; i++) { String palindromeOdd = centerSpread(s, len, i, i); String palindromeEven = centerSpread(s, len, i, i + 1); String maxLen = palindromeOdd.length() > palindromeEven.length() ? palindromeOdd : palindromeEven; if (maxLen.length() > longestPalindrome) { longestPalindrome = maxLen.length(); longestPalindromeStr = maxLen; } } return longestPalindromeStr; } private String centerSpread(String s, int len, int left, int right) { int l = left; int r = right; while (l >= 0 && r < len && s.charAt(l) == s.charAt(r)) { l--; r++; } // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u8df3\u51fa while \u5faa\u73af\u7684\u65f6\u5019\uff0c\u662f\u7b2c 1 \u4e2a\u6ee1\u8db3 s.charAt(l) != s.charAt(r) \u7684\u65f6\u5019 // \u6240\u4ee5\uff0c\u4e0d\u80fd\u53d6 l\uff0c\u4e0d\u80fd\u53d6 r return s.substring(l + 1, r); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4e2d\u5fc3\u6269\u6563\u6cd5"},{"location":"leetcode-0005-longest-palindromic-substring/#2","text":"public class Solution2 { public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); boolean[][] dp = new boolean[len][len]; // abcdedcba // j i // \u5982\u679c dp[j,i] = true \u90a3\u4e48 dp[j+1,i-1] \u4e5f\u4e00\u5b9a\u4e3a true // [j+1,i-1] \u4e00\u5b9a\u8981\u6784\u6210\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\u989d\u533a\u95f4\uff08 1 \u4e2a\u5143\u7d20\u7684\u533a\u95f4\uff0cs.charAt(i)==s.charAt(j) \u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff09 // \u5373 j+1 < i-1\uff0c\u5373 i > j + 2 (\u4e0d\u80fd\u53d6\u7b49\u53f7\uff0c\u53d6\u5230\u7b49\u53f7\uff0c\u5c31\u9000\u5316\u6210 1 \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e86) // \u5e94\u8be5\u53cd\u8fc7\u6765\u5199 for (int i = 0; i < len; i++) { for (int j = 0; j <= i; j++) { // \u533a\u95f4\u5e94\u8be5\u6162\u6162\u653e\u5927 if (s.charAt(i) == s.charAt(j) && (i <= j + 2 || dp[j + 1][i - 1])) { // \u5199\u6210 dp[j][i] \u5c31\u5927\u9519\u7279\u9519\u4e86\uff0c\u4e0d\u8981\u987a\u624b\u5199\u4e60\u60ef\u4e86 dp[j][i] = true; if (i - j + 1 > longestPalindrome) { longestPalindrome = i - j + 1; longestPalindromeStr = s.substring(j, i + 1); } } } } return longestPalindromeStr; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212"},{"location":"leetcode-0005-longest-palindromic-substring/#3-manacher","text":"/** * \u4f7f\u7528 Manacher \u7b97\u6cd5 */ public class Solution3 { /** * \u521b\u5efa\u5206\u9694\u7b26\u5206\u5272\u7684\u5b57\u7b26\u4e32 * * @param s \u539f\u59cb\u5b57\u7b26\u4e32 * @param divide \u5206\u9694\u5b57\u7b26 * @return \u4f7f\u7528\u5206\u9694\u5b57\u7b26\u5904\u7406\u4ee5\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32 */ private String generateSDivided(String s, char divide) { int len = s.length(); if (len == 0) { return \"\"; } if (s.indexOf(divide) != -1) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\uff0c\u60a8\u4f20\u9012\u7684\u5206\u5272\u5b57\u7b26\uff0c\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5b58\u5728\uff01\"); } StringBuilder sBuilder = new StringBuilder(); sBuilder.append(divide); for (int i = 0; i < len; i++) { sBuilder.append(s.charAt(i)); sBuilder.append(divide); } return sBuilder.toString(); } public String longestPalindrome(String s) { int len = s.length(); if (len == 0) { return \"\"; } String sDivided = generateSDivided(s, '#'); int slen = sDivided.length(); int[] p = new int[slen]; int mx = 0; // id \u662f\u7531 mx \u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\uff0c\u53ea\u8981\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86 int id = 0; int longestPalindrome = 1; String longestPalindromeStr = s.substring(0, 1); for (int i = 0; i < slen; i++) { if (i < mx) { // \u8fd9\u4e00\u6b65\u662f Manacher \u7b97\u6cd5\u7684\u5173\u952e\u6240\u5728\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u56fe\u5f62\u6765\u7406\u89e3 // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u5173\u952e\uff0c\u53ef\u4ee5\u628a\u4e24\u79cd\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5408\u5e76 p[i] = Integer.min(p[2 * id - i], mx - i); } else { // \u8d70\u5230\u8fd9\u91cc\uff0c\u53ea\u53ef\u80fd\u662f\u56e0\u4e3a i = mx if (i > mx) { throw new IllegalArgumentException(\"\u7a0b\u5e8f\u51fa\u9519\uff01\"); } p[i] = 1; } while (i - p[i] >= 0 && i + p[i] < slen && sDivided.charAt(i - p[i]) == sDivided.charAt(i + p[i])) { p[i]++; } // \u6211\u4eec\u60f3\u8c61 mx \u7684\u5b9a\u4e49\uff0c\u5b83\u662f\u904d\u5386\u8fc7\u7684 i \u7684 i + p[i] \u7684\u6700\u5927\u8005 // \u5199\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c mx \u7684\u503c\u8d8a\u5927\uff0c // \u8fdb\u5165\u4e0a\u9762 i < mx \u7684\u5224\u65ad\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u4e4b\u524d\u5224\u65ad\u8fc7\u7684\u56de\u6587\u4fe1\u606f\u4e86 if (i + p[i] > mx) { mx = i + p[i]; id = i; } if (p[i] - 1 > longestPalindrome) { longestPalindrome = p[i] - 1; longestPalindromeStr = sDivided.substring(i - p[i] + 1, i + p[i]).replace(\"#\", \"\"); } } return longestPalindromeStr; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0005-longest-palindromic-substring \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Manacher \u7b97\u6cd5"},{"location":"leetcode-0006-zigzag-conversion/","text":"6. ZigZag Conversion \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5c06\u5b57\u7b26\u4e32 \"PAYPALISHIRING\" \u4ee5Z\u5b57\u5f62\u6392\u5217\u6210\u7ed9\u5b9a\u7684\u884c\u6570\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\u4ece\u5de6\u5f80\u53f3\uff0c\u9010\u884c\u8bfb\u53d6\u5b57\u7b26\uff1a \"PAHNAPLSIIGYIR\" \u5b9e\u73b0\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570: string convert(string s, int numRows); \u793a\u4f8b 1: \u8f93\u5165: s = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa: \"PAHNAPLSIIGYIR\" \u793a\u4f8b 2: \u8f93\u5165: s = \"PAYPALISHIRING\", numRows = 4 \u8f93\u51fa: \"PINALSIGYAHRPI\" \u89e3\u91ca: P I N A L S I G Y A H R P I \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 6. ZigZag Conversion \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 6. Z\u5b57\u5f62\u53d8\u6362 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0006-zigzag-conversion \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"6. ZigZag Conversion"},{"location":"leetcode-0006-zigzag-conversion/#6-zigzag-conversion","text":"","title":"6. ZigZag Conversion"},{"location":"leetcode-0006-zigzag-conversion/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5c06\u5b57\u7b26\u4e32 \"PAYPALISHIRING\" \u4ee5Z\u5b57\u5f62\u6392\u5217\u6210\u7ed9\u5b9a\u7684\u884c\u6570\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\u4ece\u5de6\u5f80\u53f3\uff0c\u9010\u884c\u8bfb\u53d6\u5b57\u7b26\uff1a \"PAHNAPLSIIGYIR\" \u5b9e\u73b0\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570: string convert(string s, int numRows); \u793a\u4f8b 1: \u8f93\u5165: s = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa: \"PAHNAPLSIIGYIR\" \u793a\u4f8b 2: \u8f93\u5165: s = \"PAYPALISHIRING\", numRows = 4 \u8f93\u51fa: \"PINALSIGYAHRPI\" \u89e3\u91ca: P I N A L S I G Y A H R P I \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 6. ZigZag Conversion \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 6. Z\u5b57\u5f62\u53d8\u6362 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0006-zigzag-conversion/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0006-zigzag-conversion/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0006-zigzag-conversion/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0006-zigzag-conversion \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0007-reverse-integer/","text":"7. Reverse Integer \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5c06\u6574\u6570\u4e2d\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2: \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3: \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f: \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 7. Reverse Integer \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 7. \u53cd\u8f6c\u6574\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8981\u7279\u522b\u6ce8\u610f\u5230\u53cd\u8f6c\u4ee5\u540e\u6574\u6570\u8d8a\u754c\u7684\u95ee\u9898\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f $[\u22122^{31}, 2^{31} \u2212 1]$\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int reverse(int x) { int sign = x >= 0 ? 1 : -1; long res = 0; x = sign * x; while (x > 0) { res = res * 10 + x % 10; x = x / 10; } res = sign * res; if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) { return 0; } return (int) res; } } \u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5355\u72ec\u5224\u65ad\u7b26\u53f7\uff0c\u5e76\u4e14\u6ea2\u51fa\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u5728\u5faa\u73af\u5f53\u4e2d\u505a\u3002 public class Solution2 { public int reverse(int x) { if (x == 0) { return 0; } long res = 0; while (x != 0) { res = res * 10 + x % 10; x /= 10; if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) { return 0; } } return (int) res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0007-reverse-integer \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"7. Reverse Integer"},{"location":"leetcode-0007-reverse-integer/#7-reverse-integer","text":"","title":"7. Reverse Integer"},{"location":"leetcode-0007-reverse-integer/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5c06\u6574\u6570\u4e2d\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2: \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3: \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f: \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 7. Reverse Integer \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 7. \u53cd\u8f6c\u6574\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0007-reverse-integer/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8981\u7279\u522b\u6ce8\u610f\u5230\u53cd\u8f6c\u4ee5\u540e\u6574\u6570\u8d8a\u754c\u7684\u95ee\u9898\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f $[\u22122^{31}, 2^{31} \u2212 1]$\u3002\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 0\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0007-reverse-integer/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0007-reverse-integer/#1","text":"public class Solution { public int reverse(int x) { int sign = x >= 0 ? 1 : -1; long res = 0; x = sign * x; while (x > 0) { res = res * 10 + x % 10; x = x / 10; } res = sign * res; if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) { return 0; } return (int) res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0007-reverse-integer/#2","text":"public class Solution2 { public int reverse(int x) { if (x == 0) { return 0; } long res = 0; while (x != 0) { res = res * 10 + x % 10; x /= 10; if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE) { return 0; } } return (int) res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0007-reverse-integer \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5355\u72ec\u5224\u65ad\u7b26\u53f7\uff0c\u5e76\u4e14\u6ea2\u51fa\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u5728\u5faa\u73af\u5f53\u4e2d\u505a\u3002"},{"location":"leetcode-0008-string-to-integer-atoi/","text":"8. String to Integer (atoi) \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 atoi \uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570\u3002 \u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e4b\u524d\uff0c\u9700\u8981\u79fb\u9664\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u5b57\u7b26\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6b63\u53f7\u6216\u8d1f\u53f7\uff0c\u9009\u53d6\u8be5\u7b26\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u90e8\u5206\u5b57\u7b26\u5373\u4e3a\u6574\u6570\u7684\u503c\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u5f62\u6210\u6574\u6570\u7684\u5b57\u7b26\u540e\u9762\u5305\u62ec\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u6ca1\u6709\u5f71\u54cd\u3002 \u5f53\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u5e8f\u5217\u4e0d\u662f\u4e2a\u6709\u6548\u7684\u6574\u6570\uff1b\u6216\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff1b\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u3002 \u82e5\u51fd\u6570\u4e0d\u80fd\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\uff0c\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u53ef\u8868\u793a\u7684\u8303\u56f4\uff0c\u5219\u8fd4\u56de INT_MAX (2 31 \u2212 1) \u6216 INT_MIN (\u22122 31 ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u22122 31 ) \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 8. String to Integer (atoi) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6574\u6570 (atoi) \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5c31\u662f\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u4e00\u70b9\u90fd\u4e0d\u96be\u3002 1\u3001\u53bb\u6389\u5de6\u53f3\u7a7a\u683c\uff1b 2\u3001\u770b\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7b26\u53f7\uff0c\u5982\u679c\u662f\u7b26\u53f7\u8bb0\u5f55\u7b26\u53f7\uff0c\u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56de 0\uff1b 3\u3001\u6ce8\u610f\u8d8a\u754c\u95ee\u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"8. String to Integer (atoi)"},{"location":"leetcode-0008-string-to-integer-atoi/#8-string-to-integer-atoi","text":"","title":"8. String to Integer (atoi)"},{"location":"leetcode-0008-string-to-integer-atoi/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 atoi \uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570\u3002 \u5728\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e4b\u524d\uff0c\u9700\u8981\u79fb\u9664\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u5b57\u7b26\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6b63\u53f7\u6216\u8d1f\u53f7\uff0c\u9009\u53d6\u8be5\u7b26\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u90e8\u5206\u5b57\u7b26\u5373\u4e3a\u6574\u6570\u7684\u503c\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u5f62\u6210\u6574\u6570\u7684\u5b57\u7b26\u540e\u9762\u5305\u62ec\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u6ca1\u6709\u5f71\u54cd\u3002 \u5f53\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u5e8f\u5217\u4e0d\u662f\u4e2a\u6709\u6548\u7684\u6574\u6570\uff1b\u6216\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff1b\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u8f6c\u6362\u3002 \u82e5\u51fd\u6570\u4e0d\u80fd\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\uff0c\u8fd4\u56de 0\u3002 \u8bf4\u660e\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u53ef\u8868\u793a\u7684\u8303\u56f4\uff0c\u5219\u8fd4\u56de INT_MAX (2 31 \u2212 1) \u6216 INT_MIN (\u22122 31 ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u22122 31 ) \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 8. String to Integer (atoi) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 8. \u5b57\u7b26\u4e32\u8f6c\u6574\u6570 (atoi) \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0008-string-to-integer-atoi/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5c31\u662f\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u4e00\u70b9\u90fd\u4e0d\u96be\u3002 1\u3001\u53bb\u6389\u5de6\u53f3\u7a7a\u683c\uff1b 2\u3001\u770b\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7b26\u53f7\uff0c\u5982\u679c\u662f\u7b26\u53f7\u8bb0\u5f55\u7b26\u53f7\uff0c\u5982\u679c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56de 0\uff1b 3\u3001\u6ce8\u610f\u8d8a\u754c\u95ee\u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0008-string-to-integer-atoi/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0008-string-to-integer-atoi/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0009-palindrome-number/","text":"9. Palindrome Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3: \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636: \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 9. Palindrome Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 9. \u56de\u6587\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6bcf\u6b21\u6a21 10 \u5f97\u5230\u4e2a\u4f4d\u6570\uff0c\u9664\u4ee5 10 \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u8fd9\u662f\u4ece\u4e00\u4e2a\u6b63\u6574\u6570\u4ece\u4f4e\u4f4d\u8bfb\u5230\u9ad8\u4f4d\u7684\u4e00\u822c\u64cd\u4f5c\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public boolean isPalindrome(int x) { // \u5982\u679c x < 0 \u76f4\u63a5\u5c31\u53ef\u4ee5\u5224\u65ad\u4e0d\u662f\u56de\u6587\u6570 if (x < 0) { return false; } return x == reverse(x); } private int reverse(int x) { int reverse = 0; while (x != 0) { reverse = reverse * 10 + x % 10; x /= 10; } return reverse; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0009-palindrome-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"9. Palindrome Number"},{"location":"leetcode-0009-palindrome-number/#9-palindrome-number","text":"","title":"9. Palindrome Number"},{"location":"leetcode-0009-palindrome-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3: \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636: \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 9. Palindrome Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 9. \u56de\u6587\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0009-palindrome-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6bcf\u6b21\u6a21 10 \u5f97\u5230\u4e2a\u4f4d\u6570\uff0c\u9664\u4ee5 10 \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u8fd9\u662f\u4ece\u4e00\u4e2a\u6b63\u6574\u6570\u4ece\u4f4e\u4f4d\u8bfb\u5230\u9ad8\u4f4d\u7684\u4e00\u822c\u64cd\u4f5c\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0009-palindrome-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0009-palindrome-number/#1","text":"public class Solution { public boolean isPalindrome(int x) { // \u5982\u679c x < 0 \u76f4\u63a5\u5c31\u53ef\u4ee5\u5224\u65ad\u4e0d\u662f\u56de\u6587\u6570 if (x < 0) { return false; } return x == reverse(x); } private int reverse(int x) { int reverse = 0; while (x != 0) { reverse = reverse * 10 + x % 10; x /= 10; } return reverse; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0009-palindrome-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0010-regular-expression-matching/","text":"10. Regular Expression Matching \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f ( p )\u3002\u5b9e\u73b0\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26\u3002 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20\u3002 \u5339\u914d\u5e94\u8be5\u8986\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 ( s ) \uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 \u8bf4\u660e: s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 . \u548c * \u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"a*\" \u8f93\u51fa: true \u89e3\u91ca: '*' \u4ee3\u8868\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20, \u5373\u53ef\u4ee5\u5339\u914d 'a' \u3002\u56e0\u6b64, \u91cd\u590d 'a' \u4e00\u6b21, \u5b57\u7b26\u4e32\u53ef\u53d8\u4e3a \"aa\"\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"ab\" p = \".*\" \u8f93\u51fa: true \u89e3\u91ca: \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a('*')\u4efb\u610f\u5b57\u7b26('.')\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"aab\" p = \"c*a*b\" \u8f93\u51fa: true \u89e3\u91ca: 'c' \u53ef\u4ee5\u4e0d\u88ab\u91cd\u590d, 'a' \u53ef\u4ee5\u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002 \u793a\u4f8b 5: \u8f93\u5165: s = \"mississippi\" p = \"mis*is*p*.\" \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 10. Regular Expression Matching \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"10. Regular Expression Matching"},{"location":"leetcode-0010-regular-expression-matching/#10-regular-expression-matching","text":"","title":"10. Regular Expression Matching"},{"location":"leetcode-0010-regular-expression-matching/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f ( p )\u3002\u5b9e\u73b0\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26\u3002 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20\u3002 \u5339\u914d\u5e94\u8be5\u8986\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 ( s ) \uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 \u8bf4\u660e: s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 . \u548c * \u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"a*\" \u8f93\u51fa: true \u89e3\u91ca: '*' \u4ee3\u8868\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20, \u5373\u53ef\u4ee5\u5339\u914d 'a' \u3002\u56e0\u6b64, \u91cd\u590d 'a' \u4e00\u6b21, \u5b57\u7b26\u4e32\u53ef\u53d8\u4e3a \"aa\"\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"ab\" p = \".*\" \u8f93\u51fa: true \u89e3\u91ca: \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a('*')\u4efb\u610f\u5b57\u7b26('.')\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"aab\" p = \"c*a*b\" \u8f93\u51fa: true \u89e3\u91ca: 'c' \u53ef\u4ee5\u4e0d\u88ab\u91cd\u590d, 'a' \u53ef\u4ee5\u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002 \u793a\u4f8b 5: \u8f93\u5165: s = \"mississippi\" p = \"mis*is*p*.\" \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 10. Regular Expression Matching \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0010-regular-expression-matching/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0010-regular-expression-matching/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0010-regular-expression-matching/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0011-container-with-most-water/","text":"11. Container With Most Water \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a 1 \uff0c a 2\uff0c ...\uff0c a n\uff0c \u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 ( i , a i ) \u3002\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u4f7f\u5f97\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a ( i , a i ) \u548c ( i , 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c n \u81f3\u5c11\u662f2\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 11. Container With Most Water \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"11. Container With Most Water"},{"location":"leetcode-0011-container-with-most-water/#11-container-with-most-water","text":"","title":"11. Container With Most Water"},{"location":"leetcode-0011-container-with-most-water/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a 1 \uff0c a 2\uff0c ...\uff0c a n\uff0c \u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 ( i , a i ) \u3002\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u4f7f\u5f97\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a ( i , a i ) \u548c ( i , 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c n \u81f3\u5c11\u662f2\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 11. Container With Most Water \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0011-container-with-most-water/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0011-container-with-most-water/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0011-container-with-most-water/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0012-integer-to-roman/","text":"12. Integer to Roman \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: 3 \u8f93\u51fa: \"III\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"IV\" \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: \"IX\" \u793a\u4f8b 4: \u8f93\u5165: 58 \u8f93\u51fa: \"LVIII\" \u89e3\u91ca: C = 100, L = 50, XXX = 30, III = 3. \u793a\u4f8b 5: \u8f93\u5165: 1994 \u8f93\u51fa: \"MCMXCIV\" \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 12. Integer to Roman \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u7528\u5230\u7684\u5b57\u6bcd\u662f\u53ef\u4ee5\u7f57\u5217\u51fa\u6765\u7684\uff0c\u6211\u4eec\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u7f57\u5217\u51fa\u6765\uff0c\u518d\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u505a\u51fa\u89e3\u7b54\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e86\u4e24\u79cd\u89e3\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u7f57\u5217\u51fa\u6240\u6709\u6570\u5b57\u4e0e\u7f57\u9a6c\u5b57\u6bcd\u5bf9\u5e94\u7684\u53ef\u80fd\u6027\uff0c\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217 // \u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5230\u4e86\u8d2a\u5fc3\u7b97\u6cd5 public String intToRoman(int num) { int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}; StringBuilder stringBuilder = new StringBuilder(); int index = 0; while (index < 13) { // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u53f7 while (num >= nums[index]) { stringBuilder.append(romans[index]); num -= nums[index]; } index++; } return stringBuilder.toString(); } public static void main(String[] args) { Solution solution = new Solution(); int num = 2845; String intToRoman = solution.intToRoman(num); System.out.println(intToRoman); num = 1994; intToRoman = solution.intToRoman(num); System.out.println(intToRoman); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public String intToRoman(int num) { int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}; StringBuilder stringBuilder = new StringBuilder(); int index = 0; while (num > 0) { int times = num / nums[index]; while (times > 0) { stringBuilder.append(romans[index]); times--; } num = num % nums[index]; index++; } return stringBuilder.toString(); } public static void main(String[] args) { Solution2 solution2= new Solution2(); int num = 2845; String intToRoman = solution2.intToRoman(num); System.out.println(intToRoman); num = 1994; intToRoman = solution2.intToRoman(num); System.out.println(intToRoman); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0012-integer-to-roman \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"12. Integer to Roman"},{"location":"leetcode-0012-integer-to-roman/#12-integer-to-roman","text":"","title":"12. Integer to Roman"},{"location":"leetcode-0012-integer-to-roman/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: 3 \u8f93\u51fa: \"III\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"IV\" \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: \"IX\" \u793a\u4f8b 4: \u8f93\u5165: 58 \u8f93\u51fa: \"LVIII\" \u89e3\u91ca: C = 100, L = 50, XXX = 30, III = 3. \u793a\u4f8b 5: \u8f93\u5165: 1994 \u8f93\u51fa: \"MCMXCIV\" \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 12. Integer to Roman \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0012-integer-to-roman/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u7528\u5230\u7684\u5b57\u6bcd\u662f\u53ef\u4ee5\u7f57\u5217\u51fa\u6765\u7684\uff0c\u6211\u4eec\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u7f57\u5217\u51fa\u6765\uff0c\u518d\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u505a\u51fa\u89e3\u7b54\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e86\u4e24\u79cd\u89e3\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0012-integer-to-roman/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0012-integer-to-roman/#1","text":"public class Solution { // \u7f57\u5217\u51fa\u6240\u6709\u6570\u5b57\u4e0e\u7f57\u9a6c\u5b57\u6bcd\u5bf9\u5e94\u7684\u53ef\u80fd\u6027\uff0c\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217 // \u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5230\u4e86\u8d2a\u5fc3\u7b97\u6cd5 public String intToRoman(int num) { int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}; StringBuilder stringBuilder = new StringBuilder(); int index = 0; while (index < 13) { // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u53f7 while (num >= nums[index]) { stringBuilder.append(romans[index]); num -= nums[index]; } index++; } return stringBuilder.toString(); } public static void main(String[] args) { Solution solution = new Solution(); int num = 2845; String intToRoman = solution.intToRoman(num); System.out.println(intToRoman); num = 1994; intToRoman = solution.intToRoman(num); System.out.println(intToRoman); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0012-integer-to-roman/#2","text":"public class Solution2 { public String intToRoman(int num) { int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}; StringBuilder stringBuilder = new StringBuilder(); int index = 0; while (num > 0) { int times = num / nums[index]; while (times > 0) { stringBuilder.append(romans[index]); times--; } num = num % nums[index]; index++; } return stringBuilder.toString(); } public static void main(String[] args) { Solution2 solution2= new Solution2(); int num = 2845; String intToRoman = solution2.intToRoman(num); System.out.println(intToRoman); num = 1994; intToRoman = solution2.intToRoman(num); System.out.println(intToRoman); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0012-integer-to-roman \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0013-roman-to-integer/","text":"13. Roman to Integer \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3: \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4: \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: C = 100, L = 50, XXX = 30, III = 3. \u793a\u4f8b 5: \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 13. Roman to Integer \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5e94\u8be5\u7528\u51cf\u6cd5\uff0c\u4f46\u662f\u524d\u9762\u5df2\u7ecf\u7528\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a\u51cf\u6cd5\u8981\u505a 2 \u6b21\uff0c\u8fd9\u662f\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashMap; public class Solution { public int romanToInt(String s) { int len = s.length(); if (len == 0) { return 0; } HashMap<Character, Integer> map = new HashMap<>(); map.put('I', 1); map.put('V', 5); map.put('X', 10); map.put('L', 50); map.put('C', 100); map.put('D', 500); map.put('M', 1000); int res = map.get(s.charAt(0)); for (int i = 1; i < len; i++) { int pre = map.get(s.charAt(i - 1)); int cur = map.get(s.charAt(i)); if (pre < cur) { // \u8fd9\u662f\u552f\u4e00\u7684\u4e00\u79cd\u9700\u8981\u6ce8\u610f\u7684\u7279\u6b8a\u60c5\u51b5\uff1a // \u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019 // \u8981\u7528\u5f53\u524d\u6570\u5b57 - \u524d\u9762\u6570\u5b57 // \u56e0\u4e3a\u524d\u9762\u6570\u5b57\u52a0\u8fc7\u4e86\uff0c\u6240\u4ee5\u8981\u51cf\u53bb 2 \u500d res += (cur - 2 * pre); } else { res += cur; } } return res; } public static void main(String[] args) { Solution solution = new Solution(); String s = \"III\"; int romanToInt = solution.romanToInt(s); System.out.println(romanToInt); s = \"LVIII\"; romanToInt = solution.romanToInt(s); System.out.println(romanToInt); s = \"MCMXCIV\"; romanToInt = solution.romanToInt(s); System.out.println(romanToInt); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0013-roman-to-integer \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"13. Roman to Integer"},{"location":"leetcode-0013-roman-to-integer/#13-roman-to-integer","text":"","title":"13. Roman to Integer"},{"location":"leetcode-0013-roman-to-integer/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3: \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4: \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: C = 100, L = 50, XXX = 30, III = 3. \u793a\u4f8b 5: \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 13. Roman to Integer \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0013-roman-to-integer/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5e94\u8be5\u7528\u51cf\u6cd5\uff0c\u4f46\u662f\u524d\u9762\u5df2\u7ecf\u7528\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\uff0c\u8fd9\u4e2a\u51cf\u6cd5\u8981\u505a 2 \u6b21\uff0c\u8fd9\u662f\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0013-roman-to-integer/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0013-roman-to-integer/#1","text":"import java.util.HashMap; public class Solution { public int romanToInt(String s) { int len = s.length(); if (len == 0) { return 0; } HashMap<Character, Integer> map = new HashMap<>(); map.put('I', 1); map.put('V', 5); map.put('X', 10); map.put('L', 50); map.put('C', 100); map.put('D', 500); map.put('M', 1000); int res = map.get(s.charAt(0)); for (int i = 1; i < len; i++) { int pre = map.get(s.charAt(i - 1)); int cur = map.get(s.charAt(i)); if (pre < cur) { // \u8fd9\u662f\u552f\u4e00\u7684\u4e00\u79cd\u9700\u8981\u6ce8\u610f\u7684\u7279\u6b8a\u60c5\u51b5\uff1a // \u5f53\u524d\u9762\u7684\u6570\u5b57\u6bd4\u5f53\u524d\u6570\u5b57\u8981\u5c0f\u7684\u65f6\u5019 // \u8981\u7528\u5f53\u524d\u6570\u5b57 - \u524d\u9762\u6570\u5b57 // \u56e0\u4e3a\u524d\u9762\u6570\u5b57\u52a0\u8fc7\u4e86\uff0c\u6240\u4ee5\u8981\u51cf\u53bb 2 \u500d res += (cur - 2 * pre); } else { res += cur; } } return res; } public static void main(String[] args) { Solution solution = new Solution(); String s = \"III\"; int romanToInt = solution.romanToInt(s); System.out.println(romanToInt); s = \"LVIII\"; romanToInt = solution.romanToInt(s); System.out.println(romanToInt); s = \"MCMXCIV\"; romanToInt = solution.romanToInt(s); System.out.println(romanToInt); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0013-roman-to-integer \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0014-longest-common-prefix/","text":"14. Longest Common Prefix \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1: \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2: \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e: \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 14. Longest Common Prefix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 14. \u6700\u957f\u516c\u5171\u524d\u7f00 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u90fd\u4ee5\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u7167\u6a21\u677f\u597d\u4e86\u3002\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5199\u51fa\u89e3\u7b54\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public String longestCommonPrefix(String[] strs) { int arrLen = strs.length; if (arrLen == 0) { return \"\"; } // \u6839\u636e\u9898\u610f\uff0c\u6700\u957f\u4e0d\u4f1a\u8d85\u8fc7\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 int maxLen = strs[0].length(); for (int begin = 0; begin < maxLen; begin++) { for (int i = 0; i < arrLen; i++) { if (begin == strs[i].length() || strs[0].charAt(begin) != strs[i].charAt(begin)) { return strs[0].substring(0, begin); } } } return strs[0]; } public static void main(String[] args) { String[] strs = {\"aa\", \"a\"}; Solution solution = new Solution(); String longestCommonPrefix = solution.longestCommonPrefix(strs); System.out.println(longestCommonPrefix); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0014-longest-common-prefix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"14. Longest Common Prefix"},{"location":"leetcode-0014-longest-common-prefix/#14-longest-common-prefix","text":"","title":"14. Longest Common Prefix"},{"location":"leetcode-0014-longest-common-prefix/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1: \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2: \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e: \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 14. Longest Common Prefix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 14. \u6700\u957f\u516c\u5171\u524d\u7f00 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0014-longest-common-prefix/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u90fd\u4ee5\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u7167\u6a21\u677f\u597d\u4e86\u3002\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5199\u51fa\u89e3\u7b54\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0014-longest-common-prefix/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0014-longest-common-prefix/#1","text":"public class Solution { public String longestCommonPrefix(String[] strs) { int arrLen = strs.length; if (arrLen == 0) { return \"\"; } // \u6839\u636e\u9898\u610f\uff0c\u6700\u957f\u4e0d\u4f1a\u8d85\u8fc7\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 int maxLen = strs[0].length(); for (int begin = 0; begin < maxLen; begin++) { for (int i = 0; i < arrLen; i++) { if (begin == strs[i].length() || strs[0].charAt(begin) != strs[i].charAt(begin)) { return strs[0].substring(0, begin); } } } return strs[0]; } public static void main(String[] args) { String[] strs = {\"aa\", \"a\"}; Solution solution = new Solution(); String longestCommonPrefix = solution.longestCommonPrefix(strs); System.out.println(longestCommonPrefix); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0014-longest-common-prefix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0015-3sum/","text":"15. 3Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c \u4f7f\u5f97 a + b + c = 0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c \u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 1], [-1, -1, 2] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 15. 3Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 15. \u4e09\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u201c\u4e24\u6570\u4e4b\u548c\u201d\u7684\u601d\u8def\u6765\u89e3\u51b3\u201c\u4e09\u6570\u4e4b\u548c\u201d\uff0c\u4f46\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u53bb\u9664\u91cd\u590d\uff0c\u56e0\u6b64\u5728\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6570\u7ec4\u5143\u7d20\u6392\u5e8f\u3002\u6392\u5e8f\u4ee5\u540e\uff0c\u6211\u4eec\u5bf9\u6570\u7ec4\u64cd\u4f5c\u5c31\u6bd4\u65e0\u5e8f\u8981\u65b9\u4fbf\u5f97\u591a\u3002 \u5177\u4f53\u7684\u6280\u5de7\u6211\u4eec\u5c55\u793a\u5728\u4e24\u4e2a\u53c2\u8003\u89e3\u7b54\u4e2d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python \u5199\u6cd5\uff1a class Solution(object): def threeSum(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" res = [] nums.sort() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # \u7528\u6307\u9488\u5bf9\u649e\u7684\u65b9\u5f0f l = i + 1 r = len(nums) - 1 # \u4e0d\u80fd\u7b49\u4e8e\uff0c\u7b49\u4e8e\u5c31\u53d8\u6210\u53d6\u4e00\u6837\u7684\u6570\u4e86 while l < r: s = nums[i] + nums[l] + nums[r] if s > 0: r -= 1 elif s < 0: l += 1 else: res.append([nums[i], nums[l], nums[r]]) # \u6ce8\u610f\uff1a\u8fd9\u4e00\u6b65\u5728\u53bb\u91cd\uff0c\u662f\u7b2c\u4e00\u79cd\u89e3\u6cd5 set \u505a\u4e0d\u5230\u7684 while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 return res if __name__ == '__main__': nums = [-2, 0, 0, 2, 2] solution = Solution() result = solution.threeSum(nums) print(result) Java \u5199\u6cd5\uff1a import java.util.*; public class Solution { public List<List<Integer>> threeSum(int[] nums) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 3) { return res; } Arrays.sort(nums); // \u4e3a\u4e86\u5e94\u5bf9\u4f18\u5316\u70b9 1 \u800c\u5bf9\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u7684\u5904\u7406 if (nums[0] == 0 && nums[len - 1] == 0) { List<Integer> threeSum = new ArrayList<>(); threeSum.add(0); threeSum.add(0); threeSum.add(0); res.add(threeSum); return res; } // \u6ce8\u610f\u5206\u6790\u8fb9\u754c\u6761\u4ef6 // 1\u3001\u6700\u591a\u53ea\u80fd\u5230\u5012\u6570\u7b2c 3 \u4f4d // \u5982\u679c\u5168\u90e8\u662f 0 \uff0c\u5176\u5b9e\u4e5f\u7b26\u5408\u9898\u610f\uff0c\u4f46\u662f\u5982\u679c\u6392\u5e8f\u4ee5\u540e\uff0c\u7b2c 1 \u4e2a\u6570\u90fd\u5927\u4e8e\u96f6\uff0c\u80af\u5b9a\u4e0d\u662f\u89e3 for (int i = 0; i < len - 2 && nums[i] <= 0; i++) { if (i > 0 && nums[i] == nums[i - 1]) { continue; } // target \u4e00\u5b9a >= 0 int target = -nums[i]; int l = i + 1; int r = len - 1; while (l < r) { // \u4f18\u5316\u70b91\uff1a\u5982\u679c\u53f3\u8fb9\u7684\u6570\u90fd\u5c0f\u4e8e 0 \u4e86\uff0c\u5de6\u8fb9\u7684\u6570\u4e5f\u4e00\u5b9a\u5c0f\u4e8e 0 // \u5b83\u4eec\u7684\u548c\u5c31\u4e0d\u4f1a\u5927\u4e8e 0 if (nums[r] < 0) { break; } int sum = nums[l] + nums[r]; if (sum > target) { r--; } else if (sum < target) { l++; } else { assert sum == target; // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2}; if (l > (i + 1) && nums[l] == nums[l - 1]) { // \u6b64\u65f6 nums[r] == nums[r + 1] \u4e5f\u4e00\u5b9a\u6210\u7acb l++; r--; continue; } List<Integer> threeSum = new ArrayList<>(); threeSum.add(nums[i]); threeSum.add(nums[l]); threeSum.add(nums[r]); res.add(threeSum); l++; r--; } } } return res; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {}; // int[] nums = {-1, 0, 1, 2, -1, -4}; List<List<Integer>> threeSum = solution.threeSum(nums); System.out.println(threeSum); } } Java \u5199\u6cd5\uff1a import java.util.*; public class Solution2 { // \u65f6\u95f4\u590d\u6742\u5ea6 : O(n^2); // \u7a7a\u95f4\u590d\u6742\u5ea6 : O(n); /** * Edward \u8001\u5e08\u63d0\u4f9b\u7684\u89e3\u6cd5 */ public List<List<Integer>> threeSum(int[] nums) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 3) { return res; } Arrays.sort(nums); for (int i = 0; i < len - 2; i++) { // \u907f\u514d {-1, -1, -1, 1, 2, 3, 4} \u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0 if (i > 0 && nums[i] == nums[i - 1]) { continue; } int low = i + 1; int high = len - 1; int target = -nums[i]; while (low < high) { int sum = nums[low] + nums[high]; if (sum == target) { res.add(Arrays.asList(nums[i], nums[low], nums[high])); // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2}; while (low < high && nums[low] == nums[low + 1]) { low++; } while (low < high && nums[high] == nums[high - 1]) { high--; } low++; high--; } else if (sum < target) { low++; } else { high--; } } } return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int[] nums = {-2, 0, 0, 2, 2}; List<List<Integer>> threeSum = solution2.threeSum(nums); System.out.println(threeSum); } } \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 two sum \u7684\u601d\u8def\u89e3\u51b3\uff0c\u8981\u6ce8\u610f\u53bb\u91cd\u95ee\u9898\u3002 class Solution(object): # \u6392\u5e8f\u53ef\u4ee5\u53bb\u6389 -4 \u4f46\u662f\u4e0d\u80fd\u628a\u540e\u9762\u91cd\u590d\u7684 2 \u53bb\u6389 # [-4,-4,2,2] def threeSum(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" if len(nums) < 3: return [] nums.sort() if nums[0] == nums[-1] == 0: return [[0, 0, 0]] res = set() # \u6700\u540e\u4e24\u4e2a\u6570\u5c31\u6ca1\u6709\u5fc5\u8981\u4f5c\u4e3a\u904d\u5386\u7684\u8d77\u70b9\u4e86 for index, one in enumerate(nums[:-2]): # \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\uff0c\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 if index >= 1 and nums[index] == nums[index - 1]: continue s = set() for two in nums[index + 1:]: if two not in s: s.add(-one - two) else: # \u627e\u5230\u4e86\u4e00\u4e2a\u89e3 res.add((one, two, -one - two)) return list(map(list, res)) if __name__ == '__main__': nums = [-2, 0, 0, 2, 2] solution = Solution() result = solution.threeSum(nums) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0015-3sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"15. 3Sum"},{"location":"leetcode-0015-3sum/#15-3sum","text":"","title":"15. 3Sum"},{"location":"leetcode-0015-3sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c \u4f7f\u5f97 a + b + c = 0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c \u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 1], [-1, -1, 2] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 15. 3Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 15. \u4e09\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0015-3sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u201c\u4e24\u6570\u4e4b\u548c\u201d\u7684\u601d\u8def\u6765\u89e3\u51b3\u201c\u4e09\u6570\u4e4b\u548c\u201d\uff0c\u4f46\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u53bb\u9664\u91cd\u590d\uff0c\u56e0\u6b64\u5728\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6570\u7ec4\u5143\u7d20\u6392\u5e8f\u3002\u6392\u5e8f\u4ee5\u540e\uff0c\u6211\u4eec\u5bf9\u6570\u7ec4\u64cd\u4f5c\u5c31\u6bd4\u65e0\u5e8f\u8981\u65b9\u4fbf\u5f97\u591a\u3002 \u5177\u4f53\u7684\u6280\u5de7\u6211\u4eec\u5c55\u793a\u5728\u4e24\u4e2a\u53c2\u8003\u89e3\u7b54\u4e2d\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0015-3sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0015-3sum/#1","text":"Python \u5199\u6cd5\uff1a class Solution(object): def threeSum(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" res = [] nums.sort() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # \u7528\u6307\u9488\u5bf9\u649e\u7684\u65b9\u5f0f l = i + 1 r = len(nums) - 1 # \u4e0d\u80fd\u7b49\u4e8e\uff0c\u7b49\u4e8e\u5c31\u53d8\u6210\u53d6\u4e00\u6837\u7684\u6570\u4e86 while l < r: s = nums[i] + nums[l] + nums[r] if s > 0: r -= 1 elif s < 0: l += 1 else: res.append([nums[i], nums[l], nums[r]]) # \u6ce8\u610f\uff1a\u8fd9\u4e00\u6b65\u5728\u53bb\u91cd\uff0c\u662f\u7b2c\u4e00\u79cd\u89e3\u6cd5 set \u505a\u4e0d\u5230\u7684 while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 return res if __name__ == '__main__': nums = [-2, 0, 0, 2, 2] solution = Solution() result = solution.threeSum(nums) print(result) Java \u5199\u6cd5\uff1a import java.util.*; public class Solution { public List<List<Integer>> threeSum(int[] nums) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 3) { return res; } Arrays.sort(nums); // \u4e3a\u4e86\u5e94\u5bf9\u4f18\u5316\u70b9 1 \u800c\u5bf9\u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\u7684\u5904\u7406 if (nums[0] == 0 && nums[len - 1] == 0) { List<Integer> threeSum = new ArrayList<>(); threeSum.add(0); threeSum.add(0); threeSum.add(0); res.add(threeSum); return res; } // \u6ce8\u610f\u5206\u6790\u8fb9\u754c\u6761\u4ef6 // 1\u3001\u6700\u591a\u53ea\u80fd\u5230\u5012\u6570\u7b2c 3 \u4f4d // \u5982\u679c\u5168\u90e8\u662f 0 \uff0c\u5176\u5b9e\u4e5f\u7b26\u5408\u9898\u610f\uff0c\u4f46\u662f\u5982\u679c\u6392\u5e8f\u4ee5\u540e\uff0c\u7b2c 1 \u4e2a\u6570\u90fd\u5927\u4e8e\u96f6\uff0c\u80af\u5b9a\u4e0d\u662f\u89e3 for (int i = 0; i < len - 2 && nums[i] <= 0; i++) { if (i > 0 && nums[i] == nums[i - 1]) { continue; } // target \u4e00\u5b9a >= 0 int target = -nums[i]; int l = i + 1; int r = len - 1; while (l < r) { // \u4f18\u5316\u70b91\uff1a\u5982\u679c\u53f3\u8fb9\u7684\u6570\u90fd\u5c0f\u4e8e 0 \u4e86\uff0c\u5de6\u8fb9\u7684\u6570\u4e5f\u4e00\u5b9a\u5c0f\u4e8e 0 // \u5b83\u4eec\u7684\u548c\u5c31\u4e0d\u4f1a\u5927\u4e8e 0 if (nums[r] < 0) { break; } int sum = nums[l] + nums[r]; if (sum > target) { r--; } else if (sum < target) { l++; } else { assert sum == target; // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2}; if (l > (i + 1) && nums[l] == nums[l - 1]) { // \u6b64\u65f6 nums[r] == nums[r + 1] \u4e5f\u4e00\u5b9a\u6210\u7acb l++; r--; continue; } List<Integer> threeSum = new ArrayList<>(); threeSum.add(nums[i]); threeSum.add(nums[l]); threeSum.add(nums[r]); res.add(threeSum); l++; r--; } } } return res; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {}; // int[] nums = {-1, 0, 1, 2, -1, -4}; List<List<Integer>> threeSum = solution.threeSum(nums); System.out.println(threeSum); } } Java \u5199\u6cd5\uff1a import java.util.*; public class Solution2 { // \u65f6\u95f4\u590d\u6742\u5ea6 : O(n^2); // \u7a7a\u95f4\u590d\u6742\u5ea6 : O(n); /** * Edward \u8001\u5e08\u63d0\u4f9b\u7684\u89e3\u6cd5 */ public List<List<Integer>> threeSum(int[] nums) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 3) { return res; } Arrays.sort(nums); for (int i = 0; i < len - 2; i++) { // \u907f\u514d {-1, -1, -1, 1, 2, 3, 4} \u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0 if (i > 0 && nums[i] == nums[i - 1]) { continue; } int low = i + 1; int high = len - 1; int target = -nums[i]; while (low < high) { int sum = nums[low] + nums[high]; if (sum == target) { res.add(Arrays.asList(nums[i], nums[low], nums[high])); // \u5904\u7406\u7279\u4f8b int[] nums = {-2, 0, 0, 2, 2}; while (low < high && nums[low] == nums[low + 1]) { low++; } while (low < high && nums[high] == nums[high - 1]) { high--; } low++; high--; } else if (sum < target) { low++; } else { high--; } } } return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int[] nums = {-2, 0, 0, 2, 2}; List<List<Integer>> threeSum = solution2.threeSum(nums); System.out.println(threeSum); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0015-3sum/#_4","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0015-3sum/#2-two-sum","text":"class Solution(object): # \u6392\u5e8f\u53ef\u4ee5\u53bb\u6389 -4 \u4f46\u662f\u4e0d\u80fd\u628a\u540e\u9762\u91cd\u590d\u7684 2 \u53bb\u6389 # [-4,-4,2,2] def threeSum(self, nums): \"\"\" :type nums: List[int] :rtype: List[List[int]] \"\"\" if len(nums) < 3: return [] nums.sort() if nums[0] == nums[-1] == 0: return [[0, 0, 0]] res = set() # \u6700\u540e\u4e24\u4e2a\u6570\u5c31\u6ca1\u6709\u5fc5\u8981\u4f5c\u4e3a\u904d\u5386\u7684\u8d77\u70b9\u4e86 for index, one in enumerate(nums[:-2]): # \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\uff0c\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 if index >= 1 and nums[index] == nums[index - 1]: continue s = set() for two in nums[index + 1:]: if two not in s: s.add(-one - two) else: # \u627e\u5230\u4e86\u4e00\u4e2a\u89e3 res.add((one, two, -one - two)) return list(map(list, res)) if __name__ == '__main__': nums = [-2, 0, 0, 2, 2] solution = Solution() result = solution.threeSum(nums) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0015-3sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 two sum \u7684\u601d\u8def\u89e3\u51b3\uff0c\u8981\u6ce8\u610f\u53bb\u91cd\u95ee\u9898\u3002"},{"location":"leetcode-0016-3sum-closest/","text":"16. 3Sum Closest \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c \u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u627e\u51fa nums \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e target \u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u6570\u7ec4 nums = [-1\uff0c2\uff0c1\uff0c-4], \u548c target = 1. \u4e0e target \u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\u7684\u548c\u4e3a 2. (-1 + 2 + 1 = 2). \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 16. 3Sum Closest \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\uff0c\u524d\u63d0\u662f\u8981\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python \u5199\u6cd5\uff1a class Solution(object): def threeSumClosest(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" if len(nums) < 3: return [] # \u521d\u59cb\u5316 diff = float('inf') nums.sort() for index in range(len(nums) - 2): if index > 0 and nums[index] == nums[index - 1]: continue l = index + 1 r = len(nums) - 1 while l < r: s = nums[index] + nums[l] + nums[r] if abs(s - target) < diff: diff = abs(s - target) res = s if s > target: r -= 1 elif s < target: l += 1 else: return target return res if __name__ == '__main__': nums = [-1, 0, 1, 1, 55] target = 3 solution = Solution() result = solution.threeSumClosest(nums, target) print(result) Java \u5199\u6cd5\uff1a import java.util.Arrays; /** * \u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e */ public class Solution { public int threeSumClosest(int[] nums, int target) { int len = nums.length; if (len < 3) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u521d\u59cb\u5316 int diff = Integer.MAX_VALUE; int res = nums[0] + nums[1] + nums[len - 1]; // \u6392\u5e8f\u5f88\u5173\u952e Arrays.sort(nums); // len-3 len-2 len-1 for (int i = 0; i < len - 2; i++) { int left = i + 1; int right = len - 1; while (left < right) { int sum = nums[i] + nums[left] + nums[right]; if (sum > target) { right--; } else if (sum < target) { left++; } else { return target; } if (Math.abs(sum - target) < diff) { diff = Math.abs(sum - target); res = sum; } } } return res; } public static void main(String[] args) { int[] nums = {-1, 2, 1, -4}; int target = 1; Solution solution = new Solution(); int threeSumClosest = solution.threeSumClosest(nums, target); System.out.println(threeSumClosest); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0016-3sum-closest \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"16. 3Sum Closest"},{"location":"leetcode-0016-3sum-closest/#16-3sum-closest","text":"","title":"16. 3Sum Closest"},{"location":"leetcode-0016-3sum-closest/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c \u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u627e\u51fa nums \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e target \u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u6570\u7ec4 nums = [-1\uff0c2\uff0c1\uff0c-4], \u548c target = 1. \u4e0e target \u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\u7684\u548c\u4e3a 2. (-1 + 2 + 1 = 2). \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 16. 3Sum Closest \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0016-3sum-closest/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e\uff0c\u524d\u63d0\u662f\u8981\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0016-3sum-closest/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0016-3sum-closest/#1","text":"Python \u5199\u6cd5\uff1a class Solution(object): def threeSumClosest(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" if len(nums) < 3: return [] # \u521d\u59cb\u5316 diff = float('inf') nums.sort() for index in range(len(nums) - 2): if index > 0 and nums[index] == nums[index - 1]: continue l = index + 1 r = len(nums) - 1 while l < r: s = nums[index] + nums[l] + nums[r] if abs(s - target) < diff: diff = abs(s - target) res = s if s > target: r -= 1 elif s < target: l += 1 else: return target return res if __name__ == '__main__': nums = [-1, 0, 1, 1, 55] target = 3 solution = Solution() result = solution.threeSumClosest(nums, target) print(result) Java \u5199\u6cd5\uff1a import java.util.Arrays; /** * \u8fd9\u9053\u9898\u548c\u4e8c\u5206\u67e5\u627e\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u53cc\u6307\u9488\u5bf9\u649e */ public class Solution { public int threeSumClosest(int[] nums, int target) { int len = nums.length; if (len < 3) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u521d\u59cb\u5316 int diff = Integer.MAX_VALUE; int res = nums[0] + nums[1] + nums[len - 1]; // \u6392\u5e8f\u5f88\u5173\u952e Arrays.sort(nums); // len-3 len-2 len-1 for (int i = 0; i < len - 2; i++) { int left = i + 1; int right = len - 1; while (left < right) { int sum = nums[i] + nums[left] + nums[right]; if (sum > target) { right--; } else if (sum < target) { left++; } else { return target; } if (Math.abs(sum - target) < diff) { diff = Math.abs(sum - target); res = sum; } } } return res; } public static void main(String[] args) { int[] nums = {-1, 2, 1, -4}; int target = 1; Solution solution = new Solution(); int threeSumClosest = solution.threeSumClosest(nums, target); System.out.println(threeSumClosest); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0016-3sum-closest \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/","text":"17. Letter Combinations of a Phone Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a \"23\" \u8f93\u51fa\uff1a [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 17. Letter Combinations of a Phone Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002 \u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a 1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002 2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002 3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002 \u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 \u601d\u8003\u603b\u7ed3\uff1a 1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b 2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b 3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b 4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f digits.charAt(index) - '0' \uff1b 5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a assert c >= '0' || c <= '9' || c != '1'; \uff1b 6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b 7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b 8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; public class Solution { private List<String> res = new ArrayList<>(); private String[] digitsMap = { \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\" }; private void findCombinations(String digits, int begin, String pre) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (begin == digits.length()) { res.add(pre); return; } String nextStr = digitsMap[digits.charAt(begin) - '0']; // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af for (int i = 0; i < nextStr.length(); i++) { findCombinations(digits, begin + 1, pre + nextStr.charAt(i)); } } public List<String> letterCombinations(String digits) { if (digits.length() == 0) { return res; } findCombinations(digits, 0, \"\"); return res; } public static void main(String[] args) { Solution solution = new Solution(); List<String> letterCombinations = solution.letterCombinations(\"23\"); System.out.println(letterCombinations); } }","title":"17. Letter Combinations of a Phone Number"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/#17-letter-combinations-of-a-phone-number","text":"","title":"17. Letter Combinations of a Phone Number"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a \"23\" \u8f93\u51fa\uff1a [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 17. Letter Combinations of a Phone Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u8fdb\u884c\u641c\u7d22\u6c42\u89e3\u3002 \u5bf9\u4e8e\u95ee\u9898\u7684\u8003\u8651\uff1a 1\u3001\u5b57\u7b26\u4e32\u7684\u5408\u6cd5\u6027\uff08\u80fd\u51fa\u73b0\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u201c@\u201d\u53ef\u4ee5\u5417\uff1f\u201c1\u201d\u53ef\u4ee5\u5417\uff1f\uff09\uff1a\u4e0d\u53ef\u4ee5\uff0c\u53ea\u80fd\u51fa\u73b0 2\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3002 2\u3001\u7a7a\u5b57\u7b26\u4e32\uff08\u5982\u679c\u7ed9\u51fa\u7684\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ec0\u4e48\uff09\uff1a\u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u5373\u5143\u7d20\u4e2a\u6570\u4e3a 0 \u7684\u5217\u8868\u3002 3\u3001\u591a\u4e2a\u89e3\u7684\u987a\u5e8f\uff1f\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5bf9\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002 \u6211\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u50cf\u6570\u5b66\u95ee\u9898\u4e2d\u7684\u4e58\u6cd5\u8ba1\u6570\u539f\u7406\uff1a\u7b2c 1 \u6b65\uff0c\u8003\u8651\u6570\u5b57 2 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\uff1b\u7b2c 2 \u6b65\uff0c\u8003\u8651 3 \u80fd\u8868\u8fbe\u7684\u4e09\u4e2a\u5b57\u6bcd\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7528\u591a\u91cd\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u5728\u6b65\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5faa\u73af\u5c31\u53d8\u5f97\u4f4e\u6548\u4e86\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u56de\u6eaf\u8fd9\u4e2a\u6280\u5de7\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 \u601d\u8003\u603b\u7ed3\uff1a 1\u3001\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u518d\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684 letterCombinations \u51fd\u6570\u4e2d\u4e66\u5199\u5462\uff1f\u9012\u5f52\u8fc7\u7a0b\u662f\u628a\u4e00\u4e2a\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u5730\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u7684\u9012\u5f52\u5173\u7cfb\u5e76\u4e0d\u80fd\u7528 letterCombinations \u51fd\u6570\u6765\u63cf\u8ff0\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f7f\u7528 letterCombinations() \u6765\u8868\u8ff0\uff1b 2\u3001\u7ec6\u8282\u8003\u8651\u8981\u5468\u5230\uff1a\u6211\u4eec\u5728\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5ffd\u7565\u8fb9\u754c\u7684\u60c5\u51b5\u7684\u5904\u7406\uff1b\u540c\u65f6\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u7279\u522b\u662f\u5bf9\u8fb9\u754c\u7684\u60c5\u51b5\uff1b 3\u3001\u5982\u4f55\u8bbe\u8ba1\u9012\u5f52\u65b9\u6cd5\u5176\u5b9e\u662f\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\uff0c\u53c2\u6570\u7684\u8bbe\u5b9a\u4e5f\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u65e0\u975e\u662f\u5f04\u6e05\u695a\u4e4b\u524d\u662f\u4ec0\u4e48\uff0c\u5f53\u524d\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u52a0\u5230\u4e4b\u524d\u7684\uff1b 4\u3001\u5bf9\u4e8e\u6570\u5b57\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f digits.charAt(index) - '0' \uff1b 5\u3001\u4e25\u683c\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd8\u8981\u5bf9\u6240\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u7684\u5408\u6cd5\u6027\u4f5c\u5224\u65ad\uff0c\u4f8b\u5982\uff1a assert c >= '0' || c <= '9' || c != '1'; \uff1b 6\u3001findCombination \u51fd\u6570\u4e2d\u7684 digitsMap \u53ef\u4ee5\u5199\u6210\u6210\u5458\u53d8\u91cf\uff1b 7\u3001\u8fd9\u91cc\u56e0\u4e3a String \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u5b9e\u90fd\u662f\u65b0\u7684\u5bf9\u8c61\u4f20\u9012\u4e0b\u53bb\uff0c\u8fd9\u4e00\u70b9\u5728\u6211\u4eec\u540e\u7eed\u7684\u7ec3\u4e60\u4e2d\u8981\u7559\u610f\uff08\u8fd9\u53e5\u8bdd\u8868\u8fbe\u6bd4\u8f83\u9690\u6666\uff0c\u8981\u6df1\u523b\u7406\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u8fd8\u8981\u505a\u540e\u9762\u7684\u7ec3\u4e60\uff0c\u5f53 result \u662f\u5176\u5b83\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684 add \u64cd\u4f5c\u4e86\uff09\uff1b 8\u3001\u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u7684\u7ed3\u679c\u662f\u5f88\u6574\u9f50\u7684\uff0c\u5728\u540e\u5e8f\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u9012\u5f52\u56de\u6eaf\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e00\u79cd\u4f53\u73b0\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0017-letter-combinations-of-a-phone-number/#1","text":"import java.util.ArrayList; import java.util.List; public class Solution { private List<String> res = new ArrayList<>(); private String[] digitsMap = { \" \", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\" }; private void findCombinations(String digits, int begin, String pre) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (begin == digits.length()) { res.add(pre); return; } String nextStr = digitsMap[digits.charAt(begin) - '0']; // \u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u7ed3\u5408\u9898\u610f\uff0c\u56e0\u4e3a\u90a3\u4e2a\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8981\u8003\u8651\u5230\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5faa\u73af for (int i = 0; i < nextStr.length(); i++) { findCombinations(digits, begin + 1, pre + nextStr.charAt(i)); } } public List<String> letterCombinations(String digits) { if (digits.length() == 0) { return res; } findCombinations(digits, 0, \"\"); return res; } public static void main(String[] args) { Solution solution = new Solution(); List<String> letterCombinations = solution.letterCombinations(\"23\"); System.out.println(letterCombinations); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0018-4sum/","text":"18. 4Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0c b\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 18. 4Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 18. \u56db\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u91c7\u7528\u4e86\u201c\u4e09\u6570\u4e4b\u548c\u201d\u7684\u89e3\u6cd5\uff0c\u5728\u5916\u9762\u591a\u5957\u4e86\u4e00\u5c42\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { // time : O(n^3); // space : O(n); public List<List<Integer>> fourSum(int[] nums, int target) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 4) { return res; } Arrays.sort(nums); // len-4 len-3 len-2 len-1 for (int i = 0; i < len - 3; i++) { // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 1\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 if (i > 0 && nums[i] == nums[i - 1]) { continue; } // len-3 len-2 len-1 for (int j = i + 1; j < len - 2; j++) { // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 2\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 if (j > i + 1 && nums[j] == nums[j - 1]) { continue; } // \u63a5\u4e0b\u6765\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 int left = j + 1; int right = len - 1; while (left < right) { int sum = nums[i] + nums[j] + nums[left] + nums[right]; if (sum == target) { List<Integer> oneSolution = new ArrayList<>(); oneSolution.add(nums[i]); oneSolution.add(nums[j]); oneSolution.add(nums[left]); oneSolution.add(nums[right]); res.add(oneSolution); // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 3\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 while (left < right && nums[left] == nums[left + 1]) { left++; } while (left < right && nums[right] == nums[right - 1]) { right--; } // \u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86 left++; right--; } else if (sum < target) { left++; } else { right--; } } } } return res; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 0, -1, 0, -2, 2}; int target = 0; List<List<Integer>> fourSum = solution.fourSum(nums, target); System.out.println(fourSum); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0018-4sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"18. 4Sum"},{"location":"leetcode-0018-4sum/#18-4sum","text":"","title":"18. 4Sum"},{"location":"leetcode-0018-4sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0c b\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 18. 4Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 18. \u56db\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0018-4sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u91c7\u7528\u4e86\u201c\u4e09\u6570\u4e4b\u548c\u201d\u7684\u89e3\u6cd5\uff0c\u5728\u5916\u9762\u591a\u5957\u4e86\u4e00\u5c42\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0018-4sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0018-4sum/#1","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { // time : O(n^3); // space : O(n); public List<List<Integer>> fourSum(int[] nums, int target) { List<List<Integer>> res = new ArrayList<>(); int len = nums.length; if (len < 4) { return res; } Arrays.sort(nums); // len-4 len-3 len-2 len-1 for (int i = 0; i < len - 3; i++) { // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 1\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 if (i > 0 && nums[i] == nums[i - 1]) { continue; } // len-3 len-2 len-1 for (int j = i + 1; j < len - 2; j++) { // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 2\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 if (j > i + 1 && nums[j] == nums[j - 1]) { continue; } // \u63a5\u4e0b\u6765\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 int left = j + 1; int right = len - 1; while (left < right) { int sum = nums[i] + nums[j] + nums[left] + nums[right]; if (sum == target) { List<Integer> oneSolution = new ArrayList<>(); oneSolution.add(nums[i]); oneSolution.add(nums[j]); oneSolution.add(nums[left]); oneSolution.add(nums[right]); res.add(oneSolution); // \u8df3\u8fc7\u91cd\u590d\u7684\u89e3 3\uff08\u4ee5\u6392\u5e8f\u4e3a\u524d\u63d0\uff09 while (left < right && nums[left] == nums[left + 1]) { left++; } while (left < right && nums[right] == nums[right - 1]) { right--; } // \u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86 left++; right--; } else if (sum < target) { left++; } else { right--; } } } } return res; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 0, -1, 0, -2, 2}; int target = 0; List<List<Integer>> fourSum = solution.fourSum(nums, target); System.out.println(fourSum); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0018-4sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/","text":"19. Remove Nth Node From End of List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5 , \u548c n = 2 . \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5 . \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 19. Remove Nth Node From End of List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; // \u8981\u8d70 n \u6b65 while (curNode != null && n != -1) { curNode = curNode.next; n--; } ListNode pre = dummyNode; while (curNode != null) { pre = pre.next; curNode = curNode.next; } // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9 // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 ListNode deleteNode = pre.next; pre.next = deleteNode.next; deleteNode.next = null; return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2}; int n = 2; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n); System.out.println(removeNthFromEnd); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"19. Remove Nth Node From End of List"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/#19-remove-nth-node-from-end-of-list","text":"","title":"19. Remove Nth Node From End of List"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5 , \u548c n = 2 . \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5 . \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 19. Remove Nth Node From End of List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u53ea\u8981\u638c\u63e1\u4e86\u5982\u4f55\u627e\u5230\u8ddd\u79bb\u672b\u5c3e n \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fb9\u754c\u503c\u7684\u9009\u53d6\uff0c\u5176\u5b9e\u5f80\u5f80\u6211\u4eec\u8ba4\u4e3a\u7684\u503c\u4e0e\u6b63\u786e\u503c\u65e0\u975e\u5c31\u662f +1 \u6216\u8005 -1 \uff0c\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u7c97\u5fc3\u51fa\u9519\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \u53e6\u5916\uff0c\u6d89\u53ca\u94fe\u8868\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u4ee5\u51cf\u5c11\u8ba8\u8bba\u7684\u53ef\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0019-remove-nth-node-from-end-of-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; // \u8981\u8d70 n \u6b65 while (curNode != null && n != -1) { curNode = curNode.next; n--; } ListNode pre = dummyNode; while (curNode != null) { pre = pre.next; curNode = curNode.next; } // \u8d70\u5230\u8fd9\u91cc curNode == null \uff0c\u5373 \u6765\u5230\u4e86\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9 // \u5e76\u4e14 pre \u6765\u5230\u4e86\u8981\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 ListNode deleteNode = pre.next; pre.next = deleteNode.next; deleteNode.next = null; return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2}; int n = 2; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode removeNthFromEnd = solution.removeNthFromEnd(head, n); System.out.println(removeNthFromEnd); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0019-remove-nth-node-from-end-of-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0020-valid-parentheses/","text":"20. Valid Parentheses \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '(' \uff0c ')' \uff0c '{' \uff0c '}' \uff0c '[' \uff0c ']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"()\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"()[]{}\" \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: \"(]\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: \"([)]\" \u8f93\u51fa: false \u793a\u4f8b 5: \u8f93\u5165: \"{[]}\" \u8f93\u51fa: true \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 20. Valid Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 20. \u6709\u6548\u7684\u62ec\u53f7 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"20. Valid Parentheses"},{"location":"leetcode-0020-valid-parentheses/#20-valid-parentheses","text":"","title":"20. Valid Parentheses"},{"location":"leetcode-0020-valid-parentheses/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '(' \uff0c ')' \uff0c '{' \uff0c '}' \uff0c '[' \uff0c ']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"()\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"()[]{}\" \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: \"(]\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: \"([)]\" \u8f93\u51fa: false \u793a\u4f8b 5: \u8f93\u5165: \"{[]}\" \u8f93\u51fa: true \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 20. Valid Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 20. \u6709\u6548\u7684\u62ec\u53f7 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0020-valid-parentheses/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0020-valid-parentheses/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0020-valid-parentheses/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0021-merge-two-sorted-lists/","text":"21. Merge Two Sorted Lists \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->4, 1->3->4 \u8f93\u51fa\uff1a 1->1->2->3->4->4 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 21. Merge Two Sorted Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002 \u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002 \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709 \u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode dummyNode = new ListNode(-1); ListNode p1 = l1; ListNode p2 = l2; ListNode curNode = dummyNode; while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83 if (p1.val < p2.val) { curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc p1 = p1.next; } else { curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc p2 = p2.next; } curNode = curNode.next; } // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null if (p1 == null) { curNode.next = p2; } if (p2 == null) { curNode.next = p1; } return dummyNode.next; } public static void main(String[] args) { int[] nums1 = {1, 3, 5, 7}; int[] nums2 = {2, 4, 6}; ListNode l1 = new ListNode(nums1); ListNode l2 = new ListNode(nums2); Solution solution = new Solution(); ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2); System.out.println(mergeTwoLists); } } \u53c2\u8003\u89e3\u7b542 // \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210 public class Solution2 { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6 if (l1 == null) { return l2; } if (l2 == null) { return l1; } // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb ListNode mergeNode; if (l1.val < l2.val) { mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762 mergeNode.next = mergeTwoLists(l1.next, l2); } else { mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762 mergeNode.next = mergeTwoLists(l1, l2.next); } return mergeNode; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"21. Merge Two Sorted Lists"},{"location":"leetcode-0021-merge-two-sorted-lists/#21-merge-two-sorted-lists","text":"","title":"21. Merge Two Sorted Lists"},{"location":"leetcode-0021-merge-two-sorted-lists/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a 1->2->4, 1->3->4 \u8f93\u51fa\uff1a 1->1->2->3->4->4 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 21. Merge Two Sorted Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0021-merge-two-sorted-lists/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u770b\u51fa\u6307\u9488\u7684\u6307\u5411\uff0c\u987a\u5229\u5730\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\u3002 \u601d\u8def1\uff1a\u7a7f\u9488\u5f15\u7ebf\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\u3002 \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff0c\u8ba9\u9012\u5f52\u65b9\u6cd5\u6765\u5904\u7406\u662f\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u7c7b\u4f3c\u7684\u7ec3\u4e60\u8fd8\u6709 \u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0021-merge-two-sorted-lists/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0021-merge-two-sorted-lists/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode dummyNode = new ListNode(-1); ListNode p1 = l1; ListNode p2 = l2; ListNode curNode = dummyNode; while (p1 != null && p2 != null) { // \u4e24\u8005\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u8fdb\u884c\u6bd4\u8f83 if (p1.val < p2.val) { curNode.next = p1; // \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc p1 = p1.next; } else { curNode.next = p2;// \u6307\u9488\u4fee\u6539\u53d1\u751f\u5728\u8fd9\u91cc p2 = p2.next; } curNode = curNode.next; } // \u8df3\u51fa\u5faa\u73af\u662f\u56e0\u4e3a p1 == null \u6216\u8005 p2 == null if (p1 == null) { curNode.next = p2; } if (p2 == null) { curNode.next = p1; } return dummyNode.next; } public static void main(String[] args) { int[] nums1 = {1, 3, 5, 7}; int[] nums2 = {2, 4, 6}; ListNode l1 = new ListNode(nums1); ListNode l2 = new ListNode(nums2); Solution solution = new Solution(); ListNode mergeTwoLists = solution.mergeTwoLists(l1, l2); System.out.println(mergeTwoLists); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0021-merge-two-sorted-lists/#2","text":"// \u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u5b8c\u6210 public class Solution2 { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6 if (l1 == null) { return l2; } if (l2 == null) { return l1; } // \u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u5982\u4f55\u5efa\u7acb\u548c\u539f\u59cb\u89c4\u6a21\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb ListNode mergeNode; if (l1.val < l2.val) { mergeNode = l1; // l1 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762 mergeNode.next = mergeTwoLists(l1.next, l2); } else { mergeNode = l2; // l2 \u88ab\u9009\u51fa\uff0c\u8c01\u5c0f\u8c01\u5728\u524d\u9762 mergeNode.next = mergeTwoLists(l1, l2.next); } return mergeNode; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0021-merge-two-sorted-lists \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0022-generate-parentheses/","text":"22. Generate Parentheses \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa n = 3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a [ \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 22. Generate Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 22. \u62ec\u53f7\u751f\u6210 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u7801\u4f1a\u7b80\u6d01\u4e00\u4e9b\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u70b9\u7ed5\u3002 import java.util.ArrayList; import java.util.List; public class Solution { public List<String> generateParenthesis(int n) { List<String> res = new ArrayList<>(); if (n == 0) { return res; } help(\"\", n, n, res); return res; } /** * @param curString \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u7ed3\u679c * @param left \u5de6\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389 * @param right \u53f3\u8fb9\u7684\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389 * @param res \u7ed3\u679c\u96c6 */ private void help(String curString, int left, int right, List<String> res) { if (left == 0 && right == 0) { res.add(curString); return; } // \u8fd8\u6709\u5de6\u62ec\u53f7\u6ca1\u6709\u7528\u6389\uff0c\u4e8e\u662f\u8003\u8651\u7528\u6389\u5de6\u62ec\u53f7 if (left > 0) { help(curString + \"(\", left - 1, right, res); } // \u5de6\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u6bd4\u53f3\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u5c11 // \u4e5f\u5c31\u662f\u8bf4\uff0c\u5de6\u8fb9\u62ec\u53f7\u7528\u5f97\u591a\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u53f3\u8fb9\u62ec\u53f7 if (left < right) { help(curString + \")\", left, right - 1, res); } } } \u53c2\u8003\u89e3\u7b542\uff1a\u56de\u6eaf\u7684\u8fc7\u7a0b\u8bed\u4e49\u660e\u786e\u3002 import java.util.ArrayList; import java.util.List; public class Solution2 { public List<String> generateParenthesis(int n) { List<String> res = new ArrayList<>(); if (n == 0) { return res; } helper(\"\", 0, 0, n, res); return res; } /** * @param curString * @param left \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u5de6\u8fb9\u62ec\u53f7\u6570\u91cf * @param right \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u53f3\u8fb9\u62ec\u53f7\u6570\u91cf * @param n * @param res */ private void helper(String curString, int left, int right, int n, List<String> res) { if (left == n && right == n) { res.add(curString); return; } if (left < n) { helper(curString + \"(\", left + 1, right, n, res); } // \u5982\u679c\u5de6\u8fb9\u62ec\u53f7\u6bd4\u53f3\u8fb9\u62ec\u53f7\u591a\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a\u53f3\u8fb9\u62ec\u53f7 if (left > right) { helper(curString + \")\", left, right + 1, n, res); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0022-generate-parentheses \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"22. Generate Parentheses"},{"location":"leetcode-0022-generate-parentheses/#22-generate-parentheses","text":"","title":"22. Generate Parentheses"},{"location":"leetcode-0022-generate-parentheses/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa n = 3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a [ \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 22. Generate Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 22. \u62ec\u53f7\u751f\u6210 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0022-generate-parentheses/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0022-generate-parentheses/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0022-generate-parentheses/#1","text":"import java.util.ArrayList; import java.util.List; public class Solution { public List<String> generateParenthesis(int n) { List<String> res = new ArrayList<>(); if (n == 0) { return res; } help(\"\", n, n, res); return res; } /** * @param curString \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u7ed3\u679c * @param left \u5de6\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389 * @param right \u53f3\u8fb9\u7684\u62ec\u53f7\u8fd8\u6709\u51e0\u4e2a\u6ca1\u6709\u7528\u6389 * @param res \u7ed3\u679c\u96c6 */ private void help(String curString, int left, int right, List<String> res) { if (left == 0 && right == 0) { res.add(curString); return; } // \u8fd8\u6709\u5de6\u62ec\u53f7\u6ca1\u6709\u7528\u6389\uff0c\u4e8e\u662f\u8003\u8651\u7528\u6389\u5de6\u62ec\u53f7 if (left > 0) { help(curString + \"(\", left - 1, right, res); } // \u5de6\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u6bd4\u53f3\u8fb9\u62ec\u53f7\u5269\u4f59\u7684\u5c11 // \u4e5f\u5c31\u662f\u8bf4\uff0c\u5de6\u8fb9\u62ec\u53f7\u7528\u5f97\u591a\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u53f3\u8fb9\u62ec\u53f7 if (left < right) { help(curString + \")\", left, right - 1, res); } } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u7801\u4f1a\u7b80\u6d01\u4e00\u4e9b\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u70b9\u7ed5\u3002"},{"location":"leetcode-0022-generate-parentheses/#2","text":"import java.util.ArrayList; import java.util.List; public class Solution2 { public List<String> generateParenthesis(int n) { List<String> res = new ArrayList<>(); if (n == 0) { return res; } helper(\"\", 0, 0, n, res); return res; } /** * @param curString * @param left \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u5de6\u8fb9\u62ec\u53f7\u6570\u91cf * @param right \u5df2\u7ecf\u4f7f\u7528\u6389\u7684\u53f3\u8fb9\u62ec\u53f7\u6570\u91cf * @param n * @param res */ private void helper(String curString, int left, int right, int n, List<String> res) { if (left == n && right == n) { res.add(curString); return; } if (left < n) { helper(curString + \"(\", left + 1, right, n, res); } // \u5982\u679c\u5de6\u8fb9\u62ec\u53f7\u6bd4\u53f3\u8fb9\u62ec\u53f7\u591a\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a\u53f3\u8fb9\u62ec\u53f7 if (left > right) { helper(curString + \")\", left, right + 1, n, res); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0022-generate-parentheses \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u56de\u6eaf\u7684\u8fc7\u7a0b\u8bed\u4e49\u660e\u786e\u3002"},{"location":"leetcode-0023-merge-k-sorted-lists/","text":"23. Merge k Sorted Lists \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 23. Merge k Sorted Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u60f3\u51fa\u89e3\u51b3\u529e\u6cd5\u4e00\u70b9\u90fd\u4e0d\u96be\uff0c\u7531\u4e8e k \u4e2a\u94fe\u8868\u5df2\u7ecf\u662f\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u90a3\u4e48 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u5373\u5e94\u8be5\u6392\u5728\u7b2c 1 \u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u3002\u6211\u4eec\u62ff\u51fa\u8fd9\u4e2a\u7ed3\u70b9\u4ee5\u540e\uff0c\u6b64\u65f6 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u7b2c 2 \u5c0f\u7684\u7ed3\u70b9\uff0c\u5e94\u8be5\u653e\u5728\u7b2c 2 \u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u4f9d\u6b21\u62ff\u51fa\u7ed3\u70b9\uff0c\u5b8c\u6210\u5408\u5e76\u7684\u5de5\u4f5c\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\u3002\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b \uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b \uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002 \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002 \u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a \u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684 \u5206\u6cbb\u601d\u60f3 \u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002 1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b 2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002 \u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002 \u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Comparator; import java.util.PriorityQueue; class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(Integer[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86 s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val)); ListNode dummyNode = new ListNode(-1); ListNode curNode = dummyNode; for (ListNode list : lists) { if (list != null) { // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d priorityQueue.add(list); } } while (!priorityQueue.isEmpty()) { // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f ListNode node = priorityQueue.poll(); // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20 curNode.next = node; // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20 curNode = curNode.next; if (curNode.next != null) { // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d priorityQueue.add(curNode.next); } } return dummyNode.next; } public static void main(String[] args) { Integer[] nums1 = {1, 4, 5}; Integer[] nums2 = {1, 3, 4}; Integer[] nums3 = {2, 6}; ListNode head1 = new ListNode(nums1); ListNode head2 = new ListNode(nums2); ListNode head3 = new ListNode(nums3); ListNode[] lists = new ListNode[3]; lists[0] = head1; lists[1] = head2; lists[2] = head3; Solution solution = new Solution(); ListNode mergeKLists = solution.mergeKLists(lists); System.out.println(mergeKLists); } } \u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a Comparator<ListNode> comparator = (a, b) -> a.val - b.val; \u4e0e Comparator<ListNode> comparator = Comparator.comparingInt(a -> a.val); \u53c2\u8003\u89e3\u7b542 class Solution2 { public ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } return mergeKLists(lists, 0, len - 1); } private ListNode mergeKLists(ListNode[] lists, int l, int r) { // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408 if (l == r) { return lists[l]; } int mid = l + (r - l) / 2; ListNode listNode1 = mergeKLists(lists, l, mid); ListNode listNode2 = mergeKLists(lists, mid + 1, r); // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684 return mergeOfTwoListNode(listNode1, listNode2); } private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) { // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 if (listNode1 == null) { return listNode2; } if (listNode2 == null) { return listNode1; } if (listNode1.val < listNode2.val) { // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898 listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2); return listNode1; } else { // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898 listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next); return listNode2; } } }","title":"23. Merge k Sorted Lists"},{"location":"leetcode-0023-merge-k-sorted-lists/#23-merge-k-sorted-lists","text":"","title":"23. Merge k Sorted Lists"},{"location":"leetcode-0023-merge-k-sorted-lists/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 23. Merge k Sorted Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0023-merge-k-sorted-lists/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6559\u79d1\u4e66\u4e0a\u4f8b\u9898\u7684\u95ee\u9898\u3002\u60f3\u51fa\u89e3\u51b3\u529e\u6cd5\u4e00\u70b9\u90fd\u4e0d\u96be\uff0c\u7531\u4e8e k \u4e2a\u94fe\u8868\u5df2\u7ecf\u662f\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u90a3\u4e48 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u5373\u5e94\u8be5\u6392\u5728\u7b2c 1 \u4e2a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u3002\u6211\u4eec\u62ff\u51fa\u8fd9\u4e2a\u7ed3\u70b9\u4ee5\u540e\uff0c\u6b64\u65f6 k \u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u5934\u7ed3\u70b9\u4e2d val \u6700\u5c0f\u7684\u7ed3\u70b9\u5c31\u662f\u5408\u5e76\u4ee5\u540e\u7684\u94fe\u8868\u4e2d\u7b2c 2 \u5c0f\u7684\u7ed3\u70b9\uff0c\u5e94\u8be5\u653e\u5728\u7b2c 2 \u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u4f9d\u6b21\u62ff\u51fa\u7ed3\u70b9\uff0c\u5b8c\u6210\u5408\u5e76\u7684\u5de5\u4f5c\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u6c42\u89e3\u601d\u8def\u3002\u5047\u8bbe\u6709\u5982\u4e0b\u751f\u6d3b\u60c5\u5883\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u540d\u4f53\u80b2\u8001\u5e08\uff0c\u6709 3 \u4e2a\u73ed\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u597d\u6210\u4e86 3 \u5217\u7eb5\u961f\uff0c\u73b0\u5728\u8981\u628a\u8fd9 3 \u4e2a\u73ed\u7684\u5b66\u751f\u4e5f\u6309\u7167\u8eab\u9ad8\u4ece\u77ee\u5230\u9ad8\u6392\u5217\u4e00\u5217\u7eb5\u961f\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \uff081\uff09\u8ba9\u4e09\u4e2a\u73ed\u7684\u5b66\u751f\u6309\u5217\u7ad9\u5728\u4f60\u7684\u9762\u524d\uff0c\u8fd9\u65f6\u4f60\u80fd\u770b\u5230\u7ad9\u5728\u961f\u9996\u7684\u5b66\u751f\u7684\u5168\u8eab\uff0c\u5176\u4f59\u540c\u5b66\u53ea\u80fd\u770b\u5230\u6bd4\u524d\u9762\u540c\u5b66\u8111\u888b\u9ad8\u51fa\u7684\u90a3\u90e8\u5206\uff1b \uff082\uff09\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u51fa\u5217\u5230\u201c\u961f\u4f0d4\u201d\uff08\u5373\u6211\u4eec\u6700\u7ec8\u8ba4\u4e3a\u6392\u597d\u5e8f\u7684\u961f\u5217\uff09\uff0c\u51fa\u5217\u7684\u8fd9\u4e00\u5217\u7684\u540e\u9762\u7684\u6240\u6709\u540c\u5b66\u90fd\u5411\u524d\u8d70\u4e00\u6b65\uff08\u5176\u5b9e\u8d70\u4e0d\u8d70\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u6bd4\u8f83\u51fa\u7ad9\u5728\u4f60\u9762\u524d\u7684 3 \u4f4d\u5728\u961f\u9996\u7684\u540c\u5b66\u540c\u5b66\u7684\u9ad8\u77ee\u5373\u53ef\uff09\uff1b \uff083\uff09\u91cd\u590d\u7b2c\uff082\uff09\u6b65\uff0c\u76f4\u5230 3 \u4e2a\u73ed\u7684\u540c\u5b66\u5168\u90e8\u51fa\u5217\u5b8c\u6bd5\u3002 \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u201c\u6bcf\u4e00\u6b21\u961f\u9996\u7684 3 \u540d\u540c\u5b66\uff0c\u8bf7\u51fa\u6700\u77ee\u7684\u540c\u5b66\u201d\u8fd9\u4ef6\u4e8b\u60c5\u53ef\u4ee5\u4ea4\u7ed9\u4f18\u5148\u961f\u5217\u53bb\u5b8c\u6210\u3002\u5728\u8fde\u7eed\u7684\u4e24\u6b21\u51fa\u961f\u4e4b\u95f4\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01\u4e0b\u9762\u7684\u56fe\u8bf4\u660e\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002 \u4ee5\u4e0a\u662f\u601d\u8def1\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\u3002\u4e0b\u9762\u4ecb\u7ecd\u601d\u8def2\uff0c\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff1a \u6839\u636e\u4e4b\u524d\u5904\u7406\u94fe\u8868\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u90a3\u4e48\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u65e2\u7136\u662f\u6570\u7ec4\u7684\u201c\u6392\u5e8f\u201d\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u501f\u52a9\u5f52\u5e76\u6392\u5e8f\u7684 \u5206\u6cbb\u601d\u60f3 \u6765\u89e3\u51b3\uff0c\u4ee3\u7801\u7ed3\u6784\u548c\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u540c\u51fa\u4e00\u8f99\u3002 1\u3001\u5148\u4e00\u5206\u4e3a\u4e8c\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1b 2\u3001\u518d\u8003\u8651\u5982\u4f55\u5408\u5e76\uff0c\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002 \u4e24\u79cd\u65b9\u6cd5\u90fd\u5229\u7528\u5230\u4e86\u5e38\u89c1\u7684\u7b97\u6cd5\u548c\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u503c\u5f97\u5b66\u4e60\u548c\u601d\u8003\u3002 \u867d\u7136\u6211\u53ea\u7ed9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u89e3\u6cd5\u505a\u4e86\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u9012\u5f52\u5b8c\u6210\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u5f88\u9177\uff01","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0023-merge-k-sorted-lists/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0023-merge-k-sorted-lists/#1","text":"import java.util.Comparator; import java.util.PriorityQueue; class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(Integer[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } // \u6700\u540e\u6dfb\u52a0\u4e00\u4e2a NULL \u6807\u5fd7\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u4e86 s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } PriorityQueue<ListNode> priorityQueue = new PriorityQueue<>(len, Comparator.comparingInt(a -> a.val)); ListNode dummyNode = new ListNode(-1); ListNode curNode = dummyNode; for (ListNode list : lists) { if (list != null) { // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u4e0d\u80fd\u4e5f\u6ca1\u6709\u5fc5\u8981\u5c06\u7a7a\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217\u4e2d priorityQueue.add(list); } } while (!priorityQueue.isEmpty()) { // \u4f18\u5148\u961f\u5217\u975e\u7a7a\u624d\u80fd\u51fa\u961f ListNode node = priorityQueue.poll(); // \u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u6307\u5411\u51fa\u961f\u5143\u7d20 curNode.next = node; // \u5f53\u524d\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u5411\u4e86\u521a\u521a\u51fa\u961f\u7684\u90a3\u4e2a\u5143\u7d20 curNode = curNode.next; if (curNode.next != null) { // \u53ea\u6709\u975e\u7a7a\u8282\u70b9\u624d\u80fd\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d priorityQueue.add(curNode.next); } } return dummyNode.next; } public static void main(String[] args) { Integer[] nums1 = {1, 4, 5}; Integer[] nums2 = {1, 3, 4}; Integer[] nums3 = {2, 6}; ListNode head1 = new ListNode(nums1); ListNode head2 = new ListNode(nums2); ListNode head3 = new ListNode(nums3); ListNode[] lists = new ListNode[3]; lists[0] = head1; lists[1] = head2; lists[2] = head3; Solution solution = new Solution(); ListNode mergeKLists = solution.mergeKLists(lists); System.out.println(mergeKLists); } } \u8bf4\u660e\uff1a\u8fd9\u91cc\u521b\u5efa\u6bd4\u8f83\u5668\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u5728 Java8 \u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u8bed\u6cd5\uff1a Comparator<ListNode> comparator = (a, b) -> a.val - b.val; \u4e0e Comparator<ListNode> comparator = Comparator.comparingInt(a -> a.val);","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0023-merge-k-sorted-lists/#2","text":"class Solution2 { public ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } return mergeKLists(lists, 0, len - 1); } private ListNode mergeKLists(ListNode[] lists, int l, int r) { // \u601d\u8003\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53d6\u7b49\u4e8e\uff1f\u8fd9\u662f\u56e0\u4e3a\u6839\u636e\u4e0b\u6587\u5bf9 sort \u7684\u9012\u5f52\u8c03\u7528\u60c5\u51b5\uff0c\u533a\u95f4\u6700\u7a84\u7684\u65f6\u5019\uff0c\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u7aef\u70b9\u91cd\u5408 if (l == r) { return lists[l]; } int mid = l + (r - l) / 2; ListNode listNode1 = mergeKLists(lists, l, mid); ListNode listNode2 = mergeKLists(lists, mid + 1, r); // \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\u8fd9\u4e2a\u5b50\u95ee\u9898\uff0c\u8bf7\u89c1 LeetCode \u7b2c 21 \u9898\uff0c // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\uff0c // \u56e0\u4e3a\u4f7f\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u6bcf\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u5f52\u5e76\u6b21\u6570\u6709\u4e9b\u591a\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u5212\u7b97\u7684 return mergeOfTwoListNode(listNode1, listNode2); } private ListNode mergeOfTwoListNode(ListNode listNode1, ListNode listNode2) { // \u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 if (listNode1 == null) { return listNode2; } if (listNode2 == null) { return listNode1; } if (listNode1.val < listNode2.val) { // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898 listNode1.next = mergeOfTwoListNode(listNode1.next, listNode2); return listNode1; } else { // \u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898 listNode2.next = mergeOfTwoListNode(listNode1, listNode2.next); return listNode2; } } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0024-swap-nodes-in-pairs/","text":"24. Swap Nodes in Pairs \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4 , \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3 . \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 24. Swap Nodes in Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u867d\u7136\u8fd9\u9053\u95ee\u9898\u88ab\u6807\u6ce8\u4e3a\u201c\u4e2d\u7b49\u201d\uff0c\u4f46\u662f\u53ea\u8981\u662f\u94fe\u8868\u7684\u95ee\u9898\u505a\u591a\u4e86\u7684\u8bdd\uff0c\u5c31\u4f1a\u77e5\u9053\uff0c\u89e3\u8fd9\u7c7b\u94fe\u8868\u7684\u95ee\u9898\u6709\u4e24\u4e2a\u5957\u8def\u3002 1\u3001\u9012\u5f52 2\u3001\u7a7f\u9488\u5f15\u7ebf \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode swapPairs(ListNode head) { if (head == null || head.next == null) { return head; } ListNode first = head; ListNode second = head.next; first.next = swapPairs(second.next); second.next = first; return second; } public static void main(String[] args) { // \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode swapPairs = solution.swapPairs(head); System.out.println(swapPairs); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public ListNode swapPairs(ListNode head) { if (head == null || head.next == null) { return head; } // \u8fd9\u91cc\u8bbe\u7f6e dummyNode \u662f\u4e3a\u4e86\u5904\u7406\u5934\u7ed3\u70b9\u7684\u7279\u6b8a\u60c5\u51b5 // \u4f7f\u5f97\u5934\u7ed3\u70b9\u548c\u975e\u5934\u7ed3\u70b9\u53ef\u4ee5\u7edf\u4e00\u5904\u7406 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode first = curNode.next; ListNode second = first.next; ListNode third = second.next; // \u4ea4\u6362 second.next = first; first.next = third; // \u548c\u4e4b\u524d swap \u7684\u94fe\u8868\u63a5\u4e0a curNode.next = second; // \u7ad9\u5728\u4e0b\u4e00\u8f6e\u4ea4\u6362\u7684\u7ed3\u70b9\u524d\u9762 curNode = first; } return dummyNode.next; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0024-swap-nodes-in-pairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"24. Swap Nodes in Pairs"},{"location":"leetcode-0024-swap-nodes-in-pairs/#24-swap-nodes-in-pairs","text":"","title":"24. Swap Nodes in Pairs"},{"location":"leetcode-0024-swap-nodes-in-pairs/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4 , \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3 . \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 24. Swap Nodes in Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0024-swap-nodes-in-pairs/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u867d\u7136\u8fd9\u9053\u95ee\u9898\u88ab\u6807\u6ce8\u4e3a\u201c\u4e2d\u7b49\u201d\uff0c\u4f46\u662f\u53ea\u8981\u662f\u94fe\u8868\u7684\u95ee\u9898\u505a\u591a\u4e86\u7684\u8bdd\uff0c\u5c31\u4f1a\u77e5\u9053\uff0c\u89e3\u8fd9\u7c7b\u94fe\u8868\u7684\u95ee\u9898\u6709\u4e24\u4e2a\u5957\u8def\u3002 1\u3001\u9012\u5f52 2\u3001\u7a7f\u9488\u5f15\u7ebf","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0024-swap-nodes-in-pairs/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0024-swap-nodes-in-pairs/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode swapPairs(ListNode head) { if (head == null || head.next == null) { return head; } ListNode first = head; ListNode second = head.next; first.next = swapPairs(second.next); second.next = first; return second; } public static void main(String[] args) { // \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode swapPairs = solution.swapPairs(head); System.out.println(swapPairs); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0024-swap-nodes-in-pairs/#2","text":"public class Solution2 { public ListNode swapPairs(ListNode head) { if (head == null || head.next == null) { return head; } // \u8fd9\u91cc\u8bbe\u7f6e dummyNode \u662f\u4e3a\u4e86\u5904\u7406\u5934\u7ed3\u70b9\u7684\u7279\u6b8a\u60c5\u51b5 // \u4f7f\u5f97\u5934\u7ed3\u70b9\u548c\u975e\u5934\u7ed3\u70b9\u53ef\u4ee5\u7edf\u4e00\u5904\u7406 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; while (curNode.next != null && curNode.next.next != null) { ListNode first = curNode.next; ListNode second = first.next; ListNode third = second.next; // \u4ea4\u6362 second.next = first; first.next = third; // \u548c\u4e4b\u524d swap \u7684\u94fe\u8868\u63a5\u4e0a curNode.next = second; // \u7ad9\u5728\u4e0b\u4e00\u8f6e\u4ea4\u6362\u7684\u7ed3\u70b9\u524d\u9762 curNode = first; } return dummyNode.next; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0024-swap-nodes-in-pairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0025-reverse-nodes-in-k-group/","text":"25. Reverse Nodes in k-Group \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5e76\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u5c06\u6700\u540e\u5269\u4f59\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b : \u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a 1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5 \u8bf4\u660e : \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 25. Reverse Nodes in k-Group \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 25. k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0025-reverse-nodes-in-k-group \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"25. Reverse Nodes in k-Group"},{"location":"leetcode-0025-reverse-nodes-in-k-group/#25-reverse-nodes-in-k-group","text":"","title":"25. Reverse Nodes in k-Group"},{"location":"leetcode-0025-reverse-nodes-in-k-group/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5e76\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u5c06\u6700\u540e\u5269\u4f59\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b : \u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a 1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5 \u8bf4\u660e : \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c \uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 25. Reverse Nodes in k-Group \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 25. k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0025-reverse-nodes-in-k-group/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0025-reverse-nodes-in-k-group/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0025-reverse-nodes-in-k-group/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0025-reverse-nodes-in-k-group \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/","text":"26. Remove Duplicates from Sorted Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2] , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1 , 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4] , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 1 , 2 , 3 , 4 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 26. Remove Duplicates from Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5f97\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e4b\u524d\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u7528\u4f5c\u6bd4\u8f83\u3002 \u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002 \u6ce8\u610f\uff1a\u5e94\u8be5\u6ce8\u610f\u5230\u4e00\u4e9b\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f8b\u5982 nums = [] \u7684\u65f6\u5019\u3002\u6ce8\u610f\uff0c\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u65b0\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u7f16\u7801\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; // \u5e38\u89c4\u9898\u76ee\uff1a\u8fd9\u91cc\u5229\u7528\u5230\u6570\u7ec4\u7684\u6709\u5e8f\u6027\uff0c\u5982\u679c\u9047\u5230\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\u7684\u5143\u7d20\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a public class Solution { // [1,1,2,3,4,4] // [1,2,3,4,4] public int removeDuplicates(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int pre = nums[0]; int j = 0; for (int i = 1; i < len; i++) { if (nums[i] != pre) { pre = nums[i]; j++; nums[j] = nums[i]; } } // \u6ce8\u610f j \u662f\u904d\u5386\u5230\u7684\u4e0e\u4e4b\u524d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u8981\u628a\u7b2c 1 \u4e2a\u5143\u7d20\u7b97\u8fdb\u53bb\uff0c\u6240\u4ee5\u8981\u52a0 1 return j + 1; } public static void main(String[] args) { int[] nums = {1, 1, 2, 2, 2, 3, 3, 4, 4, 4}; int ret = new Solution().removeDuplicates(nums); System.out.println(ret); System.out.println(Arrays.toString(nums)); } } \u53c2\u8003\u89e3\u7b542 import java.util.Arrays; public class Solution2 { public int removeDuplicates(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int j = 0; int i = 1; for (; i < len; i++) { if (nums[i] == nums[j]) { // \u4ec0\u4e48\u90fd\u4e0d\u505a } else { nums[++j] = nums[i]; } } // \u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8981 + 1 return j + 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0026-remove-duplicates-from-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"26. Remove Duplicates from Sorted Array"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#26-remove-duplicates-from-sorted-array","text":"","title":"26. Remove Duplicates from Sorted Array"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2] , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1 , 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4] , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 1 , 2 , 3 , 4 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 26. Remove Duplicates from Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5f97\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u4e4b\u524d\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u7528\u4f5c\u6bd4\u8f83\u3002 \u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002 \u6ce8\u610f\uff1a\u5e94\u8be5\u6ce8\u610f\u5230\u4e00\u4e9b\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f8b\u5982 nums = [] \u7684\u65f6\u5019\u3002\u6ce8\u610f\uff0c\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u65b0\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u7f16\u7801\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#1","text":"import java.util.Arrays; // \u5e38\u89c4\u9898\u76ee\uff1a\u8fd9\u91cc\u5229\u7528\u5230\u6570\u7ec4\u7684\u6709\u5e8f\u6027\uff0c\u5982\u679c\u9047\u5230\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\u7684\u5143\u7d20\uff0c\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a public class Solution { // [1,1,2,3,4,4] // [1,2,3,4,4] public int removeDuplicates(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int pre = nums[0]; int j = 0; for (int i = 1; i < len; i++) { if (nums[i] != pre) { pre = nums[i]; j++; nums[j] = nums[i]; } } // \u6ce8\u610f j \u662f\u904d\u5386\u5230\u7684\u4e0e\u4e4b\u524d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u8981\u628a\u7b2c 1 \u4e2a\u5143\u7d20\u7b97\u8fdb\u53bb\uff0c\u6240\u4ee5\u8981\u52a0 1 return j + 1; } public static void main(String[] args) { int[] nums = {1, 1, 2, 2, 2, 3, 3, 4, 4, 4}; int ret = new Solution().removeDuplicates(nums); System.out.println(ret); System.out.println(Arrays.toString(nums)); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0026-remove-duplicates-from-sorted-array/#2","text":"import java.util.Arrays; public class Solution2 { public int removeDuplicates(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int j = 0; int i = 1; for (; i < len; i++) { if (nums[i] == nums[j]) { // \u4ec0\u4e48\u90fd\u4e0d\u505a } else { nums[++j] = nums[i]; } } // \u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8981 + 1 return j + 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0026-remove-duplicates-from-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0027-remove-element/","text":"27. Remove Element \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val \uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [3,2,2,3] , val = 3 , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,1,2,2,3,0,4,2] , val = 2 , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0 , 1 , 3 , 0 , 4 \u3002 \u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d int len = removeElement(nums, val); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 27. Remove Element \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 27. \u79fb\u9664\u5143\u7d20 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u9010\u4e2a\u8986\u76d6\u3002 \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u8def\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u601d\u8def\uff1a\u5e38\u89c4\u9898\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7 public int removeElement(int[] nums, int val) { // \u5b9a\u4e49 [0,j) \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u6ee1\u8db3 \u4e0d\u7b49\u4e8e val\uff0c\u6240\u4ee5\u662f\u5148\u4ea4\u6362\uff0c\u518d ++ int j = 0; for (int i = 0; i < nums.length; i++) { if (nums[i] != val) { swap(nums, j, i); j++; } } return j; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: def removeElement(self, nums, val): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" j = 0 for i in range(len(nums)): if nums[i] != val: nums[j] = nums[i] j += 1 return j \u53c2\u8003\u89e3\u7b542 Java \u5199\u6cd5\uff1a public class Solution2 { public int removeElement(int[] nums, int val) { int i = 0; int j = 0; for (; i < nums.length; i++) { if (nums[i] == val) { continue; } nums[j] = nums[i]; // \u53ea\u8981\u9047\u5230\u4e0e val \u4e0d\u7b49\u7684\u5143\u7d20\uff0c\u5c31\u7d2f\u52a0 1 // \u6240\u4ee5\uff0c\u76f4\u63a5\u8fd4\u56de j \u5c31\u53ef\u4ee5\u4e86 j++; } return j; } } Python \u5199\u6cd5\uff1a class Solution: def removeElement(self, nums, val): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" j = 0 for i in range(len(nums)): if nums[i] != val: # \u5c31\u79fb\u52a8\u5230\u524d\u9762\u53bb nums[i], nums[j] = nums[j], nums[i] j += 1 return j if __name__ == '__main__': nums = [3, 2, 2, 3] val = 3 s = Solution() result = s.removeElement(nums, val) print(nums) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0027-remove-element \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"27. Remove Element"},{"location":"leetcode-0027-remove-element/#27-remove-element","text":"","title":"27. Remove Element"},{"location":"leetcode-0027-remove-element/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val \uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [3,2,2,3] , val = 3 , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,1,2,2,3,0,4,2] , val = 2 , \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0 , 1 , 3 , 0 , 4 \u3002 \u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d int len = removeElement(nums, val); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 27. Remove Element \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 27. \u79fb\u9664\u5143\u7d20 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0027-remove-element/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u9010\u4e2a\u8986\u76d6\u3002 \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u8def\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0027-remove-element/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0027-remove-element/#1","text":"Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u601d\u8def\uff1a\u5e38\u89c4\u9898\uff0c\u53ea\u8981\u4e0d\u7b49\u4e8e\u6307\u5b9a\u5143\u7d20\uff0c\u5c31\u4ea4\u6362\uff0c\u7b49\u4e8e\u5c31\u653e\u8fc7 public int removeElement(int[] nums, int val) { // \u5b9a\u4e49 [0,j) \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u6ee1\u8db3 \u4e0d\u7b49\u4e8e val\uff0c\u6240\u4ee5\u662f\u5148\u4ea4\u6362\uff0c\u518d ++ int j = 0; for (int i = 0; i < nums.length; i++) { if (nums[i] != val) { swap(nums, j, i); j++; } } return j; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: def removeElement(self, nums, val): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" j = 0 for i in range(len(nums)): if nums[i] != val: nums[j] = nums[i] j += 1 return j","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0027-remove-element/#2","text":"Java \u5199\u6cd5\uff1a public class Solution2 { public int removeElement(int[] nums, int val) { int i = 0; int j = 0; for (; i < nums.length; i++) { if (nums[i] == val) { continue; } nums[j] = nums[i]; // \u53ea\u8981\u9047\u5230\u4e0e val \u4e0d\u7b49\u7684\u5143\u7d20\uff0c\u5c31\u7d2f\u52a0 1 // \u6240\u4ee5\uff0c\u76f4\u63a5\u8fd4\u56de j \u5c31\u53ef\u4ee5\u4e86 j++; } return j; } } Python \u5199\u6cd5\uff1a class Solution: def removeElement(self, nums, val): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" j = 0 for i in range(len(nums)): if nums[i] != val: # \u5c31\u79fb\u52a8\u5230\u524d\u9762\u53bb nums[i], nums[j] = nums[j], nums[i] j += 1 return j if __name__ == '__main__': nums = [3, 2, 2, 3] val = 3 s = Solution() result = s.removeElement(nums, val) print(nums) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0027-remove-element \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0028-implement-strstr/","text":"28. Implement strStr() \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53ca Java\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 28. Implement strStr() \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 28. \u5b9e\u73b0strStr() \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"28. Implement strStr()"},{"location":"leetcode-0028-implement-strstr/#28-implement-strstr","text":"","title":"28. Implement strStr()"},{"location":"leetcode-0028-implement-strstr/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53ca Java\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 28. Implement strStr() \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 28. \u5b9e\u73b0strStr() \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0028-implement-strstr/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0028-implement-strstr/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0028-implement-strstr/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0029-divide-two-integers/","text":"29. Divide Two Integers \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor \u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u793a\u4f8b 1: \u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: dividend = 7, divisor = -3 \u8f93\u51fa: -2 \u8bf4\u660e: \u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002 \u9664\u6570\u4e0d\u4e3a 0\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2 31 \u2212 1\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 29. Divide Two Integers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 29. \u4e24\u6570\u76f8\u9664 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"29. Divide Two Integers"},{"location":"leetcode-0029-divide-two-integers/#29-divide-two-integers","text":"","title":"29. Divide Two Integers"},{"location":"leetcode-0029-divide-two-integers/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor \u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u793a\u4f8b 1: \u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: dividend = 7, divisor = -3 \u8f93\u51fa: -2 \u8bf4\u660e: \u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002 \u9664\u6570\u4e0d\u4e3a 0\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2 31 \u2212 1\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 29. Divide Two Integers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 29. \u4e24\u6570\u76f8\u9664 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0029-divide-two-integers/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0029-divide-two-integers/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0029-divide-two-integers/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/","text":"30. Substring with Concatenation of All Words \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002 \u5728 s \u4e2d\u627e\u51fa\u53ef\u4ee5\u6070\u597d\u4e32\u8054 words \u4e2d\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa: [0,9] \u89e3\u91ca: \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoor\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"wordgoodstudentgoodword\", words = [\"word\",\"student\"] \u8f93\u51fa: [] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 30. Substring with Concatenation of All Words \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 30. \u4e0e\u6240\u6709\u5355\u8bcd\u76f8\u5173\u8054\u7684\u5b57\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"30. Substring with Concatenation of All Words"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/#30-substring-with-concatenation-of-all-words","text":"","title":"30. Substring with Concatenation of All Words"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002 \u5728 s \u4e2d\u627e\u51fa\u53ef\u4ee5\u6070\u597d\u4e32\u8054 words \u4e2d\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa: [0,9] \u89e3\u91ca: \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoor\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"wordgoodstudentgoodword\", words = [\"word\",\"student\"] \u8f93\u51fa: [] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 30. Substring with Concatenation of All Words \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 30. \u4e0e\u6240\u6709\u5355\u8bcd\u76f8\u5173\u8054\u7684\u5b57\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0030-substring-with-concatenation-of-all-words/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0031-next-permutation/","text":"31. Next Permutation \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002 1,2,3 \u2192 1,3,2 3,2,1 \u2192 1,2,3 1,1,5 \u2192 1,5,1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 31. Next Permutation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 31. \u4e0b\u4e00\u4e2a\u6392\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"31. Next Permutation"},{"location":"leetcode-0031-next-permutation/#31-next-permutation","text":"","title":"31. Next Permutation"},{"location":"leetcode-0031-next-permutation/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002 1,2,3 \u2192 1,3,2 3,2,1 \u2192 1,2,3 1,1,5 \u2192 1,5,1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 31. Next Permutation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 31. \u4e0b\u4e00\u4e2a\u6392\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0031-next-permutation/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0031-next-permutation/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0031-next-permutation/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0032-longest-valid-parentheses/","text":"32. Longest Valid Parentheses \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"(()\" \u8f93\u51fa: 2 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()\" \u793a\u4f8b 2: \u8f93\u5165: \" )()()) \" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()()\" \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 32. Longest Valid Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 32. \u6700\u957f\u6709\u6548\u62ec\u53f7 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"32. Longest Valid Parentheses"},{"location":"leetcode-0032-longest-valid-parentheses/#32-longest-valid-parentheses","text":"","title":"32. Longest Valid Parentheses"},{"location":"leetcode-0032-longest-valid-parentheses/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"(()\" \u8f93\u51fa: 2 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()\" \u793a\u4f8b 2: \u8f93\u5165: \" )()()) \" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a \"()()\" \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 32. Longest Valid Parentheses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 32. \u6700\u957f\u6709\u6548\u62ec\u53f7 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0032-longest-valid-parentheses/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0032-longest-valid-parentheses/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0032-longest-valid-parentheses/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0033-search-in-rotated-sorted-array/","text":"33. Search in Rotated Sorted Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O (log n ) \u7ea7\u522b\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [ 4,5,6,7,0,1,2] , target = 0 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [ 4,5,6,7,0,1,2] , target = 3 \u8f93\u51fa: -1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 33. Search in Rotated Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u610f\u601d\u7684\uff0c\u5b8c\u6210\u8fd9\u9053\u9898\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u660e\u786e\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u4e00\u4e9b\u7ec6\u8282\u3002 \u867d\u7136\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u662f\u201c\u90e8\u5206\u6709\u5e8f\u201d\u7684\uff0c\u53ea\u6709 1 \u4e2a\u95f4\u65ad\u70b9\uff0c\u6240\u4ee5\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 \u201c\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u201d\u8fd9\u53e5\u8bdd\u5f88\u5173\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c11\u8003\u8651\u4e0b\u9762\u4e24\u79cd\u7279\u6b8a\u7684\u7528\u4f8b\u3002 \u7528\u4f8b1\uff1a1 2 1 1 1 1 \u627e 2\u3002 \u7528\u4f8b2\uff1a1 1 1 1 2 1 \u627e 2\u3002 \u4e8c\u5206\u6cd5\u603b\u662f\u671f\u671b\u901a\u8fc7\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u80fd\u591f\u5c11\u8003\u8651\u4e00\u90e8\u5206\u7684\u60c5\u5f62\u3002\u8003\u8651\u5b8c\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4f59\u7684\u5c31\u4ea4\u7ed9 else\u3002 \u6709\u90e8\u5206\u89e3\u91ca\u653e\u5728\u4e86\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u4e0d\u7ba1\u600e\u4e48\u5206\uff0c\u90fd\u4e00\u5b9a\u6709\u4e00\u8fb9\u662f\u9012\u589e\u5e8f\u5217 // \u53e6\u4e00\u8fb9\u662f\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u65cb\u8f6c\u6570\u7ec4 public int search(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } int left = 0; int right = len - 1; // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } // \u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\uff0c\u90a3\u5c31\u662f // mid \u6709\u53ef\u80fd\u548c left \u76f8\u7b49\uff0c\u6240\u4ee5\u5206\u7c7b\u6807\u51c6\u8fd9\u6837 // nums[left] < nums[mid] \u4e0d\u80fd\u7528\u8fd9\u4e2a\u5224\u65ad if (nums[mid] > nums[right]) { // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u53f3\u8fb9 // 6 7 8 9 1 2 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } else { // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u5de6\u8fb9 // 6 7 1 2 3 4 5 6 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } } return -1; } public static void main(String[] args) { int[] nums = {4, 5, 6, 7, 0, 1, 2}; int target = 3; Solution solution = new Solution(); int search = solution.search(nums, target); System.out.println(search); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public int search(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } int left = 0; int right = len - 1; // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e while (left <= right) { // \u8fd9\u91cc\u53d6 right - left + 1 \u8bf4\u660e\u662f\u5411\u4e0a\u53d6\u6574 int mid = left + (right - left + 1) / 2; if (nums[mid] == target) { return mid; } if (nums[left] < nums[mid]) { // 6 7 8 9 1 2 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } else { assert nums[left] >= nums[mid]; // 6 7 1 2 3 4 5 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } } return -1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0033-search-in-rotated-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"33. Search in Rotated Sorted Array"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#33-search-in-rotated-sorted-array","text":"","title":"33. Search in Rotated Sorted Array"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O (log n ) \u7ea7\u522b\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [ 4,5,6,7,0,1,2] , target = 0 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [ 4,5,6,7,0,1,2] , target = 3 \u8f93\u51fa: -1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 33. Search in Rotated Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u610f\u601d\u7684\uff0c\u5b8c\u6210\u8fd9\u9053\u9898\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u660e\u786e\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u4e00\u4e9b\u7ec6\u8282\u3002 \u867d\u7136\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u662f\u201c\u90e8\u5206\u6709\u5e8f\u201d\u7684\uff0c\u53ea\u6709 1 \u4e2a\u95f4\u65ad\u70b9\uff0c\u6240\u4ee5\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 \u201c\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u201d\u8fd9\u53e5\u8bdd\u5f88\u5173\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c11\u8003\u8651\u4e0b\u9762\u4e24\u79cd\u7279\u6b8a\u7684\u7528\u4f8b\u3002 \u7528\u4f8b1\uff1a1 2 1 1 1 1 \u627e 2\u3002 \u7528\u4f8b2\uff1a1 1 1 1 2 1 \u627e 2\u3002 \u4e8c\u5206\u6cd5\u603b\u662f\u671f\u671b\u901a\u8fc7\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u80fd\u591f\u5c11\u8003\u8651\u4e00\u90e8\u5206\u7684\u60c5\u5f62\u3002\u8003\u8651\u5b8c\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4f59\u7684\u5c31\u4ea4\u7ed9 else\u3002 \u6709\u90e8\u5206\u89e3\u91ca\u653e\u5728\u4e86\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#1","text":"public class Solution { // \u4e0d\u7ba1\u600e\u4e48\u5206\uff0c\u90fd\u4e00\u5b9a\u6709\u4e00\u8fb9\u662f\u9012\u589e\u5e8f\u5217 // \u53e6\u4e00\u8fb9\u662f\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u65cb\u8f6c\u6570\u7ec4 public int search(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } int left = 0; int right = len - 1; // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } // \u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\uff0c\u90a3\u5c31\u662f // mid \u6709\u53ef\u80fd\u548c left \u76f8\u7b49\uff0c\u6240\u4ee5\u5206\u7c7b\u6807\u51c6\u8fd9\u6837 // nums[left] < nums[mid] \u4e0d\u80fd\u7528\u8fd9\u4e2a\u5224\u65ad if (nums[mid] > nums[right]) { // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u53f3\u8fb9 // 6 7 8 9 1 2 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } else { // \u6b64\u65f6\u65cb\u8f6c\u70b9\u5728\u5de6\u8fb9 // 6 7 1 2 3 4 5 6 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } } return -1; } public static void main(String[] args) { int[] nums = {4, 5, 6, 7, 0, 1, 2}; int target = 3; Solution solution = new Solution(); int search = solution.search(nums, target); System.out.println(search); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0033-search-in-rotated-sorted-array/#2","text":"public class Solution2 { public int search(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } int left = 0; int right = len - 1; // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u7b49\u4e8e while (left <= right) { // \u8fd9\u91cc\u53d6 right - left + 1 \u8bf4\u660e\u662f\u5411\u4e0a\u53d6\u6574 int mid = left + (right - left + 1) / 2; if (nums[mid] == target) { return mid; } if (nums[left] < nums[mid]) { // 6 7 8 9 1 2 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } else { assert nums[left] >= nums[mid]; // 6 7 1 2 3 4 5 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } } return -1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0033-search-in-rotated-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0034-search-for-a-range/","text":"34. Search for a Range \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O (log n ) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1] \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [ 5,7,7,8,8,10] , target = 8 \u8f93\u51fa: [3,4] \u793a\u4f8b 2: \u8f93\u5165: nums = [ 5,7,7,8,8,10] , target = 6 \u8f93\u51fa: [-1,-1] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 34. Search for a Range \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 34. \u641c\u7d22\u8303\u56f4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"34. Search for a Range"},{"location":"leetcode-0034-search-for-a-range/#34-search-for-a-range","text":"","title":"34. Search for a Range"},{"location":"leetcode-0034-search-for-a-range/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O (log n ) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1] \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [ 5,7,7,8,8,10] , target = 8 \u8f93\u51fa: [3,4] \u793a\u4f8b 2: \u8f93\u5165: nums = [ 5,7,7,8,8,10] , target = 6 \u8f93\u51fa: [-1,-1] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 34. Search for a Range \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 34. \u641c\u7d22\u8303\u56f4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0034-search-for-a-range/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0034-search-for-a-range/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0034-search-for-a-range/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0035-search-insert-position/","text":"35. Search Insert Position \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 35. Search Insert Position \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u4e86\uff0c\u4e5f\u662f LeetCode \u7b2c 300 \u9898\uff08\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\uff09 O(logn) \u590d\u6742\u5ea6\u89e3\u6cd5\u7684\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u3002 \u4e3b\u8981\u7684\u601d\u60f3\u8fd8\u662f\u4e8c\u5206\u6cd5\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u4ed4\u7ec6\u8003\u5bdf\u8fb9\u754c\u7684\u60c5\u51b5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u53ea\u4f1a\u628a\u6bd4\u81ea\u5df1\u5927\u7684\u8986\u76d6\u6210\u5c0f\u7684 // \u5982\u679c\u6709\u4e00\u8fde\u4e32\u6570\u8ddf target \u76f8\u540c\uff0c\u5219\u8fd4\u56de\u7d22\u5f15\u6700\u9760\u524d\u7684 // \u7279\u4f8b\uff1a 3 5 5 5 5 5 5 5 5 5 // \u7279\u4f8b\uff1a 3 6 7 8 public int searchInsert(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } if (nums[len - 1] < target) { return len; } int left = 0; int right = len - 1; while (left < right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { // nums[mid] \u7684\u503c\u53ef\u4ee5\u820d\u5f03 left = mid + 1; } else { // nums[mid] \u4e0d\u80fd\u820d\u5f03 right = mid; } } return right; } public static void main(String[] args) { int[] nums = {1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6}; int target = 4; Solution2 solution2 = new Solution2(); int searchInsert = solution2.searchInsert(nums, target); System.out.println(searchInsert); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0035-search-insert-position \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"35. Search Insert Position"},{"location":"leetcode-0035-search-insert-position/#35-search-insert-position","text":"","title":"35. Search Insert Position"},{"location":"leetcode-0035-search-insert-position/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 35. Search Insert Position \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0035-search-insert-position/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u4e86\uff0c\u4e5f\u662f LeetCode \u7b2c 300 \u9898\uff08\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\uff09 O(logn) \u590d\u6742\u5ea6\u89e3\u6cd5\u7684\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u3002 \u4e3b\u8981\u7684\u601d\u60f3\u8fd8\u662f\u4e8c\u5206\u6cd5\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u4ed4\u7ec6\u8003\u5bdf\u8fb9\u754c\u7684\u60c5\u51b5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0035-search-insert-position/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0035-search-insert-position/#1","text":"public class Solution { // \u53ea\u4f1a\u628a\u6bd4\u81ea\u5df1\u5927\u7684\u8986\u76d6\u6210\u5c0f\u7684 // \u5982\u679c\u6709\u4e00\u8fde\u4e32\u6570\u8ddf target \u76f8\u540c\uff0c\u5219\u8fd4\u56de\u7d22\u5f15\u6700\u9760\u524d\u7684 // \u7279\u4f8b\uff1a 3 5 5 5 5 5 5 5 5 5 // \u7279\u4f8b\uff1a 3 6 7 8 public int searchInsert(int[] nums, int target) { int len = nums.length; if (len == 0) { return -1; } if (nums[len - 1] < target) { return len; } int left = 0; int right = len - 1; while (left < right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { // nums[mid] \u7684\u503c\u53ef\u4ee5\u820d\u5f03 left = mid + 1; } else { // nums[mid] \u4e0d\u80fd\u820d\u5f03 right = mid; } } return right; } public static void main(String[] args) { int[] nums = {1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6}; int target = 4; Solution2 solution2 = new Solution2(); int searchInsert = solution2.searchInsert(nums, target); System.out.println(searchInsert); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0035-search-insert-position \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0036-valid-sudoku/","text":"36. Valid Sudoku \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219 \uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 36. Valid Sudoku \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 36. \u6709\u6548\u7684\u6570\u72ec \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"36. Valid Sudoku"},{"location":"leetcode-0036-valid-sudoku/#36-valid-sudoku","text":"","title":"36. Valid Sudoku"},{"location":"leetcode-0036-valid-sudoku/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219 \uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 36. Valid Sudoku \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 36. \u6709\u6548\u7684\u6570\u72ec \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0036-valid-sudoku/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0036-valid-sudoku/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0036-valid-sudoku/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0037-sudoku-solver/","text":"37. Sudoku Solver \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5df2\u586b\u5145\u7684\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002 \u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700 \u9075\u5faa\u5982\u4e0b\u89c4\u5219 \uff1a \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u4e00\u4e2a\u6570\u72ec\u3002 \u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002 Note: \u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 37. Sudoku Solver \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 37. \u89e3\u6570\u72ec \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"37. Sudoku Solver"},{"location":"leetcode-0037-sudoku-solver/#37-sudoku-solver","text":"","title":"37. Sudoku Solver"},{"location":"leetcode-0037-sudoku-solver/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5df2\u586b\u5145\u7684\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002 \u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700 \u9075\u5faa\u5982\u4e0b\u89c4\u5219 \uff1a \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u4e00\u4e2a\u6570\u72ec\u3002 \u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002 Note: \u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 37. Sudoku Solver \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 37. \u89e3\u6570\u72ec \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0037-sudoku-solver/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0037-sudoku-solver/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0037-sudoku-solver/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0038-count-and-say/","text":"38. Count and Say \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u62a5\u6570\u5e8f\u5217\u662f\u6307\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 1 \u88ab\u8bfb\u4f5c \"one 1\" ( \"\u4e00\u4e2a\u4e00\" ) , \u5373 11 \u3002 11 \u88ab\u8bfb\u4f5c \"two 1s\" ( \"\u4e24\u4e2a\u4e00\" \uff09, \u5373 21 \u3002 21 \u88ab\u8bfb\u4f5c \"one 2\" , \" one 1\" \uff08 \"\u4e00\u4e2a\u4e8c\" , \"\u4e00\u4e2a\u4e00\" ) , \u5373 1211 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 38. Count and Say \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 38. \u62a5\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"38. Count and Say"},{"location":"leetcode-0038-count-and-say/#38-count-and-say","text":"","title":"38. Count and Say"},{"location":"leetcode-0038-count-and-say/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u62a5\u6570\u5e8f\u5217\u662f\u6307\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 1 \u88ab\u8bfb\u4f5c \"one 1\" ( \"\u4e00\u4e2a\u4e00\" ) , \u5373 11 \u3002 11 \u88ab\u8bfb\u4f5c \"two 1s\" ( \"\u4e24\u4e2a\u4e00\" \uff09, \u5373 21 \u3002 21 \u88ab\u8bfb\u4f5c \"one 2\" , \" one 1\" \uff08 \"\u4e00\u4e2a\u4e8c\" , \"\u4e00\u4e2a\u4e00\" ) , \u5373 1211 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 38. Count and Say \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 38. \u62a5\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0038-count-and-say/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0038-count-and-say/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0038-count-and-say/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0039-combination-sum/","text":"39. Combination Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 39. Combination Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 39. \u7ec4\u5408\u603b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a \uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b \uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b \uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09 import java.util.ArrayList; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002 private void findCombinationSum(int residue, int start, Stack<Integer> pre) { // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0 if (residue < 0) { return; } // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target if (residue == 0) { res.add(new ArrayList<>(pre)); return; } for (int i = start; i < len; i++) { // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e pre.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1 findCombinationSum(residue - candidates[i], i, pre); pre.pop(); } } public List<List<Integer>> combinationSum(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } this.len = len; this.candidates = candidates; findCombinationSum(target, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] candidates = {2, 3, 6, 7}; int target = 7; Solution solution = new Solution(); List<List<Integer>> combinationSum = solution.combinationSum(candidates, target); System.out.println(combinationSum); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution2 { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; private void findCombinationSum(int residue, int start, Stack<Integer> pre) { if (residue == 0) { res.add(new ArrayList<>(pre)); return; } // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6 // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86 // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f for (int i = start; i < len && residue - candidates[i] >= 0; i++) { pre.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1 findCombinationSum(residue - candidates[i], i, pre); pre.pop(); } } public List<List<Integer>> combinationSum(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad Arrays.sort(candidates); this.len = len; this.candidates = candidates; findCombinationSum(target, 0, new Stack<>()); return res; } }","title":"39. Combination Sum"},{"location":"leetcode-0039-combination-sum/#39-combination-sum","text":"","title":"39. Combination Sum"},{"location":"leetcode-0039-combination-sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u8bf4\u660e\uff1a\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 39. Combination Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 39. \u7ec4\u5408\u603b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0039-combination-sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u5206\u6790\u9898\u610f\uff0c\u627e\u5230\u53ef\u4ee5\u51cf\u5c11\u5224\u65ad\u7684\u6761\u4ef6\uff1a \uff081\uff09\u8fd9\u9053\u9898\u731b\u5730\u4e00\u770b\u597d\u50cf\u8ddf\u524d\u9762\u7684\u95ee\u9898\u642d\u4e0d\u4e0a\u5173\u7cfb\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u201ccandidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u201d\uff1b \uff082\uff09\u4f46\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8fd8\u4ece\u539f\u70b9\u5f00\u59cb\u53d6\u5c31\u884c\u4e86\u5440\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff1b \uff083\uff09\u4e3a\u4e86\u8fbe\u5230\u63d0\u524d\u5224\u65ad\u5faa\u73af\u7ed3\u675f\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5982\u679c\u8d77\u70b9\u6570\u5b57\u6bd4\u5269\u4e0b\u7684\u548c\u8fd8\u8981\u5927\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5728 for \u5faa\u73af\u91cc\u52a0\u5224\u65ad\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u7cfb\u7edf\u6808\u7684\u8c03\u7528\u6df1\u5ea6\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0039-combination-sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0039-combination-sum/#1","text":"import java.util.ArrayList; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; // residue \u5b9a\u4e49\u4e3a\u5269\u4f59\uff0c\u8fd9\u4e2a\u5269\u4f59\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u5728\u9012\u5f52\u4e2d\uff0c\u5b83\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u3002 private void findCombinationSum(int residue, int start, Stack<Integer> pre) { // \u56e0\u4e3a\u53ef\u4ee5\u65e0\u9650\u9009\u53d6\uff0c\u6240\u4ee5 residue \u53ea\u80fd\u5c0f\u4e8e 0 \u6216\u8005\u7b49\u4e8e 0 if (residue < 0) { return; } // \u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u90a3\u4e2a\u6570\u4e3a 0 \u4e86\uff0c\u624d\u8868\u793a\u6211\u4eec\u6240\u9009\u7684\u6570\u5b57\u7684\u548c\u521a\u597d\u7b49\u4e8e target if (residue == 0) { res.add(new ArrayList<>(pre)); return; } for (int i = start; i < len; i++) { // \u6bcf\u4e2a\u6570\u6709\u9009\u62e9\u548c\u4e0d\u9009\u62e9\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4e86\u4e00\u79cd\u89e3\u7684\u53ef\u80fd\u4ee5\u540e\u8981\u8fdb\u884c\u72b6\u6001\u91cd\u7f6e pre.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1 findCombinationSum(residue - candidates[i], i, pre); pre.pop(); } } public List<List<Integer>> combinationSum(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } this.len = len; this.candidates = candidates; findCombinationSum(target, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] candidates = {2, 3, 6, 7}; int target = 7; Solution solution = new Solution(); List<List<Integer>> combinationSum = solution.combinationSum(candidates, target); System.out.println(combinationSum); } }","title":"\u53c2\u8003\u89e3\u7b541\uff08\u6ca1\u6709\u505a\u4f18\u5316\u526a\u679d\u7684\u7248\u672c\uff09"},{"location":"leetcode-0039-combination-sum/#2","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution2 { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; private void findCombinationSum(int residue, int start, Stack<Integer> pre) { if (residue == 0) { res.add(new ArrayList<>(pre)); return; } // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78012\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u505a\u5224\u65ad\uff0c\u5c3d\u91cf\u907f\u514d\u7cfb\u7edf\u6808\u7684\u6df1\u5ea6 // residue - candidates[i] \u8868\u793a\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\uff0c\u5982\u679c\u4e0b\u4e00\u8f6e\u7684\u5269\u4f59\u90fd\u5c0f\u4e8e 0 \uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u5faa\u73af\u4e86 // \u8fd9\u4e00\u70b9\u57fa\u4e8e\u539f\u59cb\u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\uff0c\u56e0\u4e3a\u5982\u679c\u8ba1\u7b97\u540e\u9762\u7684\u5269\u4f59\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f for (int i = start; i < len && residue - candidates[i] >= 0; i++) { pre.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i \u800c\u4e0d\u662f i + 1 findCombinationSum(residue - candidates[i], i, pre); pre.pop(); } } public List<List<Integer>> combinationSum(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } // \u4f18\u5316\u6dfb\u52a0\u7684\u4ee3\u78011\uff1a\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5224\u65ad Arrays.sort(candidates); this.len = len; this.candidates = candidates; findCombinationSum(target, 0, new Stack<>()); return res; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"leetcode-0040-combination-sum-ii/","text":"40. Combination Sum II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5] , target = 8 , \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 40. Combination Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 40. \u7ec4\u5408\u603b\u548c II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002 \uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b \uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6 // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) { if (residue == 0) { res.add(new ArrayList<>(stack)); return; } for (int i = begin; i < len && residue - candidates[i] >= 0; i++) { // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002 // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b if (i > begin && candidates[i] == candidates[i - 1]) { continue; } stack.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i findCombinationSum2(residue - candidates[i], i + 1, stack); stack.pop(); } } public List<List<Integer>> combinationSum2(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } this.len = len; // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e Arrays.sort(candidates); this.candidates = candidates; findCombinationSum2(target, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] candidates = {2, 5, 2, 1, 2}; int target = 5; Solution solution = new Solution(); List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target); System.out.println(combinationSum2); } }","title":"40. Combination Sum II"},{"location":"leetcode-0040-combination-sum-ii/#40-combination-sum-ii","text":"","title":"40. Combination Sum II"},{"location":"leetcode-0040-combination-sum-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5] , target = 8 , \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 40. Combination Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 40. \u7ec4\u5408\u603b\u548c II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0040-combination-sum-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u5982\u4f55\u5728\u7ed3\u679c\u96c6\u4e2d\u53bb\u9664\u91cd\u590d\u7684\u65b9\u6cd5\u3002 \uff081\uff09\u4e0e\u7b2c 39 \u9898\u7684\u533a\u522b\uff0c\u7b2c 39 \u9898\u7684\u6570\u7ec4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff1b\u7b2c 40 \u9898\u7684\u6570\u7ec4\u6709\u91cd\u590d\u6570\u5b57\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5177\u4f53\u5c31\u4f53\u73b0\u5728\u8fdb\u884c\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u7684\u90a3\u4e2a\u7d22\u5f15\u503c\u662f\u591a\u5c11\uff1b \uff082\uff09\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5e94\u8be5\u5148\u5bf9\u7ed9\u51fa\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5e8f\u7684\u76ee\u7684\u6709\u4e24\u4e2a\uff1a\u5176\u4e00\u662f\uff0c\u53ef\u4ee5\u63d0\u524d\u7ec8\u6b62\u5faa\u73af\uff0c\u5176\u4e8c\u662f\u201c\u5728\u9012\u5f52\u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u4e00\u4e2a\u503c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u201d\uff0c\u8fd9\u4e00\u5904\u7406\u4e5f\u51e0\u4e4e\u6210\u4e3a\u4e86\u6807\u51c6\u5199\u6cd5\uff0c\u6216\u8bb8\u521a\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u65f6\u5019\u5e76\u4e0d\u597d\u7406\u89e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u51fa\u56fe\u6765\u7406\u89e3\uff0c\u7136\u540e\u591a\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7ec3\u4e60\uff0c\u7406\u89e3\u4ee3\u7801\u4e3a\u4ec0\u4e48\u90a3\u6837\u5199\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0040-combination-sum-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0040-combination-sum-ii/#1","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private int[] candidates; private int len; // residue \u8868\u793a\u5269\u4f59\uff0c\u8fd9\u4e2a\u503c\u4e00\u5f00\u59cb\u7b49\u4e8e target\uff0c\u57fa\u4e8e\u9898\u76ee\u4e2d\u8bf4\u660e\u7684\"\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\"\u8fd9\u4e2a\u6761\u4ef6 // residue \u5728\u9012\u5f52\u904d\u5386\u4e2d\uff0c\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5c0f private void findCombinationSum2(int residue, int begin, Stack<Integer> stack) { if (residue == 0) { res.add(new ArrayList<>(stack)); return; } for (int i = begin; i < len && residue - candidates[i] >= 0; i++) { // \u8fd9\u4e00\u6b65\u4e4b\u6240\u4ee5\u80fd\u591f\u751f\u6548\uff0c\u5176\u524d\u63d0\u662f\u6570\u7ec4\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff1a // \u5728\u9012\u5f52\u8c03\u7528\u7684\u7edf\u4e00\u6df1\u5ea6\uff08\u5c42\uff09\u4e2d\uff0c\u4e00\u4e2a\u5143\u7d20\u53ea\u4f7f\u7528\u4e00\u6b21\u3002 // \u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u57fa\u4e8e candidates \u6570\u7ec4\u662f\u6392\u5e8f\u6570\u7ec4\u7684\u524d\u63d0\u4e0b if (i > begin && candidates[i] == candidates[i - 1]) { continue; } stack.add(candidates[i]); // \u3010\u5173\u952e\u3011\u56e0\u4e3a\u5143\u7d20\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u8fd9\u91cc\u9012\u5f52\u4f20\u9012\u4e0b\u53bb\u7684\u662f i + 1 \u800c\u4e0d\u662f i findCombinationSum2(residue - candidates[i], i + 1, stack); stack.pop(); } } public List<List<Integer>> combinationSum2(int[] candidates, int target) { int len = candidates.length; if (len == 0) { return res; } this.len = len; // \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e Arrays.sort(candidates); this.candidates = candidates; findCombinationSum2(target, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] candidates = {2, 5, 2, 1, 2}; int target = 5; Solution solution = new Solution(); List<List<Integer>> combinationSum2 = solution.combinationSum2(candidates, target); System.out.println(combinationSum2); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0041-first-missing-positive/","text":"41. First Missing Positive \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,0] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [3,4,-1,1] \u8f93\u51fa: 2 \u793a\u4f8b 3: \u8f93\u5165: [7,8,9,11,12] \u8f93\u51fa: 1 \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO( n )\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 41. First Missing Positive \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u7406\u89e3\u201c\u6876\u6392\u5e8f\u201d\uff0c\u5143\u7d20\u653e\u5728\u5b83\u5e94\u8be5\u653e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5176\u5b83\u4f4d\u7f6e\u5b81\u53ef\u7a7a\u7740\u3002 \u53ef\u4ee5\u627e\u5176\u5b83\u76f8\u5173\u7684\u6876\u6392\u5e8f\u7684\u95ee\u9898\u6765\u505a\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u5173\u952e\u5b57\uff1a\u6876\u6392\u5e8f\uff0c\u4ec0\u4e48\u6570\u5b57\u5c31\u8981\u653e\u5728\u5bf9\u5e94\u7684\u7d22\u5f15\u4e0a\uff0c\u5176\u5b83\u7a7a\u7740\u5c31\u7a7a\u7740 // \u6700\u597d\u7684\u4f8b\u5b50\uff1a[3,4,-1,1] // \u6574\u7406\u597d\u5e94\u8be5\u662f\u8fd9\u6837\uff1a[1,-1,3,4]\uff0c // \u8fd9\u91cc 1\uff0c3\uff0c4 \u90fd\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c // -1 \u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u7d22\u5f15\u662f 1 \uff0c\u6240\u4ee5\u8fd4\u56de 2 // [4,3,2,1] \u8981\u53d8\u6210 [1,2,3,4]\uff0c\u5251\u6307 Offer \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 // \u8fd9\u91cc\u8d1f\u6570\u548c\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u90fd\u662f\"\u6363\u4e71\u9879\"\u3002 public int firstMissingPositive(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // \u524d\u4e24\u4e2a\u662f\u5728\u5224\u65ad\u662f\u5426\u6210\u4e3a\u7d22\u5f15 // \u540e\u4e00\u4e2a\u662f\u5728\u5224\u65ad\uff0c\u4f8b\u5982 3 \u5728\u4e0d\u5728\u7d22\u5f15 2 \u4e0a // \u5373 nums[i] ?= nums[nums[i]-1] \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3 while (nums[i] > 0 && nums[i] <= len && nums[nums[i] - 1] != nums[i]) { // \u7b2c 3 \u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u7d22\u5f15\u7684\u90e8\u5206\u662f i \u548c nums[i]-1 swap(nums, nums[i] - 1, i); } } // \u8c03\u8bd5\u4ee3\u7801 // System.out.println(Arrays.toString(nums)); for (int i = 0; i < len; i++) { // [1,-2,3,4] // \u9664\u4e86 -2 \u5176\u5b83\u90fd\u6ee1\u8db3\uff1a i+1 = num[i] if (nums[i] - 1 != i) { return i + 1; } } return len + 1; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { Solution solution = new Solution(); // int[] nums = {3, 4, -1, 5}; int[] nums = {4, 3, 2, 1}; int firstMissingPositive = solution.firstMissingPositive(nums); System.out.println(firstMissingPositive); } } Python \u5199\u6cd5\uff1a class Solution: def firstMissingPositive(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50 # [3,4,-1,1] # [-1,4,3,1] # [-1,1,3,4] # 3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9 # 4 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 3 \u7684\u5730\u65b9 for i in range(len(nums)): # nums[i] > 0 and nums[i] <= len(nums) \u7684\u610f\u601d\u662f\uff1a\u53ea\u8981\u662f\u7b26\u5408\u7d22\u5f15\u7684\u6570\u5b57 # \u8fd9\u91cc\u7684\u7d22\u5f15\u5e94\u8be5\u8ba4\u4e3a\u4ece 1 \u5f00\u59cb # \u5c31\u8981\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u5730\u65b9\u4e0a\u53bb\uff0c\u8fd9\u4e00\u6b65\u53eb hash # nums[i] == nums[nums[i]-1]\uff0c\u53eb\u653e\u5230\u4e86\u6b63\u786e\u7684\u5730\u65b9 # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u6240\u4ee5\uff0c\u5148\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u7d22\u5f15 # \u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u653e\u5728\u4e86\u6b63\u786e\u7684\u5730\u65b9 while 1 <= nums[i] <= len(nums) and nums[i] != nums[nums[i] - 1]: # \u4ea4\u6362 self.__swap(nums, i, nums[i] - 1) # \u518d\u904d\u5386\u4e00\u6b21\uff0c\u6ca1\u6709\u653e\u5bf9\u7684\u5c31\u662f\u4f60\u8981\u627e\u7684 for i in range(len(nums)): # value\uff1a [1,2,3,4] # index\uff1a [0,1,2,3] if i + 1 != nums[i]: return i + 1 return len(nums) + 1 def __swap(self, nums, index1, index2): nums[index1], nums[index2] = nums[index2], nums[index1] \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0041-first-missing-positive \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"41. First Missing Positive"},{"location":"leetcode-0041-first-missing-positive/#41-first-missing-positive","text":"","title":"41. First Missing Positive"},{"location":"leetcode-0041-first-missing-positive/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,0] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [3,4,-1,1] \u8f93\u51fa: 2 \u793a\u4f8b 3: \u8f93\u5165: [7,8,9,11,12] \u8f93\u51fa: 1 \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO( n )\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 41. First Missing Positive \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0041-first-missing-positive/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7406\u89e3\u201c\u6876\u6392\u5e8f\u201d\uff0c\u5143\u7d20\u653e\u5728\u5b83\u5e94\u8be5\u653e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5176\u5b83\u4f4d\u7f6e\u5b81\u53ef\u7a7a\u7740\u3002 \u53ef\u4ee5\u627e\u5176\u5b83\u76f8\u5173\u7684\u6876\u6392\u5e8f\u7684\u95ee\u9898\u6765\u505a\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0041-first-missing-positive/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0041-first-missing-positive/#1","text":"Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u5173\u952e\u5b57\uff1a\u6876\u6392\u5e8f\uff0c\u4ec0\u4e48\u6570\u5b57\u5c31\u8981\u653e\u5728\u5bf9\u5e94\u7684\u7d22\u5f15\u4e0a\uff0c\u5176\u5b83\u7a7a\u7740\u5c31\u7a7a\u7740 // \u6700\u597d\u7684\u4f8b\u5b50\uff1a[3,4,-1,1] // \u6574\u7406\u597d\u5e94\u8be5\u662f\u8fd9\u6837\uff1a[1,-1,3,4]\uff0c // \u8fd9\u91cc 1\uff0c3\uff0c4 \u90fd\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c // -1 \u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u7d22\u5f15\u662f 1 \uff0c\u6240\u4ee5\u8fd4\u56de 2 // [4,3,2,1] \u8981\u53d8\u6210 [1,2,3,4]\uff0c\u5251\u6307 Offer \u4e0a\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 // \u8fd9\u91cc\u8d1f\u6570\u548c\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u90fd\u662f\"\u6363\u4e71\u9879\"\u3002 public int firstMissingPositive(int[] nums) { int len = nums.length; for (int i = 0; i < len; i++) { // \u524d\u4e24\u4e2a\u662f\u5728\u5224\u65ad\u662f\u5426\u6210\u4e3a\u7d22\u5f15 // \u540e\u4e00\u4e2a\u662f\u5728\u5224\u65ad\uff0c\u4f8b\u5982 3 \u5728\u4e0d\u5728\u7d22\u5f15 2 \u4e0a // \u5373 nums[i] ?= nums[nums[i]-1] \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3 while (nums[i] > 0 && nums[i] <= len && nums[nums[i] - 1] != nums[i]) { // \u7b2c 3 \u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\u7684\u7d22\u5f15\u7684\u90e8\u5206\u662f i \u548c nums[i]-1 swap(nums, nums[i] - 1, i); } } // \u8c03\u8bd5\u4ee3\u7801 // System.out.println(Arrays.toString(nums)); for (int i = 0; i < len; i++) { // [1,-2,3,4] // \u9664\u4e86 -2 \u5176\u5b83\u90fd\u6ee1\u8db3\uff1a i+1 = num[i] if (nums[i] - 1 != i) { return i + 1; } } return len + 1; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { Solution solution = new Solution(); // int[] nums = {3, 4, -1, 5}; int[] nums = {4, 3, 2, 1}; int firstMissingPositive = solution.firstMissingPositive(nums); System.out.println(firstMissingPositive); } } Python \u5199\u6cd5\uff1a class Solution: def firstMissingPositive(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" # \u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50 # [3,4,-1,1] # [-1,4,3,1] # [-1,1,3,4] # 3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9 # 4 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 3 \u7684\u5730\u65b9 for i in range(len(nums)): # nums[i] > 0 and nums[i] <= len(nums) \u7684\u610f\u601d\u662f\uff1a\u53ea\u8981\u662f\u7b26\u5408\u7d22\u5f15\u7684\u6570\u5b57 # \u8fd9\u91cc\u7684\u7d22\u5f15\u5e94\u8be5\u8ba4\u4e3a\u4ece 1 \u5f00\u59cb # \u5c31\u8981\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u5730\u65b9\u4e0a\u53bb\uff0c\u8fd9\u4e00\u6b65\u53eb hash # nums[i] == nums[nums[i]-1]\uff0c\u53eb\u653e\u5230\u4e86\u6b63\u786e\u7684\u5730\u65b9 # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u4f8b\u5982\uff0c3 \u5e94\u8be5\u653e\u5728\u7d22\u5f15\u4e3a 2 \u7684\u5730\u65b9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u8fd9\u53e5\u8bdd\u591a\u8bfb\u51e0\u904d # \u6240\u4ee5\uff0c\u5148\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u7d22\u5f15 # \u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u6570\u5b57\u662f\u4e0d\u662f\u653e\u5728\u4e86\u6b63\u786e\u7684\u5730\u65b9 while 1 <= nums[i] <= len(nums) and nums[i] != nums[nums[i] - 1]: # \u4ea4\u6362 self.__swap(nums, i, nums[i] - 1) # \u518d\u904d\u5386\u4e00\u6b21\uff0c\u6ca1\u6709\u653e\u5bf9\u7684\u5c31\u662f\u4f60\u8981\u627e\u7684 for i in range(len(nums)): # value\uff1a [1,2,3,4] # index\uff1a [0,1,2,3] if i + 1 != nums[i]: return i + 1 return len(nums) + 1 def __swap(self, nums, index1, index2): nums[index1], nums[index2] = nums[index2], nums[index1] \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0041-first-missing-positive \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0042-trapping-rain-water/","text":"42. Trapping Rain Water \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002 \u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \u611f\u8c22 Marcos \u8d21\u732e\u6b64\u56fe\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,2,1,0,1,3,2,1,2,1] \u8f93\u51fa: 6 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 42. Trapping Rain Water \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 42. \u63a5\u96e8\u6c34 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"42. Trapping Rain Water"},{"location":"leetcode-0042-trapping-rain-water/#42-trapping-rain-water","text":"","title":"42. Trapping Rain Water"},{"location":"leetcode-0042-trapping-rain-water/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002 \u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \u611f\u8c22 Marcos \u8d21\u732e\u6b64\u56fe\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,2,1,0,1,3,2,1,2,1] \u8f93\u51fa: 6 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 42. Trapping Rain Water \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 42. \u63a5\u96e8\u6c34 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0042-trapping-rain-water/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0042-trapping-rain-water/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0042-trapping-rain-water/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0043-multiply-strings/","text":"43. Multiply Strings \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num1 \u548c num2 \uff0c\u8fd4\u56de num1 \u548c num2 \u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002 \u793a\u4f8b 1: \u8f93\u5165: num1 = \"2\", num2 = \"3\" \u8f93\u51fa: \"6\" \u793a\u4f8b 2: \u8f93\u5165: num1 = \"123\", num2 = \"456\" \u8f93\u51fa: \"56088\" \u8bf4\u660e\uff1a num1 \u548c num2 \u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002 num1 \u548c num2 \u53ea\u5305\u542b\u6570\u5b57 0-9 \u3002 num1 \u548c num2 \u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002 \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09 \u6216 \u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 43. Multiply Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 43. \u5b57\u7b26\u4e32\u76f8\u4e58 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"43. Multiply Strings"},{"location":"leetcode-0043-multiply-strings/#43-multiply-strings","text":"","title":"43. Multiply Strings"},{"location":"leetcode-0043-multiply-strings/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num1 \u548c num2 \uff0c\u8fd4\u56de num1 \u548c num2 \u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002 \u793a\u4f8b 1: \u8f93\u5165: num1 = \"2\", num2 = \"3\" \u8f93\u51fa: \"6\" \u793a\u4f8b 2: \u8f93\u5165: num1 = \"123\", num2 = \"456\" \u8f93\u51fa: \"56088\" \u8bf4\u660e\uff1a num1 \u548c num2 \u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002 num1 \u548c num2 \u53ea\u5305\u542b\u6570\u5b57 0-9 \u3002 num1 \u548c num2 \u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002 \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09 \u6216 \u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 43. Multiply Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 43. \u5b57\u7b26\u4e32\u76f8\u4e58 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0043-multiply-strings/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0043-multiply-strings/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0043-multiply-strings/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0044-wildcard-matching/","text":"44. Wildcard Matching \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f ( p ) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '?' \u548c '*' \u7684\u901a\u914d\u7b26\u5339\u914d\u3002 '?' \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 '*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32 \u5b8c\u5168\u5339\u914d \u624d\u7b97\u5339\u914d\u6210\u529f\u3002 \u8bf4\u660e: s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 ? \u548c * \u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"*\" \u8f93\u51fa: true \u89e3\u91ca: '*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"cb\" p = \"?a\" \u8f93\u51fa: false \u89e3\u91ca: '?' \u53ef\u4ee5\u5339\u914d 'c', \u4f46\u7b2c\u4e8c\u4e2a 'a' \u65e0\u6cd5\u5339\u914d 'b'\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"adceb\" p = \"*a*b\" \u8f93\u51fa: true \u89e3\u91ca: \u7b2c\u4e00\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"dce\". \u793a\u4f8b 5: \u8f93\u5165: s = \"acdcb\" p = \"a*c?b\" \u8f93\u5165: false \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 44. Wildcard Matching \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 44. \u901a\u914d\u7b26\u5339\u914d \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"44. Wildcard Matching"},{"location":"leetcode-0044-wildcard-matching/#44-wildcard-matching","text":"","title":"44. Wildcard Matching"},{"location":"leetcode-0044-wildcard-matching/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 ( s ) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f ( p ) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '?' \u548c '*' \u7684\u901a\u914d\u7b26\u5339\u914d\u3002 '?' \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 '*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32 \u5b8c\u5168\u5339\u914d \u624d\u7b97\u5339\u914d\u6210\u529f\u3002 \u8bf4\u660e: s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 ? \u548c * \u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"*\" \u8f93\u51fa: true \u89e3\u91ca: '*' \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"cb\" p = \"?a\" \u8f93\u51fa: false \u89e3\u91ca: '?' \u53ef\u4ee5\u5339\u914d 'c', \u4f46\u7b2c\u4e8c\u4e2a 'a' \u65e0\u6cd5\u5339\u914d 'b'\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"adceb\" p = \"*a*b\" \u8f93\u51fa: true \u89e3\u91ca: \u7b2c\u4e00\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a '*' \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"dce\". \u793a\u4f8b 5: \u8f93\u5165: s = \"acdcb\" p = \"a*c?b\" \u8f93\u5165: false \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 44. Wildcard Matching \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 44. \u901a\u914d\u7b26\u5339\u914d \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0044-wildcard-matching/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0044-wildcard-matching/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0044-wildcard-matching/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0045-jump-game-ii/","text":"45. Jump Game II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: 2 \u89e3\u91ca: \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f 2 \u3002 \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3 1 \u6b65\uff0c\u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u8bf4\u660e: \u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 45. Jump Game II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 45. \u8df3\u8dc3\u6e38\u620f II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"45. Jump Game II"},{"location":"leetcode-0045-jump-game-ii/#45-jump-game-ii","text":"","title":"45. Jump Game II"},{"location":"leetcode-0045-jump-game-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: 2 \u89e3\u91ca: \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f 2 \u3002 \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3 1 \u6b65\uff0c\u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u8bf4\u660e: \u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 45. Jump Game II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 45. \u8df3\u8dc3\u6e38\u620f II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0045-jump-game-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0045-jump-game-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0045-jump-game-ii/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0046-permutations/","text":"46. Permutations \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 46. Permutations \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 46. \u5168\u6392\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; import java.util.Stack; // https://leetcode-cn.com/problems/permutations/description/ public class Solution { private List<List<Integer>> res = new ArrayList<>(); // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86 private int[] nums; private boolean[] marked; // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 private void findPermutions(int hasUsedCount, Stack<Integer> stack) { // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b // System.out.println(Arrays.toString(used)); if (hasUsedCount == nums.length) { // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d res.add(new ArrayList<>(stack)); return; } for (int i = 0; i < nums.length; i++) { if (!marked[i]) { marked[i] = true; stack.push(nums[i]); findPermutions(hasUsedCount + 1, stack); stack.pop(); marked[i] = false; } } } public List<List<Integer>> permute(int[] nums) { int len = nums.length; if (len == 0) { return res; } this.nums = nums; marked = new boolean[len]; findPermutions(0, new Stack<>()); return res; } public static void main(String[] args) { int[] nums = {1, 2, 3}; Solution solution = new Solution(); List<List<Integer>> permute = solution.permute(nums); System.out.println(permute); } }","title":"46. Permutations"},{"location":"leetcode-0046-permutations/#46-permutations","text":"","title":"46. Permutations"},{"location":"leetcode-0046-permutations/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 46. Permutations \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 46. \u5168\u6392\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0046-permutations/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u7406\u89e3\u9898\u610f\u5e76\u4e14\u6253\u5370\u51fa\u4e00\u4e9b\u4fe1\u606f\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0046-permutations/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0046-permutations/#1","text":"import java.util.ArrayList; import java.util.List; import java.util.Stack; // https://leetcode-cn.com/problems/permutations/description/ public class Solution { private List<List<Integer>> res = new ArrayList<>(); // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u4e5f\u662f\u5957\u8def\u4e86 private int[] nums; private boolean[] marked; // hasUsedCount \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 private void findPermutions(int hasUsedCount, Stack<Integer> stack) { // \u8fd9\u4e00\u884c\u4ee3\u7801\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89c2\u5bdf\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b // System.out.println(Arrays.toString(used)); if (hasUsedCount == nums.length) { // \u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d res.add(new ArrayList<>(stack)); return; } for (int i = 0; i < nums.length; i++) { if (!marked[i]) { marked[i] = true; stack.push(nums[i]); findPermutions(hasUsedCount + 1, stack); stack.pop(); marked[i] = false; } } } public List<List<Integer>> permute(int[] nums) { int len = nums.length; if (len == 0) { return res; } this.nums = nums; marked = new boolean[len]; findPermutions(0, new Stack<>()); return res; } public static void main(String[] args) { int[] nums = {1, 2, 3}; Solution solution = new Solution(); List<List<Integer>> permute = solution.permute(nums); System.out.println(permute); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0047-permutations-ii/","text":"47. Permutations II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,1,2] \u8f93\u51fa: [ [1,1,2], [1,2,1], [2,1,1] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 47. Permutations II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 47. \u5168\u6392\u5217 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002 1\u3001 \u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f \uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b 2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09 i > 0 \uff0c\uff082\uff09 nums[i] == nums[i - 1] \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373 marked[i-1] = false \u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private boolean[] marked; private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) { if (depth == nums.length) { res.add(new ArrayList<>(stack)); return; } for (int i = 0; i < nums.length; i++) { if (!marked[i]) { // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684 // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86 if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) { continue; } marked[i] = true; stack.add(nums[i]); findPermuteUnique(nums, depth + 1, stack); stack.pop(); marked[i] = false; } } } public List<List<Integer>> permuteUnique(int[] nums) { int len = nums.length; if (len == 0) { return res; } // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840 Arrays.sort(nums); marked = new boolean[len]; findPermuteUnique(nums, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] nums = {1, 1, 2}; Solution solution = new Solution(); List<List<Integer>> permuteUnique = solution.permuteUnique(nums); System.out.println(permuteUnique); } }","title":"47. Permutations II"},{"location":"leetcode-0047-permutations-ii/#47-permutations-ii","text":"","title":"47. Permutations II"},{"location":"leetcode-0047-permutations-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,1,2] \u8f93\u51fa: [ [1,1,2], [1,2,1], [2,1,1] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 47. Permutations II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 47. \u5168\u6392\u5217 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0047-permutations-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u91cd\u590d\u7684\u539f\u56e0\uff0c\u5bf9\u6811\u8fdb\u884c\u526a\u679d\u3002 1\u3001 \u9996\u5148\u5c06\u6570\u7ec4\u6392\u5e8f \uff0c\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840\uff1b 2\u3001\u53ea\u5904\u7406\u7b2c 1 \u6b21\u9047\u5230\u7684\u90a3\u4e2a\u6570\uff0c\u4e3e\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u753b\u4e2a\u56fe\u3002\u91cd\u70b9\u7406\u89e3\uff1a\uff081\uff09 i > 0 \uff0c\uff082\uff09 nums[i] == nums[i - 1] \uff0c\uff083\uff09\u4e4b\u524d\u90a3\u4e2a\u6570\u8fd8\u6ca1\u6709\u4f7f\u7528\uff0c\u5373 marked[i-1] = false \u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0047-permutations-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0047-permutations-ii/#1","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Stack; public class Solution { private List<List<Integer>> res = new ArrayList<>(); private boolean[] marked; private void findPermuteUnique(int[] nums, int depth, Stack<Integer> stack) { if (depth == nums.length) { res.add(new ArrayList<>(stack)); return; } for (int i = 0; i < nums.length; i++) { if (!marked[i]) { // i > 0 \u662f\u4e3a\u4e86\u4fdd\u8bc1 marked[i - 1] \u6709\u610f\u4e49\uff0c\u4e8b\u5b9e\u4e0a i = 0 \u662f\u4e00\u5b9a\u5728\u89e3\u5f53\u4e2d\u7684 // \u76f8\u5f53\u4e8e\u6811\u88ab\u526a\u679d\uff0c\u91cd\u70b9\u4f53\u4f1a\u8fd9\u4e00\u6b65\u526a\u679d\u64cd\u4f5c\u662f\u4e3a\u4ec0\u4e48\uff0c\u5176\u5b9e\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\u4e86 if (i > 0 && nums[i] == nums[i - 1] && !marked[i - 1]) { continue; } marked[i] = true; stack.add(nums[i]); findPermuteUnique(nums, depth + 1, stack); stack.pop(); marked[i] = false; } } } public List<List<Integer>> permuteUnique(int[] nums) { int len = nums.length; if (len == 0) { return res; } // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u662f\u540e\u9762\u526a\u679d\u7684\u57fa\u7840 Arrays.sort(nums); marked = new boolean[len]; findPermuteUnique(nums, 0, new Stack<>()); return res; } public static void main(String[] args) { int[] nums = {1, 1, 2}; Solution solution = new Solution(); List<List<Integer>> permuteUnique = solution.permuteUnique(nums); System.out.println(permuteUnique); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0048-rotate-image/","text":"48. Rotate Image \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002 \u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2: \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 48. Rotate Image \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 48. \u65cb\u8f6c\u56fe\u50cf \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"48. Rotate Image"},{"location":"leetcode-0048-rotate-image/#48-rotate-image","text":"","title":"48. Rotate Image"},{"location":"leetcode-0048-rotate-image/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002 \u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2: \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730 \u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 48. Rotate Image \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 48. \u65cb\u8f6c\u56fe\u50cf \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0048-rotate-image/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0048-rotate-image/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0048-rotate-image/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0049-group-anagrams/","text":"49. Group Anagrams \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"] , \u8f93\u51fa: [ [\"ate\",\"eat\",\"tea\"], [\"nat\",\"tan\"], [\"bat\"] ] \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 49. Group Anagrams \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"49. Group Anagrams"},{"location":"leetcode-0049-group-anagrams/#49-group-anagrams","text":"","title":"49. Group Anagrams"},{"location":"leetcode-0049-group-anagrams/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"] , \u8f93\u51fa: [ [\"ate\",\"eat\",\"tea\"], [\"nat\",\"tan\"], [\"bat\"] ] \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 49. Group Anagrams \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0049-group-anagrams/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0049-group-anagrams/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0049-group-anagrams/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0050-powx-n/","text":"50. Pow(x, n) \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2 -2 = 1/2 2 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 50. Pow(x, n) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 50. Pow(x, n) \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"50. Pow(x, n)"},{"location":"leetcode-0050-powx-n/#50-powx-n","text":"","title":"50. Pow(x, n)"},{"location":"leetcode-0050-powx-n/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 pow( x , n ) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2 -2 = 1/2 2 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122 31 , 2 31 \u2212 1] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 50. Pow(x, n) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 50. Pow(x, n) \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0050-powx-n/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0050-powx-n/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0050-powx-n/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0051-n-queens/","text":"51. N-Queens \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 51. N-Queens \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 51. N\u7687\u540e \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"51. N-Queens"},{"location":"leetcode-0051-n-queens/#51-n-queens","text":"","title":"51. N-Queens"},{"location":"leetcode-0051-n-queens/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 51. N-Queens \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 51. N\u7687\u540e \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0051-n-queens/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0051-n-queens/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0051-n-queens/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0052-n-queens-ii/","text":"52. N-Queens II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de n \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 52. N-Queens II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 52. N\u7687\u540e II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"52. N-Queens II"},{"location":"leetcode-0052-n-queens-ii/#52-n-queens-ii","text":"","title":"52. N-Queens II"},{"location":"leetcode-0052-n-queens-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de n \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 52. N-Queens II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 52. N\u7687\u540e II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0052-n-queens-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0052-n-queens-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0052-n-queens-ii/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0053-maximum-subarray/","text":"53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09 \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4], \u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O( n ) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 53. Maximum Subarray \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 53. \u6700\u5927\u5b50\u5e8f\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6211\u4eec\u7740\u773c\u4e8e\u4ee5\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7ed3\u5c3e\u7684\u90a3\u4e2a\u5b50\u6570\u7ec4\uff0c\u8fd9\u6837\u505a\u5206\u6790\u4f1a\u7b80\u5316\u95ee\u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 /** * \u5b9a\u4e49\u72b6\u6001\uff1a * dp[i] \uff1a \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c * <p> * \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i] = max{num[i],dp[i-1] + num[i]} * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int[] dp = new int[len]; dp[0] = nums[0]; for (int i = 1; i < len; i++) { dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]); } // \u6700\u540e\u8fd9\u4e00\u6b65\uff0c\u662f\u6c42\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u4f18\u503c int res = dp[0]; for (int i = 1; i < len; i++) { res = Math.max(res,dp[i]); } return res; } } \u53c2\u8003\u89e3\u7b542 \uff1a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u628a\u6700\u4f18\u89e3\u89e3\u6c42\u51fa\u6765\u4e86\u3002 public class Solution2 { /** * \u548c Solution \u4e00\u6837\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u5c0f * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int segmentSum = nums[0]; int res = nums[0]; for (int i = 1; i < len; i++) { segmentSum = Math.max(nums[i], segmentSum + nums[i]); res = Math.max(res, segmentSum); } return res; } public static void main(String[] args) { int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4}; Solution2 solution = new Solution2(); int maxSubArray = solution.maxSubArray(nums); System.out.println(maxSubArray); } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u4e2a\u4eba\u89c9\u5f97\u7a0d\u663e\u7e41\u7410\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4e86\u89e3\u5206\u6cbb\u601d\u60f3\u3002 public class Solution3 { /** * \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5\u5b8c\u6210\u8ba1\u7b97 * https://www.geeksforgeeks.org/divide-and-conquer-maximum-sum-subarray/ * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } return maxSubArraySum(nums, 0, len - 1); } /** * \u4e00\u5b9a\u4f1a\u5305\u542b nums[mid] \u8fd9\u4e2a\u5143\u7d20 * * @param nums * @param l * @param m * @param r * @return */ private int maxCrossingSum(int[] nums, int l, int m, int r) { int sum = 0; int leftSum = Integer.MIN_VALUE; // \u5de6\u534a\u8fb9\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9 // \u8d70\u5230\u6700\u8fb9\u754c\uff0c\u770b\u770b\u6700\u503c\u662f\u4ec0\u4e48 // \u8ba1\u7b97\u4ee5 mid \u7ed3\u5c3e\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c for (int i = m; i >= l; i--) { sum += nums[i]; if (sum > leftSum) { leftSum = sum; } } sum = 0; int rightSum = Integer.MIN_VALUE; // \u53f3\u534a\u8fb9\u4e0d\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9 // \u8ba1\u7b97\u4ee5 mid+1 \u5f00\u59cb\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c for (int i = m + 1; i <= r; i++) { sum += nums[i]; if (sum > rightSum) { rightSum = sum; } } return leftSum + rightSum; } /** * @param nums * @param l * @param r * @return */ private int maxSubArraySum(int[] nums, int l, int r) { if (l == r) { return nums[l]; } int mid = l + (r - l) / 2; return max3(maxSubArraySum(nums, l, mid), maxSubArraySum(nums, mid + 1, r), maxCrossingSum(nums, l, mid, r)); } private int max3(int num1, int num2, int num3) { return Math.max(num1, Math.max(num2, num3)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0053-maximum-subarray \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09"},{"location":"leetcode-0053-maximum-subarray/#53-maximum-subarray","text":"","title":"53. Maximum Subarray\uff08\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u95ee\u9898\uff09"},{"location":"leetcode-0053-maximum-subarray/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4], \u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O( n ) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 53. Maximum Subarray \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 53. \u6700\u5927\u5b50\u5e8f\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0053-maximum-subarray/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6211\u4eec\u7740\u773c\u4e8e\u4ee5\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7ed3\u5c3e\u7684\u90a3\u4e2a\u5b50\u6570\u7ec4\uff0c\u8fd9\u6837\u505a\u5206\u6790\u4f1a\u7b80\u5316\u95ee\u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0053-maximum-subarray/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0053-maximum-subarray/#1","text":"public class Solution { // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 /** * \u5b9a\u4e49\u72b6\u6001\uff1a * dp[i] \uff1a \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c * <p> * \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i] = max{num[i],dp[i-1] + num[i]} * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int[] dp = new int[len]; dp[0] = nums[0]; for (int i = 1; i < len; i++) { dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]); } // \u6700\u540e\u8fd9\u4e00\u6b65\uff0c\u662f\u6c42\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u4f18\u503c int res = dp[0]; for (int i = 1; i < len; i++) { res = Math.max(res,dp[i]); } return res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0053-maximum-subarray/#2-1","text":"public class Solution2 { /** * \u548c Solution \u4e00\u6837\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u5c0f * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } int segmentSum = nums[0]; int res = nums[0]; for (int i = 1; i < len; i++) { segmentSum = Math.max(nums[i], segmentSum + nums[i]); res = Math.max(res, segmentSum); } return res; } public static void main(String[] args) { int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4}; Solution2 solution = new Solution2(); int maxSubArray = solution.maxSubArray(nums); System.out.println(maxSubArray); } }","title":"\u53c2\u8003\u89e3\u7b542 \uff1a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u628a\u6700\u4f18\u89e3\u89e3\u6c42\u51fa\u6765\u4e86\u3002"},{"location":"leetcode-0053-maximum-subarray/#3","text":"public class Solution3 { /** * \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5\u5b8c\u6210\u8ba1\u7b97 * https://www.geeksforgeeks.org/divide-and-conquer-maximum-sum-subarray/ * * @param nums * @return */ public int maxSubArray(int[] nums) { int len = nums.length; if (len == 0) { return 0; } return maxSubArraySum(nums, 0, len - 1); } /** * \u4e00\u5b9a\u4f1a\u5305\u542b nums[mid] \u8fd9\u4e2a\u5143\u7d20 * * @param nums * @param l * @param m * @param r * @return */ private int maxCrossingSum(int[] nums, int l, int m, int r) { int sum = 0; int leftSum = Integer.MIN_VALUE; // \u5de6\u534a\u8fb9\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9 // \u8d70\u5230\u6700\u8fb9\u754c\uff0c\u770b\u770b\u6700\u503c\u662f\u4ec0\u4e48 // \u8ba1\u7b97\u4ee5 mid \u7ed3\u5c3e\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c for (int i = m; i >= l; i--) { sum += nums[i]; if (sum > leftSum) { leftSum = sum; } } sum = 0; int rightSum = Integer.MIN_VALUE; // \u53f3\u534a\u8fb9\u4e0d\u5305\u542b nums[mid] \u5143\u7d20\uff0c\u6700\u591a\u53ef\u4ee5\u5230\u4ec0\u4e48\u5730\u65b9 // \u8ba1\u7b97\u4ee5 mid+1 \u5f00\u59cb\u7684\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u548c for (int i = m + 1; i <= r; i++) { sum += nums[i]; if (sum > rightSum) { rightSum = sum; } } return leftSum + rightSum; } /** * @param nums * @param l * @param r * @return */ private int maxSubArraySum(int[] nums, int l, int r) { if (l == r) { return nums[l]; } int mid = l + (r - l) / 2; return max3(maxSubArraySum(nums, l, mid), maxSubArraySum(nums, mid + 1, r), maxCrossingSum(nums, l, mid, r)); } private int max3(int num1, int num2, int num3) { return Math.max(num1, Math.max(num2, num3)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0053-maximum-subarray \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u4e2a\u4eba\u89c9\u5f97\u7a0d\u663e\u7e41\u7410\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4e86\u89e3\u5206\u6cbb\u601d\u60f3\u3002"},{"location":"leetcode-0054-spiral-matrix/","text":"54. Spiral Matrix \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m x n \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08 m \u884c, n \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] \u8f93\u51fa: [1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2: \u8f93\u5165: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa: [1,2,3,4,8,12,11,10,9,5,6,7] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 54. Spiral Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 54. \u87ba\u65cb\u77e9\u9635 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"54. Spiral Matrix"},{"location":"leetcode-0054-spiral-matrix/#54-spiral-matrix","text":"","title":"54. Spiral Matrix"},{"location":"leetcode-0054-spiral-matrix/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m x n \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08 m \u884c, n \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] \u8f93\u51fa: [1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2: \u8f93\u5165: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa: [1,2,3,4,8,12,11,10,9,5,6,7] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 54. Spiral Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 54. \u87ba\u65cb\u77e9\u9635 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0054-spiral-matrix/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0054-spiral-matrix/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0054-spiral-matrix/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0055-jump-game/","text":"55. Jump Game \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: true \u89e3\u91ca: \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 2: \u8f93\u5165: [3,2,1,0,4] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 55. Jump Game \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 55. \u8df3\u8dc3\u6e38\u620f \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"55. Jump Game"},{"location":"leetcode-0055-jump-game/#55-jump-game","text":"","title":"55. Jump Game"},{"location":"leetcode-0055-jump-game/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: true \u89e3\u91ca: \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 2: \u8f93\u5165: [3,2,1,0,4] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 55. Jump Game \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 55. \u8df3\u8dc3\u6e38\u620f \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0055-jump-game/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0055-jump-game/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0055-jump-game/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0056-merge-intervals/","text":"56. Merge Intervals \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3],[2,6],[8,10],[15,18]] \u8f93\u51fa: [[1,6],[8,10],[15,18]] \u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. \u793a\u4f8b 2: \u8f93\u5165: [[1,4],[4,5]] \u8f93\u51fa: [[1,5]] \u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 56. Merge Intervals \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 56. \u5408\u5e76\u533a\u95f4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u5c06\u80fd\u591f\u5408\u5e76\u7684\u201c\u533a\u95f4\u201d\u90fd\u5408\u5e76\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u8981\u5148\u5c06\u201c\u533a\u95f4\u201d\u96c6\u5408\u6309\u7167\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u8d77\u59cb\u7aef\u70b9\u5c0f\u7684\u533a\u95f4\u9760\u524d\u3002 + \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u6bd4\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u8fd8\u5927\uff08\u4e25\u683c\u5927\uff0c\u4e0d\u7b49\u4e8e\uff09\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e0d\u80fd\u5408\u5e76\u3002 + \u5426\u5219\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u533a\u95f4\u7ec8\u6b62\u7aef\u70b9\u53d6\u5f53\u524d\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u548c\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u4e2d\u7684\u6700\u5927\u8005\u3002 \u5982\u679c\u89c9\u5f97 Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start)); \u8fd9\u79cd lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u6bd4\u8f83\u602a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4e24\u79cd\u7b49\u4ef7\u7684\u5199\u6cd5\u3002 Collections.sort(intervals, (a, b) -> a.start - b.start); Collections.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { return o1.start - o2.start; } }); \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.*; class Interval { int start; int end; Interval() { start = 0; end = 0; } Interval(int s, int e) { start = s; end = e; } } public class Solution { // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u8981\u5bf9\u96c6\u5408\u6392\u5e8f // \u626b\u63cf\u7ebf\u6cd5 public List<Interval> merge(List<Interval> intervals) { int len = intervals.size(); if (len < 2) { return intervals; } Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start)); // \u56e0\u4e3a\u6bcf\u6b21\u6211\u4eec\u90fd\u62ff\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u7528\u6808\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684 Stack<Interval> stack = new Stack<>(); stack.push(intervals.get(0)); for (int i = 1; i < len; i++) { Interval curInterval = intervals.get(i); Interval peek = stack.peek(); if (curInterval.start > peek.end) { stack.add(curInterval); } else { // \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e94\u8be5\u53d6\u6700\u5927 peek.end = Math.max(curInterval.end, peek.end); } } return stack; } public static void main(String[] args) { List<Interval> intervals = new ArrayList<>(); Interval interval1 = new Interval(1, 3); Interval interval2 = new Interval(2, 6); Interval interval3 = new Interval(8, 10); Interval interval4 = new Interval(15, 18); intervals.add(interval1); intervals.add(interval2); intervals.add(interval3); intervals.add(interval4); Solution solution = new Solution(); List<Interval> merge = solution.merge(intervals); for (Interval interval : merge) { System.out.println(\"[\" + interval.start + \", \" + interval.end + \"]\"); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0056-merge-intervals \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"56. Merge Intervals"},{"location":"leetcode-0056-merge-intervals/#56-merge-intervals","text":"","title":"56. Merge Intervals"},{"location":"leetcode-0056-merge-intervals/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3],[2,6],[8,10],[15,18]] \u8f93\u51fa: [[1,6],[8,10],[15,18]] \u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. \u793a\u4f8b 2: \u8f93\u5165: [[1,4],[4,5]] \u8f93\u51fa: [[1,5]] \u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 56. Merge Intervals \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 56. \u5408\u5e76\u533a\u95f4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0056-merge-intervals/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u5c06\u80fd\u591f\u5408\u5e76\u7684\u201c\u533a\u95f4\u201d\u90fd\u5408\u5e76\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u8981\u5148\u5c06\u201c\u533a\u95f4\u201d\u96c6\u5408\u6309\u7167\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u8d77\u59cb\u7aef\u70b9\u5c0f\u7684\u533a\u95f4\u9760\u524d\u3002 + \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u59cb\u7aef\u70b9\u6bd4\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u8fd8\u5927\uff08\u4e25\u683c\u5927\uff0c\u4e0d\u7b49\u4e8e\uff09\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e0d\u80fd\u5408\u5e76\u3002 + \u5426\u5219\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u533a\u95f4\u7ec8\u6b62\u7aef\u70b9\u53d6\u5f53\u524d\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u548c\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u6b62\u7aef\u70b9\u4e2d\u7684\u6700\u5927\u8005\u3002 \u5982\u679c\u89c9\u5f97 Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start)); \u8fd9\u79cd lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u6bd4\u8f83\u602a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4e24\u79cd\u7b49\u4ef7\u7684\u5199\u6cd5\u3002 Collections.sort(intervals, (a, b) -> a.start - b.start); Collections.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { return o1.start - o2.start; } });","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0056-merge-intervals/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0056-merge-intervals/#1","text":"import java.util.*; class Interval { int start; int end; Interval() { start = 0; end = 0; } Interval(int s, int e) { start = s; end = e; } } public class Solution { // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u8981\u5bf9\u96c6\u5408\u6392\u5e8f // \u626b\u63cf\u7ebf\u6cd5 public List<Interval> merge(List<Interval> intervals) { int len = intervals.size(); if (len < 2) { return intervals; } Collections.sort(intervals, Comparator.comparingInt((Interval a) -> a.start)); // \u56e0\u4e3a\u6bcf\u6b21\u6211\u4eec\u90fd\u62ff\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u7528\u6808\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684 Stack<Interval> stack = new Stack<>(); stack.push(intervals.get(0)); for (int i = 1; i < len; i++) { Interval curInterval = intervals.get(i); Interval peek = stack.peek(); if (curInterval.start > peek.end) { stack.add(curInterval); } else { // \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e94\u8be5\u53d6\u6700\u5927 peek.end = Math.max(curInterval.end, peek.end); } } return stack; } public static void main(String[] args) { List<Interval> intervals = new ArrayList<>(); Interval interval1 = new Interval(1, 3); Interval interval2 = new Interval(2, 6); Interval interval3 = new Interval(8, 10); Interval interval4 = new Interval(15, 18); intervals.add(interval1); intervals.add(interval2); intervals.add(interval3); intervals.add(interval4); Solution solution = new Solution(); List<Interval> merge = solution.merge(intervals); for (Interval interval : merge) { System.out.println(\"[\" + interval.start + \", \" + interval.end + \"]\"); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0056-merge-intervals \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0057-insert-interval/","text":"57. Insert Interval \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a \u65e0\u91cd\u53e0\u7684 \uff0c \u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002 \u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: intervals = [[1,3],[6,9]], newInterval = [2,5] \u8f93\u51fa: [[1,5],[6,9]] \u793a\u4f8b 2: \u8f93\u5165: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]] , newInterval = [4,8] \u8f93\u51fa: [[1,2],[3,10],[12,16]] \u89e3\u91ca: \u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4 [4,8] \u4e0e [3,5],[6,7],[8,10] \u91cd\u53e0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 57. Insert Interval \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 57. \u63d2\u5165\u533a\u95f4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"57. Insert Interval"},{"location":"leetcode-0057-insert-interval/#57-insert-interval","text":"","title":"57. Insert Interval"},{"location":"leetcode-0057-insert-interval/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a \u65e0\u91cd\u53e0\u7684 \uff0c \u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002 \u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: intervals = [[1,3],[6,9]], newInterval = [2,5] \u8f93\u51fa: [[1,5],[6,9]] \u793a\u4f8b 2: \u8f93\u5165: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]] , newInterval = [4,8] \u8f93\u51fa: [[1,2],[3,10],[12,16]] \u89e3\u91ca: \u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4 [4,8] \u4e0e [3,5],[6,7],[8,10] \u91cd\u53e0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 57. Insert Interval \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 57. \u63d2\u5165\u533a\u95f4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0057-insert-interval/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0057-insert-interval/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0057-insert-interval/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0058-length-of-last-word/","text":"58. Length of Last Word \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c ' ' \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: \"Hello World\" \u8f93\u51fa: 5 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 58. Length of Last Word \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u662f\u6211\u4e00\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\u3002 public class Solution { public int lengthOfLastWord(String s) { int len = s.length(); // \u7279\u522b\u6ce8\u610f \"a \" \u8fd9\u79cd\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b // \u7279\u522b\u6ce8\u610f \"b a \"\uff0c\u56e0\u6b64\uff0c\u8981\u4f7f\u7528 while while (len > 0 && s.charAt(len - 1) == ' ') { len--; } if (len == 0) { return 0; } int begin = -1; int index = 0; while (index < len) { char curC = s.charAt(index); if (curC == ' ') { begin = index; } index++; } return len - 1 - begin; } public static void main(String[] args) { String s = \"a \"; Solution solution = new Solution(); int lengthOfLastWord = solution.lengthOfLastWord(s); System.out.println(lengthOfLastWord); } } \u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u4ece\u540e\u5411\u524d\u904d\u5386\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002 public class Solution2 { public int lengthOfLastWord(String s) { int len = s.length(); while (len > 0 && s.charAt(len - 1) == ' ') { len--; } if (len == 0) { return 0; } int res = 0; while (len > 0 && s.charAt(len - 1) != ' ') { res++; len--; } return res; } public static void main(String[] args) { String s = \"a \"; Solution2 solution2 = new Solution2(); int lengthOfLastWord = solution2.lengthOfLastWord(s); System.out.println(lengthOfLastWord); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0058-length-of-last-word \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"58. Length of Last Word"},{"location":"leetcode-0058-length-of-last-word/#58-length-of-last-word","text":"","title":"58. Length of Last Word"},{"location":"leetcode-0058-length-of-last-word/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c ' ' \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: \"Hello World\" \u8f93\u51fa: 5 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 58. Length of Last Word \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0058-length-of-last-word/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0058-length-of-last-word/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0058-length-of-last-word/#1","text":"public class Solution { public int lengthOfLastWord(String s) { int len = s.length(); // \u7279\u522b\u6ce8\u610f \"a \" \u8fd9\u79cd\u7279\u6b8a\u7684\u6d4b\u8bd5\u7528\u4f8b // \u7279\u522b\u6ce8\u610f \"b a \"\uff0c\u56e0\u6b64\uff0c\u8981\u4f7f\u7528 while while (len > 0 && s.charAt(len - 1) == ' ') { len--; } if (len == 0) { return 0; } int begin = -1; int index = 0; while (index < len) { char curC = s.charAt(index); if (curC == ' ') { begin = index; } index++; } return len - 1 - begin; } public static void main(String[] args) { String s = \"a \"; Solution solution = new Solution(); int lengthOfLastWord = solution.lengthOfLastWord(s); System.out.println(lengthOfLastWord); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u662f\u6211\u4e00\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\u3002"},{"location":"leetcode-0058-length-of-last-word/#2","text":"public class Solution2 { public int lengthOfLastWord(String s) { int len = s.length(); while (len > 0 && s.charAt(len - 1) == ' ') { len--; } if (len == 0) { return 0; } int res = 0; while (len > 0 && s.charAt(len - 1) != ' ') { res++; len--; } return res; } public static void main(String[] args) { String s = \"a \"; Solution2 solution2 = new Solution2(); int lengthOfLastWord = solution2.lengthOfLastWord(s); System.out.println(lengthOfLastWord); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0058-length-of-last-word \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u5176\u5b9e\u4ece\u540e\u5411\u524d\u904d\u5386\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002"},{"location":"leetcode-0059-spiral-matrix-ii/","text":"59. Spiral Matrix II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230 n 2 \u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 59. Spiral Matrix II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 59. \u87ba\u65cb\u77e9\u9635 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"59. Spiral Matrix II"},{"location":"leetcode-0059-spiral-matrix-ii/#59-spiral-matrix-ii","text":"","title":"59. Spiral Matrix II"},{"location":"leetcode-0059-spiral-matrix-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230 n 2 \u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 59. Spiral Matrix II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 59. \u87ba\u65cb\u77e9\u9635 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0059-spiral-matrix-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0059-spiral-matrix-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0059-spiral-matrix-ii/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0060-permutation-sequence/","text":"60. Permutation Sequence \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u96c6\u5408 [1,2,3,\u2026, n ] \uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709 n ! \u79cd\u6392\u5217\u3002 \u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53 n = 3 \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a \"123\" \"132\" \"213\" \"231\" \"312\" \"321\" \u7ed9\u5b9a n \u548c k \uff0c\u8fd4\u56de\u7b2c k \u4e2a\u6392\u5217\u3002 \u8bf4\u660e\uff1a \u7ed9\u5b9a n \u7684\u8303\u56f4\u662f [1, 9]\u3002 \u7ed9\u5b9a k \u7684\u8303\u56f4\u662f[1, n !]\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 3, k = 3 \u8f93\u51fa: \"213\" \u793a\u4f8b 2: \u8f93\u5165: n = 4, k = 9 \u8f93\u51fa: \"2314\" \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 60. Permutation Sequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 60. \u7b2ck\u4e2a\u6392\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"60. Permutation Sequence"},{"location":"leetcode-0060-permutation-sequence/#60-permutation-sequence","text":"","title":"60. Permutation Sequence"},{"location":"leetcode-0060-permutation-sequence/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u96c6\u5408 [1,2,3,\u2026, n ] \uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709 n ! \u79cd\u6392\u5217\u3002 \u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53 n = 3 \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a \"123\" \"132\" \"213\" \"231\" \"312\" \"321\" \u7ed9\u5b9a n \u548c k \uff0c\u8fd4\u56de\u7b2c k \u4e2a\u6392\u5217\u3002 \u8bf4\u660e\uff1a \u7ed9\u5b9a n \u7684\u8303\u56f4\u662f [1, 9]\u3002 \u7ed9\u5b9a k \u7684\u8303\u56f4\u662f[1, n !]\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 3, k = 3 \u8f93\u51fa: \"213\" \u793a\u4f8b 2: \u8f93\u5165: n = 4, k = 9 \u8f93\u51fa: \"2314\" \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 60. Permutation Sequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 60. \u7b2ck\u4e2a\u6392\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0060-permutation-sequence/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0060-permutation-sequence/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0060-permutation-sequence/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0061-rotate-list/","text":"61. Rotate List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 61. Rotate List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 61. \u65cb\u8f6c\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"61. Rotate List"},{"location":"leetcode-0061-rotate-list/#61-rotate-list","text":"","title":"61. Rotate List"},{"location":"leetcode-0061-rotate-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 61. Rotate List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 61. \u65cb\u8f6c\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0061-rotate-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0061-rotate-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0061-rotate-list/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0062-unique-paths/","text":"62. Unique Paths \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002 \u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f \u4f8b\u5982\uff0c\u4e0a\u56fe\u662f\u4e00\u4e2a7 x 3 \u7684\u7f51\u683c\u3002\u6709\u591a\u5c11\u53ef\u80fd\u7684\u8def\u5f84\uff1f \u8bf4\u660e\uff1a m \u548c n \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002 \u793a\u4f8b 1: \u8f93\u5165: m = 3, n = 2 \u8f93\u51fa: 3 \u89e3\u91ca: \u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002 1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b 2. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u53f3 3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3 \u793a\u4f8b 2: \u8f93\u5165: m = 7, n = 3 \u8f93\u51fa: 28 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 62. Unique Paths \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 62. \u4e0d\u540c\u8def\u5f84 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"62. Unique Paths"},{"location":"leetcode-0062-unique-paths/#62-unique-paths","text":"","title":"62. Unique Paths"},{"location":"leetcode-0062-unique-paths/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002 \u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f \u4f8b\u5982\uff0c\u4e0a\u56fe\u662f\u4e00\u4e2a7 x 3 \u7684\u7f51\u683c\u3002\u6709\u591a\u5c11\u53ef\u80fd\u7684\u8def\u5f84\uff1f \u8bf4\u660e\uff1a m \u548c n \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002 \u793a\u4f8b 1: \u8f93\u5165: m = 3, n = 2 \u8f93\u51fa: 3 \u89e3\u91ca: \u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002 1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b 2. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u53f3 3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3 \u793a\u4f8b 2: \u8f93\u5165: m = 7, n = 3 \u8f93\u51fa: 28 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 62. Unique Paths \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 62. \u4e0d\u540c\u8def\u5f84 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0062-unique-paths/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0062-unique-paths/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0062-unique-paths/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0063-unique-paths-ii/","text":"63. Unique Paths II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002 \u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f \u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528 1 \u548c 0 \u6765\u8868\u793a\u3002 \u8bf4\u660e\uff1a m \u548c n \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [0,0,0], [0,1,0], [0,0,0] ] \u8f93\u51fa: 2 \u89e3\u91ca: 3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002 \u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709 2 \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a 1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b 2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 63. Unique Paths II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 63. \u4e0d\u540c\u8def\u5f84 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"63. Unique Paths II"},{"location":"leetcode-0063-unique-paths-ii/#63-unique-paths-ii","text":"","title":"63. Unique Paths II"},{"location":"leetcode-0063-unique-paths-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002 \u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f \u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528 1 \u548c 0 \u6765\u8868\u793a\u3002 \u8bf4\u660e\uff1a m \u548c n \u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [0,0,0], [0,1,0], [0,0,0] ] \u8f93\u51fa: 2 \u89e3\u91ca: 3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002 \u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709 2 \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a 1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b 2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 63. Unique Paths II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 63. \u4e0d\u540c\u8def\u5f84 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0063-unique-paths-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0063-unique-paths-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0063-unique-paths-ii/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0064-minimum-path-sum/","text":"64. Minimum Path Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 m x n \u7f51\u683c\uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002 \u8bf4\u660e\uff1a \u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002 \u793a\u4f8b: \u8f93\u5165: [ [1,3,1], [1,5,1], [4,2,1] ] \u8f93\u51fa: 7 \u89e3\u91ca: \u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 64. Minimum Path Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 64. \u6700\u5c0f\u8def\u5f84\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"64. Minimum Path Sum"},{"location":"leetcode-0064-minimum-path-sum/#64-minimum-path-sum","text":"","title":"64. Minimum Path Sum"},{"location":"leetcode-0064-minimum-path-sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 m x n \u7f51\u683c\uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002 \u8bf4\u660e\uff1a \u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002 \u793a\u4f8b: \u8f93\u5165: [ [1,3,1], [1,5,1], [4,2,1] ] \u8f93\u51fa: 7 \u89e3\u91ca: \u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 64. Minimum Path Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 64. \u6700\u5c0f\u8def\u5f84\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0064-minimum-path-sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0064-minimum-path-sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0064-minimum-path-sum/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0065-valid-number/","text":"65. Valid Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\u3002 \u4f8b\u5982: \"0\" => true \" 0.1 \" => true \"abc\" => false \"1 a\" => false \"2e10\" => true \u8bf4\u660e: \u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002 \u66f4\u65b0\u4e8e 2015-02-10: C++ \u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536 const char * \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 65. Valid Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 65. \u6709\u6548\u6570\u5b57 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"65. Valid Number"},{"location":"leetcode-0065-valid-number/#65-valid-number","text":"","title":"65. Valid Number"},{"location":"leetcode-0065-valid-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\u3002 \u4f8b\u5982: \"0\" => true \" 0.1 \" => true \"abc\" => false \"1 a\" => false \"2e10\" => true \u8bf4\u660e: \u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002 \u66f4\u65b0\u4e8e 2015-02-10: C++ \u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536 const char * \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 65. Valid Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 65. \u6709\u6548\u6570\u5b57 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0065-valid-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0065-valid-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0065-valid-number/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0066-plus-one/","text":"66. Plus One \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u8d1f\u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2: \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 66. Plus One \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 66. \u52a0\u4e00 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u8fdb\u4f4d\u7684\u5199\u6cd5\uff0c\u662f\u6bd4\u8f83\u901a\u7528\u7684\uff0c\u6211\u5148\u5199\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u9898\u76ee\u53ea\u662f\u8ba9\u6211\u4eec\u52a0 1\uff0c\u5982\u679c\u52a0 1 \u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u4e0b\u53bb\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a Python \u5199\u6cd5\uff1a\uff08\u63a8\u8350\u5199\u6cd5\uff09 class Solution(object): def plusOne(self, digits): \"\"\" :type digits: List[int] :rtype: List[int] \"\"\" n = len(digits) if n == 0: return None # \u4ece\u540e\u5411\u524d for index in range(n - 1, -1, -1): if digits[index] < 9: digits[index] += 1 return digits else: digits[index] = 0 return [1] + digits \u53c2\u8003\u89e3\u7b542 Java \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09 import java.util.Arrays; public class Solution { public int[] plusOne(int[] digits) { int len = digits.length; if (len == 0) { return new int[0]; } int carry = 1; // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d for (int i = len - 1; i >= 0; i--) { int sum = digits[i] + carry; digits[i] = sum % 10; carry = sum / 10; // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86 // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86 if (carry == 0) { return digits; } } if (carry == 1) { int[] res = new int[len + 1]; res[0] = 1; for (int i = 1; i < len + 1; i++) { res[i] = digits[i - 1]; } return res; } return digits; } public static void main(String[] args) { int[] nums = {9, 9, 9, 9}; Solution solution = new Solution(); int[] plusOne = solution.plusOne(nums); System.out.println(Arrays.toString(plusOne)); } } Python \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09 class Solution(object): def plusOne(self, digits): \"\"\" :type digits: List[int] :rtype: List[int] \"\"\" if len(digits) == 0: return [] # \u8fdb\u4f4d\u6807\u8bc6 carry = 1 for i in range(len(digits) - 1, -1, -1): s = digits[i] + carry digits[i] = s % 10 # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 // carry = s // 10 if carry == 0: return digits print(digits, carry) if carry == 1: return [1] + digits if __name__ == '__main__': digits = [9, 9, 9, 9] solution = Solution() result = solution.plusOne(digits) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"66. Plus One"},{"location":"leetcode-0066-plus-one/#66-plus-one","text":"","title":"66. Plus One"},{"location":"leetcode-0066-plus-one/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u8d1f\u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2: \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 66. Plus One \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 66. \u52a0\u4e00 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0066-plus-one/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u8fdb\u4f4d\u7684\u5199\u6cd5\uff0c\u662f\u6bd4\u8f83\u901a\u7528\u7684\uff0c\u6211\u5148\u5199\u4e86\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u9898\u76ee\u53ea\u662f\u8ba9\u6211\u4eec\u52a0 1\uff0c\u5982\u679c\u52a0 1 \u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u540e\u9762\u7684\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u4e0b\u53bb\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0066-plus-one/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0066-plus-one/#1","text":"Python \u5199\u6cd5\uff1a\uff08\u63a8\u8350\u5199\u6cd5\uff09 class Solution(object): def plusOne(self, digits): \"\"\" :type digits: List[int] :rtype: List[int] \"\"\" n = len(digits) if n == 0: return None # \u4ece\u540e\u5411\u524d for index in range(n - 1, -1, -1): if digits[index] < 9: digits[index] += 1 return digits else: digits[index] = 0 return [1] + digits","title":"\u53c2\u8003\u89e3\u7b541\uff1a"},{"location":"leetcode-0066-plus-one/#2","text":"Java \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09 import java.util.Arrays; public class Solution { public int[] plusOne(int[] digits) { int len = digits.length; if (len == 0) { return new int[0]; } int carry = 1; // \u5c31\u60f3\u6211\u4eec\u624b\u52a8\u505a\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d for (int i = len - 1; i >= 0; i--) { int sum = digits[i] + carry; digits[i] = sum % 10; carry = sum / 10; // \u5982\u679c\u4e0d\u4ea7\u751f\u8fdb\u4f4d\uff0c\u9a6c\u4e0a\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86 // \u6709\u4e86\u8fd9\u4e00\u6b65\u5224\u65ad\uff0c\u5c31\u4e0d\u5fc5\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u4e86 if (carry == 0) { return digits; } } if (carry == 1) { int[] res = new int[len + 1]; res[0] = 1; for (int i = 1; i < len + 1; i++) { res[i] = digits[i - 1]; } return res; } return digits; } public static void main(String[] args) { int[] nums = {9, 9, 9, 9}; Solution solution = new Solution(); int[] plusOne = solution.plusOne(nums); System.out.println(Arrays.toString(plusOne)); } } Python \u5199\u6cd5\uff1a\uff08\u53c2\u8003\u5199\u6cd5\uff09 class Solution(object): def plusOne(self, digits): \"\"\" :type digits: List[int] :rtype: List[int] \"\"\" if len(digits) == 0: return [] # \u8fdb\u4f4d\u6807\u8bc6 carry = 1 for i in range(len(digits) - 1, -1, -1): s = digits[i] + carry digits[i] = s % 10 # \u6ce8\u610f\uff1a\u6574\u9664\u8981\u4f7f\u7528 // carry = s // 10 if carry == 0: return digits print(digits, carry) if carry == 1: return [1] + digits if __name__ == '__main__': digits = [9, 9, 9, 9] solution = Solution() result = solution.plusOne(digits) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0066-plus-one \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0067-add-binary/","text":"67. Add Binary \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002 \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57 1 \u548c 0 \u3002 \u793a\u4f8b 1: \u8f93\u5165: a = \"11\", b = \"1\" \u8f93\u51fa: \"100\" \u793a\u4f8b 2: \u8f93\u5165: a = \"1010\", b = \"1011\" \u8f93\u51fa: \"10101\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 67. Add Binary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 67. \u4e8c\u8fdb\u5236\u6c42\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python \u5199\u6cd5\uff1a class Solution(object): def addBinary(self, a, b): \"\"\" :type a: str :type b: str :rtype: str \"\"\" res = '' # \u5206\u522b\u8868\u793a\u4e24\u4e2a\u6570\u4ece\u540e\u5411\u524d\u7684\u7d22\u5f15\uff0c\u540e\u5bf9\u9f50 i = len(a) - 1 j = len(b) - 1 # \u8868\u793a\u8fdb\u4f4d\u6807\u5fd7 carry = 0 while i >= 0 or j >= 0: s = carry if i >= 0: s += ord(a[i]) - ord('0') i -= 1 if j >= 0: s += ord(b[j]) - ord('0') j -= 1 res = str(s % 2) + res carry = s // 2 if carry == 1: return '1' + res return res \u53c2\u8003\u89e3\u7b542 Java \u5199\u6cd5\uff1a public class Solution { public String addBinary(String a, String b) { int aLen = a.length(); int bLen = b.length(); int maxLen = Math.max(aLen, bLen); StringBuilder sa = new StringBuilder(a).reverse(); StringBuilder sb = new StringBuilder(b).reverse(); while (sa.length() < maxLen) { sa.append(\"0\"); } while (sb.length() < maxLen) { sb.append(\"0\"); } StringBuilder res = new StringBuilder(); int sum = 0; int num1; int num2; for (int i = 0; i < maxLen; i++) { num1 = sa.charAt(i) - '0'; num2 = sb.charAt(i) - '0'; if (sum + num1 + num2 > 1) { res.append(sum + num1 + num2 - 2); sum = 1; } else { res.append(sum + num1 + num2); sum = 0; } } if (sum == 1) { res.append(\"1\"); } return res.reverse().toString(); } public static void main(String[] args) { String a = \"1010\"; String b = \"1011\"; Solution solution = new Solution(); String addBinary = solution.addBinary(a, b); System.out.println(addBinary); } } Python \u5199\u6cd5\uff1a class Solution(object): def addBinary(self, a, b): \"\"\" :type a: str :type b: str :rtype: str \"\"\" alen = len(a) blen = len(b) maxlen = max(alen, blen) ra = list(reversed(a)) rb = list(reversed(b)) while len(ra) < maxlen: ra.append('0') while len(rb) < maxlen: rb.append('0') result = [] s = 0 zero = ord('0') for i in range(maxlen): num1 = ord(ra[i]) - zero num2 = ord(rb[i]) - zero if s + num1 + num2 > 1: result.append(str(s + num1 + num2 - 2)) s = 1 else: result.append(str(s + num1 + num2)) s = 0 if s == 1: result.append(str(1)) return ''.join(list(reversed(result))) if __name__ == '__main__': a = \"11\" b = \"1\" solution = Solution() result = solution.addBinary(a, b) print(result) \u53c2\u8003\u89e3\u7b542 Python \u5199\u6cd5\uff1a class Solution: def addBinary(self, a, b): return bin(int(a, 2) + int(b, 2))[2:] if __name__ == '__main__': a = \"11\" b = \"1\" solution = Solution() result = solution.addBinary(a, b) print(result) result1 = int(a, 2) result2 = int(b, 2) print(result1) print(result2) print(bin(result1 + result2)) print(bin(result1 + result2)[2:]) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"67. Add Binary"},{"location":"leetcode-0067-add-binary/#67-add-binary","text":"","title":"67. Add Binary"},{"location":"leetcode-0067-add-binary/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002 \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57 1 \u548c 0 \u3002 \u793a\u4f8b 1: \u8f93\u5165: a = \"11\", b = \"1\" \u8f93\u51fa: \"100\" \u793a\u4f8b 2: \u8f93\u5165: a = \"1010\", b = \"1011\" \u8f93\u51fa: \"10101\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 67. Add Binary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 67. \u4e8c\u8fdb\u5236\u6c42\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0067-add-binary/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0067-add-binary/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0067-add-binary/#1","text":"Python \u5199\u6cd5\uff1a class Solution(object): def addBinary(self, a, b): \"\"\" :type a: str :type b: str :rtype: str \"\"\" res = '' # \u5206\u522b\u8868\u793a\u4e24\u4e2a\u6570\u4ece\u540e\u5411\u524d\u7684\u7d22\u5f15\uff0c\u540e\u5bf9\u9f50 i = len(a) - 1 j = len(b) - 1 # \u8868\u793a\u8fdb\u4f4d\u6807\u5fd7 carry = 0 while i >= 0 or j >= 0: s = carry if i >= 0: s += ord(a[i]) - ord('0') i -= 1 if j >= 0: s += ord(b[j]) - ord('0') j -= 1 res = str(s % 2) + res carry = s // 2 if carry == 1: return '1' + res return res","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0067-add-binary/#2","text":"Java \u5199\u6cd5\uff1a public class Solution { public String addBinary(String a, String b) { int aLen = a.length(); int bLen = b.length(); int maxLen = Math.max(aLen, bLen); StringBuilder sa = new StringBuilder(a).reverse(); StringBuilder sb = new StringBuilder(b).reverse(); while (sa.length() < maxLen) { sa.append(\"0\"); } while (sb.length() < maxLen) { sb.append(\"0\"); } StringBuilder res = new StringBuilder(); int sum = 0; int num1; int num2; for (int i = 0; i < maxLen; i++) { num1 = sa.charAt(i) - '0'; num2 = sb.charAt(i) - '0'; if (sum + num1 + num2 > 1) { res.append(sum + num1 + num2 - 2); sum = 1; } else { res.append(sum + num1 + num2); sum = 0; } } if (sum == 1) { res.append(\"1\"); } return res.reverse().toString(); } public static void main(String[] args) { String a = \"1010\"; String b = \"1011\"; Solution solution = new Solution(); String addBinary = solution.addBinary(a, b); System.out.println(addBinary); } } Python \u5199\u6cd5\uff1a class Solution(object): def addBinary(self, a, b): \"\"\" :type a: str :type b: str :rtype: str \"\"\" alen = len(a) blen = len(b) maxlen = max(alen, blen) ra = list(reversed(a)) rb = list(reversed(b)) while len(ra) < maxlen: ra.append('0') while len(rb) < maxlen: rb.append('0') result = [] s = 0 zero = ord('0') for i in range(maxlen): num1 = ord(ra[i]) - zero num2 = ord(rb[i]) - zero if s + num1 + num2 > 1: result.append(str(s + num1 + num2 - 2)) s = 1 else: result.append(str(s + num1 + num2)) s = 0 if s == 1: result.append(str(1)) return ''.join(list(reversed(result))) if __name__ == '__main__': a = \"11\" b = \"1\" solution = Solution() result = solution.addBinary(a, b) print(result)","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0067-add-binary/#2_1","text":"Python \u5199\u6cd5\uff1a class Solution: def addBinary(self, a, b): return bin(int(a, 2) + int(b, 2))[2:] if __name__ == '__main__': a = \"11\" b = \"1\" solution = Solution() result = solution.addBinary(a, b) print(result) result1 = int(a, 2) result2 = int(b, 2) print(result1) print(result2) print(bin(result1 + result2)) print(bin(result1 + result2)[2:]) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0067-add-binary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0068-text-justification/","text":"68. Text Justification \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6 maxWidth \uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709 maxWidth \u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002 \u4f60\u5e94\u8be5\u4f7f\u7528\u201c\u8d2a\u5fc3\u7b97\u6cd5\u201d\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c ' ' \u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709 maxWidth \u4e2a\u5b57\u7b26\u3002 \u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002 \u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165 \u989d\u5916\u7684 \u7a7a\u683c\u3002 \u8bf4\u660e: \u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e maxWidth \u3002 \u8f93\u5165\u5355\u8bcd\u6570\u7ec4 words \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002 \u793a\u4f8b: \u8f93\u5165: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"] maxWidth = 16 \u8f93\u51fa: [ \"This is an\", \"example of text\", \"justification. \" ] \u793a\u4f8b 2: \u8f93\u5165: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"] maxWidth = 16 \u8f93\u51fa: [ \"What must be\", \"acknowledgment \", \"shall be \" ] \u89e3\u91ca: \u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a \"shall be \" \u800c\u4e0d\u662f \"shall be\", \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002 \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002 \u793a\u4f8b 3: \u8f93\u5165: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\", \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"] maxWidth = 20 \u8f93\u51fa: [ \"Science is what we\", \"understand well\", \"enough to explain to\", \"a computer. Art is\", \"everything else we\", \"do \" ] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 68. Text Justification \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 68. \u6587\u672c\u5de6\u53f3\u5bf9\u9f50 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"68. Text Justification"},{"location":"leetcode-0068-text-justification/#68-text-justification","text":"","title":"68. Text Justification"},{"location":"leetcode-0068-text-justification/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6 maxWidth \uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709 maxWidth \u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002 \u4f60\u5e94\u8be5\u4f7f\u7528\u201c\u8d2a\u5fc3\u7b97\u6cd5\u201d\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c ' ' \u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709 maxWidth \u4e2a\u5b57\u7b26\u3002 \u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002 \u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165 \u989d\u5916\u7684 \u7a7a\u683c\u3002 \u8bf4\u660e: \u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e maxWidth \u3002 \u8f93\u5165\u5355\u8bcd\u6570\u7ec4 words \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002 \u793a\u4f8b: \u8f93\u5165: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"] maxWidth = 16 \u8f93\u51fa: [ \"This is an\", \"example of text\", \"justification. \" ] \u793a\u4f8b 2: \u8f93\u5165: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"] maxWidth = 16 \u8f93\u51fa: [ \"What must be\", \"acknowledgment \", \"shall be \" ] \u89e3\u91ca: \u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a \"shall be \" \u800c\u4e0d\u662f \"shall be\", \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002 \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002 \u793a\u4f8b 3: \u8f93\u5165: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\", \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"] maxWidth = 20 \u8f93\u51fa: [ \"Science is what we\", \"understand well\", \"enough to explain to\", \"a computer. Art is\", \"everything else we\", \"do \" ] \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 68. Text Justification \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 68. \u6587\u672c\u5de6\u53f3\u5bf9\u9f50 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0068-text-justification/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0068-text-justification/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0068-text-justification/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0069-sqrtx/","text":"69. Sqrt(x) \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: 2 \u8bf4\u660e: 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 69. Sqrt(x) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 69. x \u7684\u5e73\u65b9\u6839 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5e94\u8be5\u8fd4\u56de\u53f3\u8fb9\u7aef\u70b9\u3002 class Solution: # \u4e8c\u5206\u6cd5 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" l = 0 r = x // 2 + 1 while l <= r: m = l + (r - l) // 2 s = m * m if s == x: return m elif s < x: l = m + 1 else: r = m - 1 # \u6ce8\u610f\u8fd4\u56de l \u548c\u8fd4\u56de r \u7684\u533a\u522b\uff0c\u5e94\u8be5\u8fd4\u56de r # \u3010\u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u8981\u628a\u53f3\u8fb9\u754c\u8fd4\u56de\u56de\u53bb\u3011 return r class Solution: # \u4e8c\u5206\u6cd5 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x == 1: return 1 l = 0 r = x // 2 while l <= r: m = l + (r - l) // 2 s = m * m if s == x: return m elif s < x: l = m + 1 else: r = m - 1 return r \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u725b\u987f\u6cd5\uff0c\u6211\u4e2a\u4eba\u6bd4\u8f83\u63a8\u8350\u725b\u987f\u6cd5\uff0c\u66f4\u7b80\u5355\uff0c\u8fd4\u56de\u503c\u5411\u4e0b\u53d6\u6574\uff0c\u5c31\u80fd\u7b26\u5408\u9898\u8981\u6c42\u3002 class Solution: # \u725b\u987f\u6cd5 # \u4e0e\u7cfb\u7edf\u51fd\u6570\u4f5c\u6bd4\u8f83 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x < 0: raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570') if x == 0: return 0 cur = 1 while True: pre = cur cur = (cur + x / cur) / 2 if abs(cur - pre) < 1e-6: return cur # \u8fd9\u4e2a\u89e3\u76f4\u63a5\u63d0\u4ea4\u5230 LeetCode \u4e0a\u5c31\u53ef\u4ee5\u4e86 def mySqrt1(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x < 0: raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570') if x == 0: return 0 # \u8d77\u59cb\u7684\u65f6\u5019\u5728 1 \uff0c\u8fd9\u53ef\u4ee5\u6bd4\u8f83\u968f\u610f\u8bbe\u7f6e cur = 1 while True: pre = cur cur = (cur + x / cur) / 2 if abs(cur - pre) < 1e-6: return int(cur) if __name__ == '__main__': import numpy as np nums = np.linspace(0, 999, 100) solution = Solution() for num in nums: a = solution.mySqrt(num) b = np.sqrt(num) print(\"\u725b\u987f\u6cd5\uff1a{} \\t NumPy\uff1a{}\\t \u5dee\u8ddd\uff1a{}\".format(a, b, a - b))","title":"69. Sqrt(x)"},{"location":"leetcode-0069-sqrtx/#69-sqrtx","text":"","title":"69. Sqrt(x)"},{"location":"leetcode-0069-sqrtx/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: 2 \u8bf4\u660e: 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 69. Sqrt(x) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 69. x \u7684\u5e73\u65b9\u6839 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0069-sqrtx/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0069-sqrtx/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0069-sqrtx/#1","text":"class Solution: # \u4e8c\u5206\u6cd5 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" l = 0 r = x // 2 + 1 while l <= r: m = l + (r - l) // 2 s = m * m if s == x: return m elif s < x: l = m + 1 else: r = m - 1 # \u6ce8\u610f\u8fd4\u56de l \u548c\u8fd4\u56de r \u7684\u533a\u522b\uff0c\u5e94\u8be5\u8fd4\u56de r # \u3010\u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u8981\u628a\u53f3\u8fb9\u754c\u8fd4\u56de\u56de\u53bb\u3011 return r class Solution: # \u4e8c\u5206\u6cd5 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x == 1: return 1 l = 0 r = x // 2 while l <= r: m = l + (r - l) // 2 s = m * m if s == x: return m elif s < x: l = m + 1 else: r = m - 1 return r","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5e94\u8be5\u8fd4\u56de\u53f3\u8fb9\u7aef\u70b9\u3002"},{"location":"leetcode-0069-sqrtx/#2","text":"class Solution: # \u725b\u987f\u6cd5 # \u4e0e\u7cfb\u7edf\u51fd\u6570\u4f5c\u6bd4\u8f83 def mySqrt(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x < 0: raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570') if x == 0: return 0 cur = 1 while True: pre = cur cur = (cur + x / cur) / 2 if abs(cur - pre) < 1e-6: return cur # \u8fd9\u4e2a\u89e3\u76f4\u63a5\u63d0\u4ea4\u5230 LeetCode \u4e0a\u5c31\u53ef\u4ee5\u4e86 def mySqrt1(self, x): \"\"\" :type x: int :rtype: int \"\"\" if x < 0: raise Exception('\u4e0d\u80fd\u8f93\u5165\u8d1f\u6570') if x == 0: return 0 # \u8d77\u59cb\u7684\u65f6\u5019\u5728 1 \uff0c\u8fd9\u53ef\u4ee5\u6bd4\u8f83\u968f\u610f\u8bbe\u7f6e cur = 1 while True: pre = cur cur = (cur + x / cur) / 2 if abs(cur - pre) < 1e-6: return int(cur) if __name__ == '__main__': import numpy as np nums = np.linspace(0, 999, 100) solution = Solution() for num in nums: a = solution.mySqrt(num) b = np.sqrt(num) print(\"\u725b\u987f\u6cd5\uff1a{} \\t NumPy\uff1a{}\\t \u5dee\u8ddd\uff1a{}\".format(a, b, a - b))","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u725b\u987f\u6cd5\uff0c\u6211\u4e2a\u4eba\u6bd4\u8f83\u63a8\u8350\u725b\u987f\u6cd5\uff0c\u66f4\u7b80\u5355\uff0c\u8fd4\u56de\u503c\u5411\u4e0b\u53d6\u6574\uff0c\u5c31\u80fd\u7b26\u5408\u9898\u8981\u6c42\u3002"},{"location":"leetcode-0070-climbing-stairs/","text":"70. Climbing Stairs \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u6b65\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a \u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u6b65 + 1 \u6b65 2. 2 \u6b65 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u6b65 + 1 \u6b65 + 1 \u6b65 2. 1 \u6b65 + 2 \u6b65 3. 2 \u6b65 + 1 \u6b65 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 70. Climbing Stairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 70. \u722c\u697c\u68af \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u89e3\u91ca\uff1a\u722c\u697c\u68af\u95ee\u9898\uff0c\u8fd4\u56de\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u722c\u5b8c\u8fd9 n \u4e2a\u53f0\u9636\uff0cEach time you can either climb 1 or 2 steps. \u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002 \u601d\u8003\uff1a\u5206\u6790\u95ee\u9898\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u8fdb\u800c\u53d1\u73b0\u8fd9\u4e2a\u9012\u5f52\u7ed3\u6784\u4e2d\u5b58\u5728\u8bb8\u591a\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6700\u7ec8\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u95ee\u9898\u5b8c\u5168\u7b49\u4ef7\u3002 \u7248\u672c1\uff1a\u4e0d\u5408\u683c\u7684\u9012\u5f52\u7248\u672c\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7248\u672c\u7684\u601d\u8003\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u753b\u51fa\u9012\u5f52\u7ed3\u6784\u6811\uff0c\u4ece\u800c\u53d1\u73b0\u91cd\u53e0\u5b50\u95ee\u9898\u3002 \uff08\u63d2\u56fe\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u7684\u9012\u5f52\u5b50\u7ed3\u6784\u6570\uff0c\u6807\u51fa\u91cd\u53e0\u5b50\u95ee\u9898\u3002\uff09 class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 1 if n == 1: return 1 return self.climbStairs(n - 1) + self.climbStairs(n - 2) \u7248\u672c2\uff1a\u52a0\u5165\u4e86\u7f13\u5b58\u7684\u9012\u5f52\u7248\u672c class Solution: memo = None def _climbStairs(self, n): if Solution.memo[n] != -1: return Solution.memo[n] if n == 0: return 1 if n == 1: return 1 Solution.memo[n] = self._climbStairs(n - 1) + self._climbStairs(n - 2) return Solution.memo[n] def climbStairs(self, n): Solution.memo = [-1] * (n + 1) return self._climbStairs(n) \u7248\u672c3\uff1a\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u5206\u6790\u601d\u8def\u4e0b\uff0c\u5199\u51fa\u7684\u52a8\u6001\u89c4\u5212\u7248\u672c\u3002 \u601d\u8003\u8fc7\u7a0b\uff1a\u722c 0 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b \u722c 1 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b \u722c 2 \u4e2a\u53f0\u9636\uff0c\u6709 2 \u79cd\u722c\u6cd5\uff1b \u722c 3 \u4e2a\u53f0\u9636\uff0c\uff082\uff0c1\uff09 + \uff081\uff0c2\uff09\uff1b \u722c 4 \u4e2a\u53f0\u9636\uff0c\uff083\uff0c1\uff09 + \uff082\uff0c2\uff09\uff1b \u722c 5 \u4e2a\u53f0\u9636\uff0c\uff084\uff0c1\uff09 + \uff083\uff0c2\uff09\uff1b \u722c 6 \u4e2a\u8c03\u8282\uff0c\uff085\uff0c1\uff09 + \uff084\uff0c2\uff09\uff1b \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5176\u4e2d\uff0c\uff08i\uff0cj\uff09\u8868\u793a\u9996\u5148\u722c i \u4e2a\u53f0\u9636\u7684\u6240\u6709\u4e0d\u540c\u722c\u6cd5\uff0c\u7136\u540e\u518d\u722c j \u4e2a\u53f0\u9636\u7684\u4e0d\u540c\u722c\u6cd5\u3002 class Solution: def climbStairs(self, n): if n == 0: return 1 memo = [-1] * (n + 1) memo[0] = 1 memo[1] = 1 for i in range(2, n + 1): memo[i] = memo[i - 1] + memo[i - 2] return memo[n] \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"70. Climbing Stairs"},{"location":"leetcode-0070-climbing-stairs/#70-climbing-stairs","text":"","title":"70. Climbing Stairs"},{"location":"leetcode-0070-climbing-stairs/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u6b65\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a \u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u6b65 + 1 \u6b65 2. 2 \u6b65 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u6b65 + 1 \u6b65 + 1 \u6b65 2. 1 \u6b65 + 2 \u6b65 3. 2 \u6b65 + 1 \u6b65 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 70. Climbing Stairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 70. \u722c\u697c\u68af \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0070-climbing-stairs/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u89e3\u91ca\uff1a\u722c\u697c\u68af\u95ee\u9898\uff0c\u8fd4\u56de\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u722c\u5b8c\u8fd9 n \u4e2a\u53f0\u9636\uff0cEach time you can either climb 1 or 2 steps. \u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002 \u601d\u8003\uff1a\u5206\u6790\u95ee\u9898\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u8fdb\u800c\u53d1\u73b0\u8fd9\u4e2a\u9012\u5f52\u7ed3\u6784\u4e2d\u5b58\u5728\u8bb8\u591a\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6700\u7ec8\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u95ee\u9898\u5b8c\u5168\u7b49\u4ef7\u3002 \u7248\u672c1\uff1a\u4e0d\u5408\u683c\u7684\u9012\u5f52\u7248\u672c\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7248\u672c\u7684\u601d\u8003\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u753b\u51fa\u9012\u5f52\u7ed3\u6784\u6811\uff0c\u4ece\u800c\u53d1\u73b0\u91cd\u53e0\u5b50\u95ee\u9898\u3002 \uff08\u63d2\u56fe\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u7684\u9012\u5f52\u5b50\u7ed3\u6784\u6570\uff0c\u6807\u51fa\u91cd\u53e0\u5b50\u95ee\u9898\u3002\uff09 class Solution: def climbStairs(self, n): \"\"\" :type n: int :rtype: int \"\"\" if n == 0: return 1 if n == 1: return 1 return self.climbStairs(n - 1) + self.climbStairs(n - 2) \u7248\u672c2\uff1a\u52a0\u5165\u4e86\u7f13\u5b58\u7684\u9012\u5f52\u7248\u672c class Solution: memo = None def _climbStairs(self, n): if Solution.memo[n] != -1: return Solution.memo[n] if n == 0: return 1 if n == 1: return 1 Solution.memo[n] = self._climbStairs(n - 1) + self._climbStairs(n - 2) return Solution.memo[n] def climbStairs(self, n): Solution.memo = [-1] * (n + 1) return self._climbStairs(n) \u7248\u672c3\uff1a\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u5206\u6790\u601d\u8def\u4e0b\uff0c\u5199\u51fa\u7684\u52a8\u6001\u89c4\u5212\u7248\u672c\u3002 \u601d\u8003\u8fc7\u7a0b\uff1a\u722c 0 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b \u722c 1 \u4e2a\u53f0\u9636\uff0c\u6709 1 \u79cd\u722c\u6cd5\uff1b \u722c 2 \u4e2a\u53f0\u9636\uff0c\u6709 2 \u79cd\u722c\u6cd5\uff1b \u722c 3 \u4e2a\u53f0\u9636\uff0c\uff082\uff0c1\uff09 + \uff081\uff0c2\uff09\uff1b \u722c 4 \u4e2a\u53f0\u9636\uff0c\uff083\uff0c1\uff09 + \uff082\uff0c2\uff09\uff1b \u722c 5 \u4e2a\u53f0\u9636\uff0c\uff084\uff0c1\uff09 + \uff083\uff0c2\uff09\uff1b \u722c 6 \u4e2a\u8c03\u8282\uff0c\uff085\uff0c1\uff09 + \uff084\uff0c2\uff09\uff1b \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5176\u4e2d\uff0c\uff08i\uff0cj\uff09\u8868\u793a\u9996\u5148\u722c i \u4e2a\u53f0\u9636\u7684\u6240\u6709\u4e0d\u540c\u722c\u6cd5\uff0c\u7136\u540e\u518d\u722c j \u4e2a\u53f0\u9636\u7684\u4e0d\u540c\u722c\u6cd5\u3002 class Solution: def climbStairs(self, n): if n == 0: return 1 memo = [-1] * (n + 1) memo[0] = 1 memo[1] = 1 for i in range(2, n + 1): memo[i] = memo[i - 1] + memo[i - 2] return memo[n]","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0070-climbing-stairs/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0070-climbing-stairs/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0076-minimum-window-substring/","text":"76. Minimum Window Substring \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 T\uff0c\u8bf7\u5728 S \u4e2d\u627e\u51fa\u5305\u542b T \u6240\u6709\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: S = \"ADOBECODEBANC\", T = \"ABC\" \u8f93\u51fa: \"BANC\" \u8bf4\u660e\uff1a \u5982\u679c S \u4e2d\u4e0d\u5b58\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u5982\u679c S \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 76. Minimum Window Substring \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u5e76\u4e14\u4f7f\u7528\u4e24\u4e2a\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u3002\u5148\u590d\u4e60\u7b2c 438 \u9898\u518d\u505a\u8fd9\u9898\u53ef\u80fd\u4f1a\u597d\u4e9b\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\u3002 S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5305\u62ec\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002 T \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5b57\u7b26\u4e32 T \u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u626b\u63cf\u8fc7\u4e00\u6b21\u4ee5\u540e\u8fd9\u4e2a\u6570\u7ec4\u6211\u4eec\u4e0d\u53bb\u52a8\u5b83\uff0c\u7528\u6765\u548c S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8fdb\u884c\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6bd4\u8f83\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashSet; import java.util.Set; public class Solution { public String minWindow(String s, String t) { int[] cntS = new int[256]; int[] cntT = new int[256]; Set<Character> set = new HashSet<>(); // cntT \u8d4b\u503c\u4e86\u4ee5\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u7528\u4e8e\u6bd4\u5bf9\u7684\u5bf9\u8c61\uff0c\u4e0d\u66f4\u65b0 for (char ct : t.toCharArray()) { cntT[ct]++; set.add(ct); } int minSub = s.length() + 1; String res = \"\"; int left = 0; int right = 0; int count = 0; while (right < s.length()) { char rc = s.charAt(right); if (!set.contains(rc)) { // \u4e0d\u5728\u5b57\u5178\u91cc\u9762\uff0c\u4f46\u662f\u53f3\u8fb9\u754c\u540c\u6837\u8981\u6269\u5145\uff0c\u6240\u4ee5 right++ right++; continue; } cntS[rc]++; right++; // \u7406\u89e3\u8fd9\u91cc\u662f\u5173\u952e\uff1a\u52a0\u4e0a\u4ee5\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8e\uff0ccount \u624d ++\uff0c if (cntS[rc] <= cntT[rc]) { // count++; \u8fd9\u4ef6\u4e8b\u60c5\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u91cc\u9762\u7684\u6709\u6548\u5b57\u7b26\uff0c\u5411\u76ee\u6807\u5b57\u7b26\u53c8\u8fd1\u4e86\u4e00\u6b65 count++; } // \u4e0b\u9762\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u5199\u5f97\u66f4\u7cbe\u7b80\u4e00\u4e9b\uff0c\u4f46\u662f\u4e3a\u4e86\u8bed\u4e49\u4e0a\u7684\u6e05\u6670\uff0c\u6211\u5c31\u5199\u5f97\u5197\u957f\u4e00\u4e9b if (count == t.length()) { // \u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5de6\u8fb9\u754c\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3 // \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6216\u8005\u591a\u4e86\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5212\u6389\u5c31\u53ef\u4ee5\u4e86 while (true) { char deleteChar = s.charAt(left); if (!set.contains(deleteChar)) { left++; continue; } if (cntS[deleteChar] > cntT[deleteChar]) { cntS[deleteChar]--; left++; continue; } break; } if (right - left < minSub) { minSub = right - left; res = s.substring(left, right); } } } if (minSub == s.length() + 1) { return \"\"; } return res; } public static void main(String[] args) { Solution solution = new Solution(); String S = \"ADOBECODEBANC\"; String T = \"ABC\"; String minWindow = solution.minWindow(S, T); System.out.println(minWindow); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0076-minimum-window-substring \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"76. Minimum Window Substring"},{"location":"leetcode-0076-minimum-window-substring/#76-minimum-window-substring","text":"","title":"76. Minimum Window Substring"},{"location":"leetcode-0076-minimum-window-substring/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 T\uff0c\u8bf7\u5728 S \u4e2d\u627e\u51fa\u5305\u542b T \u6240\u6709\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: S = \"ADOBECODEBANC\", T = \"ABC\" \u8f93\u51fa: \"BANC\" \u8bf4\u660e\uff1a \u5982\u679c S \u4e2d\u4e0d\u5b58\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u5982\u679c S \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 76. Minimum Window Substring \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0076-minimum-window-substring/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u5e76\u4e14\u4f7f\u7528\u4e24\u4e2a\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u3002\u5148\u590d\u4e60\u7b2c 438 \u9898\u518d\u505a\u8fd9\u9898\u53ef\u80fd\u4f1a\u597d\u4e9b\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\u3002 S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5305\u62ec\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002 T \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8bb0\u5f55\u4e86\u5b57\u7b26\u4e32 T \u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u626b\u63cf\u8fc7\u4e00\u6b21\u4ee5\u540e\u8fd9\u4e2a\u6570\u7ec4\u6211\u4eec\u4e0d\u53bb\u52a8\u5b83\uff0c\u7528\u6765\u548c S \u7684\u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\u8fdb\u884c\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6bd4\u8f83\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0076-minimum-window-substring/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0076-minimum-window-substring/#1","text":"import java.util.HashSet; import java.util.Set; public class Solution { public String minWindow(String s, String t) { int[] cntS = new int[256]; int[] cntT = new int[256]; Set<Character> set = new HashSet<>(); // cntT \u8d4b\u503c\u4e86\u4ee5\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u7528\u4e8e\u6bd4\u5bf9\u7684\u5bf9\u8c61\uff0c\u4e0d\u66f4\u65b0 for (char ct : t.toCharArray()) { cntT[ct]++; set.add(ct); } int minSub = s.length() + 1; String res = \"\"; int left = 0; int right = 0; int count = 0; while (right < s.length()) { char rc = s.charAt(right); if (!set.contains(rc)) { // \u4e0d\u5728\u5b57\u5178\u91cc\u9762\uff0c\u4f46\u662f\u53f3\u8fb9\u754c\u540c\u6837\u8981\u6269\u5145\uff0c\u6240\u4ee5 right++ right++; continue; } cntS[rc]++; right++; // \u7406\u89e3\u8fd9\u91cc\u662f\u5173\u952e\uff1a\u52a0\u4e0a\u4ee5\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8e\uff0ccount \u624d ++\uff0c if (cntS[rc] <= cntT[rc]) { // count++; \u8fd9\u4ef6\u4e8b\u60c5\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u91cc\u9762\u7684\u6709\u6548\u5b57\u7b26\uff0c\u5411\u76ee\u6807\u5b57\u7b26\u53c8\u8fd1\u4e86\u4e00\u6b65 count++; } // \u4e0b\u9762\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u5199\u5f97\u66f4\u7cbe\u7b80\u4e00\u4e9b\uff0c\u4f46\u662f\u4e3a\u4e86\u8bed\u4e49\u4e0a\u7684\u6e05\u6670\uff0c\u6211\u5c31\u5199\u5f97\u5197\u957f\u4e00\u4e9b if (count == t.length()) { // \u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5de6\u8fb9\u754c\u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3 // \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6216\u8005\u591a\u4e86\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5212\u6389\u5c31\u53ef\u4ee5\u4e86 while (true) { char deleteChar = s.charAt(left); if (!set.contains(deleteChar)) { left++; continue; } if (cntS[deleteChar] > cntT[deleteChar]) { cntS[deleteChar]--; left++; continue; } break; } if (right - left < minSub) { minSub = right - left; res = s.substring(left, right); } } } if (minSub == s.length() + 1) { return \"\"; } return res; } public static void main(String[] args) { Solution solution = new Solution(); String S = \"ADOBECODEBANC\"; String T = \"ABC\"; String minWindow = solution.minWindow(S, T); System.out.println(minWindow); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0076-minimum-window-substring \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0077-combinations/","text":"77. Combinations \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 77. Combinations \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 77. \u7ec4\u5408 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f n - (k - stack.size()) + 1 \u3002 \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d i \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; import java.util.Stack; // https://leetcode-cn.com/problems/combinations/description/ public class Solution { private List<List<Integer>> res = new ArrayList<>(); private void findCombinations(int n, int k, int begin, Stack<Integer> stack) { if (stack.size() == k) { // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d res.add(new ArrayList<>(stack)); return; } // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c // for (int i = index; i <= n; i++) { // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c for (int i = begin; i <= n - (k - stack.size()) + 1; i++) { stack.add(i); findCombinations(n, k, i + 1, stack); stack.pop(); } } public List<List<Integer>> combine(int n, int k) { if (n <= 0 || k <= 0 || n < k) { return res; } // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a findCombinations(n, k, 1, new Stack<>()); return res; } public static void main(String[] args) { Solution solution = new Solution(); List<List<Integer>> combine = solution.combine(4, 2); System.out.println(combine); } }","title":"77. Combinations"},{"location":"leetcode-0077-combinations/#77-combinations","text":"","title":"77. Combinations"},{"location":"leetcode-0077-combinations/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de 1 ... n \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 77. Combinations \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 77. \u7ec4\u5408 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0077-combinations/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6309\u987a\u5e8f\u67e5\u627e\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u6570\u5b57\u5c31\u4e0d\u4f1a\u518d\u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u7528\u8bbe\u7f6e marked \u6570\u7ec4\u3002\u91cd\u70b9\u5206\u6790\u51fa\u904d\u5386\u7684 i \u7684\u4e0a\u754c\u662f n - (k - stack.size()) + 1 \u3002 \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u5982\u4f55\u5206\u6790\u51fa\u5faa\u73af\u53d8\u91cf\u4e2d i \u7684\u4e0a\u754c\u3002 \uff08\u5982\u679c\u4e0b\u9762\u7684\u56fe\u7247\u592a\u5c0f\uff0c\u53ef\u4ee5\u5728\u56fe\u7247\u4e0a\u53f3\u952e\uff0c\u9009\u62e9\u201c\u5728\u65b0\u6807\u7b7e\u9875\u4e2d\u6253\u5f00\u56fe\u7247\u201d\uff0c\u4ee5\u67e5\u770b\u5927\u56fe\u3002\uff09","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0077-combinations/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0077-combinations/#1","text":"import java.util.ArrayList; import java.util.List; import java.util.Stack; // https://leetcode-cn.com/problems/combinations/description/ public class Solution { private List<List<Integer>> res = new ArrayList<>(); private void findCombinations(int n, int k, int begin, Stack<Integer> stack) { if (stack.size() == k) { // \u591f\u6570\u4e86\uff0c\u5c31\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d res.add(new ArrayList<>(stack)); return; } // n - (k - stack.size()) + 1 \u662f\u4e00\u6b65\u526a\u679d\u64cd\u4f5c // for (int i = index; i <= n; i++) { // \u5173\u952e\u5728\u4e8e\u5206\u6790\u51fa i \u7684\u4e0a\u754c for (int i = begin; i <= n - (k - stack.size()) + 1; i++) { stack.add(i); findCombinations(n, k, i + 1, stack); stack.pop(); } } public List<List<Integer>> combine(int n, int k) { if (n <= 0 || k <= 0 || n < k) { return res; } // \u4ece 1 \u5f00\u59cb\u662f\u9898\u76ee\u7684\u8bbe\u5b9a findCombinations(n, k, 1, new Stack<>()); return res; } public static void main(String[] args) { Solution solution = new Solution(); List<List<Integer>> combine = solution.combine(4, 2); System.out.println(combine); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0078-subsets/","text":"78. Subsets \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u7ec4 \u4e0d\u542b\u91cd\u590d\u5143\u7d20 \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 78. Subsets \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 78. \u5b50\u96c6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0078-subsets \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"78. Subsets"},{"location":"leetcode-0078-subsets/#78-subsets","text":"","title":"78. Subsets"},{"location":"leetcode-0078-subsets/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u7ec4 \u4e0d\u542b\u91cd\u590d\u5143\u7d20 \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 78. Subsets \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 78. \u5b50\u96c6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0078-subsets/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0078-subsets/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0078-subsets/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0078-subsets \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/","text":"80. Remove Duplicates from Sorted Array II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [1,1,1,2,2,3] , \u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = 5 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 1, 2, 2, 3 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,0,1,1,1,1,2,3,3] , \u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = 7 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 0 , 1 , 1 , 2 , 3 , 3 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 80. Remove Duplicates from Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 80. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u5206\u7c7b\u8ba8\u8bba\uff0c\u4e34\u754c\u503c\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a import java.util.Arrays; // https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/ // \u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u51fa\u73b0 2 \u6b21 // \u89e3\u91ca\uff1a\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8981\u6c42\u91cd\u590d\u7684\u5143\u7d20\u81f3\u591a\u4fdd\u7559\u4e24\u4e2a\u3002 // \u601d\u8003\uff1a\u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002 // \u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u4e8e\u6bd4\u8f83\u548c\u4e4b\u524d\u7684\u503c\u662f\u5426\u91cd\u590d\uff0c\u8fd8\u8981\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u91cd\u590d\u6b21\u6570\u3002 // \u6ce8\u610f\uff1a\u540c\u6837\u8981\u6ce8\u610f\u5230 nums = [] \u7684\u60c5\u51b5\u3002 // \u8fd9\u9053\u9898\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0c\u6700\u7ec8\u8fd8\u662f\u72ec\u7acb\u89e3\u51fa\u6765\u4e86\uff0c // \u4e3b\u8981\u662f\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5728\u91cd\u590d\u6b21\u6570\u4e3a 1 \u7684\u65f6\u5019\uff0c\u632a\u52a8\u6307\u9488\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u8981\u8d4b\u503c\uff0c\u4e00\u5f00\u59cb\u6211\u5fd8\u8bb0\u8d4b\u503c\u4e86\u3002 public class Solution { // \u91cd\u590d\u51fa\u73b0 1 \u6b21\u548c 2 \u6b21\u7684\u65f6\u5019\u4ec0\u4e48\u90fd\u4e0d\u505a // [0,1,1,1,2,2,2,2,3,3,4] public int removeDuplicates(int[] nums) { // [1,1] \u6700\u591a 2 \u4e2a\u5143\u7d20\u5c31\u80fd\u591f\u4e0d\u7528\u5224\u65ad int len = nums.length; if (len <= 2) { return len; } int pre = nums[0]; int duplicateTimes = 0; // \u7b2c 1 \u4e2a\u5143\u7d20\u80af\u5b9a\u88ab\u4fdd\u7559\uff0c\u6240\u4ee5\u76f4\u63a5\u5199 1 // j \u8868\u793a\u6211\u6bcf\u4e00\u6b21\u904d\u5386\uff0c\u5373\u5c06\u88ab\u8986\u76d6\u7684\u90a3\u4e2a\u7d22\u5f15 int j = 1; for (int i = 1; i < len; i++) { if (nums[i] == pre) { // \u53ea\u8981\u6709\u91cd\u590d\uff0c\u6b21\u6570\u5c31\u8981\u52a0 1 duplicateTimes++; // \u91cd\u590d 1 \u6b21\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u8d4b\u503c if (duplicateTimes == 1) { nums[j] = pre; j++; } // \u91cd\u590d 1 \u6b21\u4ee5\u4e0a\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u5143\u7d20 } else { // \u91cd\u7f6e\u6b21\u6570\u548c\u4e4b\u524d\u7684\u90a3\u4e2a\u503c pre = nums[i]; duplicateTimes = 0; nums[j] = nums[i]; j++; } } return j; } public static void main(String[] args) { int[] nums = {0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4}; int ret = new Solution().removeDuplicates(nums); System.out.println(ret); System.out.println(Arrays.toString(nums)); } } Python \u5199\u6cd5\uff1a class Solution: def rotate(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if len(nums) == 0 or k <= 0: return k = k % len(nums) # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50 self.__reverse(nums, 0, len(nums) - 1) self.__reverse(nums, 0, k - 1) self.__reverse(nums, k, len(nums) - 1) def __reverse(self, nums, index1, index2): \"\"\" \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c :param nums: :param index1: :param index2: :return: \"\"\" while index1 < index2: nums[index1], nums[index2] = nums[index2], nums[index1] index1 += 1 index2 -= 1 if __name__ == '__main__': nums = [1, 2, 3, 4, 5, 6, 7] k = 3 s = Solution() s.rotate(nums, k) print(nums) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0080-remove-duplicates-from-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"80. Remove Duplicates from Sorted Array II"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/#80-remove-duplicates-from-sorted-array-ii","text":"","title":"80. Remove Duplicates from Sorted Array II"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [1,1,1,2,2,3] , \u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = 5 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 1, 2, 2, 3 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,0,1,1,1,1,2,3,3] , \u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = 7 , \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 0 , 1 , 1 , 2 , 3 , 3 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u201c\u5f15\u7528\u201d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d \u8be5\u957f\u5ea6\u8303\u56f4\u5185 \u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 80. Remove Duplicates from Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 80. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u5206\u7c7b\u8ba8\u8bba\uff0c\u4e34\u754c\u503c\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0080-remove-duplicates-from-sorted-array-ii/#1","text":"Java \u5199\u6cd5\uff1a import java.util.Arrays; // https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/ // \u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u51fa\u73b0 2 \u6b21 // \u89e3\u91ca\uff1a\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8981\u6c42\u91cd\u590d\u7684\u5143\u7d20\u81f3\u591a\u4fdd\u7559\u4e24\u4e2a\u3002 // \u601d\u8003\uff1a\u5e94\u8be5\u5145\u5206\u5229\u7528\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u8fd9\u4e2a\u7279\u6027\u6765\u5b8c\u6210\u3002 // \u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u4e8e\u6bd4\u8f83\u548c\u4e4b\u524d\u7684\u503c\u662f\u5426\u91cd\u590d\uff0c\u8fd8\u8981\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u91cd\u590d\u6b21\u6570\u3002 // \u6ce8\u610f\uff1a\u540c\u6837\u8981\u6ce8\u610f\u5230 nums = [] \u7684\u60c5\u51b5\u3002 // \u8fd9\u9053\u9898\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0c\u6700\u7ec8\u8fd8\u662f\u72ec\u7acb\u89e3\u51fa\u6765\u4e86\uff0c // \u4e3b\u8981\u662f\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5728\u91cd\u590d\u6b21\u6570\u4e3a 1 \u7684\u65f6\u5019\uff0c\u632a\u52a8\u6307\u9488\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u8981\u8d4b\u503c\uff0c\u4e00\u5f00\u59cb\u6211\u5fd8\u8bb0\u8d4b\u503c\u4e86\u3002 public class Solution { // \u91cd\u590d\u51fa\u73b0 1 \u6b21\u548c 2 \u6b21\u7684\u65f6\u5019\u4ec0\u4e48\u90fd\u4e0d\u505a // [0,1,1,1,2,2,2,2,3,3,4] public int removeDuplicates(int[] nums) { // [1,1] \u6700\u591a 2 \u4e2a\u5143\u7d20\u5c31\u80fd\u591f\u4e0d\u7528\u5224\u65ad int len = nums.length; if (len <= 2) { return len; } int pre = nums[0]; int duplicateTimes = 0; // \u7b2c 1 \u4e2a\u5143\u7d20\u80af\u5b9a\u88ab\u4fdd\u7559\uff0c\u6240\u4ee5\u76f4\u63a5\u5199 1 // j \u8868\u793a\u6211\u6bcf\u4e00\u6b21\u904d\u5386\uff0c\u5373\u5c06\u88ab\u8986\u76d6\u7684\u90a3\u4e2a\u7d22\u5f15 int j = 1; for (int i = 1; i < len; i++) { if (nums[i] == pre) { // \u53ea\u8981\u6709\u91cd\u590d\uff0c\u6b21\u6570\u5c31\u8981\u52a0 1 duplicateTimes++; // \u91cd\u590d 1 \u6b21\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u8d4b\u503c if (duplicateTimes == 1) { nums[j] = pre; j++; } // \u91cd\u590d 1 \u6b21\u4ee5\u4e0a\u7684\u65f6\u5019\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u5143\u7d20 } else { // \u91cd\u7f6e\u6b21\u6570\u548c\u4e4b\u524d\u7684\u90a3\u4e2a\u503c pre = nums[i]; duplicateTimes = 0; nums[j] = nums[i]; j++; } } return j; } public static void main(String[] args) { int[] nums = {0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4}; int ret = new Solution().removeDuplicates(nums); System.out.println(ret); System.out.println(Arrays.toString(nums)); } } Python \u5199\u6cd5\uff1a class Solution: def rotate(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if len(nums) == 0 or k <= 0: return k = k % len(nums) # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50 self.__reverse(nums, 0, len(nums) - 1) self.__reverse(nums, 0, k - 1) self.__reverse(nums, k, len(nums) - 1) def __reverse(self, nums, index1, index2): \"\"\" \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c :param nums: :param index1: :param index2: :return: \"\"\" while index1 < index2: nums[index1], nums[index2] = nums[index2], nums[index1] index1 += 1 index2 -= 1 if __name__ == '__main__': nums = [1, 2, 3, 4, 5, 6, 7] k = 3 s = Solution() s.rotate(nums, k) print(nums) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0080-remove-duplicates-from-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/","text":"81. Search in Rotated Sorted Array II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,0,1,2,2,5,6] \u53ef\u80fd\u53d8\u4e3a [2,5,6,0,0,1,2] )\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [2 ,5,6,0,0,1,2] , target = 0 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: nums = [2 ,5,6,0,0,1,2] , target = 3 \u8f93\u51fa: false \u8fdb\u9636: \u8fd9\u662f \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684 nums \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 81. Search in Rotated Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 81. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public boolean search(int[] nums, int target) { int len = nums.length; if (len == 0) { return false; } int left = 0; int right = len - 1; while (left <= right) { int mid = left + (right - left) / 2; // System.out.println(mid); if (nums[mid] == target) { return true; } // 10 11 4 5 6 7 8 9 if (nums[mid] < nums[right]) { // \u53f3\u8fb9\u7684\u4e00\u5b9a\u662f\u987a\u5e8f\u6570\u7ec4 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } else { assert nums[mid] >= nums[right]; // 5 1 2 3 4 5 5 5 5 5 5 5 // 1 1 3 1 // \u53ef\u80fd\u5728\u5de6\u8fb9\uff0c\u4e5f\u6709\u53ef\u80fd\u5728\u53f3\u8fb9 if (nums[mid] == nums[right]) { // \u4e00\u6b65\u4e00\u6b65\u6765\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5224\u65ad\u4e86 nums[mid] != target\uff0c\u800c\u6b64\u65f6 nums[mid] == nums[right]\uff0c // \u6240\u4ee5\uff0cnums[right] \u53ef\u4ee5\u4e22\u5f03\u4e86 right--; } else { assert nums[mid] > nums[right]; // 4 5 6 7 8 9 1 2 // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } } } return false; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 1, 3, 1}; int target = 3; boolean search = solution.search(nums, target); System.out.println(search); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0081-search-in-rotated-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"81. Search in Rotated Sorted Array II"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/#81-search-in-rotated-sorted-array-ii","text":"","title":"81. Search in Rotated Sorted Array II"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,0,1,2,2,5,6] \u53ef\u80fd\u53d8\u4e3a [2,5,6,0,0,1,2] )\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [2 ,5,6,0,0,1,2] , target = 0 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: nums = [2 ,5,6,0,0,1,2] , target = 3 \u8f93\u51fa: false \u8fdb\u9636: \u8fd9\u662f \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684 nums \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 81. Search in Rotated Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 81. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0081-search-in-rotated-sorted-array-ii/#1","text":"public class Solution { public boolean search(int[] nums, int target) { int len = nums.length; if (len == 0) { return false; } int left = 0; int right = len - 1; while (left <= right) { int mid = left + (right - left) / 2; // System.out.println(mid); if (nums[mid] == target) { return true; } // 10 11 4 5 6 7 8 9 if (nums[mid] < nums[right]) { // \u53f3\u8fb9\u7684\u4e00\u5b9a\u662f\u987a\u5e8f\u6570\u7ec4 if (nums[mid] < target && target <= nums[right]) { left = mid + 1; } else { right = mid - 1; } } else { assert nums[mid] >= nums[right]; // 5 1 2 3 4 5 5 5 5 5 5 5 // 1 1 3 1 // \u53ef\u80fd\u5728\u5de6\u8fb9\uff0c\u4e5f\u6709\u53ef\u80fd\u5728\u53f3\u8fb9 if (nums[mid] == nums[right]) { // \u4e00\u6b65\u4e00\u6b65\u6765\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5224\u65ad\u4e86 nums[mid] != target\uff0c\u800c\u6b64\u65f6 nums[mid] == nums[right]\uff0c // \u6240\u4ee5\uff0cnums[right] \u53ef\u4ee5\u4e22\u5f03\u4e86 right--; } else { assert nums[mid] > nums[right]; // 4 5 6 7 8 9 1 2 // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 if (nums[left] <= target && target < nums[mid]) { right = mid - 1; } else { left = mid + 1; } } } } return false; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 1, 3, 1}; int target = 3; boolean search = solution.search(nums, target); System.out.println(search); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0081-search-in-rotated-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/","text":"82. Remove Duplicates from Sorted List II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 82. Remove Duplicates from Sorted List II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5206\u6790\u6e05\u695a\u5404\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u4ee3\u7801\u5e76\u4e0d\u96be\u5199\uff0c\u6211\u628a\u601d\u8def\u90fd\u4f5c\u4e3a\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u8fd9\u91cc\u6211\u4eec\u8981\u6e05\u695a\uff0c\u4f8b\u5982 1 1 2 3 ,\u5934\u7ed3\u70b9\u4e5f\u662f\u6709\u53ef\u80fd\u88ab\u5220\u9664\u7684\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9 // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; // \u9898\u76ee\u8981\u6c42\u7684\u5220\u9664\u7ed3\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7ad9\u5728\u88ab\u5220\u9664\u7ed3\u70b9\u524d\u9762\u7684 // \u6240\u4ee5\u5faa\u73af\u53ef\u4ee5\u7ee7\u7eed\u7684\u6761\u4ef6\u5e94\u8be5\u8fd9\u6837\u5199 while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a // \u6ce8\u610f\uff1a\u8fd9\u91cc\u5f97\u7528\u5faa\u73af\uff0c\u4f8b\u5982\uff1a 1 2 2 2 2 2 2 2 2 3 3 3 // \u5f97\u8ba9 delNode \u7ed3\u70b9\u632a\u5230\u6700\u540e\u4e00\u4e2a 2 \u4e0a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u63a5\u4e0b\u6765\u628a\u6709\u91cd\u590d\u7684\u94fe\u8868\u6bb5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86 // 1 2 2 2 3 // curNode delNode curNode.next = delNode.next; delNode.next = null; } else { // \u5426\u5219\u5411\u524d\u8d70\u4e00\u6b65 curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = {1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode deleteDuplicates = solution.deleteDuplicates(head); System.out.println(deleteDuplicates); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0082-remove-duplicates-from-sorted-list-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"82. Remove Duplicates from Sorted List II"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/#82-remove-duplicates-from-sorted-list-ii","text":"","title":"82. Remove Duplicates from Sorted List II"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 82. Remove Duplicates from Sorted List II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5206\u6790\u6e05\u695a\u5404\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u4ee3\u7801\u5e76\u4e0d\u96be\u5199\uff0c\u6211\u628a\u601d\u8def\u90fd\u4f5c\u4e3a\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0082-remove-duplicates-from-sorted-list-ii/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } // \u8fd9\u91cc\u6211\u4eec\u8981\u6e05\u695a\uff0c\u4f8b\u5982 1 1 2 3 ,\u5934\u7ed3\u70b9\u4e5f\u662f\u6709\u53ef\u80fd\u88ab\u5220\u9664\u7684\uff0c\u6240\u4ee5\u8981\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9 // \u53ea\u8981\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8bbe\u7acb\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = dummyNode; // \u9898\u76ee\u8981\u6c42\u7684\u5220\u9664\u7ed3\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7ad9\u5728\u88ab\u5220\u9664\u7ed3\u70b9\u524d\u9762\u7684 // \u6240\u4ee5\u5faa\u73af\u53ef\u4ee5\u7ee7\u7eed\u7684\u6761\u4ef6\u5e94\u8be5\u8fd9\u6837\u5199 while (curNode.next != null && curNode.next.next != null) { // \u5982\u679c\u63a5\u8fde\u4e24\u4e2a\u7ed3\u70b9\u7684 val \u76f8\u7b49\uff0c\u81f3\u5c11\u8981\u628a\u5b83\u4eec\u90fd\u5220\u6389 if (curNode.next.val == curNode.next.next.val) { // \u8981\u5220\u9664\u7684\u8d77\u70b9\u81f3\u5c11\u5e94\u8be5\u662f\u5f53\u524d\u5224\u65ad\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u7b2c 2 \u4e2a ListNode delNode = curNode.next.next; // \u5982\u679c\u540e\u9762\u8fd8\u6709\u76f8\u540c\u7684\u7ed3\u70b9\uff0cdelNode \u540e\u79fb\u4e00\u4f4d\uff0c\u5373 delNode \u5e94\u8be5\u662f\u6307\u5411\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u6700\u540e\u4e00\u4e2a // \u6ce8\u610f\uff1a\u8fd9\u91cc\u5f97\u7528\u5faa\u73af\uff0c\u4f8b\u5982\uff1a 1 2 2 2 2 2 2 2 2 3 3 3 // \u5f97\u8ba9 delNode \u7ed3\u70b9\u632a\u5230\u6700\u540e\u4e00\u4e2a 2 \u4e0a while (delNode.next != null && delNode.next.val == delNode.val) { delNode = delNode.next; } // \u63a5\u4e0b\u6765\u628a\u6709\u91cd\u590d\u7684\u94fe\u8868\u6bb5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86 // 1 2 2 2 3 // curNode delNode curNode.next = delNode.next; delNode.next = null; } else { // \u5426\u5219\u5411\u524d\u8d70\u4e00\u6b65 curNode = curNode.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = {1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode deleteDuplicates = solution.deleteDuplicates(head); System.out.println(deleteDuplicates); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0082-remove-duplicates-from-sorted-list-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/","text":"83. Remove Duplicates from Sorted List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002 \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002 \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 cur \u548c next \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 pre \u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } ListNode cur = head; ListNode next; while (cur.next != null) { next = cur.next; if (next.val == cur.val) { cur.next = next.next; next.next = null; } else { cur = cur.next; } } return head; } public static void main(String[] args) { int[] nums = {1, 1, 2, 3, 3}; ListNode head = new ListNode(nums); Solution solution = new Solution(); System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\"); ListNode deleteDuplicates = solution.deleteDuplicates(head); System.out.println(deleteDuplicates); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def deleteDuplicates(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6 if head is None or head.next is None: return head cur = head while cur.next: next = cur.next if next.val == cur.val: # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d cur.next = next.next next.next = None else: cur = cur.next return head \u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"83. Remove Duplicates from Sorted List"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/#83-remove-duplicates-from-sorted-list","text":"","title":"83. Remove Duplicates from Sorted List"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 83. Remove Duplicates from Sorted List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\u3002 \u53ea\u8981\u753b\u51fa\u5206\u6790\u7684\u56fe\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u4e86\u3002 \u7a7a\u7684\u60c5\u51b5\u4e0d\u8981\u5fd8\u8bb0\u5199\u5728\u6700\u5f00\u59cb\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6700\u5bb9\u6613\u5ffd\u7565\uff1b \u8fd9\u91cc\u4e0d\u4f1a\u6d89\u53ca\u5934\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7acb\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff1b \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u56fa\u5b9a\u7684\u5957\u8def\u662f while(cur.next!=null) \uff0c\u5373\u53bb\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u5411\u8df3\u8fc7\u5b83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981 cur \u548c next \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u7528 pre \u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0083-remove-duplicates-from-sorted-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } ListNode cur = head; ListNode next; while (cur.next != null) { next = cur.next; if (next.val == cur.val) { cur.next = next.next; next.next = null; } else { cur = cur.next; } } return head; } public static void main(String[] args) { int[] nums = {1, 1, 2, 3, 3}; ListNode head = new ListNode(nums); Solution solution = new Solution(); System.out.println(\"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4ee5\u540e\uff1a\"); ListNode deleteDuplicates = solution.deleteDuplicates(head); System.out.println(deleteDuplicates); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def deleteDuplicates(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" # \u5148\u5224\u65ad\u6781\u7aef\u6761\u4ef6 if head is None or head.next is None: return head cur = head while cur.next: next = cur.next if next.val == cur.val: # q \u5411\u540e\u632a\u52a8\u4e00\u4f4d cur.next = next.next next.next = None else: cur = cur.next return head \u8bf4\u660e\uff1a\u5199\u591a\u4e86\u5c31\u89c9\u5f97\u601d\u8def\u6bd4\u8f83\u81ea\u7136\u4e86\u3002 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0083-remove-duplicates-from-sorted-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0086-partition-list/","text":"86. Partition List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode partition(ListNode head, int x) { ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386 ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386 int val; while (head != null) { val = head.val; if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762 curL.next = new ListNode(val); curL = curL.next; } else { // \u63a5\u5728 R \u7684\u540e\u9762 curR.next = new ListNode(val); curR = curR.next; } head = head.next; } curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762 return dummyNodeL.next; } public static void main(String[] args) { int[] nums = {1, 4, 3, 2, 5, 2}; int x = 3; ListNode head = new ListNode(nums); Solution solution = new Solution(); System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\"); ListNode partition = solution.partition(head, x); System.out.println(partition); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 public class Solution2 { public ListNode partition(ListNode head, int x) { ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386 ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386 int val; while (head != null) { val = head.val; if (val < x) { curL.next = head; curL = curL.next; } else { curR.next = head; curR = curR.next; } head = head.next; } curL.next = dummyNodeR.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curR.next = null; return dummyNodeL.next; } }","title":"86. Partition List"},{"location":"leetcode-0086-partition-list/#86-partition-list","text":"","title":"86. Partition List"},{"location":"leetcode-0086-partition-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 86. Partition List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 86. \u5206\u9694\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0086-partition-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u7684 partition \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u6570\u7ec4\u4e2d\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u4e0d\u65ad\u5730\u4ea4\u6362\u5143\u7d20\u7684\u4f4d\u7f6e\u6765\u5b9e\u73b0 partition \u3002\u5bf9\u4e8e\u8fd9\u9053\u95ee\u9898\uff0c\u7a7f\u9488\u5f15\u7ebf\u53ef\u80fd\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e24\u4e2a\u94fe\u8868\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u601d\u8def1\uff1b\u4f46\u662f\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u53ea\u4e0d\u8fc7\u8981\u8bbe\u7f6e\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u6700\u540e\u628a\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u4e00\u76f4 new \u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u601d\u8def2\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0086-partition-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0086-partition-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode partition(ListNode head, int x) { ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386 ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386 int val; while (head != null) { val = head.val; if (val < x) { // \u63a5\u5728 L \u7684\u540e\u9762 curL.next = new ListNode(val); curL = curL.next; } else { // \u63a5\u5728 R \u7684\u540e\u9762 curR.next = new ListNode(val); curR = curR.next; } head = head.next; } curL.next = dummyNodeR.next; // \u628a\u8f83\u5c0f\u7684\u94fe\u8868\u63a5\u5728\u8f83\u5927\u7684\u94fe\u8868\u540e\u9762 return dummyNodeL.next; } public static void main(String[] args) { int[] nums = {1, 4, 3, 2, 5, 2}; int x = 3; ListNode head = new ListNode(nums); Solution solution = new Solution(); System.out.println(\"\u5206\u9694\u94fe\u8868\u4e4b\u540e\uff1a\"); ListNode partition = solution.partition(head, x); System.out.println(partition); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0086-partition-list/#2","text":"public class Solution2 { public ListNode partition(ListNode head, int x) { ListNode dummyNodeL = new ListNode(-1); // \u6bd4 x \u5c0f\u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode dummyNodeR = new ListNode(-1); // \u5927\u4e8e\u7b49\u4e8e x \u7684\u865a\u62df\u5934\u7ed3\u70b9 ListNode curL = dummyNodeL; // \u7528\u4e8e\u904d\u5386 ListNode curR = dummyNodeR; // \u7528\u4e8e\u904d\u5386 int val; while (head != null) { val = head.val; if (val < x) { curL.next = head; curL = curL.next; } else { curR.next = head; curR = curR.next; } head = head.next; } curL.next = dummyNodeR.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curR.next = null; return dummyNodeL.next; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"leetcode-0088-merge-sorted-array/","text":"88. Merge Sorted Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d \uff0c \u4f7f\u5f97 num1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 88. Merge Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002 import java.util.Arrays; public class Solution { public void merge(int[] nums1, int m, int[] nums2, int n) { int len = m + n; int i = m - 1; int j = n - 1; for (int k = len - 1; k >= 0; k--) { if (i == -1) { // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217 nums1[k] = nums2[j]; j--; } else if (j == -1) { // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217 nums1[k] = nums1[i]; i--; } else if (nums1[i] >= nums2[j]) { // \u8c01\u5927\u8c01\u51fa\u5217 nums1[k] = nums1[i]; i--; } else { assert nums1[i] < nums2[j]; nums1[k] = nums2[j]; j--; } } } public static void main(String[] args) { int[] nums1 = {1, 2, 3, 0, 0, 0}; int m = 3; int[] nums2 = {2, 5, 6}; int n = 3; Solution solution = new Solution(); solution.merge(nums1, m, nums2, n); System.out.println(Arrays.toString(nums1)); } } \u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002 public class Solution2 { public void merge(int[] nums1, int m, int[] nums2, int n) { // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd int[] nums3 = new int[m]; System.arraycopy(nums1, 0, nums3, 0, m); // \u6570\u7ec43 int i = 0; // \u6570\u7ec42 int j = 0; int length = m + n; for (int k = 0; k < length; k++) { if (i == m) { nums1[k] = nums2[j]; j++; } else if (j == n) { nums1[k] = nums3[i]; i++; } else if (nums3[i] < nums2[j]) { nums1[k] = nums3[i]; i++; } else { nums1[k] = nums2[j]; j++; } } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"88. Merge Sorted Array"},{"location":"leetcode-0088-merge-sorted-array/#88-merge-sorted-array","text":"","title":"88. Merge Sorted Array"},{"location":"leetcode-0088-merge-sorted-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d \uff0c \u4f7f\u5f97 num1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 88. Merge Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0088-merge-sorted-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6559\u79d1\u4e66\u4e0a\u4ecb\u7ecd\u7684\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916\u7684\u8f85\u52a9\u6570\u7ec4\u5b8c\u6210\u5f52\u5e76\u3002\u8fd9\u9053\u9898\u7684\u9898\u76ee\u4e2d\u8bf4\u4e86\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\u201d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4ece\u540e\u5411\u524d\u8fdb\u884c\u5f52\u5e76\uff0c\u8c01\u5927\u8c01\u51fa\u5217\u5230 nums1 \u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u60f3\u8fd9\u9053\u9898\u5e94\u8be5\u5c31\u662f\u8003\u67e5\u6211\u4eec\u5f80\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\u7684\u3002 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\u57fa\u672c\u4e0a\u6a21\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u4e3a\u5408\u5e76\u4ee5\u540e\u7684\u5143\u7d20\u4e2a\u6570\u662f\u77e5\u9053\u7684\uff0c\u6bcf\u6b21\u6bd4\u8f83\u90fd\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u4f1a\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5b8c\u6210\u7684\u60c5\u51b5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0088-merge-sorted-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0088-merge-sorted-array/#1","text":"import java.util.Arrays; public class Solution { public void merge(int[] nums1, int m, int[] nums2, int n) { int len = m + n; int i = m - 1; int j = n - 1; for (int k = len - 1; k >= 0; k--) { if (i == -1) { // i \u7528\u5b8c\u4e86\uff0cj \u51fa\u5217 nums1[k] = nums2[j]; j--; } else if (j == -1) { // j \u7528\u5b8c\u4e86\uff0ci \u51fa\u5217 nums1[k] = nums1[i]; i--; } else if (nums1[i] >= nums2[j]) { // \u8c01\u5927\u8c01\u51fa\u5217 nums1[k] = nums1[i]; i--; } else { assert nums1[i] < nums2[j]; nums1[k] = nums2[j]; j--; } } } public static void main(String[] args) { int[] nums1 = {1, 2, 3, 0, 0, 0}; int m = 3; int[] nums2 = {2, 5, 6}; int n = 3; Solution solution = new Solution(); solution.merge(nums1, m, nums2, n); System.out.println(Arrays.toString(nums1)); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u63a8\u8350\u7684\u5199\u6cd5\u3002"},{"location":"leetcode-0088-merge-sorted-array/#2","text":"public class Solution2 { public void merge(int[] nums1, int m, int[] nums2, int n) { // \u56e0\u4e3a\u8981\u5728 num1 \u4e0a\u4fee\u6539\uff0c\u628a nums1 \u8fd4\u56de\u56de\u53bb // \u56e0\u6b64\uff0c\u628a num1 \u590d\u5236\u4e00\u4efd int[] nums3 = new int[m]; System.arraycopy(nums1, 0, nums3, 0, m); // \u6570\u7ec43 int i = 0; // \u6570\u7ec42 int j = 0; int length = m + n; for (int k = 0; k < length; k++) { if (i == m) { nums1[k] = nums2[j]; j++; } else if (j == n) { nums1[k] = nums3[i]; i++; } else if (nums3[i] < nums2[j]) { nums1[k] = nums3[i]; i++; } else { nums1[k] = nums2[j]; j++; } } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0088-merge-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u5199\u6cd5\u3002"},{"location":"leetcode-0090-subsets-ii/","text":"90. Subsets II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,2] \u8f93\u51fa: [ [2], [1], [1,2,2], [2,2], [1,2], [] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 90. Subsets II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 90. \u5b50\u96c6 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0090-subsets-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"90. Subsets II"},{"location":"leetcode-0090-subsets-ii/#90-subsets-ii","text":"","title":"90. Subsets II"},{"location":"leetcode-0090-subsets-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,2] \u8f93\u51fa: [ [2], [1], [1,2,2], [2,2], [1,2], [] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 90. Subsets II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 90. \u5b50\u96c6 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0090-subsets-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0090-subsets-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0090-subsets-ii/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0090-subsets-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0092-reverse-linked-list-ii/","text":"92. Reverse Linked List II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 92. Reverse Linked List II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 92. \u53cd\u8f6c\u94fe\u8868 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002 \u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002 \u5173\u6ce8\u4e34\u754c\u503c\uff0c pre \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b \u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b \u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e cur \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c pre \u4e5f\u4e0d\u53d8\uff0c next \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728 cur \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21 cur \u7684 next \u90fd\u4f1a\u79fb\u5230 pre \u7684 next \uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b \u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9 ListNode \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868 createListNode \uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868 printLinkedList \u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u540e\u6765\u89c9\u5f97\u6bd4\u8f83\u597d\u7684\u601d\u8def\uff1a Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def reverseBetween(self, head, m, n): \"\"\" :type head: ListNode :type m: int :type n: int :rtype: ListNode \"\"\" dummy_node = ListNode(-1) dummy_node.next = head cur_node = dummy_node for _ in range(m - 1): cur_node = cur_node.next begin = cur_node end = cur_node.next # \u5411\u524d\u8d70\u4e00\u6b65 cur_node = cur_node.next # \u518d\u524d\u8d70\u4e00\u6b65 pre = cur_node cur_node = cur_node.next for _ in range(n - m): next = cur_node.next cur_node.next = pre pre = cur_node cur_node = next begin.next = pre end.next = cur_node return dummy_node.next \u53c2\u8003\u89e3\u7b542 Java \u5199\u6cd5 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA // https://www.jianshu.com/p/fbe6012c9e52 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode reverseBetween(ListNode head, int m, int n) { // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode pre = dummyNode; for (int i = 0; i < m - 1; i++) { pre = pre.next; } ListNode cur = pre.next; ListNode next; for (int i = 0; i < n - m; i++) { next = cur.next; cur.next = next.next; next.next = pre.next; pre.next = next; } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4); System.out.println(reverseBetween); } }","title":"92. Reverse Linked List II"},{"location":"leetcode-0092-reverse-linked-list-ii/#92-reverse-linked-list-ii","text":"","title":"92. Reverse Linked List II"},{"location":"leetcode-0092-reverse-linked-list-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 92. Reverse Linked List II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 92. \u53cd\u8f6c\u94fe\u8868 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0092-reverse-linked-list-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4e00\u5b9a\u8981\u753b\u56fe\u5206\u6790\uff0c\u5426\u5219\u5f88\u96be\u5206\u6790\u51fa\u6b63\u786e\u7684\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u6b65\u9aa4\u3002 \u53cd\u8f6c\u94fe\u8868\u6307\u5b9a\u7684\u90e8\u5206\uff0c\u7528\u5230\u4e86\u201c\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\u201d\u8fd9\u4e2a\u6280\u5de7\uff0c\u53ea\u8981\u6d89\u53ca\u5230\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u4f1a\u7528\u5230\u865a\u62df\u5934\u7ed3\u70b9\u8fd9\u4e2a\u6280\u5de7\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next \u6307\u9488\u6307\u5411\u7684\u90a3\u4e2a\u5143\u7d20\u3002 \u5173\u6ce8\u4e34\u754c\u503c\uff0c pre \u8981\u5faa\u73af\u51e0\u6b21\uff0c\u94fe\u8868\u8981\u201c\u6eda\u201d\u51e0\u8f6e\uff0c\u90fd\u662f\u8fd9\u91cc\u8981\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u4ee3\u5165\u4e00\u4e9b\u5177\u4f53\u503c\u5c31\u80fd\u907f\u514d\u51fa\u9519\uff0c\u6b63\u786e\u7684\u7ed3\u679c\u65e0\u975e\u5c31\u662f\u6211\u4eec\u4ee5\u4e3a\u7684\u90a3\u4e2a\u6570\u5b57 +1 \u6216\u8005 -1\uff1b \u81ea\u5df1\u5728\u7eb8\u4e0a\u753b\u51fa\u56fe\u6765\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u4e24\u8f6e\u4ee5\u540e\u4ee3\u7801\u662f\u4e0d\u662f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4e00\u81f4\u7ed3\u679c\uff1b \u5173\u4e8e\u4ee3\u7801\uff1a\u6bcf\u201c\u6eda\u201d\u4e00\u6b21\uff0c\u5176\u5b9e cur \u7684\u6307\u9488\u90fd\u4e0d\u53d8\uff0c pre \u4e5f\u4e0d\u53d8\uff0c next \u53d8\u5316\uff0c\u4f46\u662f\u4e00\u76f4\u8ddf\u5728 cur \u7684\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u4f4d\u7f6e\u5728\u5faa\u73af\u5f00\u59cb\u7684\u65f6\u5019\u786e\u5b9a\u3002\u6bcf\u6b21 cur \u7684 next \u90fd\u4f1a\u79fb\u5230 pre \u7684 next \uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u4f53\u5185\u7b2c 2 \u884c\u4ee3\u7801\u7684\u542b\u4e49\uff1b \u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u6211\u901a\u5e38\u4f1a\u7ed9 ListNode \u589e\u52a0\u4e24\u4e2a\u9759\u6001\u65b9\u6cd5\uff1a\uff081\uff09\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u94fe\u8868 createListNode \uff1b\uff082\uff09\u6253\u5370\u4e00\u4e2a\u94fe\u8868 printLinkedList \u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0092-reverse-linked-list-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0092-reverse-linked-list-ii/#1","text":"\u540e\u6765\u89c9\u5f97\u6bd4\u8f83\u597d\u7684\u601d\u8def\uff1a Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): def reverseBetween(self, head, m, n): \"\"\" :type head: ListNode :type m: int :type n: int :rtype: ListNode \"\"\" dummy_node = ListNode(-1) dummy_node.next = head cur_node = dummy_node for _ in range(m - 1): cur_node = cur_node.next begin = cur_node end = cur_node.next # \u5411\u524d\u8d70\u4e00\u6b65 cur_node = cur_node.next # \u518d\u524d\u8d70\u4e00\u6b65 pre = cur_node cur_node = cur_node.next for _ in range(n - m): next = cur_node.next cur_node.next = pre pre = cur_node cur_node = next begin.next = pre end.next = cur_node return dummy_node.next","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0092-reverse-linked-list-ii/#2","text":"Java \u5199\u6cd5 // \u53c2\u8003\u8d44\u6599\uff1ahttps://www.youtube.com/watch?v=EJeyuYtvcEA // https://www.jianshu.com/p/fbe6012c9e52 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode reverseBetween(ListNode head, int m, int n) { // \u8bbe\u7f6e dummyNode \u662f\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u505a\u6cd5 ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode pre = dummyNode; for (int i = 0; i < m - 1; i++) { pre = pre.next; } ListNode cur = pre.next; ListNode next; for (int i = 0; i < n - m; i++) { next = cur.next; cur.next = next.next; next.next = pre.next; pre.next = next; } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); ListNode reverseBetween = new Solution().reverseBetween(head, 2, 4); System.out.println(reverseBetween); } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0093-restore-ip-addresses/","text":"93. Restore IP Addresses \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 93. Restore IP Addresses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 93. \u590d\u539fIP\u5730\u5740 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002 1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b 2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b 3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002 \u9898\u76ee\u5927\u610f \u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u52a0\u4e0a\u4e09\u4e2a\u70b9\uff08.\uff09\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684IP\u5730\u5740\uff0c\u8fd4\u56de\u6240\u6709\u7684\u5408\u6cd5\u7684 IP \u5730\u5740\u3002 \u8865\u5145\u8bf4\u660e \u5982\u7ed9\u5b9a\u5b57\u7b26\u4e32 \"25525511135\", \u8fd4\u56de [\"255.255.11.135\", \"255.255.111.35\"] \u6211\u4eec\u518d\u60f3\u60f3\uff0c\u6211\u4eec\u9012\u5f52\u5230\u5e95\uff0c\u65e0\u975e\u5c31\u662f\u7ed9\u4e00\u4e32\u6570\u5b57\u52a0\u4e0a\u4e09\u4e2a\".\"\uff0c\u4e0d\u7ba1\u80fd\u4e0d\u80fd\u6210\u4e3a IP \uff0c\u5206\u5272\u6b21\u6570\u589e\u52a0\u548c\u4e4b\u524d\u7684 IP \u6bb5\u79ef\u7d2f\u6211\u4eec\u90fd\u6709\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u6210\u4e3a IP \u5730\u5740\u7684 list \u6700\u540e\u6ca1\u6709\u88ab result \u6536\u8fdb\u53bb\uff0c\u9012\u5f52\u8d70\u5230\u5e95\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u628a\u5206\u5272\u6b21\u6570\u51cf\u5c11\uff0c\u5e76\u4e14\u628a IP \u6bb5\u79ef\u7d2f\u6062\u590d\u3002 \u6211\u7684\u89e3\u7b54 \u603b\u7ed3 \u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a1\u3001\u901a\u8fc7\u5b8c\u5584\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u5f0f\u6765\u53d1\u73b0\u4e00\u4e9b\u5751\uff1b2\u3001\u63d0\u4ea4\u7ed9 LeetCode \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u81ea\u5df1\u53ef\u80fd\u6ca1\u6709\u60f3\u5230\u7684\u60c5\u51b5\uff1b \u7b2c 1 \u904d\u5199\u51fa\u6765\u7684\u4ee3\u7801\u80af\u5b9a\u662f\u6709\u8bf8\u591a\u95ee\u9898\u7684\uff0c\u9700\u8981\u4e00\u4e9b\u8010\u5fc3\uff0c\u6253\u5370\u4e00\u4e9b\u8f93\u51fa\u8bed\u53e5\uff0c\u6765\u5206\u6790\u7a0b\u5e8f\u7684\u8d70\u5411\u3002 \u6811\u5f62\u95ee\u9898\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\u7684\u4e00\u4e2a\u5957\u8def\u662f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u9012\u5f52\uff0c\u72b6\u6001\u5728\u9012\u5f52\u524d\u540e\u8fdb\u884c\u6062\u590d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; // https://leetcode-cn.com/problems/restore-ip-addresses/description/ public class Solution { private List<String> res = new ArrayList<>(); private boolean judgeIfIPSegment(String ipSegment) { int len = ipSegment.length(); // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934 if (len > 1 && ipSegment.startsWith(\"0\")) { return false; } return Integer.parseInt(ipSegment) <= 255; } private void findIpSegment(String s, int split, int begin, String pre) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (split == 4) { if (begin == s.length()) { res.add(pre.substring(0, pre.length() - 1)); } return; } // split < 4 \u7684\u65f6\u5019 // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565 for (int i = 1; i <= 3 && begin + i <= s.length(); i++) { // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32 String ifIpSegment = s.substring(begin, begin + i); if (judgeIfIPSegment(ifIpSegment)) { findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.'); } } } public List<String> restoreIpAddresses(String s) { int len = s.length(); if (len == 0) { return res; } findIpSegment(s, 0, 0, \"\"); return res; } public static void main(String[] args) { String s = \"25525511135\"; Solution solution = new Solution(); List<String> restoreIpAddresses = solution.restoreIpAddresses(s); System.out.println(restoreIpAddresses); } }","title":"93. Restore IP Addresses"},{"location":"leetcode-0093-restore-ip-addresses/#93-restore-ip-addresses","text":"","title":"93. Restore IP Addresses"},{"location":"leetcode-0093-restore-ip-addresses/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 93. Restore IP Addresses \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 93. \u590d\u539fIP\u5730\u5740 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0093-restore-ip-addresses/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3001\u9012\u5f52\u56de\u6eaf\u7684\u601d\u60f3\u6765\u5b8c\u6210\u3002 1\u3001IP \u5730\u5740\u4e00\u5171 4 \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u662f 255\uff0c\u6700\u5c0f\u503c\u662f 0\uff0c\u6211\u4eec\u91c7\u7528\u641c\u7d22\u7684\u529e\u6cd5\u6765\u5f97\u5230\u6709\u6548\u7684 ip \u6bb5\uff1b 2\u3001\u6bcf\u4e00\u6b21\u5faa\u73af\u5224\u65ad\u63a5\u4e0b\u6765\u8bfb\u8fdb\u6765\u7684 3 \u4e2a\u6570\u5b57\u5b57\u7b26\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a ip \u6bb5\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u52a0\u5230\u5df2\u7ecf\u5f62\u6210\u7684 ip \u6bb5\u540e\u9762\uff08\u7279\u522b\u8981\u6ce8\u610f\uff0c\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u4e0d\u80fd\u8d8a\u754c\uff09\uff1b 3\u3001\u63a5\u4e0b\u6765\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\u5c31\u5f97\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u628a\u63e1\u597d\u603b\u5171\u5206 4 \u6bb5\uff0c\u5f53\u753b\u4e0a\u7b2c 4 \u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2a\u8003\u5bdf\u7684\u4e0b\u6807\u5df2\u7ecf\u201c\u521a\u521a\u597d\u201d\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684 ip \u6bb5\u5206\u5272\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0093-restore-ip-addresses/#_3","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u52a0\u4e0a\u4e09\u4e2a\u70b9\uff08.\uff09\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684IP\u5730\u5740\uff0c\u8fd4\u56de\u6240\u6709\u7684\u5408\u6cd5\u7684 IP \u5730\u5740\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"leetcode-0093-restore-ip-addresses/#_4","text":"\u5982\u7ed9\u5b9a\u5b57\u7b26\u4e32 \"25525511135\", \u8fd4\u56de [\"255.255.11.135\", \"255.255.111.35\"] \u6211\u4eec\u518d\u60f3\u60f3\uff0c\u6211\u4eec\u9012\u5f52\u5230\u5e95\uff0c\u65e0\u975e\u5c31\u662f\u7ed9\u4e00\u4e32\u6570\u5b57\u52a0\u4e0a\u4e09\u4e2a\".\"\uff0c\u4e0d\u7ba1\u80fd\u4e0d\u80fd\u6210\u4e3a IP \uff0c\u5206\u5272\u6b21\u6570\u589e\u52a0\u548c\u4e4b\u524d\u7684 IP \u6bb5\u79ef\u7d2f\u6211\u4eec\u90fd\u6709\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u6210\u4e3a IP \u5730\u5740\u7684 list \u6700\u540e\u6ca1\u6709\u88ab result \u6536\u8fdb\u53bb\uff0c\u9012\u5f52\u8d70\u5230\u5e95\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u628a\u5206\u5272\u6b21\u6570\u51cf\u5c11\uff0c\u5e76\u4e14\u628a IP \u6bb5\u79ef\u7d2f\u6062\u590d\u3002","title":"\u8865\u5145\u8bf4\u660e"},{"location":"leetcode-0093-restore-ip-addresses/#_5","text":"","title":"\u6211\u7684\u89e3\u7b54"},{"location":"leetcode-0093-restore-ip-addresses/#_6","text":"\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a1\u3001\u901a\u8fc7\u5b8c\u5584\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u5f0f\u6765\u53d1\u73b0\u4e00\u4e9b\u5751\uff1b2\u3001\u63d0\u4ea4\u7ed9 LeetCode \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u81ea\u5df1\u53ef\u80fd\u6ca1\u6709\u60f3\u5230\u7684\u60c5\u51b5\uff1b \u7b2c 1 \u904d\u5199\u51fa\u6765\u7684\u4ee3\u7801\u80af\u5b9a\u662f\u6709\u8bf8\u591a\u95ee\u9898\u7684\uff0c\u9700\u8981\u4e00\u4e9b\u8010\u5fc3\uff0c\u6253\u5370\u4e00\u4e9b\u8f93\u51fa\u8bed\u53e5\uff0c\u6765\u5206\u6790\u7a0b\u5e8f\u7684\u8d70\u5411\u3002 \u6811\u5f62\u95ee\u9898\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\u7684\u4e00\u4e2a\u5957\u8def\u662f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u9012\u5f52\uff0c\u72b6\u6001\u5728\u9012\u5f52\u524d\u540e\u8fdb\u884c\u6062\u590d\u3002","title":"\u603b\u7ed3"},{"location":"leetcode-0093-restore-ip-addresses/#_7","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0093-restore-ip-addresses/#1","text":"import java.util.ArrayList; import java.util.List; // https://leetcode-cn.com/problems/restore-ip-addresses/description/ public class Solution { private List<String> res = new ArrayList<>(); private boolean judgeIfIPSegment(String ipSegment) { int len = ipSegment.length(); // \u5927\u4e8e 1 \u4f4d\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u4ee5 0 \u5f00\u5934 if (len > 1 && ipSegment.startsWith(\"0\")) { return false; } return Integer.parseInt(ipSegment) <= 255; } private void findIpSegment(String s, int split, int begin, String pre) { // \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (split == 4) { if (begin == s.length()) { res.add(pre.substring(0, pre.length() - 1)); } return; } // split < 4 \u7684\u65f6\u5019 // begin + i <= s.length() \u5bb9\u6613\u88ab\u5ffd\u7565 for (int i = 1; i <= 3 && begin + i <= s.length(); i++) { // \u53ef\u80fd\u6210\u4e3a ip \u6bb5\u7684\u5b57\u7b26\u4e32 String ifIpSegment = s.substring(begin, begin + i); if (judgeIfIPSegment(ifIpSegment)) { findIpSegment(s, split + 1, begin + i, pre + ifIpSegment + '.'); } } } public List<String> restoreIpAddresses(String s) { int len = s.length(); if (len == 0) { return res; } findIpSegment(s, 0, 0, \"\"); return res; } public static void main(String[] args) { String s = \"25525511135\"; Solution solution = new Solution(); List<String> restoreIpAddresses = solution.restoreIpAddresses(s); System.out.println(restoreIpAddresses); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0094-binary-tree-inorder-traversal/","text":"94. Binary Tree Inorder Traversal \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u4e2d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,3,2] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 94. Binary Tree Inorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u904d\u5386\u3002 Java \u5b9e\u73b0\uff1a public class Solution2 { private List<Integer> result = new ArrayList<>(); public List<Integer> inorderTraversal(TreeNode root) { inorder(root); return result; } private void inorder(TreeNode root) { if (root != null) { inorder(root.left); result.add(root.val); inorder(root.right); } } } Python \u5b9e\u73b0\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u9012\u5f52\u89e3\u6cd5 def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] self.__helper(root, res) return res def __helper(self, node, res): if node is None: return self.__helper(node.left, res) res.append(node.val) self.__helper(node.right, res) \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u975e\u9012\u5f52\uff0c\u501f\u52a9\u6808\u5b8c\u6210\u904d\u5386\u3002 Python \u5b9e\u73b0\uff1a class Solution(object): def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] stack = [] while root or stack: # \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u7ed3\u70b9\u4e0d\u662f\u7a7a\u7ed3\u70b9 if root: stack.append(root) root = root.left else: node = stack.pop() res.append(node.val) root = node.right return res Python \u5b9e\u73b0\uff1a class Solution(object): def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] stack = [] node = root while node or stack: while node: stack.append(node) node = node.left node = stack.pop() res.append(node.val) node = node.right return res \u53c2\u8003\u89e3\u7b543\uff1a Java \u5b9e\u73b0\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } enum UseType { RECURSION, ADD } class Command { UseType useType; TreeNode treeNode; Command(UseType useType, TreeNode treeNode) { this.useType = useType; this.treeNode = treeNode; } } /** * \u4ec0\u4e48\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u8282\u70b9 * \u5728\u5904\u7406\u81ea\u5df1 * \u7136\u540e\u518d\u9012\u5f52\u904d\u5386\u53f3\u5b50\u8282\u70b9 */ public class Solution { public List<Integer> inorderTraversal(TreeNode root) { List<Integer> result = new ArrayList<>(); if (root == null) { return result; } Stack<Command> stack = new Stack<>(); stack.push(new Command(UseType.RECURSION, root)); while (!stack.isEmpty()) { Command command = stack.pop(); if (UseType.ADD == command.useType) { result.add(command.treeNode.val); } else { assert UseType.RECURSION == command.useType; if (command.treeNode.right != null) { stack.push(new Command(UseType.RECURSION, command.treeNode.right)); } stack.push(new Command(UseType.ADD, command.treeNode)); if (command.treeNode.left != null) { stack.push(new Command(UseType.RECURSION, command.treeNode.left)); } } } return result; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0094-binary-tree-inorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"94. Binary Tree Inorder Traversal"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#94-binary-tree-inorder-traversal","text":"","title":"94. Binary Tree Inorder Traversal"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u4e2d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,3,2] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 94. Binary Tree Inorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#1","text":"Java \u5b9e\u73b0\uff1a public class Solution2 { private List<Integer> result = new ArrayList<>(); public List<Integer> inorderTraversal(TreeNode root) { inorder(root); return result; } private void inorder(TreeNode root) { if (root != null) { inorder(root.left); result.add(root.val); inorder(root.right); } } } Python \u5b9e\u73b0\uff1a # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): # \u9012\u5f52\u89e3\u6cd5 def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] self.__helper(root, res) return res def __helper(self, node, res): if node is None: return self.__helper(node.left, res) res.append(node.val) self.__helper(node.right, res)","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u904d\u5386\u3002"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#2","text":"Python \u5b9e\u73b0\uff1a class Solution(object): def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] stack = [] while root or stack: # \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u7ed3\u70b9\u4e0d\u662f\u7a7a\u7ed3\u70b9 if root: stack.append(root) root = root.left else: node = stack.pop() res.append(node.val) root = node.right return res Python \u5b9e\u73b0\uff1a class Solution(object): def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] stack = [] node = root while node or stack: while node: stack.append(node) node = node.left node = stack.pop() res.append(node.val) node = node.right return res","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u975e\u9012\u5f52\uff0c\u501f\u52a9\u6808\u5b8c\u6210\u904d\u5386\u3002"},{"location":"leetcode-0094-binary-tree-inorder-traversal/#3","text":"Java \u5b9e\u73b0\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } enum UseType { RECURSION, ADD } class Command { UseType useType; TreeNode treeNode; Command(UseType useType, TreeNode treeNode) { this.useType = useType; this.treeNode = treeNode; } } /** * \u4ec0\u4e48\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u8282\u70b9 * \u5728\u5904\u7406\u81ea\u5df1 * \u7136\u540e\u518d\u9012\u5f52\u904d\u5386\u53f3\u5b50\u8282\u70b9 */ public class Solution { public List<Integer> inorderTraversal(TreeNode root) { List<Integer> result = new ArrayList<>(); if (root == null) { return result; } Stack<Command> stack = new Stack<>(); stack.push(new Command(UseType.RECURSION, root)); while (!stack.isEmpty()) { Command command = stack.pop(); if (UseType.ADD == command.useType) { result.add(command.treeNode.val); } else { assert UseType.RECURSION == command.useType; if (command.treeNode.right != null) { stack.push(new Command(UseType.RECURSION, command.treeNode.right)); } stack.push(new Command(UseType.ADD, command.treeNode)); if (command.treeNode.left != null) { stack.push(new Command(UseType.RECURSION, command.treeNode.left)); } } } return result; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0094-binary-tree-inorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a"},{"location":"leetcode-0095-unique-binary-search-trees-ii/","text":"95. Unique Binary Search Trees II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u751f\u6210\u6240\u6709\u7531 1 ... n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3] ] \u89e3\u91ca: \u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 95. Unique Binary Search Trees II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u5f53\u524d\u7684\u9012\u5f52\u4e2d\uff0c\u5047\u8bbe root \u4e3a i \u3002 \u90a3\u4e48\u5de6\u5b50\u6811\u662f\u7531 [1, i - 1] \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u53f3\u5b50\u6811\u662f\u7531 [i + 1, n] \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u3002 \u53ef\u4ee5\u7edf\u4e00\u8bb0\u5f55\u4e3a\u7528 [start, end] \u53bb\u6784\u5efa\u4e00\u68f5\u6811\u3002 \u5728\u6709\u4e86\u5de6\u5b50\u6811\u3001\u6839\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u5f88\u5bb9\u6613\u8ba1\u7b97\u5f97\u51fa\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u7684\u6811\u3002\u8bb0\u5f55 root \u5230\u4e00\u4e2a vector \u4e2d\u5c31\u53ef\u4ee5\u5b8c\u6574\u5730\u8bb0\u5f55\u6240\u6709\u7ed3\u679c\uff0c\u8fd4\u56de\u7ed3\u679c\u5373\u53ef\u3002 1\u3001\u9012\u5f52\u6bcf\u6b21\u90fd\u8fd4\u56de\u4e00\u5806\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7ed3\u70b9\u3002 \u5f53\u9012\u5f52\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a\u591a\u4e2a\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7ed3\u679c\u6253\u5305\u653e\u5165\u4e00\u4e2a vector\uff08\u5217\u8868\uff09\u4e2d\u3002 2\u3001\u662f\u5178\u578b\u7684 DFS \u9898\u76ee\u3002 \u6613\u9519\u70b9\u5728\u4e8e\uff0cn = 0 \u65f6\uff0c\u6211\u4eec\u5bf9\u5c5e\u4e8e\u5b83\u7684\u94fe\u8868 res[0] \u4e5f\u8981\u52a0\u5165\u7ed3\u70b9 null \uff0c\u5426\u5219\u5982\u679c\u5de6\u5b50\u6811\u9700\u8981 n = 0 \u7684\u89e3\u96c6\uff0c\u800c\u94fe\u8868\u4e3a\u7a7a\uff0c \u5219\u4f1a\u76f4\u63a5\u8df3\u8fc7\u91cc\u9762\u5bf9\u53f3\u5b50\u6811\u7684\u8bbf\u95ee\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u5165\u4e00\u884c res[0].add(null); \u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * \u5178\u578b\u7684\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898 */ public class Solution { public List<TreeNode> generateTrees(int n) { List<TreeNode> res = new ArrayList<>(); if (n <= 0) { return res; } return generateTrees(1, n); } private List<TreeNode> generateTrees(int start, int end) { List<TreeNode> res = new ArrayList<>(); if (start > end) { // \u4e0a\u5c42\u8c03\u7528\u7684\u65b9\u6cd5\u987b\u8981\u8fd9\u4e2a\u7a7a\u7ed3\u70b9\u4f5c\u4e3a\u5176\u5de6\u7ed3\u70b9\u6216\u8005\u53f3\u8282\u70b9 res.add(null); return res; } else if (start == end) { // \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\u8fd4\u56de\u5373\u53ef // \u8fd9\u4e00\u6b65\u53ef\u4ee5\u5305\u62ec\u5230\u4e0b\u9762\u4e00\u4e2a\u60c5\u51b5\u4e2d res.add(new TreeNode(start)); return res; } else { for (int i = start; i <= end; i++) { List<TreeNode> leftList = generateTrees(start, i - 1); List<TreeNode> rightList = generateTrees(i + 1, end); for (TreeNode l : leftList) { for (TreeNode r : rightList) { TreeNode root = new TreeNode(i); root.left = l; root.right = r; res.add(root); } } } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0095-unique-binary-search-trees-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"95. Unique Binary Search Trees II"},{"location":"leetcode-0095-unique-binary-search-trees-ii/#95-unique-binary-search-trees-ii","text":"","title":"95. Unique Binary Search Trees II"},{"location":"leetcode-0095-unique-binary-search-trees-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u751f\u6210\u6240\u6709\u7531 1 ... n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3] ] \u89e3\u91ca: \u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 95. Unique Binary Search Trees II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0095-unique-binary-search-trees-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u5f53\u524d\u7684\u9012\u5f52\u4e2d\uff0c\u5047\u8bbe root \u4e3a i \u3002 \u90a3\u4e48\u5de6\u5b50\u6811\u662f\u7531 [1, i - 1] \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u53f3\u5b50\u6811\u662f\u7531 [i + 1, n] \u6784\u6210\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u3002 \u53ef\u4ee5\u7edf\u4e00\u8bb0\u5f55\u4e3a\u7528 [start, end] \u53bb\u6784\u5efa\u4e00\u68f5\u6811\u3002 \u5728\u6709\u4e86\u5de6\u5b50\u6811\u3001\u6839\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u5f88\u5bb9\u6613\u8ba1\u7b97\u5f97\u51fa\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u7684\u6811\u3002\u8bb0\u5f55 root \u5230\u4e00\u4e2a vector \u4e2d\u5c31\u53ef\u4ee5\u5b8c\u6574\u5730\u8bb0\u5f55\u6240\u6709\u7ed3\u679c\uff0c\u8fd4\u56de\u7ed3\u679c\u5373\u53ef\u3002 1\u3001\u9012\u5f52\u6bcf\u6b21\u90fd\u8fd4\u56de\u4e00\u5806\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7ed3\u70b9\u3002 \u5f53\u9012\u5f52\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a\u591a\u4e2a\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u7ed3\u679c\u6253\u5305\u653e\u5165\u4e00\u4e2a vector\uff08\u5217\u8868\uff09\u4e2d\u3002 2\u3001\u662f\u5178\u578b\u7684 DFS \u9898\u76ee\u3002 \u6613\u9519\u70b9\u5728\u4e8e\uff0cn = 0 \u65f6\uff0c\u6211\u4eec\u5bf9\u5c5e\u4e8e\u5b83\u7684\u94fe\u8868 res[0] \u4e5f\u8981\u52a0\u5165\u7ed3\u70b9 null \uff0c\u5426\u5219\u5982\u679c\u5de6\u5b50\u6811\u9700\u8981 n = 0 \u7684\u89e3\u96c6\uff0c\u800c\u94fe\u8868\u4e3a\u7a7a\uff0c \u5219\u4f1a\u76f4\u63a5\u8df3\u8fc7\u91cc\u9762\u5bf9\u53f3\u5b50\u6811\u7684\u8bbf\u95ee\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u5165\u4e00\u884c res[0].add(null); \u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0095-unique-binary-search-trees-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0095-unique-binary-search-trees-ii/#1","text":"import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * \u5178\u578b\u7684\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898 */ public class Solution { public List<TreeNode> generateTrees(int n) { List<TreeNode> res = new ArrayList<>(); if (n <= 0) { return res; } return generateTrees(1, n); } private List<TreeNode> generateTrees(int start, int end) { List<TreeNode> res = new ArrayList<>(); if (start > end) { // \u4e0a\u5c42\u8c03\u7528\u7684\u65b9\u6cd5\u987b\u8981\u8fd9\u4e2a\u7a7a\u7ed3\u70b9\u4f5c\u4e3a\u5176\u5de6\u7ed3\u70b9\u6216\u8005\u53f3\u8282\u70b9 res.add(null); return res; } else if (start == end) { // \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\u8fd4\u56de\u5373\u53ef // \u8fd9\u4e00\u6b65\u53ef\u4ee5\u5305\u62ec\u5230\u4e0b\u9762\u4e00\u4e2a\u60c5\u51b5\u4e2d res.add(new TreeNode(start)); return res; } else { for (int i = start; i <= end; i++) { List<TreeNode> leftList = generateTrees(start, i - 1); List<TreeNode> rightList = generateTrees(i + 1, end); for (TreeNode l : leftList) { for (TreeNode r : rightList) { TreeNode root = new TreeNode(i); root.left = l; root.right = r; res.add(root); } } } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0095-unique-binary-search-trees-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0096-unique-binary-search-trees/","text":"96. Unique Binary Search Trees \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u6c42\u4ee5 1 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: 5 \u89e3\u91ca: \u7ed9\u5b9a n = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 96. Unique Binary Search Trees \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution2 { // \u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u7528\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22 // \u56e0\u4e3a\u6709\u5927\u91cf\u91cd\u590d\u5b50\u95ee\u9898 // base case \u662f\uff0c\u5f53 n = 0 \u6216\u8005 n = 1 \u65f6\uff0c\u663e\u7136 BST \u6570\u91cf\u53ea\u80fd\u6709 1 \u4e2a\u3002 // \u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58 private int[] memo; public int numTrees(int n) { if (n < 0) { return 0; } if (n < 2) { return 1; } memo = new int[n + 1]; memo[0] = 1; memo[1] = 1; return helper(n); } private int helper(int n) { if (memo[n] != 0) { return memo[n]; } int sum = 0; for (int i = 1; i <= n; i++) { sum += helper(i - 1) * helper(n - i); } memo[n] = sum; return sum; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int n = 3; int numTrees = solution2.numTrees(n); System.out.println(numTrees); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0096-unique-binary-search-trees \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"96. Unique Binary Search Trees"},{"location":"leetcode-0096-unique-binary-search-trees/#96-unique-binary-search-trees","text":"","title":"96. Unique Binary Search Trees"},{"location":"leetcode-0096-unique-binary-search-trees/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u6c42\u4ee5 1 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: 5 \u89e3\u91ca: \u7ed9\u5b9a n = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 96. Unique Binary Search Trees \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0096-unique-binary-search-trees/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0096-unique-binary-search-trees/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0096-unique-binary-search-trees/#1","text":"public class Solution2 { // \u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u7528\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22 // \u56e0\u4e3a\u6709\u5927\u91cf\u91cd\u590d\u5b50\u95ee\u9898 // base case \u662f\uff0c\u5f53 n = 0 \u6216\u8005 n = 1 \u65f6\uff0c\u663e\u7136 BST \u6570\u91cf\u53ea\u80fd\u6709 1 \u4e2a\u3002 // \u4e00\u5b9a\u8981\u52a0\u4e0a\u7f13\u5b58 private int[] memo; public int numTrees(int n) { if (n < 0) { return 0; } if (n < 2) { return 1; } memo = new int[n + 1]; memo[0] = 1; memo[1] = 1; return helper(n); } private int helper(int n) { if (memo[n] != 0) { return memo[n]; } int sum = 0; for (int i = 1; i <= n; i++) { sum += helper(i - 1) * helper(n - i); } memo[n] = sum; return sum; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int n = 3; int numTrees = solution2.numTrees(n); System.out.println(numTrees); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0096-unique-binary-search-trees \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0098-validate-binary-search-tree/","text":"98. Validate Binary Search Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b \u5c0f\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b \u5927\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 98. Validate Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7ecf\u8fc7\u4e2d\u5e8f\u904d\u5386\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isValidBST(TreeNode root) { if (root == null) { return true; } ArrayList<Integer> list = new ArrayList<>(); inOrder(root, list); int len = list.size(); for (int i = 0; i < len - 1; i++) { if (list.get(i) >= list.get(i + 1)) { return false; } } return true; } private void inOrder(TreeNode treeNode, ArrayList<Integer> list) { if (treeNode == null) { return; } inOrder(treeNode.left, list); list.add(treeNode.val); inOrder(treeNode.right, list); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0098-validate-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"98. Validate Binary Search Tree"},{"location":"leetcode-0098-validate-binary-search-tree/#98-validate-binary-search-tree","text":"","title":"98. Validate Binary Search Tree"},{"location":"leetcode-0098-validate-binary-search-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b \u5c0f\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b \u5927\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 98. Validate Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0098-validate-binary-search-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7ecf\u8fc7\u4e2d\u5e8f\u904d\u5386\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0098-validate-binary-search-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0098-validate-binary-search-tree/#1","text":"import java.util.ArrayList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isValidBST(TreeNode root) { if (root == null) { return true; } ArrayList<Integer> list = new ArrayList<>(); inOrder(root, list); int len = list.size(); for (int i = 0; i < len - 1; i++) { if (list.get(i) >= list.get(i + 1)) { return false; } } return true; } private void inOrder(TreeNode treeNode, ArrayList<Integer> list) { if (treeNode == null) { return; } inOrder(treeNode.left, list); list.add(treeNode.val); inOrder(treeNode.right, list); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0098-validate-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0100-same-tree/","text":"100. Same Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 100. Same Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 100. \u76f8\u540c\u7684\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isSameTree(TreeNode p, TreeNode q) { // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019 if (p == null && q == null) { return true; } // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false if (p == null || q == null || p.val != q.val) { return false; } return isSameTree(p.left, q.left) && isSameTree(p.right, q.right); } }","title":"100. Same Tree"},{"location":"leetcode-0100-same-tree/#100-same-tree","text":"","title":"100. Same Tree"},{"location":"leetcode-0100-same-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 100. Same Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 100. \u76f8\u540c\u7684\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0100-same-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u975e\u5e38\u7b80\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u52a0\u601d\u7d22\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u6ce8\u610f\u8ba8\u8bba\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u5c31\u597d\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0100-same-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0100-same-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isSameTree(TreeNode p, TreeNode q) { // \u5148\u5904\u7406\u6700\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90fd\u4e3a\u7a7a\u7ed3\u70b9\u7684\u65f6\u5019 if (p == null && q == null) { return true; } // \u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u7ed3\u70b9\u90fd\u540c\u65f6\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\uff0c\u6216\u8005\u4e24\u4e2a\u7ed3\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u8fd4\u56de false if (p == null || q == null || p.val != q.val) { return false; } return isSameTree(p.left, q.left) && isSameTree(p.right, q.right); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0101-symmetric-tree/","text":"101. Symmetric Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 101. Symmetric Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002 \u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002 \u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684 copyBinaryTree \u65b9\u6cd5\u3002 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } TreeNode copyBinaryTree = copyBinaryTree(root); TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree); return isSameTree(root, invertBinaryTree); } private boolean isSameTree(TreeNode t1, TreeNode t2) { if (t1 == null && t2 == null) { return true; } if (t1 == null || t2 == null || t1.val != t2.val) { return false; } return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right); } private TreeNode invertBinaryTree(TreeNode node) { if (node == null) { return node; } invertBinaryTree(node.left); invertBinaryTree(node.right); TreeNode temp = node.left; node.left = node.right; node.right = temp; return node; } // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09 private TreeNode copyBinaryTree(TreeNode node) { if (node == null) { return null; } TreeNode newTreeNode = new TreeNode(node.val); newTreeNode.left = copyBinaryTree(node.left); newTreeNode.right = copyBinaryTree(node.right); return newTreeNode; } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 public class Solution { // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86 private boolean isSymmetric(TreeNode p1, TreeNode p2) { // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49 if (p1 == null && p2 == null) { return true; } // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree if (p1 == null || p2 == null || p1.val != p2.val) { return false; } // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9 // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9 return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left); } public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } return isSymmetric(root.left, root.right); } } \u53c2\u8003\u89e3\u7b543 \u53c2\u8003\u8d44\u6599\uff1a import java.util.LinkedList; // https://leetcode-cn.com/problems/symmetric-tree/description/ public class Solution3 { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } LinkedList<TreeNode> linkedList = new LinkedList<>(); linkedList.addFirst(root.left); linkedList.addLast(root.right); while (!linkedList.isEmpty()) { // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f TreeNode lNode = linkedList.removeFirst(); TreeNode rNode = linkedList.removeLast(); if (lNode == null && rNode == null) { continue; } if (lNode == null || rNode == null) { return false; } linkedList.addFirst(lNode.right); linkedList.addFirst(lNode.left); linkedList.addLast(rNode.left); linkedList.addLast(rNode.right); if (lNode.val != rNode.val) { return false; } } return true; } }","title":"101. Symmetric Tree"},{"location":"leetcode-0101-symmetric-tree/#101-symmetric-tree","text":"","title":"101. Symmetric Tree"},{"location":"leetcode-0101-symmetric-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 101. Symmetric Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0101-symmetric-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09\uff1a\u5148\u62f7\u8d1d\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u518d\u53cd\u8f6c\uff0c\u5c06\u53cd\u8f6c\u4ee5\u540e\u7684\u4e8c\u53c9\u6811\u548c\u81ea\u5df1\u6bd4\u8f83\uff0c\u770b\u770b\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u8f6c\u5316\u6210\u4e86\u4ee5\u524d\u6211\u4eec\u89e3\u51b3\u8fc7\u7684\u95ee\u9898\u3002\u53e6\u5916\u590d\u5236\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u590d\u5236\uff0c\u7136\u540e\u6bd4\u8f83\u3002 \u601d\u8def2\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u9012\u5f52\u53bb\u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u955c\u9762\u5bf9\u79f0\u3002 \u601d\u8def3\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b543\uff09\uff1a\u4f7f\u7528\u961f\u5217\uff0c\u5e76\u4e14\u662f\u53cc\u7aef\u961f\u5217\uff08\u94fe\u8868\u5b9e\u73b0\uff09\u8fd9\u4e2a\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u3002\u753b\u51fa\u51fa\u961f\u5165\u961f\u7684\u987a\u5e8f\uff0c\u5c31\u5f88\u6e05\u695a\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0101-symmetric-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0101-symmetric-tree/#1","text":"\u8bf4\u660e\uff1a\u6ce8\u610f\u4e0b\u9762\u7684 copyBinaryTree \u65b9\u6cd5\u3002 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } TreeNode copyBinaryTree = copyBinaryTree(root); TreeNode invertBinaryTree = invertBinaryTree(copyBinaryTree); return isSameTree(root, invertBinaryTree); } private boolean isSameTree(TreeNode t1, TreeNode t2) { if (t1 == null && t2 == null) { return true; } if (t1 == null || t2 == null || t1.val != t2.val) { return false; } return isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right); } private TreeNode invertBinaryTree(TreeNode node) { if (node == null) { return node; } invertBinaryTree(node.left); invertBinaryTree(node.right); TreeNode temp = node.left; node.left = node.right; node.right = temp; return node; } // \u4e5f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u719f\u6089\u4e00\u4e0b\u5982\u4f55\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u590d\u5236\uff09 private TreeNode copyBinaryTree(TreeNode node) { if (node == null) { return null; } TreeNode newTreeNode = new TreeNode(node.val); newTreeNode.left = copyBinaryTree(node.left); newTreeNode.right = copyBinaryTree(node.right); return newTreeNode; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0101-symmetric-tree/#2","text":"public class Solution { // \u753b\u51fa 4 \u5c42\u7ed3\u6784\u56fe\u5c31\u5bb9\u6613\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\u4e86 private boolean isSymmetric(TreeNode p1, TreeNode p2) { // \u5de6\u53f3\u90fd\u4e3a\u7a7a\uff0c\u5224\u4e3a\u76f8\u7b49 if (p1 == null && p2 == null) { return true; } // \u8d70\u5230\u8fd9\u91cc\u5de6\u53f3\u4e4b\u4e00\u81f3\u5c11\u975e\u7a7a\uff0c\u6216\u8005\u90fd\u975e\u7a7a\uff0c\u4f46\u5b83\u4eec\u7684 val \u4e0d\u7b49\uff0c\u90fd\u4e0d\u80fd\u53eb\u505a symmetric tree if (p1 == null || p2 == null || p1.val != p2.val) { return false; } // \u5bf9\u79f0\u5730\u53bb\u6bd4\u8f83\uff0cp1 \u7684\u5de6\u8fb9\u548c p2 \u7684\u53f3\u8fb9 // p1 \u7684\u53f3\u8fb9\u548c p2 \u7684\u5de6\u8fb9 return isSymmetric(p1.left, p2.right) && isSymmetric(p1.right, p2.left); } public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } return isSymmetric(root.left, root.right); } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"leetcode-0101-symmetric-tree/#3","text":"\u53c2\u8003\u8d44\u6599\uff1a import java.util.LinkedList; // https://leetcode-cn.com/problems/symmetric-tree/description/ public class Solution3 { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } LinkedList<TreeNode> linkedList = new LinkedList<>(); linkedList.addFirst(root.left); linkedList.addLast(root.right); while (!linkedList.isEmpty()) { // \u51fa\u961f\u7684\u65f6\u5019\uff0c\u770b\u770b\u662f\u5426\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5165\u961f TreeNode lNode = linkedList.removeFirst(); TreeNode rNode = linkedList.removeLast(); if (lNode == null && rNode == null) { continue; } if (lNode == null || rNode == null) { return false; } linkedList.addFirst(lNode.right); linkedList.addFirst(lNode.left); linkedList.addLast(rNode.left); linkedList.addLast(rNode.right); if (lNode.val != rNode.val) { return false; } } return true; } }","title":"\u53c2\u8003\u89e3\u7b543"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/","text":"104. Maximum Depth of Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 104. Maximum Depth of Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int maxDepth(TreeNode root) { if (root == null) { return 0; } return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1; } }","title":"104. Maximum Depth of Binary Tree"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/#104-maximum-depth-of-binary-tree","text":"","title":"104. Maximum Depth of Binary Tree"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 104. Maximum Depth of Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u4f46\u5982\u679c\u8fd9\u9053\u9898\u8981\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u90a3\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\uff0c\u8bf7\u53c2\u8003 LeetCode \u7b2c 111 \u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0104-maximum-depth-of-binary-tree/#1","text":"public class Solution { public int maxDepth(TreeNode root) { if (root == null) { return 0; } return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/","text":"105. Construct Binary Tree from Preorder and Inorder Traversal \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 105. Construct Binary Tree from Preorder and Inorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode buildTree(int[] preorder, int[] inorder) { int preLen = preorder.length; int inLen = inorder.length; return helper(preorder, 0, preLen - 1, inorder, 0, inLen - 1); } private TreeNode helper(int[] preorder, int preL, int preR, int[] inorder, int inL, int inR) { if (preL > preR || inL > inR) { return null; } int rootVal = preorder[preL]; int l = inL; while (l <= inR && inorder[l] != rootVal) { l++; } TreeNode root = new TreeNode(rootVal); root.left = helper(preorder, preL + 1, preL + l - inL, inorder, inL, l - 1); root.right = helper(preorder, preL + l - inL + 1, preR, inorder, l + 1, inR); return root; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"105. Construct Binary Tree from Preorder and Inorder Traversal"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#105-construct-binary-tree-from-preorder-and-inorder-traversal","text":"","title":"105. Construct Binary Tree from Preorder and Inorder Traversal"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 105. Construct Binary Tree from Preorder and Inorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode buildTree(int[] preorder, int[] inorder) { int preLen = preorder.length; int inLen = inorder.length; return helper(preorder, 0, preLen - 1, inorder, 0, inLen - 1); } private TreeNode helper(int[] preorder, int preL, int preR, int[] inorder, int inL, int inR) { if (preL > preR || inL > inR) { return null; } int rootVal = preorder[preL]; int l = inL; while (l <= inR && inorder[l] != rootVal) { l++; } TreeNode root = new TreeNode(rootVal); root.left = helper(preorder, preL + 1, preL + l - inL, inorder, inL, l - 1); root.right = helper(preorder, preL + l - inL + 1, preR, inorder, l + 1, inR); return root; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0105-construct-binary-tree-from-preorder-and-inorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/","text":"109. Convert Sorted List to Binary Search Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u7684\u6709\u5e8f\u94fe\u8868\uff1a [-10, -3, 0, 5, 9], \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0, -3, 9, -10, null, 5], \u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 0 / \\ -3 9 / / -10 5 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 109. Convert Sorted List to Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0109-convert-sorted-list-to-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"109. Convert Sorted List to Binary Search Tree"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/#109-convert-sorted-list-to-binary-search-tree","text":"","title":"109. Convert Sorted List to Binary Search Tree"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u7684\u6709\u5e8f\u94fe\u8868\uff1a [-10, -3, 0, 5, 9], \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0, -3, 9, -10, null, 5], \u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 0 / \\ -3 9 / / -10 5 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 109. Convert Sorted List to Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0109-convert-sorted-list-to-binary-search-tree/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0109-convert-sorted-list-to-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0110-balanced-binary-tree/","text":"110. Balanced Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 110. Balanced Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 110. \u5e73\u8861\u4e8c\u53c9\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5148\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u518d\u8ba1\u7b97\u81ea\u5df1\u3002 + \u5982\u679c\u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u4e00\u76f4\u5c06\u4e0d\u5e73\u8861\u4fe1\u606f\uff08-1\uff09\u56de\u4f20\u5230\u6839\u7ed3\u70b9\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } return depth(root) != -1; } private int depth(TreeNode root) { if (root == null) { return 0; } int left = depth(root.left); int right = depth(root.right); if (left == -1 || right == -1 || Math.abs(left - right) > 1) { return -1; } return Integer.max(left, right) + 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0110-balanced-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"110. Balanced Binary Tree"},{"location":"leetcode-0110-balanced-binary-tree/#110-balanced-binary-tree","text":"","title":"110. Balanced Binary Tree"},{"location":"leetcode-0110-balanced-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 110. Balanced Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 110. \u5e73\u8861\u4e8c\u53c9\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0110-balanced-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5148\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u518d\u8ba1\u7b97\u81ea\u5df1\u3002 + \u5982\u679c\u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u4e00\u76f4\u5c06\u4e0d\u5e73\u8861\u4fe1\u606f\uff08-1\uff09\u56de\u4f20\u5230\u6839\u7ed3\u70b9\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0110-balanced-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0110-balanced-binary-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } class Solution { public boolean isBalanced(TreeNode root) { if (root == null) { return true; } return depth(root) != -1; } private int depth(TreeNode root) { if (root == null) { return 0; } int left = depth(root.left); int right = depth(root.right); if (left == -1 || right == -1 || Math.abs(left - right) > 1) { return -1; } return Integer.max(left, right) + 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0110-balanced-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/","text":"111. Minimum Depth of Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 111. Minimum Depth of Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public int minDepth(TreeNode root) { if (root == null) { return 0; } // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5 if (root.left == null || root.right == null) { return Integer.max(minDepth(root.left), minDepth(root.right)) + 1; } return Integer.min(minDepth(root.left), minDepth(root.right)) + 1; } }","title":"111. Minimum Depth of Binary Tree"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/#111-minimum-depth-of-binary-tree","text":"","title":"111. Minimum Depth of Binary Tree"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 111. Minimum Depth of Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4e0d\u8981\u7b80\u5355\u5730\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u201c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u201d\uff08LeetCode \u7b2c 104 \u9898\uff09\u4e00\u6837\uff0c\u8981\u8003\u8651\u5230\u201c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5176\u4e2d\u4e4b\u4e00\u4e3a\u7a7a\u201d\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0111-minimum-depth-of-binary-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public int minDepth(TreeNode root) { if (root == null) { return 0; } // \u8fd9\u4e00\u6b65\u8981\u7279\u522b\u6ce8\u610f\uff0c\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u7684\u60c5\u51b5 if (root.left == null || root.right == null) { return Integer.max(minDepth(root.left), minDepth(root.right)) + 1; } return Integer.min(minDepth(root.left), minDepth(root.right)) + 1; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0113-path-sum-ii/","text":"113. Path Sum II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22 \uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ / \\ 7 2 5 1 \u8fd4\u56de: [ [5,4,11,2], [5,8,4,5] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 113. Path Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 113. \u8def\u5f84\u603b\u548c II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5b9e\u73b0\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<List<Integer>> pathSum(TreeNode root, int sum) { List<List<Integer>> result = new ArrayList<>(); if (root == null) { return result; } // \u6839\u8282\u70b9 if (root.left == null && root.right == null) { if (root.val == sum) { List<Integer> temp1 = new ArrayList<>(); temp1.add(root.val); result.add(temp1); return result; } } List<List<Integer>> leftLists = pathSum(root.left, sum - root.val); mergeOneAndList(root, leftLists, result); List<List<Integer>> rightLists = pathSum(root.right, sum - root.val); mergeOneAndList(root, rightLists, result); return result; } private void mergeOneAndList(TreeNode node, List<List<Integer>> listList, List<List<Integer>> result) { for (int i = 0; i < listList.size(); i++) { List<Integer> temp1 = new ArrayList<>(); temp1.add(node.val); temp1.addAll(listList.get(i)); result.add(temp1); } } } \u9898\u540e\u603b\u7ed3\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5e76\u4e0d\u662f\u8ba9\u6211\u4eec\u771f\u6b63\u5730\u53bb\u505a\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u987b\u8981\u6211\u4eec\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\uff0c\u5bfb\u627e\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u3002\u5386\u53f2\u4e0a\u7c7b\u4f3c\u7684\u7ecf\u5178\u95ee\u9898\u6709\u6c49\u8bfa\u5854\u95ee\u9898\u548c\u516b\u7687\u540e\u95ee\u9898\u3002 \u4f46\u662f\uff0c\u6211\u81ea\u5df1\u89c9\u5f97\uff0c\u6211\u7684\u89e3\u6cd5\uff0c\u5c24\u5176\u662f\u5728 mergeOneAndList() \u51fd\u6570\u7684\u90e8\u5206\u7a0d\u663e\u590d\u6742\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u79cd\u7b80\u6d01\u7684\u89e3\u6cd5\uff1a\u8fd9\u79cd\u89e3\u6cd5\u663e\u5f97\u66f4\u81ea\u7136\u4e00\u4e9b\uff0c\u904d\u5386\u4e86\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u7d2f\u52a0\u8ba1\u7b97\u52a0\u5230\u4e86\u591a\u5c11\uff0c\u8fd9\u662f\u4e0e\u8001\u5e08\u7684\u601d\u8def\u4e0d\u540c\u7684\u4e00\u79cd\u601d\u8def\u3002 public class Solution2 { private List<List<Integer>> result = new ArrayList<>(); public List<List<Integer>> pathSum(TreeNode root, int sum) { getSum(root, new ArrayList<Integer>(), 0, sum); return result; } private void getSum(TreeNode node, ArrayList<Integer> list, int current, int sum) { if (node == null) { return; } current += node.val; list.add(node.val); if (node.left == null && node.right == null) { if (current == sum) { result.add(list); } else { // \u4ec0\u4e48\u90fd\u4e0d\u505a // \u5728\u8fd9\u91cc\u53ef\u4ee5\u628a\u4e0d\u6ee1\u8db3\u7684\u8282\u70b9\u90fd\u904d\u5386\u51fa\u6765 return; } } if (node.left != null) { getSum(node.left, new ArrayList<Integer>(), current, sum); } if (node.right != null) { getSum(node.right, new ArrayList<Integer>(), current, sum); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0113-path-sum-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"113. Path Sum II"},{"location":"leetcode-0113-path-sum-ii/#113-path-sum-ii","text":"","title":"113. Path Sum II"},{"location":"leetcode-0113-path-sum-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22 \uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ / \\ 7 2 5 1 \u8fd4\u56de: [ [5,4,11,2], [5,8,4,5] ] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 113. Path Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 113. \u8def\u5f84\u603b\u548c II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0113-path-sum-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0113-path-sum-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0113-path-sum-ii/#1","text":"Java \u5b9e\u73b0\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<List<Integer>> pathSum(TreeNode root, int sum) { List<List<Integer>> result = new ArrayList<>(); if (root == null) { return result; } // \u6839\u8282\u70b9 if (root.left == null && root.right == null) { if (root.val == sum) { List<Integer> temp1 = new ArrayList<>(); temp1.add(root.val); result.add(temp1); return result; } } List<List<Integer>> leftLists = pathSum(root.left, sum - root.val); mergeOneAndList(root, leftLists, result); List<List<Integer>> rightLists = pathSum(root.right, sum - root.val); mergeOneAndList(root, rightLists, result); return result; } private void mergeOneAndList(TreeNode node, List<List<Integer>> listList, List<List<Integer>> result) { for (int i = 0; i < listList.size(); i++) { List<Integer> temp1 = new ArrayList<>(); temp1.add(node.val); temp1.addAll(listList.get(i)); result.add(temp1); } } } \u9898\u540e\u603b\u7ed3\uff1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u5e76\u4e0d\u662f\u8ba9\u6211\u4eec\u771f\u6b63\u5730\u53bb\u505a\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u987b\u8981\u6211\u4eec\u53d1\u73b0\u9012\u5f52\u5173\u7cfb\uff0c\u5bfb\u627e\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u3002\u5386\u53f2\u4e0a\u7c7b\u4f3c\u7684\u7ecf\u5178\u95ee\u9898\u6709\u6c49\u8bfa\u5854\u95ee\u9898\u548c\u516b\u7687\u540e\u95ee\u9898\u3002 \u4f46\u662f\uff0c\u6211\u81ea\u5df1\u89c9\u5f97\uff0c\u6211\u7684\u89e3\u6cd5\uff0c\u5c24\u5176\u662f\u5728 mergeOneAndList() \u51fd\u6570\u7684\u90e8\u5206\u7a0d\u663e\u590d\u6742\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u79cd\u7b80\u6d01\u7684\u89e3\u6cd5\uff1a\u8fd9\u79cd\u89e3\u6cd5\u663e\u5f97\u66f4\u81ea\u7136\u4e00\u4e9b\uff0c\u904d\u5386\u4e86\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u7d2f\u52a0\u8ba1\u7b97\u52a0\u5230\u4e86\u591a\u5c11\uff0c\u8fd9\u662f\u4e0e\u8001\u5e08\u7684\u601d\u8def\u4e0d\u540c\u7684\u4e00\u79cd\u601d\u8def\u3002 public class Solution2 { private List<List<Integer>> result = new ArrayList<>(); public List<List<Integer>> pathSum(TreeNode root, int sum) { getSum(root, new ArrayList<Integer>(), 0, sum); return result; } private void getSum(TreeNode node, ArrayList<Integer> list, int current, int sum) { if (node == null) { return; } current += node.val; list.add(node.val); if (node.left == null && node.right == null) { if (current == sum) { result.add(list); } else { // \u4ec0\u4e48\u90fd\u4e0d\u505a // \u5728\u8fd9\u91cc\u53ef\u4ee5\u628a\u4e0d\u6ee1\u8db3\u7684\u8282\u70b9\u90fd\u904d\u5386\u51fa\u6765 return; } } if (node.left != null) { getSum(node.left, new ArrayList<Integer>(), current, sum); } if (node.right != null) { getSum(node.right, new ArrayList<Integer>(), current, sum); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0113-path-sum-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/","text":"121. Best Time to Buy and Sell Stock \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 121. Best Time to Buy and Sell Stock \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5728\u6700\u591a\u53ea\u5141\u8bb8\u4ea4\u6613\u4e00\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u51fa\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u6700\u5927\u5229\u6da6\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230\u80a1\u4ef7\u6700\u4f4e\u7684\u4e00\u5929\u4e70\u8fdb\uff0c\u7136\u540e\u5728\u80a1\u4ef7\u6700\u9ad8\u7684\u4e00\u5929\u5356\u51fa\u5373\u53ef\uff08\u5e76\u4e14\u8981\u6ee1\u8db3\u5148\u4e70\u540e\u5356\u7684\u89c4\u5219\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u7684\u6700\u5c0f\u503c\uff0c\u7528\u5f53\u524d\u503c\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u6700\u5927\u3002 \u6211\u4eec\u5199\u51fa\u4e86\u53c2\u8003\u89e3\u7b54 1 \u4ee5\u540e\uff0c\u53d1\u73b0\u4e0b\u9762\u8fd9\u4e24\u884c\u4ee3\u7801\u7b2c 1 \u884c\u6c42\u6700\u5927\u503c\uff0c\u7b2c 2 \u884c\u6c42\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u80fd\u4e0d\u80fd\u628a\u5b83\u4eec\u7684\u7ed3\u6784\u7edf\u4e00\u8d77\u6765\u3002 maxProfit = Integer.max(maxProfit, prices[i] - preMinimum); preMinimum = Integer.min(preMinimum, prices[i]); \u6211\u4eec\u8981\u6c42\u5229\u6da6\u6700\u5927\u5316\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65b9\u5411\u662f\u628a min \u6539\u6210 max \uff0c\u5f88\u7b80\u5355\uff0c\u53d6\u4e2a\u8d1f\u53f7\u5c31\u884c\u4e86\u3002\u5176\u542b\u4e49\u4e5f\u5f88\u76f4\u89c2\uff0c 0 - price \u5c31\u8868\u793a\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5047\u5982\u6211\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\u6211\u7684\u5229\u6da6\uff0c\u6211\u80af\u5b9a\u662f\u8fd8\u662f\u5e0c\u671b\u6211\u7684\u5229\u6da6\u8d8a\u6765\u8d8a\u5927\u3002 \u800c\u6211\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u503c\u662f\u548c\u4e70\u64cd\u4f5c\u76f8\u5173\u7684\uff0c\u5f88\u5bb9\u6613\u6211\u4eec\u5c31\u5199\u51fa\u4e86\u4e0b\u9762\u7684\u4e24\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4ece\u7d22\u5f15\u4e3a 0 \u5f00\u59cb\u3002\u63a5\u4e0b\u6765\u8bbe\u7f6e\u521d\u59cb\u503c\u5c31\u6bd4\u8f83\u5173\u952e\u4e86\uff0c\u5982\u679c\u6211\u662f\u4e70\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e00\u76f4\u5356\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u662f\u6574\u6570\u7684\u6700\u5c0f\u503c\uff1b\u5982\u679c\u6211\u662f\u5356\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e0d\u8d5a\u94b1\uff0c\u6240\u4ee5\u4e0b\u754c\u5c31\u662f 0\u3002 // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Integer.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Integer.max(sell, buy + price); \u5b8c\u6574\u4ee3\u7801\u5c31\u662f\uff1a int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { buy = Integer.max(buy, -price); sell = Integer.max(sell, buy + price); } return sell; \u53ef\u4ee5\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u89e3 LeetCode \u7b2c 123 \u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { /** * \u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c * * @param prices * @return */ public int maxProfit(int[] prices) { int len = prices.length; if (len == 0) { return 0; } int maxProfit = 0; // \u4e4b\u524d\u904d\u5386\u5230\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c int preMinimum = prices[0]; // \u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5143\u7d20\u5f00\u59cb for (int i = 1; i < len; i++) { // \u5f53\u524d\u503c\u51cf\u53bb\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u51fa\u6700\u5927\uff0c\u5373\u4e3a\u6240\u6c42 maxProfit = Integer.max(maxProfit, prices[i] - preMinimum); preMinimum = Integer.min(preMinimum, prices[i]); } return maxProfit; } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { buy = Integer.max(buy, -price); sell = Integer.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0121-best-time-to-buy-and-sell-stock \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"121. Best Time to Buy and Sell Stock"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#121-best-time-to-buy-and-sell-stock","text":"","title":"121. Best Time to Buy and Sell Stock"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 121. Best Time to Buy and Sell Stock \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5728\u6700\u591a\u53ea\u5141\u8bb8\u4ea4\u6613\u4e00\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u51fa\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u6700\u5927\u5229\u6da6\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230\u80a1\u4ef7\u6700\u4f4e\u7684\u4e00\u5929\u4e70\u8fdb\uff0c\u7136\u540e\u5728\u80a1\u4ef7\u6700\u9ad8\u7684\u4e00\u5929\u5356\u51fa\u5373\u53ef\uff08\u5e76\u4e14\u8981\u6ee1\u8db3\u5148\u4e70\u540e\u5356\u7684\u89c4\u5219\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u7684\u6700\u5c0f\u503c\uff0c\u7528\u5f53\u524d\u503c\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u6700\u5927\u3002 \u6211\u4eec\u5199\u51fa\u4e86\u53c2\u8003\u89e3\u7b54 1 \u4ee5\u540e\uff0c\u53d1\u73b0\u4e0b\u9762\u8fd9\u4e24\u884c\u4ee3\u7801\u7b2c 1 \u884c\u6c42\u6700\u5927\u503c\uff0c\u7b2c 2 \u884c\u6c42\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u80fd\u4e0d\u80fd\u628a\u5b83\u4eec\u7684\u7ed3\u6784\u7edf\u4e00\u8d77\u6765\u3002 maxProfit = Integer.max(maxProfit, prices[i] - preMinimum); preMinimum = Integer.min(preMinimum, prices[i]); \u6211\u4eec\u8981\u6c42\u5229\u6da6\u6700\u5927\u5316\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65b9\u5411\u662f\u628a min \u6539\u6210 max \uff0c\u5f88\u7b80\u5355\uff0c\u53d6\u4e2a\u8d1f\u53f7\u5c31\u884c\u4e86\u3002\u5176\u542b\u4e49\u4e5f\u5f88\u76f4\u89c2\uff0c 0 - price \u5c31\u8868\u793a\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5047\u5982\u6211\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\u6211\u7684\u5229\u6da6\uff0c\u6211\u80af\u5b9a\u662f\u8fd8\u662f\u5e0c\u671b\u6211\u7684\u5229\u6da6\u8d8a\u6765\u8d8a\u5927\u3002 \u800c\u6211\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u503c\u662f\u548c\u4e70\u64cd\u4f5c\u76f8\u5173\u7684\uff0c\u5f88\u5bb9\u6613\u6211\u4eec\u5c31\u5199\u51fa\u4e86\u4e0b\u9762\u7684\u4e24\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4ece\u7d22\u5f15\u4e3a 0 \u5f00\u59cb\u3002\u63a5\u4e0b\u6765\u8bbe\u7f6e\u521d\u59cb\u503c\u5c31\u6bd4\u8f83\u5173\u952e\u4e86\uff0c\u5982\u679c\u6211\u662f\u4e70\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e00\u76f4\u5356\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u662f\u6574\u6570\u7684\u6700\u5c0f\u503c\uff1b\u5982\u679c\u6211\u662f\u5356\u64cd\u4f5c\uff0c\u6700\u5dee\u6211\u4e0d\u8d5a\u94b1\uff0c\u6240\u4ee5\u4e0b\u754c\u5c31\u662f 0\u3002 // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u4e70\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c buy = Integer.max(buy, -price); // \u5728\u5f53\u524d\u4ee5\u53ca\u4e4b\u524d\u5982\u679c\u6267\u884c\u4e86\u5356\u64cd\u4f5c\uff0c\u80fd\u591f\u5f97\u5230\u7684\u5229\u6da6\u7684\u6700\u5927\u503c sell = Integer.max(sell, buy + price); \u5b8c\u6574\u4ee3\u7801\u5c31\u662f\uff1a int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { buy = Integer.max(buy, -price); sell = Integer.max(sell, buy + price); } return sell; \u53ef\u4ee5\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u89e3 LeetCode \u7b2c 123 \u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#1","text":"public class Solution { /** * \u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c * * @param prices * @return */ public int maxProfit(int[] prices) { int len = prices.length; if (len == 0) { return 0; } int maxProfit = 0; // \u4e4b\u524d\u904d\u5386\u5230\u7684\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c int preMinimum = prices[0]; // \u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5143\u7d20\u5f00\u59cb for (int i = 1; i < len; i++) { // \u5f53\u524d\u503c\u51cf\u53bb\u4e4b\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u4ece\u4e2d\u53d6\u51fa\u6700\u5927\uff0c\u5373\u4e3a\u6240\u6c42 maxProfit = Integer.max(maxProfit, prices[i] - preMinimum); preMinimum = Integer.min(preMinimum, prices[i]); } return maxProfit; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0121-best-time-to-buy-and-sell-stock/#2","text":"public class Solution2 { public int maxProfit(int[] prices) { int buy = Integer.MIN_VALUE; int sell = 0; for (int price : prices) { buy = Integer.max(buy, -price); sell = Integer.max(sell, buy + price); } return sell; } public static void main(String[] args) { int[] prices = {7, 1, 5, 3, 6, 4}; Solution2 solution2 = new Solution2(); int maxProfit = solution2.maxProfit(prices); System.out.println(maxProfit); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0121-best-time-to-buy-and-sell-stock \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/","text":"122. Best Time to Buy and Sell Stock II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 122. Best Time to Buy and Sell Stock II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\u3002\u7528\u6211\u4eec\u751f\u6d3b\u7684\u5e38\u8bc6\u5c31\u53ef\u4ee5\u5224\u65ad\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u672a\u6765\uff08\u53ea\u8981\u6bcf\u5929\u90fd\u77e5\u9053\u660e\u5929\uff09\u7684\u80a1\u7968\u4f1a\u6da8\uff0c\u6211\u4eec\u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5c31\u4e00\u5b9a\u662f\u8d5a\u94b1\u7684\u3002\u56e0\u6b64\uff0c\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u548c\u5373\u6210\u4e3a\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u3002\u5f53\u7136\u8fd9\u79cd\u5047\u8bbe\u662f\u4e0d\u6210\u7acb\u7684\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898\uff0c\u6ca1\u6709\u73b0\u5b9e\u6307\u5bfc\u610f\u4e49\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int maxProfit(int[] prices) { int res = 0; int len = prices.length; for (int i = 0; i < len - 1; i++) { int diff = prices[i + 1] - prices[i]; if (diff > 0) { res += diff; } } return res; } } \u53c2\u8003\u89e3\u7b542\uff1a\u4e0e\u53c2\u8003\u89e3\u7b541\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0a\u66f4\u7b80\u6d01\u3002 public class Solution2 { public int maxProfit(int[] prices) { int res = 0; int len = prices.length; for (int i = 0; i < len - 1; i++) { res += Integer.max(prices[i + 1] - prices[i], 0); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0122-best-time-to-buy-and-sell-stock-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"122. Best Time to Buy and Sell Stock II"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#122-best-time-to-buy-and-sell-stock-ii","text":"","title":"122. Best Time to Buy and Sell Stock II"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 122. Best Time to Buy and Sell Stock II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u601d\u60f3\u89e3\u51b3\u7684\u95ee\u9898\u3002\u7528\u6211\u4eec\u751f\u6d3b\u7684\u5e38\u8bc6\u5c31\u53ef\u4ee5\u5224\u65ad\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u672a\u6765\uff08\u53ea\u8981\u6bcf\u5929\u90fd\u77e5\u9053\u660e\u5929\uff09\u7684\u80a1\u7968\u4f1a\u6da8\uff0c\u6211\u4eec\u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5c31\u4e00\u5b9a\u662f\u8d5a\u94b1\u7684\u3002\u56e0\u6b64\uff0c\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u548c\u5373\u6210\u4e3a\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u3002\u5f53\u7136\u8fd9\u79cd\u5047\u8bbe\u662f\u4e0d\u6210\u7acb\u7684\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898\uff0c\u6ca1\u6709\u73b0\u5b9e\u6307\u5bfc\u610f\u4e49\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#1","text":"public class Solution { public int maxProfit(int[] prices) { int res = 0; int len = prices.length; for (int i = 0; i < len - 1; i++) { int diff = prices[i + 1] - prices[i]; if (diff > 0) { res += diff; } } return res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0122-best-time-to-buy-and-sell-stock-ii/#21","text":"public class Solution2 { public int maxProfit(int[] prices) { int res = 0; int len = prices.length; for (int i = 0; i < len - 1; i++) { res += Integer.max(prices[i + 1] - prices[i], 0); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0122-best-time-to-buy-and-sell-stock-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4e0e\u53c2\u8003\u89e3\u7b541\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0a\u66f4\u7b80\u6d01\u3002"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/","text":"123. Best Time to Buy and Sell Stock III \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 \u4e24\u7b14 \u4ea4\u6613\u3002 \u6ce8\u610f: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,3,5,0,0,3,1,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 123. Best Time to Buy and Sell Stock III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u53c2\u8003 LeetCode \u7b2c 121 \u9898\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u4e3a\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u4e24\u7b14 \u4ea4\u6613\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u8fd9\u4e24\u90e8\u5206\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u4e4b\u548c\u5373\u4e3a\u6240\u6c42\u3002 \u601d\u8def2\uff1a\u5176\u5b9e\u5c31\u5728 LeetCode \u7b2c 121 \u9898\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u591a\u505a\u4e00\u5c42\u6700\u503c\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u3002 \u4e70\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u8d1f\uff0c\u5356\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u6b63\u3002\u8fd9\u6837\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int maxProfit(int[] prices) { int len = prices.length; int maxProfit = 0; for (int i = 1; i < len; i++) { maxProfit = Integer.max(maxProfit(prices, 0, i) + maxProfit(prices, i + 1, len - 1), maxProfit); } return maxProfit; } private int maxProfit(int[] prices, int l, int r) { int len = prices.length; if (len == 0 || l < 0 || l >= len) { return 0; } int preMinimum = prices[l]; int maxProfit = 0; for (int i = l + 1; i <= r; i++) { maxProfit = Integer.max(prices[i] - preMinimum, maxProfit); preMinimum = Integer.min(preMinimum, prices[i]); } return maxProfit; } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public int maxProfit(int[] prices) { // \u4e0d\u8bba\u662f\u4e70\u548c\u4e70\uff0c\u90fd\u5148\u5047\u8bbe\u4e00\u4e2a\u6700\u574f\u7684\u60c5\u51b5 // \u4e70\u7684\u65f6\u5019\uff0c\u6700\u574f\u6211\u53ea\u4e70\u4e0d\u5356\uff0c\u94b1\u4f1a\u8d8a\u6765\u8d8a\u5c11 int buy1 = Integer.MIN_VALUE; // \u5356\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6c42\u6700\u5927\u503c\uff0c\u6211\u6700\u5dee\u4ec0\u4e48\u60c5\u51b5\u5c31\u662f\u4e0d\u4ea4\u6613\uff0c\u6536\u76ca\u4e3a 0 int sell1 = 0; int buy2 = Integer.MIN_VALUE; int sell2 = 0; for (int price : prices) { buy1 = Integer.max(buy1, -price); sell1 = Integer.max(sell1, price + buy1); buy2 = Integer.max(buy2, sell1 - price); sell2 = Integer.max(sell2, price + buy2); } return sell2; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0123-best-time-to-buy-and-sell-stock-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"123. Best Time to Buy and Sell Stock III"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#123-best-time-to-buy-and-sell-stock-iii","text":"","title":"123. Best Time to Buy and Sell Stock III"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 \u4e24\u7b14 \u4ea4\u6613\u3002 \u6ce8\u610f: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,3,5,0,0,3,1,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 123. Best Time to Buy and Sell Stock III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u53c2\u8003 LeetCode \u7b2c 121 \u9898\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u4e3a\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u4e24\u7b14 \u4ea4\u6613\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u8fd9\u4e24\u90e8\u5206\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u4e4b\u548c\u5373\u4e3a\u6240\u6c42\u3002 \u601d\u8def2\uff1a\u5176\u5b9e\u5c31\u5728 LeetCode \u7b2c 121 \u9898\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u591a\u505a\u4e00\u5c42\u6700\u503c\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u3002 \u4e70\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u8d1f\uff0c\u5356\u7684\u65f6\u5019\uff0c\u5229\u6da6\u4e3a\u6b63\u3002\u8fd9\u6837\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#1","text":"public class Solution { public int maxProfit(int[] prices) { int len = prices.length; int maxProfit = 0; for (int i = 1; i < len; i++) { maxProfit = Integer.max(maxProfit(prices, 0, i) + maxProfit(prices, i + 1, len - 1), maxProfit); } return maxProfit; } private int maxProfit(int[] prices, int l, int r) { int len = prices.length; if (len == 0 || l < 0 || l >= len) { return 0; } int preMinimum = prices[l]; int maxProfit = 0; for (int i = l + 1; i <= r; i++) { maxProfit = Integer.max(prices[i] - preMinimum, maxProfit); preMinimum = Integer.min(preMinimum, prices[i]); } return maxProfit; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0123-best-time-to-buy-and-sell-stock-iii/#2","text":"public class Solution2 { public int maxProfit(int[] prices) { // \u4e0d\u8bba\u662f\u4e70\u548c\u4e70\uff0c\u90fd\u5148\u5047\u8bbe\u4e00\u4e2a\u6700\u574f\u7684\u60c5\u51b5 // \u4e70\u7684\u65f6\u5019\uff0c\u6700\u574f\u6211\u53ea\u4e70\u4e0d\u5356\uff0c\u94b1\u4f1a\u8d8a\u6765\u8d8a\u5c11 int buy1 = Integer.MIN_VALUE; // \u5356\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6c42\u6700\u5927\u503c\uff0c\u6211\u6700\u5dee\u4ec0\u4e48\u60c5\u51b5\u5c31\u662f\u4e0d\u4ea4\u6613\uff0c\u6536\u76ca\u4e3a 0 int sell1 = 0; int buy2 = Integer.MIN_VALUE; int sell2 = 0; for (int price : prices) { buy1 = Integer.max(buy1, -price); sell1 = Integer.max(sell1, price + buy1); buy2 = Integer.max(buy2, sell1 - price); sell2 = Integer.max(sell2, price + buy2); } return sell2; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0123-best-time-to-buy-and-sell-stock-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0125-valid-palindrome/","text":"125. Valid Palindrome \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"race a car\" \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 125. Valid Palindrome \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u4f7f\u7528\u6307\u9488\u5bf9\u649e\u7684\u601d\u60f3\uff1a public class Solution { /** * \"A man, a plan, a canal: Panama\" * * @param s * @return */ public boolean isPalindrome(String s) { int index_i = 0; int index_j = s.length() - 1; while (index_i <= index_j) { String i = s.charAt(index_i) + \"\"; String j = s.charAt(index_j) + \"\"; if (!i.matches(\"[0-9a-zA-Z]\")) { index_i++; continue; } if (!j.matches(\"[0-9a-zA-Z]\")) { index_j--; continue; } if (!j.equalsIgnoreCase(i)) { return false; } else { index_i++; index_j--; } } return true; } public static void main(String[] args) { String s = \"A man, a plan, a canal: Panama\"; Solution solution = new Solution(); boolean palindrome = solution.isPalindrome(s); System.out.println(palindrome); } } Python \u5199\u6cd5\uff1a class Solution(object): def isPalindrome(self, s): \"\"\" :type s: str :rtype: bool \"\"\" left = 0 right = len(s) - 1 while left < right: if not s[left].isalnum(): left += 1 continue if not s[right].isalnum(): right -= 1 continue if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True \u63d0\u4ea4\u4ee5\u540e\u53d1\u73b0\uff0c\u624d\u51fb\u8d25\u4e86 0.85% \u7684 Java \u5f00\u53d1\u8005\u3002 \u4e0b\u9762\u6539\u4e86\u4e00\u7248\uff0c\u51fb\u8d25\u4e86 19.22% \u7684 Java \u5f00\u53d1\u8005\u3002 Java \u4ee3\u7801\uff1a public class Solution { /** * \"A man, a plan, a canal: Panama\" * * @param s * @return */ public boolean isPalindrome(String s) { // \u53bb\u6389\u975e\u6570\u5b57\u548c\u5b57\u6bcd // \u5168\u90e8\u8f6c\u6362\u4e3a\u5c0f\u5199 s = s.replaceAll(\"[^0-9a-zA-Z]\", \"\"); StringBuilder reverse = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i--) { reverse.append(s.charAt(i)); } return s.equalsIgnoreCase(reverse.toString()); } public static void main(String[] args) { String s = \"A man, a plan, a canal: Panama\"; Solution solution = new Solution(); boolean palindrome = solution.isPalindrome(s); System.out.println(palindrome); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0125-valid-palindrome \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"125. Valid Palindrome"},{"location":"leetcode-0125-valid-palindrome/#125-valid-palindrome","text":"","title":"125. Valid Palindrome"},{"location":"leetcode-0125-valid-palindrome/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"race a car\" \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 125. Valid Palindrome \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0125-valid-palindrome/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0125-valid-palindrome/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0125-valid-palindrome/#1","text":"\u4f7f\u7528\u6307\u9488\u5bf9\u649e\u7684\u601d\u60f3\uff1a public class Solution { /** * \"A man, a plan, a canal: Panama\" * * @param s * @return */ public boolean isPalindrome(String s) { int index_i = 0; int index_j = s.length() - 1; while (index_i <= index_j) { String i = s.charAt(index_i) + \"\"; String j = s.charAt(index_j) + \"\"; if (!i.matches(\"[0-9a-zA-Z]\")) { index_i++; continue; } if (!j.matches(\"[0-9a-zA-Z]\")) { index_j--; continue; } if (!j.equalsIgnoreCase(i)) { return false; } else { index_i++; index_j--; } } return true; } public static void main(String[] args) { String s = \"A man, a plan, a canal: Panama\"; Solution solution = new Solution(); boolean palindrome = solution.isPalindrome(s); System.out.println(palindrome); } } Python \u5199\u6cd5\uff1a class Solution(object): def isPalindrome(self, s): \"\"\" :type s: str :rtype: bool \"\"\" left = 0 right = len(s) - 1 while left < right: if not s[left].isalnum(): left += 1 continue if not s[right].isalnum(): right -= 1 continue if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True \u63d0\u4ea4\u4ee5\u540e\u53d1\u73b0\uff0c\u624d\u51fb\u8d25\u4e86 0.85% \u7684 Java \u5f00\u53d1\u8005\u3002 \u4e0b\u9762\u6539\u4e86\u4e00\u7248\uff0c\u51fb\u8d25\u4e86 19.22% \u7684 Java \u5f00\u53d1\u8005\u3002 Java \u4ee3\u7801\uff1a public class Solution { /** * \"A man, a plan, a canal: Panama\" * * @param s * @return */ public boolean isPalindrome(String s) { // \u53bb\u6389\u975e\u6570\u5b57\u548c\u5b57\u6bcd // \u5168\u90e8\u8f6c\u6362\u4e3a\u5c0f\u5199 s = s.replaceAll(\"[^0-9a-zA-Z]\", \"\"); StringBuilder reverse = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i--) { reverse.append(s.charAt(i)); } return s.equalsIgnoreCase(reverse.toString()); } public static void main(String[] args) { String s = \"A man, a plan, a canal: Panama\"; Solution solution = new Solution(); boolean palindrome = solution.isPalindrome(s); System.out.println(palindrome); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0125-valid-palindrome \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0136-single-number/","text":"136. Single Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 136. Single Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5f53\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u6211\u4e5f\u662f\u770b\u4e86\u522b\u4eba\u7684\u89e3\u7b54\u624d\u77e5\u9053\u7684\u3002\u4f4d\u8fd0\u7b97\u6709\u7684\u65f6\u5019\u771f\u7684\u5f88\u9177\uff01 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int singleNumber(int[] nums) { int len = nums.length; if (len == 0) { throw new RuntimeException(\"\u6570\u7ec4\u5143\u7d20\u4e3a\u7a7a\uff0c\u6ca1\u6709\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\"); } int res = nums[0]; for (int i = 1; i < len; i++) { res ^= nums[i]; } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0136-single-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"136. Single Number"},{"location":"leetcode-0136-single-number/#136-single-number","text":"","title":"136. Single Number"},{"location":"leetcode-0136-single-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 136. Single Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0136-single-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5f53\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f53\u7136\u6211\u4e5f\u662f\u770b\u4e86\u522b\u4eba\u7684\u89e3\u7b54\u624d\u77e5\u9053\u7684\u3002\u4f4d\u8fd0\u7b97\u6709\u7684\u65f6\u5019\u771f\u7684\u5f88\u9177\uff01","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0136-single-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0136-single-number/#1","text":"public class Solution { public int singleNumber(int[] nums) { int len = nums.length; if (len == 0) { throw new RuntimeException(\"\u6570\u7ec4\u5143\u7d20\u4e3a\u7a7a\uff0c\u6ca1\u6709\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\"); } int res = nums[0]; for (int i = 1; i < len; i++) { res ^= nums[i]; } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0136-single-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0137-single-number-ii/","text":"137. Single Number II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,3,2] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [0,1,0,1,0,1,99] \u8f93\u51fa: 99 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 137. Single Number II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 137. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int singleNumber(int[] nums) { int res = 0; int mask = 1; for (int i = 0; i < 32; i++) { int count = 0; for (int num : nums) { if ((mask & num) != 0) { count++; } } if (count % 3 != 0) { res |= mask; } mask <<= 1; } return res; } } \u53c2\u8003\u89e3\u7b542\uff1a\u672c\u8d28\u4e0a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u6709\u70b9\u5c0f\u7684\u4e0d\u540c\u3002 public class Solution2 { public int singleNumber(int[] nums) { int res = 0; int mask = 1; for (int i = 0; i < 32; i++) { mask = 1 << i; int count = 0; for (int num : nums) { if ((num & mask) != 0) { count++; } } if (count % 3 != 0) { res |= mask; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0137-single-number-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"137. Single Number II"},{"location":"leetcode-0137-single-number-ii/#137-single-number-ii","text":"","title":"137. Single Number II"},{"location":"leetcode-0137-single-number-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,3,2] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [0,1,0,1,0,1,99] \u8f93\u51fa: 99 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 137. Single Number II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 137. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0137-single-number-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0137-single-number-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0137-single-number-ii/#1","text":"public class Solution { public int singleNumber(int[] nums) { int res = 0; int mask = 1; for (int i = 0; i < 32; i++) { int count = 0; for (int num : nums) { if ((mask & num) != 0) { count++; } } if (count % 3 != 0) { res |= mask; } mask <<= 1; } return res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0137-single-number-ii/#2-1","text":"public class Solution2 { public int singleNumber(int[] nums) { int res = 0; int mask = 1; for (int i = 0; i < 32; i++) { mask = 1 << i; int count = 0; for (int num : nums) { if ((num & mask) != 0) { count++; } } if (count % 3 != 0) { res |= mask; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0137-single-number-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u672c\u8d28\u4e0a\u548c\u53c2\u8003\u89e3\u7b54 1 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u6709\u70b9\u5c0f\u7684\u4e0d\u540c\u3002"},{"location":"leetcode-0141-linked-list-cycle/","text":"141. Linked List Cycle \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 141. Linked List Cycle \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 141. \u73af\u5f62\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528 Hash \u8868\u5224\u65ad\u662f\u5426\u91cd\u590d\uff08\u4e0d\u63a8\u8350\uff09\u3002 # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): # \u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u65b9\u6cd5\u67e5\u91cd\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350 def hasCycle(self, head): \"\"\" :type head: ListNode :rtype: bool \"\"\" if head is None: return False hash_tabel = dict() point = head while point: if point in hash_tabel: return True else: hash_tabel[point] = 0 point = point.next return False \u53c2\u8003\u89e3\u7b542\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\u7684\u65b9\u5f0f\u3002 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): # \u8fd9\u4e00\u7248\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01 def hasCycle(self, head): \"\"\" :type head: ListNode :rtype: bool \"\"\" if head is None: return False slow = head fast = head # \u5feb\u6307\u9488\u6bcf\u8d70\u4e00\u6b65\uff0c\u90fd\u505a\u4e86\u5224\u65ad while fast: fast = fast.next if fast: fast = fast.next slow = slow.next else: return False if fast == slow: return True return False \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0141-linked-list-cycle \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"141. Linked List Cycle"},{"location":"leetcode-0141-linked-list-cycle/#141-linked-list-cycle","text":"","title":"141. Linked List Cycle"},{"location":"leetcode-0141-linked-list-cycle/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 141. Linked List Cycle \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 141. \u73af\u5f62\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0141-linked-list-cycle/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0141-linked-list-cycle/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0141-linked-list-cycle/#1-hash","text":"# Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution(object): # \u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u65b9\u6cd5\u67e5\u91cd\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350 def hasCycle(self, head): \"\"\" :type head: ListNode :rtype: bool \"\"\" if head is None: return False hash_tabel = dict() point = head while point: if point in hash_tabel: return True else: hash_tabel[point] = 0 point = point.next return False","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528 Hash \u8868\u5224\u65ad\u662f\u5426\u91cd\u590d\uff08\u4e0d\u63a8\u8350\uff09\u3002"},{"location":"leetcode-0141-linked-list-cycle/#2","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): # \u8fd9\u4e00\u7248\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01 def hasCycle(self, head): \"\"\" :type head: ListNode :rtype: bool \"\"\" if head is None: return False slow = head fast = head # \u5feb\u6307\u9488\u6bcf\u8d70\u4e00\u6b65\uff0c\u90fd\u505a\u4e86\u5224\u65ad while fast: fast = fast.next if fast: fast = fast.next slow = slow.next else: return False if fast == slow: return True return False \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0141-linked-list-cycle \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u8bbe\u7f6e\u5feb\u6162\u6307\u9488\u7684\u65b9\u5f0f\u3002"},{"location":"leetcode-0142-linked-list-cycle-ii/","text":"142. Linked List Cycle II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null \u3002 \u8bf4\u660e\uff1a \u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002 \u8fdb\u9636\uff1a \u4f60\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 142. Linked List Cycle II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 142. \u73af\u5f62\u94fe\u8868 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): # If there is no cycle, return null. def detectCycle(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None slow = head fast = head while fast: fast = fast.next if fast: fast = fast.next slow = slow.next else: return None if fast == slow: break # \u8d70\u5230\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u8981\u5224\u65ad if fast: # \u6b64\u65f6 fast == slow \u4e3a True point = head while slow != point: slow = slow.next point = point.next return point else: return None \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0142-linked-list-cycle-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"142. Linked List Cycle II"},{"location":"leetcode-0142-linked-list-cycle-ii/#142-linked-list-cycle-ii","text":"","title":"142. Linked List Cycle II"},{"location":"leetcode-0142-linked-list-cycle-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null \u3002 \u8bf4\u660e\uff1a \u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002 \u8fdb\u9636\uff1a \u4f60\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 142. Linked List Cycle II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 142. \u73af\u5f62\u94fe\u8868 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0142-linked-list-cycle-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0142-linked-list-cycle-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0142-linked-list-cycle-ii/#1","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): # If there is no cycle, return null. def detectCycle(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None: return None slow = head fast = head while fast: fast = fast.next if fast: fast = fast.next slow = slow.next else: return None if fast == slow: break # \u8d70\u5230\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u8981\u5224\u65ad if fast: # \u6b64\u65f6 fast == slow \u4e3a True point = head while slow != point: slow = slow.next point = point.next return point else: return None \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0142-linked-list-cycle-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541\uff1a"},{"location":"leetcode-0144-binary-tree-preorder-traversal/","text":"144. Binary Tree Preorder Traversal \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u524d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,2,3] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 144. Binary Tree Preorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0144-binary-tree-preorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"144. Binary Tree Preorder Traversal"},{"location":"leetcode-0144-binary-tree-preorder-traversal/#144-binary-tree-preorder-traversal","text":"","title":"144. Binary Tree Preorder Traversal"},{"location":"leetcode-0144-binary-tree-preorder-traversal/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u524d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,2,3] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 144. Binary Tree Preorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0144-binary-tree-preorder-traversal/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0144-binary-tree-preorder-traversal/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0144-binary-tree-preorder-traversal/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0144-binary-tree-preorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0145-binary-tree-postorder-traversal/","text":"145. Binary Tree Postorder Traversal \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u540e\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [3,2,1] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 145. Binary Tree Postorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\u5176\u5b9e\u662f\u4e2a\u5957\u8def\uff0c\u4e09\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u5b8c\u6210\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u9012\u5f52\u5199\u6cd5 public class Solution2 { private List<Integer> result = new ArrayList<>(); /** * \u9012\u5f52\u7684\u65b9\u5f0f\u540e\u7eed\u904d\u5386\u4e8c\u53c9\u6811 * @param root * @return */ public List<Integer> postorderTraversal(TreeNode root) { postorder(root); return result; } private void postorder(TreeNode root) { if(root!=null){ postorder(root.left); postorder(root.right); result.add(root.val); } } } \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b542\uff1a\u975e\u9012\u5f52\u5199\u6cd5 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } enum UseType { RECURSION, ADD } class Command { UseType useType; TreeNode treeNode; public Command(UseType useType, TreeNode treeNode) { this.useType = useType; this.treeNode = treeNode; } } public class Solution { public List<Integer> postorderTraversal(TreeNode root) { List<Integer> result =new ArrayList<>(); if(root==null){ return result; } Stack<Command> stack = new Stack<>(); stack.add(new Command(UseType.RECURSION,root)); while (!stack.isEmpty()){ Command command = stack.pop(); if(UseType.ADD == command.useType){ result.add(command.treeNode.val); }else { assert UseType.RECURSION == command.useType; stack.push(new Command(UseType.ADD,command.treeNode)); if(command.treeNode.right!=null){ stack.push(new Command(UseType.RECURSION,command.treeNode.right)); } if(command.treeNode.left!=null){ stack.push(new Command(UseType.RECURSION,command.treeNode.left)); } } } return result; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0145-binary-tree-postorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"145. Binary Tree Postorder Traversal"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#145-binary-tree-postorder-traversal","text":"","title":"145. Binary Tree Postorder Traversal"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u540e\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [3,2,1] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 145. Binary Tree Postorder Traversal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u975e\u9012\u5f52\u7684\u5199\u6cd5\u5176\u5b9e\u662f\u4e2a\u5957\u8def\uff0c\u4e09\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u5b8c\u6210\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#1","text":"public class Solution2 { private List<Integer> result = new ArrayList<>(); /** * \u9012\u5f52\u7684\u65b9\u5f0f\u540e\u7eed\u904d\u5386\u4e8c\u53c9\u6811 * @param root * @return */ public List<Integer> postorderTraversal(TreeNode root) { postorder(root); return result; } private void postorder(TreeNode root) { if(root!=null){ postorder(root.left); postorder(root.right); result.add(root.val); } } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u9012\u5f52\u5199\u6cd5"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#_4","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0145-binary-tree-postorder-traversal/#2","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } enum UseType { RECURSION, ADD } class Command { UseType useType; TreeNode treeNode; public Command(UseType useType, TreeNode treeNode) { this.useType = useType; this.treeNode = treeNode; } } public class Solution { public List<Integer> postorderTraversal(TreeNode root) { List<Integer> result =new ArrayList<>(); if(root==null){ return result; } Stack<Command> stack = new Stack<>(); stack.add(new Command(UseType.RECURSION,root)); while (!stack.isEmpty()){ Command command = stack.pop(); if(UseType.ADD == command.useType){ result.add(command.treeNode.val); }else { assert UseType.RECURSION == command.useType; stack.push(new Command(UseType.ADD,command.treeNode)); if(command.treeNode.right!=null){ stack.push(new Command(UseType.RECURSION,command.treeNode.right)); } if(command.treeNode.left!=null){ stack.push(new Command(UseType.RECURSION,command.treeNode.left)); } } } return result; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0145-binary-tree-postorder-traversal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u975e\u9012\u5f52\u5199\u6cd5"},{"location":"leetcode-0146-lru-cache/","text":"146. LRU Cache \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236 \u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e get \u548c \u5199\u5165\u6570\u636e put \u3002 \u83b7\u53d6\u6570\u636e get(key) - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u5199\u5165\u6570\u636e put(key, value) - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002 \u8fdb\u9636: \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f \u793a\u4f8b: LRUCache cache = new LRUCache( 2 /* \u7f13\u5b58\u5bb9\u91cf */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.put(4, 4); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 146. LRU Cache \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 146. LRU\u7f13\u5b58\u673a\u5236 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashMap; import java.util.LinkedHashMap; /** * https://leetcode-cn.com/problems/lru-cache/description/ */ public class LRUCache { /** * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b */ private class ListNode { // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684 // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83 private int key; private int val; private ListNode preV; private ListNode next; public ListNode(int key, int val) { this.key = key; this.val = val; } } private HashMap<Integer, ListNode> map; private int capacity; private int size; private ListNode head; private ListNode tail; public LRUCache(int capacity) { this.size = 0; this.capacity = capacity; // \u6211\u4eec\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5148\u6dfb\u52a0\u518d\u5220\u9664\u7684\u7b56\u7565\uff0c\u6240\u4ee5\u591a\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e this.map = new LinkedHashMap<>(capacity + 1); this.head = null; this.tail = null; } // public int get(int key) { if (!map.containsKey(key)) { return -1; } // map \u4e2d\u6709\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7f13\u5b58\u4e2d\u6709\u6570\u636e\uff0c\u4ece ListNode \u4e2d\u62ff\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934 ListNode retNode = map.get(key); int retVal = retNode.val; // \u79fb\u52a8\u5230\u5934 moveToHead(retNode); return retVal; } /** * \u628a\u5f53\u524d\u7ed3\u70b9\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8 * * @param retNode */ private void moveToHead(ListNode retNode) { // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c if (head == retNode || retNode == null) { return; } // \u5904\u7406\u5c3e\u6307\u9488\uff0cretNode \u7684\u524d\u6307\u9488\u548c\u540e\u6307\u9488\u7edf\u4e00\u5904\u7406 if (retNode == tail) { tail = tail.preV; if (tail != null) { tail.next = null; } } if (retNode.preV != null) { retNode.preV.next = retNode.next; } if (retNode.next != null) { retNode.next.preV = retNode.preV; } retNode.next = head; retNode.preV = null; if (head != null) { head.preV = retNode; } head = retNode; } /** * \u672b\u5c3e\u7ed3\u70b9\u91ca\u653e\uff0ctail \u6307\u9488\u524d\u79fb */ private void removeLast() { // \u6839\u636e\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0chead \u548c tail \u8981\u4e48\u90fd\u975e\u7a7a\uff0c\u8981\u4e48\u90fd\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5 // head == null || tail == null \u5305\u62ec\u4e86\u4ed6\u4eec\u540c\u65f6\u4e3a null \u7684\u60c5\u51b5 if (head == null || tail == null) { // throw new IllegalArgumentException(\"\u5f53\u524d\u53cc\u5411\u94fe\u8868\u4e3a null\uff0c\u4e0d\u80fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\"); return; } // \u5982\u679c\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48 head \u548c tail \u90fd\u7f6e\u4e3a null \uff0c\u5373\u6e05\u7a7a\u4e86\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868 if (head == tail) { head = null; tail = null; return; } // \u6b64\u65f6\u53cc\u5411\u94fe\u8868\u975e\u7a7a\uff0c\u5e76\u4e14 head \u548c tail \u4e0d\u91cd\u5408 // \u53ea\u8981\u628a tail \u5411\u524d\u79fb\u52a8\uff0c\u5373\u53ef ListNode removeNode = tail; tail = tail.preV; tail.next = null; removeNode.preV = null; removeNode.next = null; } /** * \u628a\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 * * @param newNode */ private void addFirst(ListNode newNode) { if (newNode == null) { return; } newNode.next = head; newNode.preV = null; if (head != null) { head.preV = newNode; } head = newNode; // \u8003\u8651\u4e00\u4e0b\u5c3e\u7ed3\u70b9\uff08\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\u6389\u8fd9\u4e2a\u60c5\u51b5\uff09 // \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\uff0c\u5373\u4e00\u5f00\u59cb\u7684\u60c5\u51b5\uff0ctail == null \u7684\u65f6\u5019\uff0ctail \u4e5f\u8981\u8d4b\u503c if (tail == null) { tail = newNode; } } public void put(int key, int value) { // \u5982\u679c map \u4e2d\u6709 // \u76f4\u63a5\u62ff\u51fa\u6765\uff0c\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 value\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934 if (map.containsKey(key)) { // \u8868\u793a\u51fb\u4e2d\u7f13\u5b58 ListNode curNode = map.get(key); curNode.val = value; moveToHead(curNode); return; } // \u5982\u679c map \u4e2d\u6ca1\u6709 // \u60c5\u51b51\uff1asize = capacaity\uff0cmap \u4e2d\u79fb\u9664\u672b\u5c3e\u7ed3\u70b9\uff0cListNode \u628a tail \u79fb\u9664\uff0c\u5e76\u4e14\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 ListNode newNode = new ListNode(key, value); map.put(key, newNode); if (size == capacity) { // \u79fb\u9664 Map \u4e2d\u7684\u672b\u5c3e\u7ed3\u70b9\u5bf9\u5e94\u7684 key-value \u5bf9 int removeKey = tail.key; map.remove(removeKey); removeLast(); } else { // \u60c5\u51b52\uff1asize < capacaity\uff0csize++\uff0cmap \u4e2d\u6dfb\u52a0\uff0c\u628a\u65b0\u7ed3\u70b9\u52a0\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 assert size < capacity; // \u628a\u4e00\u4e2a\u65b0\u7ed3\u70b9\u6dfb\u52a0\u5728\u94fe\u8868\u7684\u5f00\u5934 size++; } addFirst(newNode); } // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700 // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868 // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49 public void printListNode() { System.out.println(\"map:\" + map.keySet()); System.out.println(\"head:\" + head.key); System.out.println(\"tail:\" + tail.key); StringBuilder stringBuilder = new StringBuilder(); ListNode curNode = head; stringBuilder.append(\"NULL\"); stringBuilder.append(\" <-> \"); while (curNode != null) { stringBuilder.append(\"(\"); stringBuilder.append(curNode.key); stringBuilder.append(\",\"); stringBuilder.append(curNode.val); stringBuilder.append(\")\"); stringBuilder.append(\" <-> \"); curNode = curNode.next; } stringBuilder.append(\"NULL\"); System.out.println(stringBuilder.toString()); System.out.println(); } public static void main(String[] args) { // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2 int capacity = 2; LRUCache lruCache = new LRUCache(capacity); lruCache.put(1, 100); lruCache.printListNode(); lruCache.put(2, 200); lruCache.printListNode(); int value1 = lruCache.get(1); System.out.println(value1); lruCache.printListNode(); lruCache.put(3, 300); lruCache.printListNode(); int value2 = lruCache.get(2); System.out.println(value2); lruCache.printListNode(); lruCache.put(4, 400); lruCache.printListNode(); } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,value); */ \u53c2\u8003\u89e3\u7b542 import java.util.HashMap; import java.util.LinkedHashMap; /** * https://leetcode-cn.com/problems/lru-cache/description/ * \u53c2\u8003\u8d44\u6599\uff1ahttps://leetcode.com/problems/lru-cache/discuss/145937/100-Java-solution-with-doubly-linked-list-and-HashTable */ public class LRUCache2 { /** * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b */ private class ListNode { // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684 // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83 private int key; private int val; private ListNode prev; private ListNode next; public ListNode(int key, int val) { this.key = key; this.val = val; } } private HashMap<Integer, ListNode> map; private int capacity; private ListNode head; private ListNode tail; public LRUCache2(int capacity) { this.capacity = capacity; map = new LinkedHashMap<>(capacity); this.head = null; this.tail = null; } public int get(int key) { if (!this.map.containsKey(key)) { return -1; } ListNode curr = this.map.get(key); if (curr == head) { return curr.val; } // \u5982\u679c\u4e0d\u662f\u5934\u7ed3\u70b9\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u5934\u7ed3\u70b9 moveToHead(curr); return curr.val; } private void moveToHead(ListNode retNode) { // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c if (retNode == head || retNode == null) { return; } // \u4e0b\u9762\u8fd9\u4e24\u4e2a if \u4ee3\u7801\u5f88\u5de5\u6574\uff0c\u601d\u8def\u4e5f\u975e\u5e38\u6b63\u786e // \u53ea\u6709\u5bf9\u975e\u7a7a\u7ed3\u70b9\u624d\u80fd\u8fdb\u884c\u5c5e\u6027\u7684\u64cd\u4f5c if (retNode.prev != null) { retNode.prev.next = retNode.next; } if (retNode.next != null) { retNode.next.prev = retNode.prev; } // \u4e0a\u9762\u5206\u522b\u6539\u53d8\u4e86\u524d\u540e\u7ed3\u70b9\u7684 next \u548c prev \u6307\u5411 // \u5bf9 retNode \u6ca1\u6709\u6539\u53d8 // \u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4f4d if (retNode == tail) { tail = retNode.prev; } // \u63a5\u4e0b\u6765\u628a retNode \u79fb\u52a8\u5230\u5f53\u524d\u7684 head \u7ed3\u70b9\u4e4b\u524d retNode.prev = null; if (head != null) { retNode.next = head; head.prev = retNode; } head = retNode; } /** * \u79fb\u9664\u5c3e\u7ed3\u70b9 */ private void evict() { if (tail == null) { return; } ListNode evictedNode = tail; // \u6539\u53d8 tail \u6307\u9488 tail = evictedNode.prev; // \u622a\u65ad\u5f15\u7528 evictedNode.prev = null; // \u5bf9\u7ed3\u70b9\u7684\u64cd\u4f5c\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a if (tail != null) { tail.next = null; } // \u53ea\u5269\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0chead \u7f6e\u7a7a if (evictedNode == head) { head = null; } this.map.remove(evictedNode.key); } /** * \u6ce8\u610f\u4ee3\u7801\u4e2d\u5bf9\u7ed3\u70b9\u5c5e\u6027\u7684\u4f7f\u7528\u90fd\u4f1a\u52a0\u4e0a\u975e\u7a7a\u7684\u5224\u65ad * * @param node */ private void addNodeToHead(ListNode node) { if (node == null) { return; } node.next = head; if (head != null) { head.prev = node; } node.prev = null; head = node; if (tail == null) { tail = node; } } public void put(int key, int value) { ListNode curr; if (this.map.containsKey(key)) { curr = this.map.get(key); curr.val = value; moveToHead(curr); return; } curr = new ListNode(key, value); if (this.map.size() == this.capacity) { // \u5982\u679c\u6ee1\u4e86\uff0c\u5148\u628a\u6700\u540e\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ee5\u53ca\u5728 map \u4e2d\u5bf9\u5e94\u7684 k-v \u5bf9\u79fb\u9664\u6389 evict(); } addNodeToHead(curr); this.map.put(key, curr); } // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700 // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868 // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49 public void printListNode() { System.out.println(\"map:\" + map.keySet()); System.out.println(\"head:\" + head.key); System.out.println(\"tail:\" + tail.key); StringBuilder stringBuilder = new StringBuilder(); ListNode curNode = head; stringBuilder.append(\"NULL\"); stringBuilder.append(\" <-> \"); while (curNode != null) { stringBuilder.append(\"(\"); stringBuilder.append(curNode.key); stringBuilder.append(\",\"); stringBuilder.append(curNode.val); stringBuilder.append(\")\"); stringBuilder.append(\" <-> \"); curNode = curNode.next; } stringBuilder.append(\"NULL\"); System.out.println(stringBuilder.toString()); System.out.println(); } public static void main(String[] args) { // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2 int capacity = 2; LRUCache2 lruCache = new LRUCache2(capacity); lruCache.put(1, 100); lruCache.printListNode(); lruCache.put(2, 200); lruCache.printListNode(); int value1 = lruCache.get(1); System.out.println(value1); lruCache.printListNode(); lruCache.put(3, 300); lruCache.printListNode(); int value2 = lruCache.get(2); System.out.println(value2); lruCache.printListNode(); lruCache.put(4, 400); lruCache.printListNode(); } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,val); */ \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0146-lru-cache \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"146. LRU Cache"},{"location":"leetcode-0146-lru-cache/#146-lru-cache","text":"","title":"146. LRU Cache"},{"location":"leetcode-0146-lru-cache/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236 \u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e get \u548c \u5199\u5165\u6570\u636e put \u3002 \u83b7\u53d6\u6570\u636e get(key) - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u5199\u5165\u6570\u636e put(key, value) - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002 \u8fdb\u9636: \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f \u793a\u4f8b: LRUCache cache = new LRUCache( 2 /* \u7f13\u5b58\u5bb9\u91cf */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.put(4, 4); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 146. LRU Cache \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 146. LRU\u7f13\u5b58\u673a\u5236 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0146-lru-cache/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0146-lru-cache/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0146-lru-cache/#1","text":"import java.util.HashMap; import java.util.LinkedHashMap; /** * https://leetcode-cn.com/problems/lru-cache/description/ */ public class LRUCache { /** * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b */ private class ListNode { // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684 // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83 private int key; private int val; private ListNode preV; private ListNode next; public ListNode(int key, int val) { this.key = key; this.val = val; } } private HashMap<Integer, ListNode> map; private int capacity; private int size; private ListNode head; private ListNode tail; public LRUCache(int capacity) { this.size = 0; this.capacity = capacity; // \u6211\u4eec\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5148\u6dfb\u52a0\u518d\u5220\u9664\u7684\u7b56\u7565\uff0c\u6240\u4ee5\u591a\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e this.map = new LinkedHashMap<>(capacity + 1); this.head = null; this.tail = null; } // public int get(int key) { if (!map.containsKey(key)) { return -1; } // map \u4e2d\u6709\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7f13\u5b58\u4e2d\u6709\u6570\u636e\uff0c\u4ece ListNode \u4e2d\u62ff\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934 ListNode retNode = map.get(key); int retVal = retNode.val; // \u79fb\u52a8\u5230\u5934 moveToHead(retNode); return retVal; } /** * \u628a\u5f53\u524d\u7ed3\u70b9\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8 * * @param retNode */ private void moveToHead(ListNode retNode) { // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c if (head == retNode || retNode == null) { return; } // \u5904\u7406\u5c3e\u6307\u9488\uff0cretNode \u7684\u524d\u6307\u9488\u548c\u540e\u6307\u9488\u7edf\u4e00\u5904\u7406 if (retNode == tail) { tail = tail.preV; if (tail != null) { tail.next = null; } } if (retNode.preV != null) { retNode.preV.next = retNode.next; } if (retNode.next != null) { retNode.next.preV = retNode.preV; } retNode.next = head; retNode.preV = null; if (head != null) { head.preV = retNode; } head = retNode; } /** * \u672b\u5c3e\u7ed3\u70b9\u91ca\u653e\uff0ctail \u6307\u9488\u524d\u79fb */ private void removeLast() { // \u6839\u636e\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0chead \u548c tail \u8981\u4e48\u90fd\u975e\u7a7a\uff0c\u8981\u4e48\u90fd\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5 // head == null || tail == null \u5305\u62ec\u4e86\u4ed6\u4eec\u540c\u65f6\u4e3a null \u7684\u60c5\u51b5 if (head == null || tail == null) { // throw new IllegalArgumentException(\"\u5f53\u524d\u53cc\u5411\u94fe\u8868\u4e3a null\uff0c\u4e0d\u80fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\"); return; } // \u5982\u679c\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48 head \u548c tail \u90fd\u7f6e\u4e3a null \uff0c\u5373\u6e05\u7a7a\u4e86\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868 if (head == tail) { head = null; tail = null; return; } // \u6b64\u65f6\u53cc\u5411\u94fe\u8868\u975e\u7a7a\uff0c\u5e76\u4e14 head \u548c tail \u4e0d\u91cd\u5408 // \u53ea\u8981\u628a tail \u5411\u524d\u79fb\u52a8\uff0c\u5373\u53ef ListNode removeNode = tail; tail = tail.preV; tail.next = null; removeNode.preV = null; removeNode.next = null; } /** * \u628a\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 * * @param newNode */ private void addFirst(ListNode newNode) { if (newNode == null) { return; } newNode.next = head; newNode.preV = null; if (head != null) { head.preV = newNode; } head = newNode; // \u8003\u8651\u4e00\u4e0b\u5c3e\u7ed3\u70b9\uff08\u6bd4\u8f83\u5bb9\u6613\u5ffd\u7565\u6389\u8fd9\u4e2a\u60c5\u51b5\uff09 // \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\uff0c\u5373\u4e00\u5f00\u59cb\u7684\u60c5\u51b5\uff0ctail == null \u7684\u65f6\u5019\uff0ctail \u4e5f\u8981\u8d4b\u503c if (tail == null) { tail = newNode; } } public void put(int key, int value) { // \u5982\u679c map \u4e2d\u6709 // \u76f4\u63a5\u62ff\u51fa\u6765\uff0c\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 value\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934 if (map.containsKey(key)) { // \u8868\u793a\u51fb\u4e2d\u7f13\u5b58 ListNode curNode = map.get(key); curNode.val = value; moveToHead(curNode); return; } // \u5982\u679c map \u4e2d\u6ca1\u6709 // \u60c5\u51b51\uff1asize = capacaity\uff0cmap \u4e2d\u79fb\u9664\u672b\u5c3e\u7ed3\u70b9\uff0cListNode \u628a tail \u79fb\u9664\uff0c\u5e76\u4e14\u65b0\u7ed3\u70b9\u653e\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 ListNode newNode = new ListNode(key, value); map.put(key, newNode); if (size == capacity) { // \u79fb\u9664 Map \u4e2d\u7684\u672b\u5c3e\u7ed3\u70b9\u5bf9\u5e94\u7684 key-value \u5bf9 int removeKey = tail.key; map.remove(removeKey); removeLast(); } else { // \u60c5\u51b52\uff1asize < capacaity\uff0csize++\uff0cmap \u4e2d\u6dfb\u52a0\uff0c\u628a\u65b0\u7ed3\u70b9\u52a0\u5728\u53cc\u5411\u94fe\u8868\u7684\u5f00\u5934 assert size < capacity; // \u628a\u4e00\u4e2a\u65b0\u7ed3\u70b9\u6dfb\u52a0\u5728\u94fe\u8868\u7684\u5f00\u5934 size++; } addFirst(newNode); } // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700 // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868 // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49 public void printListNode() { System.out.println(\"map:\" + map.keySet()); System.out.println(\"head:\" + head.key); System.out.println(\"tail:\" + tail.key); StringBuilder stringBuilder = new StringBuilder(); ListNode curNode = head; stringBuilder.append(\"NULL\"); stringBuilder.append(\" <-> \"); while (curNode != null) { stringBuilder.append(\"(\"); stringBuilder.append(curNode.key); stringBuilder.append(\",\"); stringBuilder.append(curNode.val); stringBuilder.append(\")\"); stringBuilder.append(\" <-> \"); curNode = curNode.next; } stringBuilder.append(\"NULL\"); System.out.println(stringBuilder.toString()); System.out.println(); } public static void main(String[] args) { // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2 int capacity = 2; LRUCache lruCache = new LRUCache(capacity); lruCache.put(1, 100); lruCache.printListNode(); lruCache.put(2, 200); lruCache.printListNode(); int value1 = lruCache.get(1); System.out.println(value1); lruCache.printListNode(); lruCache.put(3, 300); lruCache.printListNode(); int value2 = lruCache.get(2); System.out.println(value2); lruCache.printListNode(); lruCache.put(4, 400); lruCache.printListNode(); } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,value); */","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0146-lru-cache/#2","text":"import java.util.HashMap; import java.util.LinkedHashMap; /** * https://leetcode-cn.com/problems/lru-cache/description/ * \u53c2\u8003\u8d44\u6599\uff1ahttps://leetcode.com/problems/lru-cache/discuss/145937/100-Java-solution-with-doubly-linked-list-and-HashTable */ public class LRUCache2 { /** * \u5185\u90e8\u7c7b\uff0c\u53cc\u5411\u94fe\u8868\u7ed3\u70b9\u7c7b */ private class ListNode { // \u8fd9\u4e2a ListNode \u7684 key \u5c5e\u6027\u731b\u7684\u4e00\u770b\u53ef\u80fd\u662f\u591a\u4f59\u7684 // \u4f46\u662f\u6211\u4eec\u5728\u79fb\u9664 tail \u7ed3\u70b9\u5bf9\u5e94\u7684 Hash \u8868\u4e2d\u7684\u952e\u503c\u5bf9\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5b83 private int key; private int val; private ListNode prev; private ListNode next; public ListNode(int key, int val) { this.key = key; this.val = val; } } private HashMap<Integer, ListNode> map; private int capacity; private ListNode head; private ListNode tail; public LRUCache2(int capacity) { this.capacity = capacity; map = new LinkedHashMap<>(capacity); this.head = null; this.tail = null; } public int get(int key) { if (!this.map.containsKey(key)) { return -1; } ListNode curr = this.map.get(key); if (curr == head) { return curr.val; } // \u5982\u679c\u4e0d\u662f\u5934\u7ed3\u70b9\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u5934\u7ed3\u70b9 moveToHead(curr); return curr.val; } private void moveToHead(ListNode retNode) { // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8fd4\u56de\u503c\u6240\u5728\u7684\u7ed3\u70b9\u624d\u64cd\u4f5c if (retNode == head || retNode == null) { return; } // \u4e0b\u9762\u8fd9\u4e24\u4e2a if \u4ee3\u7801\u5f88\u5de5\u6574\uff0c\u601d\u8def\u4e5f\u975e\u5e38\u6b63\u786e // \u53ea\u6709\u5bf9\u975e\u7a7a\u7ed3\u70b9\u624d\u80fd\u8fdb\u884c\u5c5e\u6027\u7684\u64cd\u4f5c if (retNode.prev != null) { retNode.prev.next = retNode.next; } if (retNode.next != null) { retNode.next.prev = retNode.prev; } // \u4e0a\u9762\u5206\u522b\u6539\u53d8\u4e86\u524d\u540e\u7ed3\u70b9\u7684 next \u548c prev \u6307\u5411 // \u5bf9 retNode \u6ca1\u6709\u6539\u53d8 // \u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4f4d if (retNode == tail) { tail = retNode.prev; } // \u63a5\u4e0b\u6765\u628a retNode \u79fb\u52a8\u5230\u5f53\u524d\u7684 head \u7ed3\u70b9\u4e4b\u524d retNode.prev = null; if (head != null) { retNode.next = head; head.prev = retNode; } head = retNode; } /** * \u79fb\u9664\u5c3e\u7ed3\u70b9 */ private void evict() { if (tail == null) { return; } ListNode evictedNode = tail; // \u6539\u53d8 tail \u6307\u9488 tail = evictedNode.prev; // \u622a\u65ad\u5f15\u7528 evictedNode.prev = null; // \u5bf9\u7ed3\u70b9\u7684\u64cd\u4f5c\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a if (tail != null) { tail.next = null; } // \u53ea\u5269\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0chead \u7f6e\u7a7a if (evictedNode == head) { head = null; } this.map.remove(evictedNode.key); } /** * \u6ce8\u610f\u4ee3\u7801\u4e2d\u5bf9\u7ed3\u70b9\u5c5e\u6027\u7684\u4f7f\u7528\u90fd\u4f1a\u52a0\u4e0a\u975e\u7a7a\u7684\u5224\u65ad * * @param node */ private void addNodeToHead(ListNode node) { if (node == null) { return; } node.next = head; if (head != null) { head.prev = node; } node.prev = null; head = node; if (tail == null) { tail = node; } } public void put(int key, int value) { ListNode curr; if (this.map.containsKey(key)) { curr = this.map.get(key); curr.val = value; moveToHead(curr); return; } curr = new ListNode(key, value); if (this.map.size() == this.capacity) { // \u5982\u679c\u6ee1\u4e86\uff0c\u5148\u628a\u6700\u540e\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ee5\u53ca\u5728 map \u4e2d\u5bf9\u5e94\u7684 k-v \u5bf9\u79fb\u9664\u6389 evict(); } addNodeToHead(curr); this.map.put(key, curr); } // \u8c03\u8bd5\u4f7f\u7528\uff0c\u975e\u5fc5\u9700 // \u53ea\u9002\u7528\u53bb\u4f20\u5165\u53cc\u5411\u94fe\u8868\u7684 head \u7ed3\u70b9\uff0c\u6253\u5370\u51fa\u53cc\u5411\u94fe\u8868 // \u5982\u679c\u4f20\u5165\u975e head \u7ed3\u70b9\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6ca1\u6709\u610f\u4e49 public void printListNode() { System.out.println(\"map:\" + map.keySet()); System.out.println(\"head:\" + head.key); System.out.println(\"tail:\" + tail.key); StringBuilder stringBuilder = new StringBuilder(); ListNode curNode = head; stringBuilder.append(\"NULL\"); stringBuilder.append(\" <-> \"); while (curNode != null) { stringBuilder.append(\"(\"); stringBuilder.append(curNode.key); stringBuilder.append(\",\"); stringBuilder.append(curNode.val); stringBuilder.append(\")\"); stringBuilder.append(\" <-> \"); curNode = curNode.next; } stringBuilder.append(\"NULL\"); System.out.println(stringBuilder.toString()); System.out.println(); } public static void main(String[] args) { // \u7f13\u5b58\u5bb9\u91cf\u4e3a 2 int capacity = 2; LRUCache2 lruCache = new LRUCache2(capacity); lruCache.put(1, 100); lruCache.printListNode(); lruCache.put(2, 200); lruCache.printListNode(); int value1 = lruCache.get(1); System.out.println(value1); lruCache.printListNode(); lruCache.put(3, 300); lruCache.printListNode(); int value2 = lruCache.get(2); System.out.println(value2); lruCache.printListNode(); lruCache.put(4, 400); lruCache.printListNode(); } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,val); */ \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0146-lru-cache \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0147-insertion-sort-list/","text":"147. Insertion Sort List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002 \u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002 \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a \u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002 \u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002 \u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2\uff1a \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 147. Insertion Sort List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002 1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b 2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b 3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b 4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode insertionSortList(ListNode head) { // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5 if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = head; ListNode pre; ListNode next; while (true) { // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86 // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9 while (curNode.next != null && curNode.val <= curNode.next.val) { curNode = curNode.next; } // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406 if (curNode.next == null) { // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86 break; } else { // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f // pre \u6253\u56de\u5230\u8d77\u70b9 pre = dummyNode; next = curNode.next; // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e while (pre.next.val < next.val) { pre = pre.next; } // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1 curNode.next = next.next; // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2 next.next = pre.next; // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2 pre.next = next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{3, 7, 9, 10, 8}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode insertionSortList = solution.insertionSortList(head); System.out.println(insertionSortList); } }","title":"147. Insertion Sort List"},{"location":"leetcode-0147-insertion-sort-list/#147-insertion-sort-list","text":"","title":"147. Insertion Sort List"},{"location":"leetcode-0147-insertion-sort-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002 \u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002 \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a \u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002 \u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002 \u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2\uff1a \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 147. Insertion Sort List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0147-insertion-sort-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u9898\u610f\u6211\u4eec\u611f\u89c9\u6709\u90a3\u4e48\u4e9b\u8bef\u5bfc\u6211\u4eec\u7684\u610f\u601d\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4ece\u5934\u5f00\u59cb\u627e\u7ed3\u70b9\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4f46\u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u53c8\u4e0d\u50cf\u63d2\u5165\u6392\u5e8f\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8981\u592a\u6b7b\u677f\uff0c\u4e0d\u8981\u6015\u9ebb\u70e6\u6211\u89c9\u5f97\u662f\u89e3\u8fd9\u9053\u95ee\u9898\u7684\u5173\u952e\uff08\u8fd9\u53e5\u8bdd\u611f\u89c9\u8ddf\u6ca1\u8bf4\u4e00\u4e2a\u6837\uff0c^_^\uff09\u3002 1. \u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4f1a\u5c06\u904d\u5386\u5230\u7684\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u5e8f\u7684\u90e8\u5206\uff1b 2. \u719f\u6089\u63d2\u5165\u6392\u5e8f\u7684\u670b\u53cb\u4eec\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u63d2\u5165\u8fc7\u7a0b\u662f\u4ece\u540e\u5411\u524d\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u4fdd\u5b58\u4e86\u5f53\u524d\u7ed3\u70b9\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u6ca1\u6709\u4fdd\u5b58\u4ece\u5f53\u524d\u7ed3\u70b9\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 pre \u6307\u9488\uff1b 3. \u6211\u4eec\u5c31\u8981\u53d8\u6362\u601d\u8def\u4e86\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u627e\u5230\u65b0\u904d\u5386\u7684\u8282\u70b9\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fdb\u884c\u7a7f\u9488\u5f15\u7ebf\uff1b 4. \u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7b2c 1 \u4e2a\u5143\u7d20\uff0c\u6d89\u53ca\u5230\u5934\u7ed3\u70b9\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f80\u5f80\u662f\u8bbe\u8ba1\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u4ee5\u7b80\u5316\u7f16\u7801\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u60f3\u6e05\u695a\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u96be\u4e8b\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0147-insertion-sort-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0147-insertion-sort-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode insertionSortList(ListNode head) { // \u5148\u5199\u6700\u7279\u6b8a\u7684\u60c5\u51b5 if (head == null) { return null; } ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode curNode = head; ListNode pre; ListNode next; while (true) { // \u5982\u679c\u904d\u5386\u4e0b\u53bb\uff0c\u662f\u987a\u5e8f\u6392\u5217\u7684\u8bdd\uff0c\u90a3\u6700\u7b80\u5355\u4e86\uff0ccurNode \u6307\u9488\u5411\u524d\u5c31\u884c\u4e86 // \u8fd9\u4e00\u6b65\u662f\u4e00\u4e2a\u5faa\u73af\u7684\u8fc7\u7a0b // \u6682\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9 while (curNode.next != null && curNode.val <= curNode.next.val) { curNode = curNode.next; } // \u4e0b\u9762\u9488\u5bf9\u4e0a\u4e00\u6b65\u8df3\u51fa\u5faa\u73af\u7684\u4e24\u4e2a\u6761\u4ef6\u8fdb\u884c\u7279\u6b8a\u5904\u7406 if (curNode.next == null) { // \u5982\u679c\u540e\u9762\u6ca1\u6709\u5143\u7d20\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u53ef\u4ee5\u7ed3\u675f\u6211\u4eec\u7684\u6392\u5e8f\u903b\u8f91\u4e86 break; } else { // \u5426\u5219\u5c31\u4e00\u5b9a\u6ee1\u8db3 curNode.val > curNode.next.val; \u4e3a\u771f // pre \u6253\u56de\u5230\u8d77\u70b9 pre = dummyNode; next = curNode.next; // \u628a pre \u632a\u5230\u53ef\u4ee5\u653e\u7f6e next \u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e while (pre.next.val < next.val) { pre = pre.next; } // \u7a7f\u9488\u5f15\u7ebf\u7684 3 \u4e2a\u6b65\u9aa4\uff0c\u8bf7\u89c1\u56fe https://liweiwei1419.github.io/images/leetcode-solution/147-1.jpg // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 1 curNode.next = next.next; // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2 next.next = pre.next; // \u7a7f\u9488\u5f15\u7ebf\u6b65\u9aa4 2 pre.next = next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = new int[]{3, 7, 9, 10, 8}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode insertionSortList = solution.insertionSortList(head); System.out.println(insertionSortList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0148-sort-list/","text":"148. Sort List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5728 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2: \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 148. Sort List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 148. \u6392\u5e8f\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002 \u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09 \u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002 \u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09 \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(int[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode sortList(ListNode head) { // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de if (head == null || head.next == null) { return head; } // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9 ListNode fast = head; ListNode slow = head; // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5 while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00 ListNode midNext = slow.next; // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868 slow.next = null; ListNode listNodeLeft = sortList(head); ListNode listNodeRight = sortList(midNext); // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86 return mergeOfTwoSortListNode(listNodeLeft, listNodeRight); } private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) { if (l1 == null) { return l2; } if (l2 == null) { return l1; } if (l1.val < l2.val) { l1.next = mergeOfTwoSortListNode(l1.next, l2); return l1; } else { l2.next = mergeOfTwoSortListNode(l1, l2.next); return l2; } } public static void main(String[] args) { int[] nums = new int[]{4, 2, 1, 3}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode sortList = solution.sortList(head); System.out.println(sortList); } } \u53c2\u8003\u89e3\u7b542 /** * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76 * * @author liwei */ public class Solution2 { public ListNode sortList(ListNode head) { if (head == null || head.next == null) { return head; } // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f ListNode[] counter = new ListNode[64]; ListNode curNode = head; // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15 int maxIndex = 0; while (curNode != null) { // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a ListNode carryNode = curNode; // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406 curNode = curNode.next; // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb carryNode.next = null; // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e int i = 0; // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76 // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d while (counter[i] != null) { ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]); counter[i] = null; i++; carryNode = newMergeNode; } // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a counter[i] = carryNode; // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a if (i > maxIndex) { maxIndex = i; } } // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76 // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65 // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/ ListNode res = null; for (int i = 0; i <= maxIndex; i++) { if (counter[i] != null) { res = mergeOfTwoSortedListNode(res, counter[i]); } } return res; } /** * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210 * * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681 * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682 * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868 */ private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) { if (l1 == null) { return l2; } if (l2 == null) { return l1; } if (l1.val < l2.val) { l1.next = mergeOfTwoSortedListNode(l1.next, l2); return l1; } else { l2.next = mergeOfTwoSortedListNode(l1, l2.next); return l2; } } } \u53c2\u8003\u8d44\u6599\uff1a 1. http://www.cnblogs.com/bin3/articles/1858691.html 2. https://blog.csdn.net/qq575787460/article/details/40706747 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"148. Sort List"},{"location":"leetcode-0148-sort-list/#148-sort-list","text":"","title":"148. Sort List"},{"location":"leetcode-0148-sort-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5728 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2: \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 148. Sort List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 148. \u6392\u5e8f\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0148-sort-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u5df2\u7ecf\u63d0\u793a\u4e86\uff0c\u8981\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u5b8c\u6210\u5355\u94fe\u8868\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e00\u4e2a\u5f88\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5f52\u5e76\u6392\u5e8f\u6709\u81ea\u4e0a\u800c\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u662f\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5c0f\u7684\u8fc7\u7a0b\uff0c\u800c\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u5f85\u5f52\u5e76\u7684\u5b50\u6570\u7ec4\u8d8a\u6765\u8d8a\u5927\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u601d\u8def\u3002 \u601d\u8def1\uff1a\u81ea\u4e0a\u800c\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b541\uff09 \u8981\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u8981\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u5b9d\u8d35\u7684\u7ecf\u9a8c\u5c31\u662f\uff1a\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u94fe\u8868\u7684\u7ed3\u5c3e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6709\u6548\u7ed3\u70b9\u65f6\uff0c\u6162\u6307\u9488\u5c31\u6307\u5411\u4e86\u4e2d\u95f4\u7684\u8282\u70b9\u3002 \u601d\u8def2\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\uff08\u5bf9\u5e94\u53c2\u8003\u89e3\u7b542\uff09 \u4e0b\u9762\u7684\u56fe\u5c55\u793a\u4e86\u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5355\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0148-sort-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0148-sort-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(int[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode sortList(ListNode head) { // \u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u5373\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u4e0d\u7528\u627e\u4e2d\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de if (head == null || head.next == null) { return head; } // \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3001\u5206\u6cbb\u601d\u60f3\uff0c\u5148\u8981\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9 ListNode fast = head; ListNode slow = head; // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e00\u822c\u505a\u6cd5 while (fast.next != null && fast.next.next != null) { slow = slow.next; fast = fast.next.next; } // \u5b9a\u4e49\u4f4d\u4e8e\u4e2d\u95f4\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ece\u5b83\u90a3\u91cc\u5c06\u4e00\u4e2a\u94fe\u8868\u5207\u5f00 ListNode midNext = slow.next; // \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u4ece\u4e2d\u95f4\u5207\u5f00\uff0c\u5206\u5272\u6210\u4e24\u4e2a\u94fe\u8868 slow.next = null; ListNode listNodeLeft = sortList(head); ListNode listNodeRight = sortList(midNext); // \u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u8fd9\u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u64cd\u4f5c\u4e86 return mergeOfTwoSortListNode(listNodeLeft, listNodeRight); } private ListNode mergeOfTwoSortListNode(ListNode l1, ListNode l2) { if (l1 == null) { return l2; } if (l2 == null) { return l1; } if (l1.val < l2.val) { l1.next = mergeOfTwoSortListNode(l1.next, l2); return l1; } else { l2.next = mergeOfTwoSortListNode(l1, l2.next); return l2; } } public static void main(String[] args) { int[] nums = new int[]{4, 2, 1, 3}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode sortList = solution.sortList(head); System.out.println(sortList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0148-sort-list/#2","text":"/** * \u81ea\u4e0b\u800c\u4e0a\u8fdb\u884c\u5f52\u5e76 * * @author liwei */ public class Solution2 { public ListNode sortList(ListNode head) { if (head == null || head.next == null) { return head; } // \u8fd9\u91cc\u8bbe\u7f6e 64 \uff0c\u662f\u4e00\u4e2a\u6233\u6233\u6709\u4f59\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u7ed3\u70b9\u6570\u91cf\u4e3a 2^64 \u8fd9\u4e48\u591a\u7684\u5355\u94fe\u8868\u7684\u6392\u5e8f ListNode[] counter = new ListNode[64]; ListNode curNode = head; // \u904d\u5386\u5230\u7684\u6700\u5927\u7684 counter \u6570\u7ec4\u7684\u7d22\u5f15 int maxIndex = 0; while (curNode != null) { // \u5148\u628a\u5f53\u524d\u5143\u7d20\u6682\u5b58\u8d77\u6765\uff0c\u7a0d\u5019\u8981\u628a\u5b83\u653e\u5230 counter \u6570\u7ec4\u5408\u9002\u7684\u4f4d\u7f6e\u4e0a ListNode carryNode = curNode; // curNode \u6307\u9488\u9a6c\u4e0a\u540e\u79fb\uff0c\u65b9\u4fbf\u4e0b\u6b21\u5904\u7406 curNode = curNode.next; // \u62ff\u51fa\u7684\u8282\u70b9\u5c31\u548c\u539f\u6765\u7684\u94fe\u8868\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5728 counter \u6570\u7ec4\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u5207\u65ad\u5b83\u548c\u539f\u94fe\u8868\u7684\u5173\u7cfb carryNode.next = null; // \u5c1d\u8bd5\u4ece counter \u6570\u7ec4 0 \u53f7\u7d22\u5f15\u5f00\u59cb\u653e\u7f6e int i = 0; // \u53ea\u8981\u975e\u7a7a\u5f53\u524d\u4f4d\u7f6e\u975e\u7a7a\uff0c\u5c31\u8fdb\u884c\u4e00\u6b21 merge\uff0cmerge \u4ee5\u540e\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u5982\u679c\u4e0b\u4e00\u683c\u975e\u7a7a\u5c31\u7ee7\u7eed\u5408\u5e76 // \u5408\u5e76\u4ee5\u540e\u518d\u5c1d\u8bd5\u653e\u5230\u4e0b\u4e00\u683c\uff0c\u76f4\u5230\u4e0b\u4e00\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u653e\u5728\u90a3\u4e2a\u4e3a\u7a7a\u7684\u4e0b\u4e00\u683c\u5c31\u597d while (counter[i] != null) { ListNode newMergeNode = mergeOfTwoSortedListNode(carryNode, counter[i]); counter[i] = null; i++; carryNode = newMergeNode; } // \u9047\u5230\u4e86\u7a7a\uff0c\u5c31\u628a carryNode \u653e\u5728\u6570\u7ec4\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a counter[i] = carryNode; // \u8bb0\u5f55\u6700\u591a\u4f7f\u7528\u5230 counter \u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u7528\u4e0a if (i > maxIndex) { maxIndex = i; } } // \u904d\u5386\u6574\u4e2a count \u6570\u7ec4\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5f52\u5e76\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u548c\u5f52\u5e76 n \u4e2a\u6709\u5e8f\u5355\u94fe\u8868\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u4e24\u4e24\u5f52\u5e76 // \u8fd8\u53ef\u4ee5\u91c7\u7528 LeetCode \u7b2c 23 \u9898\u7684\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e00\u6b65 // \u53c2\u8003\uff1ahttps://liweiwei1419.github.io/leetcode-solution/leetcode-0023-merge-k-sorted-lists/ ListNode res = null; for (int i = 0; i <= maxIndex; i++) { if (counter[i] != null) { res = mergeOfTwoSortedListNode(res, counter[i]); } } return res; } /** * \u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u662f\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u64cd\u4f5c\u4e86\uff0c\u53ef\u4ee5\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u7a7f\u9488\u5f15\u7ebf\uff0c\u8fd9\u91cc\u6211\u4eec\u9012\u5f52\u5b8c\u6210 * * @param l1 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88681 * @param l2 \u987a\u5e8f\u5b58\u653e\u7684\u5355\u94fe\u88682 * @return \u5408\u5e76\u4ee5\u540e\u7684\u5355\u94fe\u8868 */ private ListNode mergeOfTwoSortedListNode(ListNode l1, ListNode l2) { if (l1 == null) { return l2; } if (l2 == null) { return l1; } if (l1.val < l2.val) { l1.next = mergeOfTwoSortedListNode(l1.next, l2); return l1; } else { l2.next = mergeOfTwoSortedListNode(l1, l2.next); return l2; } } } \u53c2\u8003\u8d44\u6599\uff1a 1. http://www.cnblogs.com/bin3/articles/1858691.html 2. https://blog.csdn.net/qq575787460/article/details/40706747 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0148-sort-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/","text":"153. Find Minimum in Rotated Sorted Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,4,5,1,2] \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: [4,5,6,7,0,1,2] \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 153. Find Minimum in Rotated Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u201d\u8fd9\u4e2a\u4fe1\u606f\u662f\u5173\u952e\u7684\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 public class Solution { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\"); } int left = 0; int right = len - 1; // \u601d\u8003\uff0c\u4e3a\u4ec0\u4e48\u662f left < right while (left < right) { // \u8fd9\u4e00\u6b65\u5c31\u662f\u53d6\u4e2d\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904 int mid = left + (right - left) / 2; // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] if (nums[mid] > nums[right]) { // 5 6 7 8 9 1 2 // \u6b64\u65f6\u53ef\u4ee5\u6254\u6389 mid \u7684\u503c left = mid + 1; } else { // 5 6 7 1 2 3 4 assert nums[mid] < nums[right]; // \u6b64\u65f6 mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15 right = mid; } } // \u9000\u51fa\u5faa\u73af\u8bf4\u660e left \u4e0e right \u76f8\u7b49\uff0c\u6240\u4ee5\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\uff0c // \u6240\u4ee5 return [left] \u6216\u8005 return [right] \u90fd\u53ef\u4ee5\u4e86 // \u6ce8\u610f\u4e0d\u80fd return mid\uff0c\u53ef\u4ee5\u4ece {2,1} \u8fd9\u4e2a\u8f93\u5165\u770b\u51fa\u6765\u3002 return nums[right]; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {4, 5, 6, 7, 0, 1, 2}; int min = solution.findMin(nums); System.out.println(min); } } \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3 /** * \u5206\u6cbb\u7684\u5199\u6cd5 */ public class Solution2 { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\"); } return findMin(nums, 0, len - 1); } private int findMin(int[] nums, int left, int right) { // \u601d\u8003\uff1a\u8fd9\u4e2a\u4e34\u754c\u6761\u4ef6\u662f\u4e3a\u4ec0\u4e48? // \u6216\u8005\u5199\u6210 left + 1 >= right if (left == right || left + 1 == right) { return Math.min(nums[left], nums[right]); } int mid = left + (right - left) / 2; // 8 9 1 2 3 4 5 6 7 if (nums[mid] < nums[right]) { // \u53f3\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 return Math.min(findMin(nums, left, mid - 1), nums[mid]); } else { // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 // nums[mid] > nums[right] // 3 4 5 6 7 8 1 2 return Math.min(nums[left], findMin(nums, mid + 1, right)); } } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int[] nums = {1, 2}; int solution2Min = solution2.findMin(nums); System.out.println(solution2Min); } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3 public class Solution3 { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u7ed9\u51fa\u7684\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6ca1\u6709\u6700\u5c0f\u503c\"); } return findMin(nums, 0, len - 1); } public int findMin(int[] nums, int left, int right) { // \u5206\u6cbb\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u8981\u5904\u7406\u8981\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6 if (left + 1 >= right) { return Math.min(nums[left], nums[right]); } if (nums[left] < nums[right]) { return nums[left]; } int mid = left + (right - left) / 2; return Math.min(findMin(nums, left, mid), findMin(nums, mid + 1, right)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0153-find-minimum-in-rotated-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"153. Find Minimum in Rotated Sorted Array"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#153-find-minimum-in-rotated-sorted-array","text":"","title":"153. Find Minimum in Rotated Sorted Array"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,4,5,1,2] \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: [4,5,6,7,0,1,2] \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 153. Find Minimum in Rotated Sorted Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u201c\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u201d\u8fd9\u4e2a\u4fe1\u606f\u662f\u5173\u952e\u7684\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#1","text":"public class Solution { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\"); } int left = 0; int right = len - 1; // \u601d\u8003\uff0c\u4e3a\u4ec0\u4e48\u662f left < right while (left < right) { // \u8fd9\u4e00\u6b65\u5c31\u662f\u53d6\u4e2d\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904 int mid = left + (right - left) / 2; // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] // \u7279\u522b\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5927\u5751\uff0c\u4e0d\u80fd\u7528 nums[left] < nums[mid] if (nums[mid] > nums[right]) { // 5 6 7 8 9 1 2 // \u6b64\u65f6\u53ef\u4ee5\u6254\u6389 mid \u7684\u503c left = mid + 1; } else { // 5 6 7 1 2 3 4 assert nums[mid] < nums[right]; // \u6b64\u65f6 mid \u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15 right = mid; } } // \u9000\u51fa\u5faa\u73af\u8bf4\u660e left \u4e0e right \u76f8\u7b49\uff0c\u6240\u4ee5\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\uff0c // \u6240\u4ee5 return [left] \u6216\u8005 return [right] \u90fd\u53ef\u4ee5\u4e86 // \u6ce8\u610f\u4e0d\u80fd return mid\uff0c\u53ef\u4ee5\u4ece {2,1} \u8fd9\u4e2a\u8f93\u5165\u770b\u51fa\u6765\u3002 return nums[right]; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {4, 5, 6, 7, 0, 1, 2}; int min = solution.findMin(nums); System.out.println(min); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#2","text":"/** * \u5206\u6cbb\u7684\u5199\u6cd5 */ public class Solution2 { // \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\"); } return findMin(nums, 0, len - 1); } private int findMin(int[] nums, int left, int right) { // \u601d\u8003\uff1a\u8fd9\u4e2a\u4e34\u754c\u6761\u4ef6\u662f\u4e3a\u4ec0\u4e48? // \u6216\u8005\u5199\u6210 left + 1 >= right if (left == right || left + 1 == right) { return Math.min(nums[left], nums[right]); } int mid = left + (right - left) / 2; // 8 9 1 2 3 4 5 6 7 if (nums[mid] < nums[right]) { // \u53f3\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 return Math.min(findMin(nums, left, mid - 1), nums[mid]); } else { // \u5de6\u8fb9\u662f\u987a\u5e8f\u6570\u7ec4 // nums[mid] > nums[right] // 3 4 5 6 7 8 1 2 return Math.min(nums[left], findMin(nums, mid + 1, right)); } } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int[] nums = {1, 2}; int solution2Min = solution2.findMin(nums); System.out.println(solution2Min); } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3"},{"location":"leetcode-0153-find-minimum-in-rotated-sorted-array/#3","text":"public class Solution3 { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u7ed9\u51fa\u7684\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6ca1\u6709\u6700\u5c0f\u503c\"); } return findMin(nums, 0, len - 1); } public int findMin(int[] nums, int left, int right) { // \u5206\u6cbb\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u8981\u5904\u7406\u8981\u9012\u5f52\u7ec8\u6b62\u7684\u6761\u4ef6 if (left + 1 >= right) { return Math.min(nums[left], nums[right]); } if (nums[left] < nums[right]) { return nums[left]; } int mid = left + (right - left) / 2; return Math.min(findMin(nums, left, mid), findMin(nums, mid + 1, right)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0153-find-minimum-in-rotated-sorted-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/","text":"154. Find Minimum in Rotated Sorted Array II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u6ce8\u610f\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,3,5] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [2,2,2,0,1] \u8f93\u51fa: 0 \u8bf4\u660e\uff1a \u8fd9\u9053\u9898\u662f \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c \u7684\u5ef6\u4f38\u9898\u76ee\u3002 \u5141\u8bb8\u91cd\u590d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u5982\u4f55\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 154. Find Minimum in Rotated Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u7684\uff0c\u8fd9\u9053\u9898\u548c LeetCode \u7b2c 153 \u9898\u6ca1\u6709\u533a\u522b\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\u3002 public class Solution { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6700\u5c0f\u503c\u4e0d\u5b58\u5728\"); } return findMin(nums, 0, len - 1); } private int findMin(int[] nums, int left, int right) { if (left + 1 >= right) { return Math.min(nums[left], nums[right]); } if (nums[left] < nums[right]) { return nums[left]; } int mid = left + (right - left) / 2; return Math.min(findMin(nums, left, mid - 1), findMin(nums, mid, right)); } public static void main(String[] args) { int[] nums = {1, 3, 5}; Solution solution = new Solution(); int solutionMin = solution.findMin(nums); System.out.println(solutionMin); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0154-find-minimum-in-rotated-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"154. Find Minimum in Rotated Sorted Array II"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#154-find-minimum-in-rotated-sorted-array-ii","text":"","title":"154. Find Minimum in Rotated Sorted Array II"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u6ce8\u610f\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,3,5] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [2,2,2,0,1] \u8f93\u51fa: 0 \u8bf4\u660e\uff1a \u8fd9\u9053\u9898\u662f \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c \u7684\u5ef6\u4f38\u9898\u76ee\u3002 \u5141\u8bb8\u91cd\u590d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u5982\u4f55\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 154. Find Minimum in Rotated Sorted Array II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5206\u6cbb\u601d\u60f3\u7684\uff0c\u8fd9\u9053\u9898\u548c LeetCode \u7b2c 153 \u9898\u6ca1\u6709\u533a\u522b\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0154-find-minimum-in-rotated-sorted-array-ii/#1","text":"public class Solution { public int findMin(int[] nums) { int len = nums.length; if (len == 0) { throw new IllegalArgumentException(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u6700\u5c0f\u503c\u4e0d\u5b58\u5728\"); } return findMin(nums, 0, len - 1); } private int findMin(int[] nums, int left, int right) { if (left + 1 >= right) { return Math.min(nums[left], nums[right]); } if (nums[left] < nums[right]) { return nums[left]; } int mid = left + (right - left) / 2; return Math.min(findMin(nums, left, mid - 1), findMin(nums, mid, right)); } public static void main(String[] args) { int[] nums = {1, 3, 5}; Solution solution = new Solution(); int solutionMin = solution.findMin(nums); System.out.println(solutionMin); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0154-find-minimum-in-rotated-sorted-array-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5206\u6cbb\u7684\u601d\u60f3\u3002"},{"location":"leetcode-0160-intersection-of-two-linked-lists/","text":"160. Intersection of Two Linked Lists \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868 \uff1a A: a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B: b1 \u2192 b2 \u2192 b3 \u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null . \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002 \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002 \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O( 1 ) \u5185\u5b58\u3002 \u81f4\u8c22 : \u7279\u522b\u611f\u8c22 @stellari \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 160. Intersection of Two Linked Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 160. \u76f8\u4ea4\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0160-intersection-of-two-linked-lists \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"160. Intersection of Two Linked Lists"},{"location":"leetcode-0160-intersection-of-two-linked-lists/#160-intersection-of-two-linked-lists","text":"","title":"160. Intersection of Two Linked Lists"},{"location":"leetcode-0160-intersection-of-two-linked-lists/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868 \uff1a A: a1 \u2192 a2 \u2198 c1 \u2192 c2 \u2192 c3 \u2197 B: b1 \u2192 b2 \u2192 b3 \u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null . \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002 \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002 \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O( 1 ) \u5185\u5b58\u3002 \u81f4\u8c22 : \u7279\u522b\u611f\u8c22 @stellari \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 160. Intersection of Two Linked Lists \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 160. \u76f8\u4ea4\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0160-intersection-of-two-linked-lists/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0160-intersection-of-two-linked-lists/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0160-intersection-of-two-linked-lists/#1","text":"Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # \u601d\u8def\uff1a\u4e24\u4e2a\u94fe\u8868\u4e0d\u4e00\u6837\u957f\uff0c\u5c31\u60f3\u529e\u6cd5\u8ba9\u5b83\u4eec\u4e00\u6837\u957f\u3002 class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \"\"\" if headA is None or headB is None: return None node1 = headA node2 = headB while node1 != node2: if node1: node1 = node1.next else: node1 = headB if node2: node2 = node2.next else: node2 = headA return node1 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0160-intersection-of-two-linked-lists \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0168-excel-sheet-column-title/","text":"168. Excel Sheet Column Title \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u5b83\u5728 Excel \u8868\u4e2d\u76f8\u5bf9\u5e94\u7684\u5217\u540d\u79f0\u3002 \u4f8b\u5982\uff0c 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"A\" \u793a\u4f8b 2: \u8f93\u5165: 28 \u8f93\u51fa: \"AB\" \u793a\u4f8b 3: \u8f93\u5165: 701 \u8f93\u51fa: \"ZY\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 168. Excel Sheet Column Title \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 168. Excel\u8868\u5217\u540d\u79f0 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0168-excel-sheet-column-title \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"168. Excel Sheet Column Title"},{"location":"leetcode-0168-excel-sheet-column-title/#168-excel-sheet-column-title","text":"","title":"168. Excel Sheet Column Title"},{"location":"leetcode-0168-excel-sheet-column-title/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u5b83\u5728 Excel \u8868\u4e2d\u76f8\u5bf9\u5e94\u7684\u5217\u540d\u79f0\u3002 \u4f8b\u5982\uff0c 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"A\" \u793a\u4f8b 2: \u8f93\u5165: 28 \u8f93\u51fa: \"AB\" \u793a\u4f8b 3: \u8f93\u5165: 701 \u8f93\u51fa: \"ZY\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 168. Excel Sheet Column Title \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 168. Excel\u8868\u5217\u540d\u79f0 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0168-excel-sheet-column-title/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0168-excel-sheet-column-title/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0168-excel-sheet-column-title/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0168-excel-sheet-column-title \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0171-excel-sheet-column-number/","text":"171. Excel Sheet Column Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2aExcel\u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\uff0c\u8fd4\u56de\u5176\u76f8\u5e94\u7684\u5217\u5e8f\u53f7\u3002 \u4f8b\u5982\uff0c A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... \u793a\u4f8b 1: \u8f93\u5165: \"A\" \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: \"AB\" \u8f93\u51fa: 28 \u793a\u4f8b 3: \u8f93\u5165: \"ZY\" \u8f93\u51fa: 701 \u81f4\u8c22\uff1a \u7279\u522b\u611f\u8c22 @ts \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 171. Excel Sheet Column Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 171. Excel\u8868\u5217\u5e8f\u53f7 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0171-excel-sheet-column-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"171. Excel Sheet Column Number"},{"location":"leetcode-0171-excel-sheet-column-number/#171-excel-sheet-column-number","text":"","title":"171. Excel Sheet Column Number"},{"location":"leetcode-0171-excel-sheet-column-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2aExcel\u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\uff0c\u8fd4\u56de\u5176\u76f8\u5e94\u7684\u5217\u5e8f\u53f7\u3002 \u4f8b\u5982\uff0c A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... \u793a\u4f8b 1: \u8f93\u5165: \"A\" \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: \"AB\" \u8f93\u51fa: 28 \u793a\u4f8b 3: \u8f93\u5165: \"ZY\" \u8f93\u51fa: 701 \u81f4\u8c22\uff1a \u7279\u522b\u611f\u8c22 @ts \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 171. Excel Sheet Column Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 171. Excel\u8868\u5217\u5e8f\u53f7 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0171-excel-sheet-column-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0171-excel-sheet-column-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0171-excel-sheet-column-number/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0171-excel-sheet-column-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0173-binary-search-tree-iterator/","text":"173. Binary Search Tree Iterator \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u8c03\u7528 next() \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002 \u6ce8\u610f: next() \u548c hasNext() \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u5e76\u4f7f\u7528 O(h) \u5185\u5b58\uff0c\u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 173. Binary Search Tree Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Stack; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class BSTIterator { private Stack<TreeNode> stack; public BSTIterator(TreeNode root) { stack = new Stack<>(); TreeNode p = root; while (p != null) { stack.push(p); p = p.left; } } /** * @return whether we have a next smallest number */ public boolean hasNext() { return !stack.empty(); } /** * @return the next smallest number */ public int next() { TreeNode top = stack.pop(); if (top.right != null) { TreeNode p = top.right; while (p != null) { stack.push(p); p = p.left; } } return top.val; } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node5 = new TreeNode(5); node2.left = node1; node2.right = node5; node5.left = node4; node4.left = node3; BSTIterator bstIterator = new BSTIterator(node2); while (bstIterator.hasNext()){ System.out.println(bstIterator.next()); } } } /** * Your BSTIterator will be called like this: * BSTIterator i = new BSTIterator(root); * while (i.hasNext()) v[f()] = i.next(); */ \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0173-binary-search-tree-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"173. Binary Search Tree Iterator"},{"location":"leetcode-0173-binary-search-tree-iterator/#173-binary-search-tree-iterator","text":"","title":"173. Binary Search Tree Iterator"},{"location":"leetcode-0173-binary-search-tree-iterator/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u8c03\u7528 next() \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002 \u6ce8\u610f: next() \u548c hasNext() \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u5e76\u4f7f\u7528 O(h) \u5185\u5b58\uff0c\u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 173. Binary Search Tree Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0173-binary-search-tree-iterator/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0173-binary-search-tree-iterator/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0173-binary-search-tree-iterator/#1","text":"import java.util.Stack; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class BSTIterator { private Stack<TreeNode> stack; public BSTIterator(TreeNode root) { stack = new Stack<>(); TreeNode p = root; while (p != null) { stack.push(p); p = p.left; } } /** * @return whether we have a next smallest number */ public boolean hasNext() { return !stack.empty(); } /** * @return the next smallest number */ public int next() { TreeNode top = stack.pop(); if (top.right != null) { TreeNode p = top.right; while (p != null) { stack.push(p); p = p.left; } } return top.val; } public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node5 = new TreeNode(5); node2.left = node1; node2.right = node5; node5.left = node4; node4.left = node3; BSTIterator bstIterator = new BSTIterator(node2); while (bstIterator.hasNext()){ System.out.println(bstIterator.next()); } } } /** * Your BSTIterator will be called like this: * BSTIterator i = new BSTIterator(root); * while (i.hasNext()) v[f()] = i.next(); */ \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0173-binary-search-tree-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0175-combine-two-tables/","text":"175. Combine Two Tables \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u88681: Person +-------------+---------+ | \u5217\u540d | \u7c7b\u578b | +-------------+---------+ | PersonId | int | | FirstName | varchar | | LastName | varchar | +-------------+---------+ PersonId \u662f\u4e0a\u8868\u4e3b\u952e \u88682: Address +-------------+---------+ | \u5217\u540d | \u7c7b\u578b | +-------------+---------+ | AddressId | int | | PersonId | int | | City | varchar | | State | varchar | +-------------+---------+ AddressId \u662f\u4e0a\u8868\u4e3b\u952e \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a\u65e0\u8bba person \u662f\u5426\u6709\u5730\u5740\u4fe1\u606f\uff0c\u90fd\u9700\u8981\u57fa\u4e8e\u4e0a\u8ff0\u4e24\u8868\u63d0\u4f9b person \u7684\u4ee5\u4e0b\u4fe1\u606f\uff1a FirstName, LastName, City, State \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 175. Combine Two Tables \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 175. \u7ec4\u5408\u4e24\u4e2a\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u5c31\u8003\u4e86\u5de6\u8fde\u63a5\u3002 \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a DROP TABLE IF EXISTS Person; DROP TABLE IF EXISTS Address; CREATE TABLE Person( PersonId INT PRIMARY KEY AUTO_INCREMENT, FirstName VARCHAR(200), LastName VARCHAR(200) ); insert into Person(FirstName,LastName) values('li','wei'); insert into Person(FirstName,LastName) values('zhou','guang'); insert into Person(FirstName,LastName) values('yuan','lian'); CREATE TABLE Address( AddressId INT PRIMARY KEY AUTO_INCREMENT, PersonId INT, City VARCHAR(200), State VARCHAR(200) ); insert into Address(PersonId,City,State) values(1,'beijng','haidianqu'); insert into Address(PersonId,City,State) values(2,'shanghai','xuhuiqu'); \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 select t1.FirstName, t1.LastName, t2.City, t2.State from Person t1 left join Address t2 on t1.`PersonId` = t2.`PersonId`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0175-combine-two-tables \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"175. Combine Two Tables"},{"location":"leetcode-0175-combine-two-tables/#175-combine-two-tables","text":"","title":"175. Combine Two Tables"},{"location":"leetcode-0175-combine-two-tables/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u88681: Person +-------------+---------+ | \u5217\u540d | \u7c7b\u578b | +-------------+---------+ | PersonId | int | | FirstName | varchar | | LastName | varchar | +-------------+---------+ PersonId \u662f\u4e0a\u8868\u4e3b\u952e \u88682: Address +-------------+---------+ | \u5217\u540d | \u7c7b\u578b | +-------------+---------+ | AddressId | int | | PersonId | int | | City | varchar | | State | varchar | +-------------+---------+ AddressId \u662f\u4e0a\u8868\u4e3b\u952e \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a\u65e0\u8bba person \u662f\u5426\u6709\u5730\u5740\u4fe1\u606f\uff0c\u90fd\u9700\u8981\u57fa\u4e8e\u4e0a\u8ff0\u4e24\u8868\u63d0\u4f9b person \u7684\u4ee5\u4e0b\u4fe1\u606f\uff1a FirstName, LastName, City, State \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 175. Combine Two Tables \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 175. \u7ec4\u5408\u4e24\u4e2a\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0175-combine-two-tables/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5176\u5b9e\u5c31\u8003\u4e86\u5de6\u8fde\u63a5\u3002 \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a DROP TABLE IF EXISTS Person; DROP TABLE IF EXISTS Address; CREATE TABLE Person( PersonId INT PRIMARY KEY AUTO_INCREMENT, FirstName VARCHAR(200), LastName VARCHAR(200) ); insert into Person(FirstName,LastName) values('li','wei'); insert into Person(FirstName,LastName) values('zhou','guang'); insert into Person(FirstName,LastName) values('yuan','lian'); CREATE TABLE Address( AddressId INT PRIMARY KEY AUTO_INCREMENT, PersonId INT, City VARCHAR(200), State VARCHAR(200) ); insert into Address(PersonId,City,State) values(1,'beijng','haidianqu'); insert into Address(PersonId,City,State) values(2,'shanghai','xuhuiqu');","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0175-combine-two-tables/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0175-combine-two-tables/#1","text":"select t1.FirstName, t1.LastName, t2.City, t2.State from Person t1 left join Address t2 on t1.`PersonId` = t2.`PersonId`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0175-combine-two-tables \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/","text":"181. Employees Earning More Than Their Managers \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a Employee \u8868\u5305\u542b\u6240\u6709\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u4e5f\u5c5e\u4e8e\u5458\u5de5\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a Id\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u5217\u5bf9\u5e94\u5458\u5de5\u7684\u7ecf\u7406\u7684 Id\u3002 +----+-------+--------+-----------+ | Id | Name | Salary | ManagerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | NULL | | 4 | Max | 90000 | NULL | +----+-------+--------+-----------+ \u7ed9\u5b9a Employee \u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u83b7\u53d6\u6536\u5165\u8d85\u8fc7\u4ed6\u4eec\u7ecf\u7406\u7684\u5458\u5de5\u7684\u59d3\u540d\u3002\u5728\u4e0a\u9762\u7684\u8868\u683c\u4e2d\uff0cJoe \u662f\u552f\u4e00\u4e00\u4e2a\u6536\u5165\u8d85\u8fc7\u4ed6\u7684\u7ecf\u7406\u7684\u5458\u5de5\u3002 +----------+ | Employee | +----------+ | Joe | +----------+ \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 181. Employees Earning More Than Their Managers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 181. \u8d85\u8fc7\u7ecf\u7406\u6536\u5165\u7684\u5458\u5de5 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a drop table if exists Employee; create table Employee( Id int primary key auto_increment, Name varchar(200), Salary int, ManagerId int ); insert into Employee(Id,name,Salary,ManagerId) values(1,'Joe',70000,3); insert into Employee(Id,name,Salary,ManagerId) values(2,'Henry',80000,4); insert into Employee(Id,name,Salary,ManagerId) values(3,'Sam',60000,NULL); insert into Employee(Id,name,Salary,ManagerId) values(4,'Max',90000,NULL); \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 select t1.Name as Employee from Employee t1,Employee t2 where t1.`ManagerId` = t2.`Id` and t1.`Salary` > t2.`Salary`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0181-employees-earning-more-than-their-managers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"181. Employees Earning More Than Their Managers"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/#181-employees-earning-more-than-their-managers","text":"","title":"181. Employees Earning More Than Their Managers"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a Employee \u8868\u5305\u542b\u6240\u6709\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u4e5f\u5c5e\u4e8e\u5458\u5de5\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a Id\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u5217\u5bf9\u5e94\u5458\u5de5\u7684\u7ecf\u7406\u7684 Id\u3002 +----+-------+--------+-----------+ | Id | Name | Salary | ManagerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | NULL | | 4 | Max | 90000 | NULL | +----+-------+--------+-----------+ \u7ed9\u5b9a Employee \u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u83b7\u53d6\u6536\u5165\u8d85\u8fc7\u4ed6\u4eec\u7ecf\u7406\u7684\u5458\u5de5\u7684\u59d3\u540d\u3002\u5728\u4e0a\u9762\u7684\u8868\u683c\u4e2d\uff0cJoe \u662f\u552f\u4e00\u4e00\u4e2a\u6536\u5165\u8d85\u8fc7\u4ed6\u7684\u7ecf\u7406\u7684\u5458\u5de5\u3002 +----------+ | Employee | +----------+ | Joe | +----------+ \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 181. Employees Earning More Than Their Managers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 181. \u8d85\u8fc7\u7ecf\u7406\u6536\u5165\u7684\u5458\u5de5 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a drop table if exists Employee; create table Employee( Id int primary key auto_increment, Name varchar(200), Salary int, ManagerId int ); insert into Employee(Id,name,Salary,ManagerId) values(1,'Joe',70000,3); insert into Employee(Id,name,Salary,ManagerId) values(2,'Henry',80000,4); insert into Employee(Id,name,Salary,ManagerId) values(3,'Sam',60000,NULL); insert into Employee(Id,name,Salary,ManagerId) values(4,'Max',90000,NULL);","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0181-employees-earning-more-than-their-managers/#1","text":"select t1.Name as Employee from Employee t1,Employee t2 where t1.`ManagerId` = t2.`Id` and t1.`Salary` > t2.`Salary`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0181-employees-earning-more-than-their-managers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0182-duplicate-emails/","text":"182. Duplicate Emails \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e Person \u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\u3002 \u793a\u4f8b\uff1a +----+---------+ | Id | Email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ \u6839\u636e\u4ee5\u4e0a\u8f93\u5165\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff1a +---------+ | Email | +---------+ | a@b.com | +---------+ \u8bf4\u660e\uff1a \u6240\u6709\u7535\u5b50\u90ae\u7bb1\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 182. Duplicate Emails \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 182. \u67e5\u627e\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 DROP TABLE IF EXISTS Person ; CREATE TABLE Person( Id INT PRIMARY KEY AUTO_INCREMENT, Email VARCHAR(200) ); INSERT INTO Person(Email) VALUES ('a@b.com'); INSERT INTO Person(Email) VALUES ('c@d.com'); INSERT INTO Person(Email) VALUES ('a@b.com'); SELECT Email FROM Person GROUP BY Email HAVING count(*) > 1; SELECT DISTINCT p1.Email FROM Person p1,Person p2 WHERE p1.email = p2.email AND p1.`Id`!=p2.`Id`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0182-duplicate-emails \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"182. Duplicate Emails"},{"location":"leetcode-0182-duplicate-emails/#182-duplicate-emails","text":"","title":"182. Duplicate Emails"},{"location":"leetcode-0182-duplicate-emails/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e Person \u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\u3002 \u793a\u4f8b\uff1a +----+---------+ | Id | Email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ \u6839\u636e\u4ee5\u4e0a\u8f93\u5165\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff1a +---------+ | Email | +---------+ | a@b.com | +---------+ \u8bf4\u660e\uff1a \u6240\u6709\u7535\u5b50\u90ae\u7bb1\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 182. Duplicate Emails \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 182. \u67e5\u627e\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0182-duplicate-emails/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0182-duplicate-emails/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0182-duplicate-emails/#1","text":"DROP TABLE IF EXISTS Person ; CREATE TABLE Person( Id INT PRIMARY KEY AUTO_INCREMENT, Email VARCHAR(200) ); INSERT INTO Person(Email) VALUES ('a@b.com'); INSERT INTO Person(Email) VALUES ('c@d.com'); INSERT INTO Person(Email) VALUES ('a@b.com'); SELECT Email FROM Person GROUP BY Email HAVING count(*) > 1; SELECT DISTINCT p1.Email FROM Person p1,Person p2 WHERE p1.email = p2.email AND p1.`Id`!=p2.`Id`; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0182-duplicate-emails \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0187-repeated-dna-sequences/","text":"187. Repeated DNA Sequences \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa: [\"AAAAACCCCC\", \"CCCCCAAAAA\"] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 187. Repeated DNA Sequences \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u8981\u6c42\u627e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u56fa\u5b9a\u957f\u5ea6\u4e3a 10 \u7684\u6709\u91cd\u590d\u7684\u5b50\u4e32\uff08\u6ce8\u610f\uff1a\u4e0d\u662f\u5b50\u5e8f\u5217\uff09\uff0c\u56e0\u6b64\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u501f\u52a9\u54c8\u5e0c\u8868\u5c31\u80fd\u591f\u5b8c\u6210\u3002 1\u3001\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\uff0c\u653e\u5165\u54c8\u5e0c\u8868\uff1b 2\u3001\u8003\u8651\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709 4 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u6700\u591a\u53ea\u7528 2 \u4f4d\u7f16\u7801\uff0c\u56e0\u6b64\u539f\u6765\u7684\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u7f16\u7801\u6210\u4e00\u4e2a\u53ea\u6709\u4f4e\u4f4d 20 \u4f4d\u6709\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u952e\u653e\u5165\u54c8\u5e0c\u8868\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution { public List<String> findRepeatedDnaSequences(String s) { HashSet<String> seen = new HashSet<>(); // \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u591a\u6b21\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f7f\u7528 Set \u53bb\u9664\u91cd\u590d HashSet<String> repeated = new HashSet<>(); int len = s.length(); int begin = 0; int end = 10; StringBuilder stringBuilder = new StringBuilder(s); // \u6ce8\u610f\u8fd9\u91cc\u662f\u7b49\u4e8e\u53f7\uff0c\u56e0\u4e3a substring \u65b9\u6cd5\u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u5f00\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230 while (end <= len) { String segment = stringBuilder.substring(begin, end); if (seen.contains(segment)) { repeated.add(segment); } else { seen.add(segment); } begin++; end++; } return new ArrayList<>(repeated); } public static void main(String[] args) { String s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"; Solution solution = new Solution(); List<String> repeatedDnaSequences = solution.findRepeatedDnaSequences(s); System.out.println(repeatedDnaSequences); } } \u53c2\u8003\u89e3\u7b542 import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.List; /** * @author liwei * @date 18/7/1 \u4e0a\u534811:22 */ public class Solution4 { public List<String> findRepeatedDnaSequences(String s) { int len = s.length(); // 10 \u4e2a\u5b57\u7b26\uff0c1 \u4e2a\u5b57\u7b26\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u7684 2 \u4f4d\uff0c\u6240\u4ee5\u662f 20 \u4f4d // 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c\u4e00\u4e2a f \u8868\u793a 1111 int mask = 0xfffff; HashSet<Integer> seen = new HashSet<>(); HashSet<String> repeated = new HashSet<>(); HashMap<Character, Integer> map = new HashMap<>(); // \u8868\u793a\u4e8c\u8fdb\u5236 00 map.put('A', 0); // \u8868\u793a\u4e8c\u8fdb\u5236 01 map.put('C', 1); // \u8868\u793a\u4e8c\u8fdb\u5236 10 map.put('G', 2); // \u8868\u793a\u4e8c\u8fdb\u5236 11 map.put('T', 3); int v = 0; for (int i = 0; i < len; i++) { // \u7a7a\u51fa\u4e24\u4f4d\uff0c\u7528\u6765\u5b58\u653e\u5f53\u524d\u904d\u5386\u5230\u7684\u5b57\u7b26\u7684\u7f16\u7801 v <<= 2; // \u53ef\u4ee5\u7528 + \u4e5f\u53ef\u4ee5\u7528 |\uff0c& mask \u7684\u4f5c\u7528\u662f\u628a\u4e0a\u4e00\u6b65\u5de6\u79fb\u51fa\u4e86 20 \u4f4d\u7684\u90a3\u4e24\u4f4d\u62b9\u53bb v = (v | map.get(s.charAt(i))) & mask; if (i < 9) { continue; } if (seen.contains(v)) { repeated.add(s.substring(i - 9, i + 1)); } else { seen.add(v); } } return new ArrayList<>(repeated); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0187-repeated-dna-sequences \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"187. Repeated DNA Sequences"},{"location":"leetcode-0187-repeated-dna-sequences/#187-repeated-dna-sequences","text":"","title":"187. Repeated DNA Sequences"},{"location":"leetcode-0187-repeated-dna-sequences/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa: [\"AAAAACCCCC\", \"CCCCCAAAAA\"] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 187. Repeated DNA Sequences \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0187-repeated-dna-sequences/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u4e2d\u8981\u6c42\u627e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u56fa\u5b9a\u957f\u5ea6\u4e3a 10 \u7684\u6709\u91cd\u590d\u7684\u5b50\u4e32\uff08\u6ce8\u610f\uff1a\u4e0d\u662f\u5b50\u5e8f\u5217\uff09\uff0c\u56e0\u6b64\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff0c\u501f\u52a9\u54c8\u5e0c\u8868\u5c31\u80fd\u591f\u5b8c\u6210\u3002 1\u3001\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\uff0c\u653e\u5165\u54c8\u5e0c\u8868\uff1b 2\u3001\u8003\u8651\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709 4 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u6700\u591a\u53ea\u7528 2 \u4f4d\u7f16\u7801\uff0c\u56e0\u6b64\u539f\u6765\u7684\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u7f16\u7801\u6210\u4e00\u4e2a\u53ea\u6709\u4f4e\u4f4d 20 \u4f4d\u6709\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u952e\u653e\u5165\u54c8\u5e0c\u8868\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0187-repeated-dna-sequences/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0187-repeated-dna-sequences/#1","text":"import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution { public List<String> findRepeatedDnaSequences(String s) { HashSet<String> seen = new HashSet<>(); // \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u591a\u6b21\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f7f\u7528 Set \u53bb\u9664\u91cd\u590d HashSet<String> repeated = new HashSet<>(); int len = s.length(); int begin = 0; int end = 10; StringBuilder stringBuilder = new StringBuilder(s); // \u6ce8\u610f\u8fd9\u91cc\u662f\u7b49\u4e8e\u53f7\uff0c\u56e0\u4e3a substring \u65b9\u6cd5\u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u5f00\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230 while (end <= len) { String segment = stringBuilder.substring(begin, end); if (seen.contains(segment)) { repeated.add(segment); } else { seen.add(segment); } begin++; end++; } return new ArrayList<>(repeated); } public static void main(String[] args) { String s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"; Solution solution = new Solution(); List<String> repeatedDnaSequences = solution.findRepeatedDnaSequences(s); System.out.println(repeatedDnaSequences); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0187-repeated-dna-sequences/#2","text":"import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.List; /** * @author liwei * @date 18/7/1 \u4e0a\u534811:22 */ public class Solution4 { public List<String> findRepeatedDnaSequences(String s) { int len = s.length(); // 10 \u4e2a\u5b57\u7b26\uff0c1 \u4e2a\u5b57\u7b26\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u7684 2 \u4f4d\uff0c\u6240\u4ee5\u662f 20 \u4f4d // 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c\u4e00\u4e2a f \u8868\u793a 1111 int mask = 0xfffff; HashSet<Integer> seen = new HashSet<>(); HashSet<String> repeated = new HashSet<>(); HashMap<Character, Integer> map = new HashMap<>(); // \u8868\u793a\u4e8c\u8fdb\u5236 00 map.put('A', 0); // \u8868\u793a\u4e8c\u8fdb\u5236 01 map.put('C', 1); // \u8868\u793a\u4e8c\u8fdb\u5236 10 map.put('G', 2); // \u8868\u793a\u4e8c\u8fdb\u5236 11 map.put('T', 3); int v = 0; for (int i = 0; i < len; i++) { // \u7a7a\u51fa\u4e24\u4f4d\uff0c\u7528\u6765\u5b58\u653e\u5f53\u524d\u904d\u5386\u5230\u7684\u5b57\u7b26\u7684\u7f16\u7801 v <<= 2; // \u53ef\u4ee5\u7528 + \u4e5f\u53ef\u4ee5\u7528 |\uff0c& mask \u7684\u4f5c\u7528\u662f\u628a\u4e0a\u4e00\u6b65\u5de6\u79fb\u51fa\u4e86 20 \u4f4d\u7684\u90a3\u4e24\u4f4d\u62b9\u53bb v = (v | map.get(s.charAt(i))) & mask; if (i < 9) { continue; } if (seen.contains(v)) { repeated.add(s.substring(i - 9, i + 1)); } else { seen.add(v); } } return new ArrayList<>(repeated); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0187-repeated-dna-sequences \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0189-rotate-array/","text":"189. Rotate Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2: \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e: \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u7684\u539f\u5730\u7b97\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 189. Rotate Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 189. \u65cb\u8f6c\u6570\u7ec4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a $3$ \u6b21\u9006\u8f6c\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u6781\u7aef\u6761\u4ef6\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u5411\u53f3\u65cb\u8f6c // \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 // \u7ed3\u679c\uff1a[5,6,7,1,2,3,4] // \u4e2d\u95f4\u8fc7\u7a0b\uff1a // 7 6 5 4 3 2 1 // 5 6 7 1 2 3 4 public void rotate(int[] nums, int k) { // \u5148\u5199\u51fa\u6781\u7aef\u6761\u4ef6 int len = nums.length; if (len == 0 || k <= 0) { return; } k %= len; reverse(nums, 0, len - 1); reverse(nums, 0, k - 1); reverse(nums, k, len - 1); } private void reverse(int[] nums, int index1, int index2) { if (index1 >= index2) { return; } while (index1 < index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; index1++; index2--; } } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 4, 5, 6, 7}; int k = 3; Solution solution = new Solution(); solution.rotate(nums, k); System.out.println(Arrays.toString(nums)); } } Python \u5199\u6cd5\uff1a class Solution: def rotate(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if len(nums) == 0 or k <= 0: return k = k % len(nums) # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50 self.__reverse(nums, 0, len(nums) - 1) self.__reverse(nums, 0, k - 1) self.__reverse(nums, k, len(nums) - 1) def __reverse(self, nums, index1, index2): \"\"\" \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c :param nums: :param index1: :param index2: :return: \"\"\" while index1 < index2: nums[index1], nums[index2] = nums[index2], nums[index1] index1 += 1 index2 -= 1 if __name__ == '__main__': nums = [1, 2, 3, 4, 5, 6, 7] k = 3 s = Solution() s.rotate(nums, k) print(nums) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0189-rotate-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"189. Rotate Array"},{"location":"leetcode-0189-rotate-array/#189-rotate-array","text":"","title":"189. Rotate Array"},{"location":"leetcode-0189-rotate-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2: \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e: \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u7684\u539f\u5730\u7b97\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 189. Rotate Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 189. \u65cb\u8f6c\u6570\u7ec4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0189-rotate-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a $3$ \u6b21\u9006\u8f6c\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u6781\u7aef\u6761\u4ef6\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0189-rotate-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0189-rotate-array/#1","text":"Java \u5199\u6cd5\uff1a import java.util.Arrays; public class Solution { // \u5411\u53f3\u65cb\u8f6c // \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 // \u7ed3\u679c\uff1a[5,6,7,1,2,3,4] // \u4e2d\u95f4\u8fc7\u7a0b\uff1a // 7 6 5 4 3 2 1 // 5 6 7 1 2 3 4 public void rotate(int[] nums, int k) { // \u5148\u5199\u51fa\u6781\u7aef\u6761\u4ef6 int len = nums.length; if (len == 0 || k <= 0) { return; } k %= len; reverse(nums, 0, len - 1); reverse(nums, 0, k - 1); reverse(nums, k, len - 1); } private void reverse(int[] nums, int index1, int index2) { if (index1 >= index2) { return; } while (index1 < index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; index1++; index2--; } } public static void main(String[] args) { int[] nums = new int[]{1, 2, 3, 4, 5, 6, 7}; int k = 3; Solution solution = new Solution(); solution.rotate(nums, k); System.out.println(Arrays.toString(nums)); } } Python \u5199\u6cd5\uff1a class Solution: def rotate(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if len(nums) == 0 or k <= 0: return k = k % len(nums) # \u505a\u4e0b\u9762 3 \u4e2a\u9006\u8f6c\u52a8\u4f5c\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 # \u6280\u5de7\u5c31\u662f\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50 self.__reverse(nums, 0, len(nums) - 1) self.__reverse(nums, 0, k - 1) self.__reverse(nums, k, len(nums) - 1) def __reverse(self, nums, index1, index2): \"\"\" \u5c06\u6570\u7ec4 [index1,index2] \u533a\u95f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u9006\u8f6c :param nums: :param index1: :param index2: :return: \"\"\" while index1 < index2: nums[index1], nums[index2] = nums[index2], nums[index1] index1 += 1 index2 -= 1 if __name__ == '__main__': nums = [1, 2, 3, 4, 5, 6, 7] k = 3 s = Solution() s.rotate(nums, k) print(nums) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0189-rotate-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0190-reverse-bits/","text":"190. Reverse Bits \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 43261596 \u8f93\u51fa: 964176192 \u89e3\u91ca: 43261596 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a 00000010100101000001111010011100 \uff0c \u8fd4\u56de 964176192\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a 00111001011110000010100101000000 \u3002 \u8fdb\u9636 : \u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 190. Reverse Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5e76\u4e0d\u96be\uff0c\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u7684\u65b9\u6cd5\u6765\u505a\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // you need treat n as an unsigned value // 00000010100101000001111010011100 // 10100101000001111010011100 /** * \u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u62ff\u5b57\u7b26\u4e32\u8f6c\u6765\u8f6c\u53bb * * @param n * @return */ public int reverseBits(int n) { String toBinaryString = Long.toBinaryString(n); StringBuilder stringBuilder = new StringBuilder(toBinaryString); // \u4e0d\u591f 32 \u4f4d\u7684\u5de6\u8865 0 while (stringBuilder.length() < 32) { stringBuilder.insert(0, 0); } String str = stringBuilder.reverse().toString(); return Integer.valueOf(str, 2); } public static void main(String[] args) { Solution solution = new Solution(); int n = 43261596; int reverseBits = solution.reverseBits(n); System.out.println(reverseBits); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { // you need treat n as an unsigned value public int reverseBits(int n) { // 0 \u5176\u5b9e\u4e0d\u7528\u7279\u6b8a\u8003\u8651 if (n == 0) { return 0; } int res = 0; // \u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528 while(n!=0) \uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8003\u8651\u5230\u6700\u9ad8\u4f4d\u8865 0 \u7684\u60c5\u51b5 for (int i = 0; i < 32; i++) { // \u5148\u5de6\u79fb\uff0c\u8ba9\u51fa\u4f4d\u7f6e\u6765 res <<= 1; // \u5f53\u524d\u8003\u8651\u7684\u8fd9\u4e2a\u6570\u4f4d\u662f 0 \u8fd8\u662f 1 res += n & 1; n >>= 1; } return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int n = 43261596; int reverseBits = solution2.reverseBits(n); System.out.println(reverseBits); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0190-reverse-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"190. Reverse Bits"},{"location":"leetcode-0190-reverse-bits/#190-reverse-bits","text":"","title":"190. Reverse Bits"},{"location":"leetcode-0190-reverse-bits/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 43261596 \u8f93\u51fa: 964176192 \u89e3\u91ca: 43261596 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a 00000010100101000001111010011100 \uff0c \u8fd4\u56de 964176192\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a 00111001011110000010100101000000 \u3002 \u8fdb\u9636 : \u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 190. Reverse Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0190-reverse-bits/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5e76\u4e0d\u96be\uff0c\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u7684\u65b9\u6cd5\u6765\u505a\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0190-reverse-bits/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0190-reverse-bits/#1","text":"public class Solution { // you need treat n as an unsigned value // 00000010100101000001111010011100 // 10100101000001111010011100 /** * \u6bd4\u8f83\u7b80\u5355\u7c97\u66b4\uff0c\u62ff\u5b57\u7b26\u4e32\u8f6c\u6765\u8f6c\u53bb * * @param n * @return */ public int reverseBits(int n) { String toBinaryString = Long.toBinaryString(n); StringBuilder stringBuilder = new StringBuilder(toBinaryString); // \u4e0d\u591f 32 \u4f4d\u7684\u5de6\u8865 0 while (stringBuilder.length() < 32) { stringBuilder.insert(0, 0); } String str = stringBuilder.reverse().toString(); return Integer.valueOf(str, 2); } public static void main(String[] args) { Solution solution = new Solution(); int n = 43261596; int reverseBits = solution.reverseBits(n); System.out.println(reverseBits); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0190-reverse-bits/#2","text":"public class Solution2 { // you need treat n as an unsigned value public int reverseBits(int n) { // 0 \u5176\u5b9e\u4e0d\u7528\u7279\u6b8a\u8003\u8651 if (n == 0) { return 0; } int res = 0; // \u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528 while(n!=0) \uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8003\u8651\u5230\u6700\u9ad8\u4f4d\u8865 0 \u7684\u60c5\u51b5 for (int i = 0; i < 32; i++) { // \u5148\u5de6\u79fb\uff0c\u8ba9\u51fa\u4f4d\u7f6e\u6765 res <<= 1; // \u5f53\u524d\u8003\u8651\u7684\u8fd9\u4e2a\u6570\u4f4d\u662f 0 \u8fd8\u662f 1 res += n & 1; n >>= 1; } return res; } public static void main(String[] args) { Solution2 solution2 = new Solution2(); int n = 43261596; int reverseBits = solution2.reverseBits(n); System.out.println(reverseBits); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0190-reverse-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0191-number-of-1-bits/","text":"191. Number of 1 Bits \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a \u20181\u2019 \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a \u6c49\u660e\u91cd\u91cf \uff09\u3002 \u793a\u4f8b : \u8f93\u5165: 11 \u8f93\u51fa: 3 \u89e3\u91ca: \u6574\u6570 11 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 00000000000000000000000000001011 \u793a\u4f8b 2: \u8f93\u5165: 128 \u8f93\u51fa: 1 \u89e3\u91ca: \u6574\u6570 128 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 00000000000000000000000010000000 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 191. Number of 1 Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 191. \u4f4d1\u7684\u4e2a\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u5217\u51fa 5 \u79cd\uff0c\u90fd\u4e0d\u96be\u7406\u89e3\u3002\u5176\u4e2d\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u53ea\u8981\u4e3e\u51fa\u51e0\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5c31\u6e05\u695a\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u7b80\u5355\u7c97\u66b4\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6570 \u201c1\u201d \u7684\u4e2a\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e0d\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002 public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { char[] binaryArr = Integer.toBinaryString(n).toCharArray(); int count = 0; for (char b : binaryArr) { if (b == '1') { count++; } } return count; } } \u53c2\u8003\u89e3\u7b542\uff1a\u76f4\u63a5\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570\u53bb\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e5f\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002 public class Solution2 { public int hammingWeight(int n) { return Integer.bitCount(n); } } \u53c2\u8003\u89e3\u7b543\uff1a\u4e00\u4f4d\u4e00\u4f4d\u53bb\u6570\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u7b26\u53f7\u4f4d\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u65e0\u7b26\u53f7\u5de6\u79fb\uff08\u53c2\u8003\u89e3\u7b546\uff09\u3002 public class Solution3 { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; if (n < 0) { n = n & 0x7fffffff; count++; } while (n != 0) { if ((n & 1) == 1) { count++; } n = n >> 1; } return count; } } \u53c2\u8003\u89e3\u7b544\uff1a\u4e0e\u8fd0\u7b97\u7684\u8fd9\u4e2a\u6027\u8d28\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u4e86\uff0c\u5e94\u8be5\u8bb0\u4f4f\u3002 public class Solution4 { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; while (n != 0) { n = n & (n-1); count++; } return count; } } \u53c2\u8003\u89e3\u7b545\uff1a\u4e0e\u53c2\u8003\u89e3\u7b54 3 \u76f8\u53cd\uff0c\u6211\u4eec\u8ba9 n \u4e0d\u53d8\uff0c\u4f7f\u7528 mask \u4e00\u4f4d\u4e00\u4f4d\u53bb\u201c\u6570\u201d\u6709\u591a\u5c11\u4e2a 1\u3002 public class Solution5 { public int hammingWeight(int n) { int mask = 1; int count = 0; for (int i = 0; i < 32; i++) { if ((n & mask) != 0) { count++; } mask<<=1; } return count; } } \u53c2\u8003\u89e3\u7b546\uff1a\u65e0\u7b26\u53f7\u5de6\u79fb\u6570\u51fa \u201c1\u201d \u7684\u4e2a\u6570\u3002 public class Solution6 { public int hammingWeight(int n) { int mask = 1; int count = 0; while (n != 0) { count += (n & mask); n >>>= 1; } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0191-number-of-1-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"191. Number of 1 Bits"},{"location":"leetcode-0191-number-of-1-bits/#191-number-of-1-bits","text":"","title":"191. Number of 1 Bits"},{"location":"leetcode-0191-number-of-1-bits/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a \u20181\u2019 \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a \u6c49\u660e\u91cd\u91cf \uff09\u3002 \u793a\u4f8b : \u8f93\u5165: 11 \u8f93\u51fa: 3 \u89e3\u91ca: \u6574\u6570 11 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 00000000000000000000000000001011 \u793a\u4f8b 2: \u8f93\u5165: 128 \u8f93\u51fa: 1 \u89e3\u91ca: \u6574\u6570 128 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 00000000000000000000000010000000 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 191. Number of 1 Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 191. \u4f4d1\u7684\u4e2a\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0191-number-of-1-bits/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u4e3b\u8981\u5217\u51fa 5 \u79cd\uff0c\u90fd\u4e0d\u96be\u7406\u89e3\u3002\u5176\u4e2d\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u53ea\u8981\u4e3e\u51fa\u51e0\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5c31\u6e05\u695a\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0191-number-of-1-bits/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0191-number-of-1-bits/#1-1","text":"public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { char[] binaryArr = Integer.toBinaryString(n).toCharArray(); int count = 0; for (char b : binaryArr) { if (b == '1') { count++; } } return count; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u7b80\u5355\u7c97\u66b4\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6570 \u201c1\u201d \u7684\u4e2a\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e0d\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002"},{"location":"leetcode-0191-number-of-1-bits/#2-java","text":"public class Solution2 { public int hammingWeight(int n) { return Integer.bitCount(n); } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u76f4\u63a5\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570\u53bb\u6570\uff0c\u4f46\u6211\u60f3\u5e94\u8be5\u4e5f\u662f\u8fd9\u9053\u9898\u8981\u8003\u7684\u3002"},{"location":"leetcode-0191-number-of-1-bits/#36","text":"public class Solution3 { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; if (n < 0) { n = n & 0x7fffffff; count++; } while (n != 0) { if ((n & 1) == 1) { count++; } n = n >> 1; } return count; } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4e00\u4f4d\u4e00\u4f4d\u53bb\u6570\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u5de6\u79fb\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u7b26\u53f7\u4f4d\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u65e0\u7b26\u53f7\u5de6\u79fb\uff08\u53c2\u8003\u89e3\u7b546\uff09\u3002"},{"location":"leetcode-0191-number-of-1-bits/#4","text":"public class Solution4 { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; while (n != 0) { n = n & (n-1); count++; } return count; } }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u4e0e\u8fd0\u7b97\u7684\u8fd9\u4e2a\u6027\u8d28\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u4e86\uff0c\u5e94\u8be5\u8bb0\u4f4f\u3002"},{"location":"leetcode-0191-number-of-1-bits/#5-3-n-mask-1","text":"public class Solution5 { public int hammingWeight(int n) { int mask = 1; int count = 0; for (int i = 0; i < 32; i++) { if ((n & mask) != 0) { count++; } mask<<=1; } return count; } } \u53c2\u8003\u89e3\u7b546\uff1a\u65e0\u7b26\u53f7\u5de6\u79fb\u6570\u51fa \u201c1\u201d \u7684\u4e2a\u6570\u3002 public class Solution6 { public int hammingWeight(int n) { int mask = 1; int count = 0; while (n != 0) { count += (n & mask); n >>>= 1; } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0191-number-of-1-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b545\uff1a\u4e0e\u53c2\u8003\u89e3\u7b54 3 \u76f8\u53cd\uff0c\u6211\u4eec\u8ba9 n \u4e0d\u53d8\uff0c\u4f7f\u7528 mask \u4e00\u4f4d\u4e00\u4f4d\u53bb\u201c\u6570\u201d\u6709\u591a\u5c11\u4e2a 1\u3002"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/","text":"201. Bitwise AND of Numbers Range \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 <= m <= n <= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [5,7] \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: [0,1] \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 201. Bitwise AND of Numbers Range \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5982\u679c\u6309\u7167\u5e38\u89c4\u505a\u6cd5\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u4e00\u4e2a\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u7684\u8bdd\uff0c\u4f1a\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u8981\u627e\u89c4\u5f8b\u4e86\u3002 \u601d\u8def1\uff1a + \u6309\u4f4d\u4e0e\u8fd0\u7b97\u662f\u4e00\u79cd\u5982\u679c\u67d0\u4e2a\u6570\u4f4d\u4e0a\u51fa\u73b0\u4e86 0 \uff0c\u7ed3\u679c\u5c31\u4e00\u5b9a\u662f 0 \u7684\u8fd0\u7b97\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7f57\u5217\u4e00\u4e9b\u5177\u4f53\u7684\u6570\uff0c\u627e\u627e\u89c4\u5f8b\u3002\u4e3a\u6b64\uff0c\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u3002 public class Solution { /** * \u66b4\u529b\u89e3\u6cd5\u4f1a\u8d85\u65f6 * @param m * @param n * @return */ public int rangeBitwiseAnd(int m, int n) { int res = m; for (int i = m + 1; i <= n; i++) { res &= i; } return res; } public static void main(String[] args) { Solution solution = new Solution(); int m = 200; int n = 230; int rangeBitwiseAnd = solution.rangeBitwiseAnd(m, n); for (int i = m; i <=n ; i++) { System.out.printf(\"%-3d %32s\",i,Integer.toBinaryString(i)); System.out.println(); } System.out.println(\"\u7ed3\u679c\uff1a\"); System.out.printf(\"%-3d %32s\",rangeBitwiseAnd,Integer.toBinaryString(rangeBitwiseAnd)); } } 203 11001011 204 11001100 205 11001101 206 11001110 207 11001111 208 11010000 209 11010001 210 11010010 211 11010011 212 11010100 213 11010101 214 11010110 215 11010111 216 11011000 217 11011001 218 11011010 219 11011011 220 11011100 221 11011101 222 11011110 223 11011111 224 11100000 225 11100001 226 11100010 227 11100011 228 11100100 229 11100101 230 11100110 \u7ed3\u679c\uff1a 192 11000000 \u6211\u4eec\u53d1\u73b0\uff0c\u7ed3\u679c\u53ea\u4e0e\u8fd9\u4e9b\u6570\u4e2d\u6700\u5de6\u8fb9\u201c\u6700\u957f\u201d\u7684\u76f8\u7b49\u7684\u90e8\u5206\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 m \u548c n \u4e0d\u65ad\u53f3\u79fb\uff08\u9898\u76ee\u4e2d\u8bf4\u4e86 m \u548c n \u4e0d\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u53f3\u79fb\u7b26\u53f7\u4f4d\u7684\u95ee\u9898\uff09\uff0c\u79fb\u5230\u76f8\u7b49\u7684\u65f6\u5019\u4e3a\u6b62\u3002\u540c\u65f6\u8bb0\u5f55\u79fb\u52a8\u7684\u6b65\u6570\u3002\u6700\u540e\u5c06\u76f8\u7b49\u7684\u90e8\u5206\u5de6\u79fb\u4e4b\u524d\u7684\u6b65\u6570\uff08\u76f8\u5f53\u4e8e\u8865 0\uff09\uff0c\u5c31\u662f\u6700\u7ec8\u8981\u6c42\u7684\u6570\u3002 \u601d\u8def2\uff1a\u4f4d\u8fd0\u7b97\u505a\u5f97\u9898\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u4f1a\u77e5\u9053\u4e0e\u8fd0\u7b97\u7684\u4e00\u6761\u6027\u8d28\uff1a n & (n - 1) \u53ef\u4ee5\u5c06 n \u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0 \uff0c\u8fd9\u4ef6\u4e8b\u60c5\u4e5f\u662f\u5f88\u9177\u7684\uff0c\u56e0\u4e3a\u5176\u5b9e\u4e0d\u4ec5\u628a 1 \u53d8\u6210\u4e86 0\uff0c\u8fd8\u8df3\u8fc7\u4e86\u5f88\u591a 0\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u66b4\u529b\u89e3\u6cd5\u7684\u53cd\u65b9\u5411\u53bb\u601d\u8003\uff0c\u5012\u7740\u505a\u6309\u4f4d\u4e0e\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u5f97\u5230\u89e3\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int rangeBitwiseAnd(int m, int n) { int count = 0; while (m != n) { m >>= 1; n >>= 1; count++; } return m << count; } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { /** * \u5229\u7528\u4e86 n &= (n - 1) \u4e00\u4e0b\u80fd\u6d88\u6b7b\u4e00\u5927\u7247 * * @param m * @param n * @return */ public int rangeBitwiseAnd(int m, int n) { while (n > m) { n &= (n - 1); } return n; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0201-bitwise-and-of-numbers-range \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"201. Bitwise AND of Numbers Range"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#201-bitwise-and-of-numbers-range","text":"","title":"201. Bitwise AND of Numbers Range"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 <= m <= n <= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [5,7] \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: [0,1] \u8f93\u51fa: 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 201. Bitwise AND of Numbers Range \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5982\u679c\u6309\u7167\u5e38\u89c4\u505a\u6cd5\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u4e00\u4e2a\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u7684\u8bdd\uff0c\u4f1a\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u8981\u627e\u89c4\u5f8b\u4e86\u3002 \u601d\u8def1\uff1a + \u6309\u4f4d\u4e0e\u8fd0\u7b97\u662f\u4e00\u79cd\u5982\u679c\u67d0\u4e2a\u6570\u4f4d\u4e0a\u51fa\u73b0\u4e86 0 \uff0c\u7ed3\u679c\u5c31\u4e00\u5b9a\u662f 0 \u7684\u8fd0\u7b97\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7f57\u5217\u4e00\u4e9b\u5177\u4f53\u7684\u6570\uff0c\u627e\u627e\u89c4\u5f8b\u3002\u4e3a\u6b64\uff0c\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u3002 public class Solution { /** * \u66b4\u529b\u89e3\u6cd5\u4f1a\u8d85\u65f6 * @param m * @param n * @return */ public int rangeBitwiseAnd(int m, int n) { int res = m; for (int i = m + 1; i <= n; i++) { res &= i; } return res; } public static void main(String[] args) { Solution solution = new Solution(); int m = 200; int n = 230; int rangeBitwiseAnd = solution.rangeBitwiseAnd(m, n); for (int i = m; i <=n ; i++) { System.out.printf(\"%-3d %32s\",i,Integer.toBinaryString(i)); System.out.println(); } System.out.println(\"\u7ed3\u679c\uff1a\"); System.out.printf(\"%-3d %32s\",rangeBitwiseAnd,Integer.toBinaryString(rangeBitwiseAnd)); } } 203 11001011 204 11001100 205 11001101 206 11001110 207 11001111 208 11010000 209 11010001 210 11010010 211 11010011 212 11010100 213 11010101 214 11010110 215 11010111 216 11011000 217 11011001 218 11011010 219 11011011 220 11011100 221 11011101 222 11011110 223 11011111 224 11100000 225 11100001 226 11100010 227 11100011 228 11100100 229 11100101 230 11100110 \u7ed3\u679c\uff1a 192 11000000 \u6211\u4eec\u53d1\u73b0\uff0c\u7ed3\u679c\u53ea\u4e0e\u8fd9\u4e9b\u6570\u4e2d\u6700\u5de6\u8fb9\u201c\u6700\u957f\u201d\u7684\u76f8\u7b49\u7684\u90e8\u5206\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 m \u548c n \u4e0d\u65ad\u53f3\u79fb\uff08\u9898\u76ee\u4e2d\u8bf4\u4e86 m \u548c n \u4e0d\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u53f3\u79fb\u7b26\u53f7\u4f4d\u7684\u95ee\u9898\uff09\uff0c\u79fb\u5230\u76f8\u7b49\u7684\u65f6\u5019\u4e3a\u6b62\u3002\u540c\u65f6\u8bb0\u5f55\u79fb\u52a8\u7684\u6b65\u6570\u3002\u6700\u540e\u5c06\u76f8\u7b49\u7684\u90e8\u5206\u5de6\u79fb\u4e4b\u524d\u7684\u6b65\u6570\uff08\u76f8\u5f53\u4e8e\u8865 0\uff09\uff0c\u5c31\u662f\u6700\u7ec8\u8981\u6c42\u7684\u6570\u3002 \u601d\u8def2\uff1a\u4f4d\u8fd0\u7b97\u505a\u5f97\u9898\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u4f1a\u77e5\u9053\u4e0e\u8fd0\u7b97\u7684\u4e00\u6761\u6027\u8d28\uff1a n & (n - 1) \u53ef\u4ee5\u5c06 n \u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0 \uff0c\u8fd9\u4ef6\u4e8b\u60c5\u4e5f\u662f\u5f88\u9177\u7684\uff0c\u56e0\u4e3a\u5176\u5b9e\u4e0d\u4ec5\u628a 1 \u53d8\u6210\u4e86 0\uff0c\u8fd8\u8df3\u8fc7\u4e86\u5f88\u591a 0\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u66b4\u529b\u89e3\u6cd5\u7684\u53cd\u65b9\u5411\u53bb\u601d\u8003\uff0c\u5012\u7740\u505a\u6309\u4f4d\u4e0e\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u5f97\u5230\u89e3\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#1","text":"public class Solution { public int rangeBitwiseAnd(int m, int n) { int count = 0; while (m != n) { m >>= 1; n >>= 1; count++; } return m << count; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0201-bitwise-and-of-numbers-range/#2","text":"public class Solution2 { /** * \u5229\u7528\u4e86 n &= (n - 1) \u4e00\u4e0b\u80fd\u6d88\u6b7b\u4e00\u5927\u7247 * * @param m * @param n * @return */ public int rangeBitwiseAnd(int m, int n) { while (n > m) { n &= (n - 1); } return n; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0201-bitwise-and-of-numbers-range \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0203-remove-linked-list-elements/","text":"203. Remove Linked List Elements \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 203. Remove Linked List Elements \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002 \u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002 \u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9 ListNode \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6 toString() \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf Java \u5199\u6cd5\uff1a // Definition for singly-linked list. class ListNode { int val; ListNode next; ListNode(int x) { val = x; } // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5 // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868 public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20 @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5 while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode removeElements(ListNode head, int val) { ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode cur = dummyNode; while (cur.next != null) { if (cur.next.val == val) { // \u5f85\u5220\u9664\u7684\u7ed3\u70b9 ListNode delete = cur.next; cur.next = delete.next; delete.next = null; } else { cur = cur.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = {1, 2, 6, 3, 4, 5, 6}; ListNode head = new ListNode(nums); int val = 6; Solution solution = new Solution(); ListNode removeElements = solution.removeElements(head, val); System.out.println(removeElements); } } Python \u5199\u6cd51\uff1a # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None def create_linked_list(nums): if len(nums) == 0: return None head = ListNode(nums[0]) cur = head for i in range(1, len(nums)): cur.next = ListNode(nums[i]) cur = cur.next return head def print_linked_list(list_node): if list_node is None: return cur = list_node while cur: print(cur.val, '->', end=' ') cur = cur.next print('null') class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" if head is None: return None dummy_node = ListNode(-1) dummy_node.next = head pre = dummy_node cur = head while cur: if cur.val == val: pre.next = cur.next cur.next = None cur = pre.next else: pre = cur cur = cur.next return dummy_node.next if __name__ == '__main__': nums = [1, 2, 6, 3, 4, 5, 6] head = create_linked_list(nums) val = 6 print_linked_list(head) s = Solution() result = s.removeElements(head, val) print('\u7ed3\u679c\uff1a') print_linked_list(result) \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09 Java \u5199\u6cd5\uff1a class Solution2 { // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 public ListNode removeElements(ListNode head, int val) { // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 if (head == null) { return head; } // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898 ListNode res = removeElements(head.next, val); // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb if (head.val == val) { // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389 return res; } else { head.next = res; return head; } } } \u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002 Java \u5199\u6cd5\uff1a public class Solution3 { public ListNode removeElements(ListNode head, int val) { if (head == null) { return head; } head.next = removeElements(head.next, val); return head.val == val ? head.next : head; } } Python \u5199\u6cd52\uff1a class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if head is None: return None # \u7136\u540e\u518d\u5199\u4e00\u822c\u60c5\u51b5 if head.val == val: return self.removeElements(head.next, val) else: head.next = self.removeElements(head.next, val) return head Python \u5199\u6cd53\uff1a class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" if head is None: return None head.next = self.removeElements(head.next, val) return head.next if head.val == val else head \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"203. Remove Linked List Elements"},{"location":"leetcode-0203-remove-linked-list-elements/#203-remove-linked-list-elements","text":"","title":"203. Remove Linked List Elements"},{"location":"leetcode-0203-remove-linked-list-elements/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 203. Remove Linked List Elements \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 203. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0203-remove-linked-list-elements/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5e38\u89c4\u89e3\u6cd5\u753b\u56fe\u5206\u6790\u6307\u9488\u7684\u6307\u5411\uff0c\u770b\u56fe\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u8fd9\u662f\u601d\u8def1\u3002 \u601d\u8def1\uff1a\u5220\u9664\u8282\u70b9\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u5934\u7ed3\u70b9\u7279\u6b8a\u5904\u7406\u3002\u5e38\u7528\u7684\u5904\u7406\u5934\u7ed3\u70b9\u7684\u6280\u5de7\u662f\u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u5934\u7ed3\u70b9\u7684\u5904\u7406\u903b\u8f91\u548c\u975e\u5934\u7ed3\u70b9\u5c31\u53ef\u4ee5\u7edf\u4e00\u8d77\u6765\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5904\u7406\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u95ee\u9898\u4e86\u3002\u6b65\u9aa4\uff1a\uff081\uff09\u5904\u7406\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\uff082\uff09\u5047\u8bbe\u89c4\u6a21\u5c0f\u7684\u60c5\u51b5\u89e3\u51b3\u4e86\uff0c\u5927\u4e00\u7ea7\uff08\u591a 1 \u4e2a\u5143\u7d20\uff09\u7684\u60c5\u51b5\u7684\u5982\u4f55\u4e0e\u4e4b\u4ea7\u751f\u8054\u7cfb\u3002 \u8865\u5145\u8bf4\u660e\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u5efa\u8bae\u7ed9 ListNode \u7c7b\u6dfb\u52a0\u53ef\u4ee5\u4f20\u5165\u6570\u7ec4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8986\u76d6 toString() \u65b9\u6cd5\u65b9\u4fbf\u68c0\u6d4b\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u6b63\u786e\u4e0e\u5426\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0203-remove-linked-list-elements/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0203-remove-linked-list-elements/#1","text":"Java \u5199\u6cd5\uff1a // Definition for singly-linked list. class ListNode { int val; ListNode next; ListNode(int x) { val = x; } // \u4e0b\u9762\uff0c\u6211\u4eec\u5c06 LeetCode \u4e2d\u7684\u7ed9\u51fa\u7684\u94fe\u8868\u7684\u8282\u70b9\u8fd9\u4e2a\u7c7b\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u65b9\u4fbf\u6211\u4eec\u7684\u8c03\u8bd5 // 1\u3001\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u901a\u8fc7\u6570\u7ec4\u6784\u5efa\u6570\u5b57\u94fe\u8868 public ListNode(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } // \u4f53\u4f1a\u8fd9\u91cc this \u6307\u4ee3\u4e86\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f head // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u4e5f\u65e0\u987b\u5c06 head \u8fd4\u56de this.val = arr[0]; ListNode cur = this; for (int i = 1; i < arr.length; i++) { cur.next = new ListNode(arr[i]); cur = cur.next; } } // 2\u3001\u91cd\u5199 toString() \u65b9\u6cd5\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u94fe\u8868\u4e2d\u7684\u5143\u7d20 @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; // \u8fd8\u662f\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7406\u89e3\u8fd9\u91cc this \u7684\u7528\u6cd5 while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode removeElements(ListNode head, int val) { ListNode dummyNode = new ListNode(-1); dummyNode.next = head; ListNode cur = dummyNode; while (cur.next != null) { if (cur.next.val == val) { // \u5f85\u5220\u9664\u7684\u7ed3\u70b9 ListNode delete = cur.next; cur.next = delete.next; delete.next = null; } else { cur = cur.next; } } return dummyNode.next; } public static void main(String[] args) { int[] nums = {1, 2, 6, 3, 4, 5, 6}; ListNode head = new ListNode(nums); int val = 6; Solution solution = new Solution(); ListNode removeElements = solution.removeElements(head, val); System.out.println(removeElements); } } Python \u5199\u6cd51\uff1a # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None def create_linked_list(nums): if len(nums) == 0: return None head = ListNode(nums[0]) cur = head for i in range(1, len(nums)): cur.next = ListNode(nums[i]) cur = cur.next return head def print_linked_list(list_node): if list_node is None: return cur = list_node while cur: print(cur.val, '->', end=' ') cur = cur.next print('null') class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" if head is None: return None dummy_node = ListNode(-1) dummy_node.next = head pre = dummy_node cur = head while cur: if cur.val == val: pre.next = cur.next cur.next = None cur = pre.next else: pre = cur cur = cur.next return dummy_node.next if __name__ == '__main__': nums = [1, 2, 6, 3, 4, 5, 6] head = create_linked_list(nums) val = 6 print_linked_list(head) s = Solution() result = s.removeElements(head, val) print('\u7ed3\u679c\uff1a') print_linked_list(result)","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u5e38\u89c4\u89e3\u6cd5\uff0c\u7a7f\u9488\u5f15\u7ebf"},{"location":"leetcode-0203-remove-linked-list-elements/#2","text":"Java \u5199\u6cd5\uff1a class Solution2 { // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 public ListNode removeElements(ListNode head, int val) { // \u9996\u5148\u5904\u7406\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5 if (head == null) { return head; } // \u628a\u4e00\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898 ListNode res = removeElements(head.next, val); // \u4e0b\u9762\u5904\u7406\u539f\u59cb\u89c4\u6a21\u7684\u95ee\u9898\u5982\u4f55\u4e0e\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb if (head.val == val) { // \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u8981\u88ab\u5220\u6389 return res; } else { head.next = res; return head; } } } \u8bf4\u660e\uff1a\u66f4\u7b80\u6d01\u7684\u4e00\u79cd\u5199\u6cd5\u3002 Java \u5199\u6cd5\uff1a public class Solution3 { public ListNode removeElements(ListNode head, int val) { if (head == null) { return head; } head.next = removeElements(head.next, val); return head.val == val ? head.next : head; } } Python \u5199\u6cd52\uff1a class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" # \u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if head is None: return None # \u7136\u540e\u518d\u5199\u4e00\u822c\u60c5\u51b5 if head.val == val: return self.removeElements(head.next, val) else: head.next = self.removeElements(head.next, val) return head Python \u5199\u6cd53\uff1a class Solution: def removeElements(self, head, val): \"\"\" :type head: ListNode :type val: int :rtype: ListNode \"\"\" if head is None: return None head.next = self.removeElements(head.next, val) return head.next if head.val == val else head \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\uff08\u4e2a\u4eba\u63a8\u8350\uff0c\u56e0\u4e3a\u4e0d\u7528\u7a7f\u9488\u5f15\u7ebf\uff0c\u4ee3\u7801\u4e5f\u5f88\u7b80\u6d01\uff09"},{"location":"leetcode-0204-count-primes/","text":"204. Count Primes \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 204. Count Primes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 204. \u8ba1\u6570\u8d28\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d \uff0c\u4e5f\u79f0\u201c\u7d20\u6570\u7b5b\u9009\u6cd5\u201d\uff0c\u662f\u5f97\u5230\u7d20\u6570\u8868\u7684\u4e00\u4e2a\u7ecf\u5178\u65b9\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; public class Solution3 { public int countPrimes(int n) { boolean[] primes = new boolean[n]; Arrays.fill(primes, true); for (int i = 2; i < n; i++) { // \u6bcf\u4e00\u8f6e\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u80af\u5b9a\u662f\u8d28\u6570 if (primes[i]) { for (int j = i + i; j < n; j += i) { primes[j] = false; } } } // \u4e0b\u9762\u5f00\u59cb\u8ba1\u6570 int count = 0; for (int i = 2; i < n; i++) { if (primes[i]) { count++; } } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0204-count-primes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"204. Count Primes"},{"location":"leetcode-0204-count-primes/#204-count-primes","text":"","title":"204. Count Primes"},{"location":"leetcode-0204-count-primes/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 204. Count Primes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 204. \u8ba1\u6570\u8d28\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0204-count-primes/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d \uff0c\u4e5f\u79f0\u201c\u7d20\u6570\u7b5b\u9009\u6cd5\u201d\uff0c\u662f\u5f97\u5230\u7d20\u6570\u8868\u7684\u4e00\u4e2a\u7ecf\u5178\u65b9\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0204-count-primes/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0204-count-primes/#1","text":"import java.util.Arrays; public class Solution3 { public int countPrimes(int n) { boolean[] primes = new boolean[n]; Arrays.fill(primes, true); for (int i = 2; i < n; i++) { // \u6bcf\u4e00\u8f6e\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u80af\u5b9a\u662f\u8d28\u6570 if (primes[i]) { for (int j = i + i; j < n; j += i) { primes[j] = false; } } } // \u4e0b\u9762\u5f00\u59cb\u8ba1\u6570 int count = 0; for (int i = 2; i < n; i++) { if (primes[i]) { count++; } } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0204-count-primes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0205-isomorphic-strings/","text":"205. Isomorphic Strings \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002 \u5982\u679c s \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230 t \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002 \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"egg\", t = \"add\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"foo\", t = \"bar\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: s = \"paper\", t = \"title\" \u8f93\u51fa: true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe s \u548c t \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 205. Isomorphic Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 205. \u540c\u6784\u5b57\u7b26\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u7684\u65f6\u5019\uff0c\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u4e24\u4e2a key \u5bf9\u5e94\u5230\u540c\u4e00\u4e2a value \u4e0a\u4e86\u3002 \u4f7f\u7528 Hash \u8868\u8fdb\u884c\u6620\u5c04\u5173\u7cfb\u7684\u5efa\u7acb\uff0c\u548c\u68c0\u67e5 value \u662f\u5426\u91cd\u590d\u3002 \u5bf9\u4e8e\u5b57\u7b26\u6620\u5c04\u7684\u95ee\u9898\u800c\u8a00\uff0cHash \u8868\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u5f97\u5230\u540c\u6837\u7684\u6548\u679c\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution4 { public boolean isIsomorphic(String s, String t) { int slen = s.length(); int tlen = t.length(); if (slen != tlen) { return false; } Character[] map = new Character[256]; boolean[] set = new boolean[256]; for (int i = 0; i < slen; i++) { char key = s.charAt(i); char value = t.charAt(i); if (map[key] == null) { // \u5efa\u7acb\u6620\u5c04\u5173\u7cfb if (set[value]) { return false; } map[key] = value; set[value] = true; } else { if (map[key] != value) { return false; } } } return true; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0205-isomorphic-strings \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"205. Isomorphic Strings"},{"location":"leetcode-0205-isomorphic-strings/#205-isomorphic-strings","text":"","title":"205. Isomorphic Strings"},{"location":"leetcode-0205-isomorphic-strings/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002 \u5982\u679c s \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230 t \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002 \u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"egg\", t = \"add\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"foo\", t = \"bar\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: s = \"paper\", t = \"title\" \u8f93\u51fa: true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe s \u548c t \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 205. Isomorphic Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 205. \u540c\u6784\u5b57\u7b26\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0205-isomorphic-strings/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u7684\u65f6\u5019\uff0c\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u4e24\u4e2a key \u5bf9\u5e94\u5230\u540c\u4e00\u4e2a value \u4e0a\u4e86\u3002 \u4f7f\u7528 Hash \u8868\u8fdb\u884c\u6620\u5c04\u5173\u7cfb\u7684\u5efa\u7acb\uff0c\u548c\u68c0\u67e5 value \u662f\u5426\u91cd\u590d\u3002 \u5bf9\u4e8e\u5b57\u7b26\u6620\u5c04\u7684\u95ee\u9898\u800c\u8a00\uff0cHash \u8868\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u5f97\u5230\u540c\u6837\u7684\u6548\u679c\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0205-isomorphic-strings/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0205-isomorphic-strings/#1","text":"public class Solution4 { public boolean isIsomorphic(String s, String t) { int slen = s.length(); int tlen = t.length(); if (slen != tlen) { return false; } Character[] map = new Character[256]; boolean[] set = new boolean[256]; for (int i = 0; i < slen; i++) { char key = s.charAt(i); char value = t.charAt(i); if (map[key] == null) { // \u5efa\u7acb\u6620\u5c04\u5173\u7cfb if (set[value]) { return false; } map[key] = value; set[value] = true; } else { if (map[key] != value) { return false; } } } return true; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0205-isomorphic-strings \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0206-reverse-linked-list/","text":"206. reverse-linked-list \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 206. Reverse Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 206. \u53cd\u8f6c\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002 \u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488 pre \u3001 cur \u3001 next \uff1a \u5f53\u524d\u904d\u5386\u7684 cur \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b \u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5 pre \u4e5f\u5fc5\u987b\u6709\uff1b \u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c cur \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488 next \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d next \u53ef\u4ee5\u5728 cur \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002 \u753b\u56fe\u5206\u6790 next \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01 \u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f pre \u8282\u70b9\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u7a7f\u9488\u5f15\u7ebf\u9ebb\u70e6\uff0c\u90a3\u5c31\u4ea4\u7ed9\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u7a7f\u9488\u5f15\u7ebf Java \u5199\u6cd5\uff1a // https://leetcode-cn.com/problems/reverse-linked-list/description/ class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790 // \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb // \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de // \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002 public class Solution { public ListNode reverseList(ListNode head) { // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488 ListNode pre = null; // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488 ListNode cur = head; ListNode next; while (cur != null) { // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488 next = cur.next; // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c cur.next = pre; // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf pre = cur; cur = next; } // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488 return pre; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode reverseList = solution.reverseList(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); System.out.println(reverseList); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur is not None: next_temp = cur.next cur.next = pre pre = cur cur = next_temp return pre \u53c2\u8003\u89e3\u7b542\uff1a\u9012\u5f52\u5199\u6cd5 Java \u5199\u6cd5\uff1a /** * \u4e0d\u60f3\u7a7f\u9488\u5f15\u7ebf\uff0c\u90a3\u5c31\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427 * * @author liwei */ public class Solution2 { /** * \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868 * \u6b65\u9aa4\uff1a\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u7136\u540e\u5047\u8bbe\u89c4\u6a21\u5c0f\u4e00\u4e2a\u7ea7\u522b\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u601d\u8003\u5982\u4f55\u4e0e\u539f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb * * @param head \u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9 * @return \u53cd\u8f6c\u4ee5\u540e\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9 */ public ListNode reverseList(ListNode head) { if (head == null || head.next == null) { return head; } // \u5176\u5b9e\u8fd9\u4e00\u6b65\u505a\u7684\u4e5f\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u5de5\u4f5c\u4e86 ListNode nextNode = head.next; ListNode reverseList = reverseList(nextNode); nextNode.next = head; head.next = null; return reverseList; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution2 solution2 = new Solution2(); ListNode reverseList = solution2.reverseList(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); System.out.println(reverseList); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # head \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5148\u5b58\u8d77\u6765 temp_node = head.next new_head = self.reverseList(temp_node) temp_node.next = head head.next = None return new_head","title":"206. reverse-linked-list"},{"location":"leetcode-0206-reverse-linked-list/#206-reverse-linked-list","text":"","title":"206. reverse-linked-list"},{"location":"leetcode-0206-reverse-linked-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 206. Reverse Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 206. \u53cd\u8f6c\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0206-reverse-linked-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u753b\u56fe\uff0c\u8fd9\u6837\u601d\u8def\u548c\u4ee3\u7801\u90fd\u4f1a\u5f88\u6e05\u6670\u3002 \u5728\u753b\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u51fa\u5b8c\u6210\u7ffb\u8f6c\u94fe\u8868\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4e00\u5171\u8981\u7528 3 \u4e2a\u6307\u9488 pre \u3001 cur \u3001 next \uff1a \u5f53\u524d\u904d\u5386\u7684 cur \u6307\u9488\u4e0d\u5fc5\u591a\u8bf4\uff0c\u662f\u4e00\u5b9a\u6709\u7684\uff1b \u5f53\u524d\u7ed3\u70b9\u7684 next \u6307\u9488\u8981\u6307\u5230\u5b83\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5 pre \u4e5f\u5fc5\u987b\u6709\uff1b \u8fed\u4ee3\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c cur \u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e5f\u5f97\u4f7f\u7528\u4e00\u4e2a\u6307\u9488 next \u4fdd\u5b58\u4e00\u4e0b\uff0c\u5176\u4e2d next \u53ef\u4ee5\u5728 cur \u786e\u5b9a\u4ee5\u540e\u521d\u59cb\u5316\uff1b\u3002 \u753b\u56fe\u5206\u6790 next \u6307\u9488\u7684\u6307\u5411\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5206\u6790\u51fa\u6765\u7684\u6307\u9488\u6307\u5411\u7684\u5148\u540e\u987a\u5e8f\uff0c\u901a\u5e38\u8ddf\u6570\u7ec4\u7684\u5143\u7d20\u4ea4\u6362\u64cd\u4f5c\u4e00\u6837\uff0c\u7a0b\u5e8f\u5199\u51fa\u6765\u662f\u201c\u5934\u5c3e\u76f8\u8fde\u201d\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u9177\uff01 \u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\uff0c\u8fd4\u56de\u7684\u662f pre \u8282\u70b9\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u7a7f\u9488\u5f15\u7ebf\u9ebb\u70e6\uff0c\u90a3\u5c31\u4ea4\u7ed9\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0206-reverse-linked-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0206-reverse-linked-list/#1","text":"Java \u5199\u6cd5\uff1a // https://leetcode-cn.com/problems/reverse-linked-list/description/ class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } // \u5f88\u5e38\u89c4\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5173\u952e\u5728\u4e8e\u753b\u56fe\u5206\u6790 // \u6bcf\u4e00\u6b21\u904d\u5386\u90fd\u8981\u4fdd\u8bc1\u8bbe\u7acb\u7684 3 \u4e2a\u6307\u9488\u7684\u76f8\u5bf9\u5173\u7cfb // \u6ce8\u610f\uff0c\u6700\u540e\u5e94\u8be5\u628a pre \u6307\u9488\u8fd4\u56de // \u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u56e0\u4e3a\u5b83\u4ec5\u4ec5\u904d\u5386\u4e86\u4e00\u6b21\u94fe\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4ec5\u4ec5\u4f7f\u7528\u4e86\u6709\u9650\u4e2a\u7684\u201c\u6307\u9488\u201d\uff0c\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u4e86\u94fe\u8868\u7684\u53cd\u8f6c\u64cd\u4f5c\u3002 public class Solution { public ListNode reverseList(ListNode head) { // \u521d\u59cb\u5316\u4e0a\u4e00\u4e2a\u6307\u9488 ListNode pre = null; // \u521d\u59cb\u5316\u5f53\u524d\u6307\u9488 ListNode cur = head; ListNode next; while (cur != null) { // \u7b2c 1 \u6b65\uff1a\u521d\u59cb\u5316 next \u6307\u9488 next = cur.next; // \u7b2c 2 \u6b65\uff1a\u5b9e\u73b0\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u9488\u7684\u53cd\u8f6c cur.next = pre; // \u7b2c 3 \u6b65\uff1a\u91cd\u65b0\u5b9a\u4e49\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u7684\u5faa\u73af\u53d8\u91cf pre = cur; cur = next; } // \u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u539f\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u6210\u4e3a\u4e86 pre // \u8fd9\u4e2a pre \u5c31\u662f\u53cd\u8f6c\u4ee5\u540e\u7684\u65b0\u7684\u94fe\u8868\u7684\u5934\u6307\u9488 return pre; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution solution = new Solution(); ListNode reverseList = solution.reverseList(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); System.out.println(reverseList); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" pre = None cur = head while cur is not None: next_temp = cur.next cur.next = pre pre = cur cur = next_temp return pre","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u7a7f\u9488\u5f15\u7ebf"},{"location":"leetcode-0206-reverse-linked-list/#2","text":"Java \u5199\u6cd5\uff1a /** * \u4e0d\u60f3\u7a7f\u9488\u5f15\u7ebf\uff0c\u90a3\u5c31\u9012\u5f52\u6765\u505a\u8fd9\u4ef6\u4e8b\u60c5\u5427 * * @author liwei */ public class Solution2 { /** * \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868 * \u6b65\u9aa4\uff1a\u5148\u5199\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u7136\u540e\u5047\u8bbe\u89c4\u6a21\u5c0f\u4e00\u4e2a\u7ea7\u522b\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u601d\u8003\u5982\u4f55\u4e0e\u539f\u89c4\u6a21\u7684\u95ee\u9898\u5efa\u7acb\u8054\u7cfb * * @param head \u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9 * @return \u53cd\u8f6c\u4ee5\u540e\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9 */ public ListNode reverseList(ListNode head) { if (head == null || head.next == null) { return head; } // \u5176\u5b9e\u8fd9\u4e00\u6b65\u505a\u7684\u4e5f\u662f\u7a7f\u9488\u5f15\u7ebf\u7684\u5de5\u4f5c\u4e86 ListNode nextNode = head.next; ListNode reverseList = reverseList(nextNode); nextNode.next = head; head.next = null; return reverseList; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); System.out.println(head); Solution2 solution2 = new Solution2(); ListNode reverseList = solution2.reverseList(head); System.out.println(\"\u53cd\u8f6c\u4e4b\u540e\"); System.out.println(reverseList); } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # head \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5148\u5b58\u8d77\u6765 temp_node = head.next new_head = self.reverseList(temp_node) temp_node.next = head head.next = None return new_head","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u9012\u5f52\u5199\u6cd5"},{"location":"leetcode-0207-course-schedule/","text":"207. Course Schedule \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 207. Course Schedule \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 207. \u8bfe\u7a0b\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u8003\u67e5\u4e86\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u5f04\u6e05\u695a\u4e86\u62d3\u6251\u6392\u5e8f\u4ee5\u540e\uff0c\u5176\u5b9e\u5199\u51fa\u4ee3\u7801\u662f\u5f88\u8f7b\u677e\u7684\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashSet; public class Solution { /** * @param numCourses \u603b\u5171\u6709\u591a\u5c11\u95e8\u8bfe\u7a0b * @param prerequisites [[1,0],[1,2],[0,1]] \u5e94\u8be5\u8fd4\u56de false * @return */ public boolean canFinish(int numCourses, int[][] prerequisites) { if (numCourses == 0) { return false; } // \u90bb\u63a5\u8868\uff0c\u4f7f\u7528 Set \u662f\u4e3a\u4e86\u53bb\u91cd HashSet<Integer>[] table = new HashSet[numCourses]; // \u521d\u59cb\u5316\u90bb\u63a5\u8868 for (int i = 0; i < numCourses; i++) { table[i] = new HashSet<>(); } // \u586b\u5199\u90bb\u63a5\u8868\uff0c\u6709\u591a\u5c11\u6761\u6709\u5411\u8fb9\uff0c\u6ce8\u610f\uff1a\u540e\u9762\u7684\u7ed3\u70b9\u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9 // \u6dfb\u52a0\u5165\u5ea6\u5217\u8868\uff0c\u5217\u8868\u7684\u4e2a\u6570\u4e0e\u8282\u70b9\u4e2a\u6570\u4e00\u81f4 // \u586b\u5199\u90bb\u63a5\u8868\u7684\u65f6\u5019\uff0c\u628a\u5165\u5ea6\u8868\u4e5f\u586b\u4e86 int[] inDegree = new int[numCourses]; for (int[] p : prerequisites) { table[p[1]].add(p[0]); inDegree[p[0]]++; } // \u904d\u5386\u5165\u5ea6\u77e9\u9635 for (int i = 0; i < numCourses; i++) { // \u6bcf\u4e00\u8f6e\u90fd\u5148\u627e\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u5c06\u5b83\u8bbe\u7f6e\u6210 -1 \u8868\u793a\u5df2\u7ecf\u4ece\u90bb\u63a5\u8868\u4e2d\u5220\u9664 int j = 0; while (j < numCourses && inDegree[j] != 0) { j++; } // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u627e\u5230\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff0c\u8bfe\u7a0b\u5b66\u4e60\u4efb\u52a1\u5c31\u65e0\u6cd5\u5b8c\u6210 // \u6240\u4ee5\u8fd4\u56de false if (j == numCourses) { return false; } // \u627e\u5230\u4e86\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 // 1\u3001\u5c06\u5b83\u5220\u9664\uff0c\u5373\u8bbe\u7f6e\u4e3a -1 // 2\u3001\u5c06\u5b83\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u4e00 inDegree[j] = -1; for (int n : table[j]) { inDegree[n]--; } } return true; } } \u53c2\u8003\u89e3\u7b542 import java.util.ArrayList; import java.util.LinkedList; import java.util.List; /** * \u8be5\u65b9\u6cd5\u8fd8\u5b58\u50a8\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c * * @author liwei * @date 18/6/24 \u4e0b\u534812:20 */ public class Solution4 { /** * @param numCourses * @param prerequisites * @return */ public boolean canFinish(int numCourses, int[][] prerequisites) { if (numCourses <= 0) { return false; } int plen = prerequisites.length; if (plen == 0) { return true; } int[] inDegree = new int[numCourses]; for (int[] p : prerequisites) { inDegree[p[0]]++; } LinkedList<Integer> queue = new LinkedList<>(); // \u9996\u5148\u52a0\u5165\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.addLast(i); } } // \u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c List<Integer> res = new ArrayList<>(); while (!queue.isEmpty()) { Integer num = queue.removeFirst(); res.add(num); // \u628a\u90bb\u8fb9\u5168\u90e8\u904d\u5386\u4e00\u4e0b for (int[] p : prerequisites) { if (p[1] == num) { inDegree[p[0]]--; if (inDegree[p[0]] == 0) { queue.addLast(p[0]); } } } } // System.out.println(\"\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\uff1a\"); // System.out.println(res); return res.size() == numCourses; } public static void main(String[] args) { int[][] prerequisites = new int[][]{{1, 0}, {2, 6}, {1, 7}, {6, 4}, {7, 0}, {0, 5}}; int numCourses = 8; Solution4 solution4 = new Solution4(); boolean canFinish = solution4.canFinish(numCourses, prerequisites); System.out.println(canFinish); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0207-course-schedule \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"207. Course Schedule"},{"location":"leetcode-0207-course-schedule/#207-course-schedule","text":"","title":"207. Course Schedule"},{"location":"leetcode-0207-course-schedule/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 207. Course Schedule \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 207. \u8bfe\u7a0b\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0207-course-schedule/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u8003\u67e5\u4e86\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u5f04\u6e05\u695a\u4e86\u62d3\u6251\u6392\u5e8f\u4ee5\u540e\uff0c\u5176\u5b9e\u5199\u51fa\u4ee3\u7801\u662f\u5f88\u8f7b\u677e\u7684\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0207-course-schedule/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0207-course-schedule/#1","text":"import java.util.HashSet; public class Solution { /** * @param numCourses \u603b\u5171\u6709\u591a\u5c11\u95e8\u8bfe\u7a0b * @param prerequisites [[1,0],[1,2],[0,1]] \u5e94\u8be5\u8fd4\u56de false * @return */ public boolean canFinish(int numCourses, int[][] prerequisites) { if (numCourses == 0) { return false; } // \u90bb\u63a5\u8868\uff0c\u4f7f\u7528 Set \u662f\u4e3a\u4e86\u53bb\u91cd HashSet<Integer>[] table = new HashSet[numCourses]; // \u521d\u59cb\u5316\u90bb\u63a5\u8868 for (int i = 0; i < numCourses; i++) { table[i] = new HashSet<>(); } // \u586b\u5199\u90bb\u63a5\u8868\uff0c\u6709\u591a\u5c11\u6761\u6709\u5411\u8fb9\uff0c\u6ce8\u610f\uff1a\u540e\u9762\u7684\u7ed3\u70b9\u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9 // \u6dfb\u52a0\u5165\u5ea6\u5217\u8868\uff0c\u5217\u8868\u7684\u4e2a\u6570\u4e0e\u8282\u70b9\u4e2a\u6570\u4e00\u81f4 // \u586b\u5199\u90bb\u63a5\u8868\u7684\u65f6\u5019\uff0c\u628a\u5165\u5ea6\u8868\u4e5f\u586b\u4e86 int[] inDegree = new int[numCourses]; for (int[] p : prerequisites) { table[p[1]].add(p[0]); inDegree[p[0]]++; } // \u904d\u5386\u5165\u5ea6\u77e9\u9635 for (int i = 0; i < numCourses; i++) { // \u6bcf\u4e00\u8f6e\u90fd\u5148\u627e\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u5c06\u5b83\u8bbe\u7f6e\u6210 -1 \u8868\u793a\u5df2\u7ecf\u4ece\u90bb\u63a5\u8868\u4e2d\u5220\u9664 int j = 0; while (j < numCourses && inDegree[j] != 0) { j++; } // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u627e\u5230\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff0c\u8bfe\u7a0b\u5b66\u4e60\u4efb\u52a1\u5c31\u65e0\u6cd5\u5b8c\u6210 // \u6240\u4ee5\u8fd4\u56de false if (j == numCourses) { return false; } // \u627e\u5230\u4e86\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 // 1\u3001\u5c06\u5b83\u5220\u9664\uff0c\u5373\u8bbe\u7f6e\u4e3a -1 // 2\u3001\u5c06\u5b83\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u4e00 inDegree[j] = -1; for (int n : table[j]) { inDegree[n]--; } } return true; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0207-course-schedule/#2","text":"import java.util.ArrayList; import java.util.LinkedList; import java.util.List; /** * \u8be5\u65b9\u6cd5\u8fd8\u5b58\u50a8\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c * * @author liwei * @date 18/6/24 \u4e0b\u534812:20 */ public class Solution4 { /** * @param numCourses * @param prerequisites * @return */ public boolean canFinish(int numCourses, int[][] prerequisites) { if (numCourses <= 0) { return false; } int plen = prerequisites.length; if (plen == 0) { return true; } int[] inDegree = new int[numCourses]; for (int[] p : prerequisites) { inDegree[p[0]]++; } LinkedList<Integer> queue = new LinkedList<>(); // \u9996\u5148\u52a0\u5165\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.addLast(i); } } // \u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c List<Integer> res = new ArrayList<>(); while (!queue.isEmpty()) { Integer num = queue.removeFirst(); res.add(num); // \u628a\u90bb\u8fb9\u5168\u90e8\u904d\u5386\u4e00\u4e0b for (int[] p : prerequisites) { if (p[1] == num) { inDegree[p[0]]--; if (inDegree[p[0]] == 0) { queue.addLast(p[0]); } } } } // System.out.println(\"\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\uff1a\"); // System.out.println(res); return res.size() == numCourses; } public static void main(String[] args) { int[][] prerequisites = new int[][]{{1, 0}, {2, 6}, {1, 7}, {6, 4}, {7, 0}, {0, 5}}; int numCourses = 8; Solution4 solution4 = new Solution4(); boolean canFinish = solution4.canFinish(numCourses, prerequisites); System.out.println(canFinish); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0207-course-schedule \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0208-implement-trie-prefix-tree/","text":"208. Implement Trie (Prefix Tree) \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert , search , \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 208. Implement Trie (Prefix Tree) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528 Map\uff09 \u6ce8\u610f\uff1a\u5185\u90e8\u7c7b Node \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a private \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002 import java.util.HashMap; public class Trie { private Node root; // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root private class Node { private boolean isWord; // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868 private HashMap<Character, Node> next; public Node() { this.isWord = false; this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public Trie() { // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26 root = new Node(); } /** * Inserts a word into the trie. */ public void insert(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the trie. */ public boolean search(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86 } } return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b } /** * Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { Node curNode = root; for (int i = 0; i < prefix.length(); i++) { Character c = prefix.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return false; } } // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00 return true; } public static void main(String[] args) { Trie trie = new Trie(); trie.insert(\"apple\"); boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true System.out.println(search1); boolean search2 = trie.search(\"app\"); // \u8fd4\u56de false System.out.println(search2); boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true System.out.println(startsWith); trie.insert(\"app\"); boolean search3 = trie.search(\"app\"); // \u8fd4\u56de true System.out.println(search3); } } \u53c2\u8003\u89e3\u7b542\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528\u7ed3\u70b9\u6570\u7ec4\uff09 public class Trie { private Node root; private class Node { private Node[] dict; private boolean isWord; public Node() { dict = new Node[26]; this.isWord = false; } } /** * Initialize your data structure here. */ public Trie() { root = new Node(); } /** * Inserts a word into the trie. */ public void insert(String word) { int len = word.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curChar = word.charAt(i); Node next = curNode.dict[curChar - 'a']; if (next == null) { curNode.dict[curChar - 'a'] = new Node(); } curNode = curNode.dict[curChar - 'a']; } if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the trie. */ public boolean search(String word) { int len = word.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curC = word.charAt(i); Node next = curNode.dict[curC - 'a']; if (next == null) { return false; } else { curNode = next; } } return curNode.isWord; } /** * Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { int len = prefix.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curC = prefix.charAt(i); Node next = curNode.dict[curC - 'a']; if (next == null) { return false; } else { curNode = next; } } return true; } public static void main(String[] args) { Trie trie = new Trie(); trie.insert(\"helloworld\"); boolean startsWith = trie.startsWith(\"hello\"); System.out.println(startsWith); boolean search1 = trie.search(\"helloworld\"); System.out.println(search1); boolean search2 = trie.search(\"hello\"); System.out.println(search2); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0208-implement-trie-prefix-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"208. Implement Trie (Prefix Tree)"},{"location":"leetcode-0208-implement-trie-prefix-tree/#208-implement-trie-prefix-tree","text":"","title":"208. Implement Trie (Prefix Tree)"},{"location":"leetcode-0208-implement-trie-prefix-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert , search , \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 208. Implement Trie (Prefix Tree) \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0208-implement-trie-prefix-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u524d\u7f00\u6811\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u56f0\u96be\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0208-implement-trie-prefix-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0208-implement-trie-prefix-tree/#1-map","text":"\u6ce8\u610f\uff1a\u5185\u90e8\u7c7b Node \u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u8981\u58f0\u660e\u4e3a private \uff0c\u5426\u5219\u4e0d\u80fd\u5f97\u5230 Accept \u3002 import java.util.HashMap; public class Trie { private Node root; // \u53ea\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u8bbf\u95ee\u63a7\u5236\u7b26\u662f root private class Node { private boolean isWord; // \u4e0d\u8981\u5fd8\u8bb0\u5199\u4e0a\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316 next \u6240\u5bf9\u5e94\u7684 Hash \u8868 private HashMap<Character, Node> next; public Node() { this.isWord = false; this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public Trie() { // \u6839\u8282\u70b9\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26 root = new Node(); } /** * Inserts a word into the trie. */ public void insert(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } // \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8bbe\u7f6e\u8fc7\uff0c\u624d\u8bbe\u7f6e\u6210 true if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the trie. */ public boolean search(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return false; // \u4e2d\u9014\u5c31\u51fa\u9519\u4e86 } } return curNode.isWord; // \u5230\u4e86\u672b\u5c3e\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b } /** * Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { Node curNode = root; for (int i = 0; i < prefix.length(); i++) { Character c = prefix.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return false; } } // \u80fd\u8d70\u5b8c\u5c31\u8bf4\u660e\u6709\u8fd9\u4e2a\u524d\u7f00 return true; } public static void main(String[] args) { Trie trie = new Trie(); trie.insert(\"apple\"); boolean search1 = trie.search(\"apple\");// \u8fd4\u56de true System.out.println(search1); boolean search2 = trie.search(\"app\"); // \u8fd4\u56de false System.out.println(search2); boolean startsWith = trie.startsWith(\"app\");// \u8fd4\u56de true System.out.println(startsWith); trie.insert(\"app\"); boolean search3 = trie.search(\"app\"); // \u8fd4\u56de true System.out.println(search3); } }","title":"\u53c2\u8003\u89e3\u7b541\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528 Map\uff09"},{"location":"leetcode-0208-implement-trie-prefix-tree/#2","text":"public class Trie { private Node root; private class Node { private Node[] dict; private boolean isWord; public Node() { dict = new Node[26]; this.isWord = false; } } /** * Initialize your data structure here. */ public Trie() { root = new Node(); } /** * Inserts a word into the trie. */ public void insert(String word) { int len = word.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curChar = word.charAt(i); Node next = curNode.dict[curChar - 'a']; if (next == null) { curNode.dict[curChar - 'a'] = new Node(); } curNode = curNode.dict[curChar - 'a']; } if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the trie. */ public boolean search(String word) { int len = word.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curC = word.charAt(i); Node next = curNode.dict[curC - 'a']; if (next == null) { return false; } else { curNode = next; } } return curNode.isWord; } /** * Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { int len = prefix.length(); Node curNode = root; for (int i = 0; i < len; i++) { char curC = prefix.charAt(i); Node next = curNode.dict[curC - 'a']; if (next == null) { return false; } else { curNode = next; } } return true; } public static void main(String[] args) { Trie trie = new Trie(); trie.insert(\"helloworld\"); boolean startsWith = trie.startsWith(\"hello\"); System.out.println(startsWith); boolean search1 = trie.search(\"helloworld\"); System.out.println(search1); boolean search2 = trie.search(\"hello\"); System.out.println(search2); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0208-implement-trie-prefix-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u5185\u90e8\u5b57\u5178\u4f7f\u7528\u7ed3\u70b9\u6570\u7ec4\uff09"},{"location":"leetcode-0209-minimum-size-subarray-sum/","text":"209. Minimum Size Subarray Sum \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 s \uff0c \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b: \u8f93\u5165: s = 7, nums = [2,3,1,2,4,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u5b50\u6570\u7ec4 [4,3] \u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 O ( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 209. Minimum Size Subarray Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def\u4e00\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e \u4e3a\u4ec0\u4e48\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff1f\u201c\u4e8c\u5206\u67e5\u627e\u201d\u4e0d\u662f\u8981\u6c42\u6570\u7ec4\u662f\u6709\u5e8f\u7684\u5417\uff1f \u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\u8fd9\u4e2a\u6761\u4ef6\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u4e2d\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u56e0\u4e3a\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u4e00\u5b9a\u662f\u4e25\u683c\u589e\u52a0\u7684\u3002 \u4efb\u610f\u533a\u95f4\u548c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5f97\u5230\uff0c\u8fd9\u662f\u6211\u4eec\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5\u3002 \u8d77\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u533a\u95f4\u8d8a\u957f\uff0c\u533a\u95f4\u548c\u8d8a\u5927\u3002 \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u6280\u5de7\u6765\u5b8c\u6210\uff0c\u8981\u770b\u8fc7\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 \u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6ee1\u8db3\u533a\u95f4\u548c >= s \u7684\u6700\u5c0f\u5b50\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u626b\u63cf\u3002 \u5f53\u533a\u95f4\u548c\u5c0f\u4e8e s \u7684\u65f6\u5019\uff0c\u53f3\u533a\u95f4\u7684\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u8fd9\u4e00\u70b9\u4f9d\u8d56\u5916\u5c42\u5faa\u73af\u7684\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b \u4e00\u65e6\u533a\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e s\uff0c\u5c1d\u8bd5\u4e00\u6b65\u4e00\u6b65\u7f29\u5c0f\u5de6\u533a\u95f4\u7aef\u70b9\uff0c\u770b\u770b\u662f\u5426\u80fd\u5f97\u5230\u4e00\u4e2a\u66f4\u77ed\u7684\u533a\u95f4\uff0c\u6ee1\u8db3\u533a\u95f4\u548c >=s\uff0c\u8fd9\u4e00\u6b65\u901a\u8fc7\u4e00\u4e2a\u5185\u5c42\u5faa\u73af\u5b9e\u73b0\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\u3002 public class Solution { public int minSubArrayLen(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } // \u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4 // \u56e0\u4e3a nums \u5168\u90fd\u662f\u6b63\u6574\u6570\uff0c\u56e0\u6b64 preSum \u4e25\u683c\u5355\u8c03\u589e\u52a0 int[] preSum = new int[len]; preSum[0] = nums[0]; for (int i = 1; i < len; i++) { preSum[i] = preSum[i - 1] + nums[i]; } // \u56e0\u4e3a\u524d\u7f00\u548c\u6570\u7ec4\u4e25\u683c\u5355\u8c03\u589e\u52a0\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 // \u6700\u540e\u4e00\u4f4d\u6ca1\u6709\u4e0b\u4e00\u4f4d\u4e86\uff0c\u6240\u4ee5\u5916\u5c42\u904d\u5386\u5230\u6700\u540e\u4e00\u4f4d\u7684\u524d\u4e00\u4f4d\u5c31\u53ef\u4ee5\u4e86 int ret = len + 1; for (int i = 0; i < len - 1; i++) { // \u8ba1\u7b97\u533a\u95f4\u548c int l = i; int r = len - 1; // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u6709\u4e0b\u754c // i \u7684\u6700\u5927\u503c\u662f len-2, // ans - i + 1 >= len + 1 // ans >= i + len = 2 * len -2 int ans = 2 * len - 2; // int ans = 2 * len - 1; \u80fd\u901a\u8fc7 // int ans = 2 * len - 3; \u4e0d\u80fd\u901a\u8fc7 // \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u662f l > r while (l <= r) { int mid = l + (r - l) / 2; // \u8ba1\u7b97\u4e00\u4e0b\u533a\u95f4\u548c\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5230\u7d22\u5f15 i \u7684\u533a\u95f4\u548c\u4e3a s // 13 14 15 17 19 20 int segmentSum = preSum[mid] - (i == 0 ? 0 : preSum[i - 1]); if (segmentSum >= s) { ans = mid; r = mid - 1; } else { l = mid + 1; } } ret = Integer.min(ans - i + 1, ret); } if (ret == len + 1) { return 0; } return ret; } } \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3 public class Solution { public int minSubArrayLen(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int r = -1; // \u6ce8\u610f1\uff1a\u65e2\u7136\u662f\u6c42\u6700\u5c0f\u7684\u957f\u5ea6\uff0c\u521d\u59cb\u503c\u5e94\u8be5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u8fbe\u5230\u7684\u4e0a\u9650 int minSubArrayLen = len + 1; int sum = 0; for (int i = 0; i < len; i++) { sum += nums[i]; r++; // \u6ce8\u610f2\uff1a\u8fd9\u91cc\u7684 = \u53f7\u4e0d\u8981\u5fd8\u8bb0\u4e86 while (sum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, r - l + 1); sum -= nums[l]; l++; } } // \u5982\u679c\u5168\u90e8\u6570\u7ec4\u5143\u7d20\u52a0\u8d77\u6765\u90fd <s \uff0c\u5373 minSubArrayLen \u7684\u503c\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u6839\u636e\u9898\u610f\uff0c\u8fd4\u56de 0 if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } // \u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u8fb9\u754c\u6761\u4ef6\u8bbe\u7f6e\u4e0d\u4e00\u6837 public int minSubArrayLen1(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int r = 0; int minSubArrayLen = len + 1; int segmentSum = 0; for (int num : nums) { segmentSum += num; r++; // \u6ce8\u610f\uff1a\u6839\u636e\u9898\u610f\"\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\" // \u6ce8\u610f\u8fd9\u4e2a\u8fb9\u754c\u6761\u4ef6 while (segmentSum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, r - l); segmentSum -= nums[l]; l++; } } if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } // 3 \u79cd\u5199\u6cd5\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\uff1a\u6ed1\u52a8\u7a97\u53e3 public int minSubArrayLen2(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int segmentSum = 0; int minSubArrayLen = len + 1; for (int i = 0; i < len; i++) { segmentSum += nums[i]; while (segmentSum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, i - l + 1); segmentSum -= nums[l]; l++; } } if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0209-minimum-size-subarray-sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"209. Minimum Size Subarray Sum"},{"location":"leetcode-0209-minimum-size-subarray-sum/#209-minimum-size-subarray-sum","text":"","title":"209. Minimum Size Subarray Sum"},{"location":"leetcode-0209-minimum-size-subarray-sum/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 s \uff0c \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b: \u8f93\u5165: s = 7, nums = [2,3,1,2,4,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u5b50\u6570\u7ec4 [4,3] \u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 O ( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 209. Minimum Size Subarray Sum \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0209-minimum-size-subarray-sum/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def\u4e00\uff1a\u4f7f\u7528\u4e8c\u5206\u67e5\u627e \u4e3a\u4ec0\u4e48\u80fd\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff1f\u201c\u4e8c\u5206\u67e5\u627e\u201d\u4e0d\u662f\u8981\u6c42\u6570\u7ec4\u662f\u6709\u5e8f\u7684\u5417\uff1f \u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\u8fd9\u4e2a\u6761\u4ef6\u5728\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\u4e2d\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u56e0\u4e3a\u201c\u6570\u7ec4\u662f\u6b63\u6574\u6570\u201d\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u4e00\u5b9a\u662f\u4e25\u683c\u589e\u52a0\u7684\u3002 \u4efb\u610f\u533a\u95f4\u548c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5f97\u5230\uff0c\u8fd9\u662f\u6211\u4eec\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5\u3002 \u8d77\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u533a\u95f4\u8d8a\u957f\uff0c\u533a\u95f4\u548c\u8d8a\u5927\u3002 \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u6280\u5de7\u6765\u5b8c\u6210\uff0c\u8981\u770b\u8fc7\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002 \u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6ee1\u8db3\u533a\u95f4\u548c >= s \u7684\u6700\u5c0f\u5b50\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u626b\u63cf\u3002 \u5f53\u533a\u95f4\u548c\u5c0f\u4e8e s \u7684\u65f6\u5019\uff0c\u53f3\u533a\u95f4\u7684\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u8fd9\u4e00\u70b9\u4f9d\u8d56\u5916\u5c42\u5faa\u73af\u7684\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b \u4e00\u65e6\u533a\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e s\uff0c\u5c1d\u8bd5\u4e00\u6b65\u4e00\u6b65\u7f29\u5c0f\u5de6\u533a\u95f4\u7aef\u70b9\uff0c\u770b\u770b\u662f\u5426\u80fd\u5f97\u5230\u4e00\u4e2a\u66f4\u77ed\u7684\u533a\u95f4\uff0c\u6ee1\u8db3\u533a\u95f4\u548c >=s\uff0c\u8fd9\u4e00\u6b65\u901a\u8fc7\u4e00\u4e2a\u5185\u5c42\u5faa\u73af\u5b9e\u73b0\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0209-minimum-size-subarray-sum/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0209-minimum-size-subarray-sum/#1","text":"public class Solution { public int minSubArrayLen(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } // \u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4 // \u56e0\u4e3a nums \u5168\u90fd\u662f\u6b63\u6574\u6570\uff0c\u56e0\u6b64 preSum \u4e25\u683c\u5355\u8c03\u589e\u52a0 int[] preSum = new int[len]; preSum[0] = nums[0]; for (int i = 1; i < len; i++) { preSum[i] = preSum[i - 1] + nums[i]; } // \u56e0\u4e3a\u524d\u7f00\u548c\u6570\u7ec4\u4e25\u683c\u5355\u8c03\u589e\u52a0\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 // \u6700\u540e\u4e00\u4f4d\u6ca1\u6709\u4e0b\u4e00\u4f4d\u4e86\uff0c\u6240\u4ee5\u5916\u5c42\u904d\u5386\u5230\u6700\u540e\u4e00\u4f4d\u7684\u524d\u4e00\u4f4d\u5c31\u53ef\u4ee5\u4e86 int ret = len + 1; for (int i = 0; i < len - 1; i++) { // \u8ba1\u7b97\u533a\u95f4\u548c int l = i; int r = len - 1; // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u6709\u4e0b\u754c // i \u7684\u6700\u5927\u503c\u662f len-2, // ans - i + 1 >= len + 1 // ans >= i + len = 2 * len -2 int ans = 2 * len - 2; // int ans = 2 * len - 1; \u80fd\u901a\u8fc7 // int ans = 2 * len - 3; \u4e0d\u80fd\u901a\u8fc7 // \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u662f l > r while (l <= r) { int mid = l + (r - l) / 2; // \u8ba1\u7b97\u4e00\u4e0b\u533a\u95f4\u548c\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5230\u7d22\u5f15 i \u7684\u533a\u95f4\u548c\u4e3a s // 13 14 15 17 19 20 int segmentSum = preSum[mid] - (i == 0 ? 0 : preSum[i - 1]); if (segmentSum >= s) { ans = mid; r = mid - 1; } else { l = mid + 1; } } ret = Integer.min(ans - i + 1, ret); } if (ret == len + 1) { return 0; } return ret; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u6784\u9020\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\u3002"},{"location":"leetcode-0209-minimum-size-subarray-sum/#2","text":"public class Solution { public int minSubArrayLen(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int r = -1; // \u6ce8\u610f1\uff1a\u65e2\u7136\u662f\u6c42\u6700\u5c0f\u7684\u957f\u5ea6\uff0c\u521d\u59cb\u503c\u5e94\u8be5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u8fbe\u5230\u7684\u4e0a\u9650 int minSubArrayLen = len + 1; int sum = 0; for (int i = 0; i < len; i++) { sum += nums[i]; r++; // \u6ce8\u610f2\uff1a\u8fd9\u91cc\u7684 = \u53f7\u4e0d\u8981\u5fd8\u8bb0\u4e86 while (sum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, r - l + 1); sum -= nums[l]; l++; } } // \u5982\u679c\u5168\u90e8\u6570\u7ec4\u5143\u7d20\u52a0\u8d77\u6765\u90fd <s \uff0c\u5373 minSubArrayLen \u7684\u503c\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u6839\u636e\u9898\u610f\uff0c\u8fd4\u56de 0 if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } // \u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u8fb9\u754c\u6761\u4ef6\u8bbe\u7f6e\u4e0d\u4e00\u6837 public int minSubArrayLen1(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int r = 0; int minSubArrayLen = len + 1; int segmentSum = 0; for (int num : nums) { segmentSum += num; r++; // \u6ce8\u610f\uff1a\u6839\u636e\u9898\u610f\"\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\" // \u6ce8\u610f\u8fd9\u4e2a\u8fb9\u754c\u6761\u4ef6 while (segmentSum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, r - l); segmentSum -= nums[l]; l++; } } if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } // 3 \u79cd\u5199\u6cd5\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\uff1a\u6ed1\u52a8\u7a97\u53e3 public int minSubArrayLen2(int s, int[] nums) { int len = nums.length; if (len == 0) { return 0; } int l = 0; int segmentSum = 0; int minSubArrayLen = len + 1; for (int i = 0; i < len; i++) { segmentSum += nums[i]; while (segmentSum >= s) { minSubArrayLen = Integer.min(minSubArrayLen, i - l + 1); segmentSum -= nums[l]; l++; } } if (minSubArrayLen == len + 1) { return 0; } return minSubArrayLen; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0209-minimum-size-subarray-sum \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3"},{"location":"leetcode-0210-course-schedule-ii/","text":"210. Course Schedule II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 210. Course Schedule II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 210. \u8bfe\u7a0b\u8868 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u3002 \u6211\u4e2a\u4eba\u89c9\u5f97\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u601d\u8def\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0cdfs \u9012\u5f52\u8981\u5224\u65ad\u7ed3\u70b9\u7684\u72b6\u6001\uff0c\u6709\u90a3\u4e48\u4e00\u4e9b\u7ed5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u3002 import java.util.ArrayList; import java.util.HashSet; import java.util.LinkedList; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if (numCourses <= 0) { return new int[0]; } // \u90bb\u63a5\u8868\u8868\u793a HashSet<Integer>[] graph = new HashSet[numCourses]; for (int i = 0; i < numCourses; i++) { graph[i] = new HashSet<>(); } // \u5165\u5ea6\u8868 int[] inDegree = new int[numCourses]; // \u904d\u5386 prerequisites \u7684\u65f6\u5019\uff0c\u628a \u90bb\u63a5\u8868 \u548c \u5165\u5ea6\u8868 \u90fd\u586b\u4e0a for (int[] p : prerequisites) { graph[p[1]].add(p[0]); inDegree[p[0]]++; } LinkedList<Integer> queue = new LinkedList<>(); for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.addLast(i); } } ArrayList<Integer> res = new ArrayList<>(); while (!queue.isEmpty()) { // \u5f53\u524d\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 Integer inDegreeNode = queue.removeFirst(); // \u52a0\u5165\u7ed3\u679c\u96c6\u4e2d res.add(inDegreeNode); // \u4e0b\u9762\u4ece\u56fe\u4e2d\u5220\u53bb // \u5f97\u5230\u6240\u6709\u7684\u540e\u7ee7\u8bfe\u7a0b\uff0c\u63a5\u4e0b\u6765\u628a\u5b83\u4eec\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u53bb 1 HashSet<Integer> nextCourses = graph[inDegreeNode]; for (Integer nextCourse : nextCourses) { inDegree[nextCourse]--; // \u9a6c\u4e0a\u68c0\u6d4b\u8be5\u7ed3\u70b9\u7684\u5165\u5ea6\u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u4e3a 0\uff0c\u9a6c\u4e0a\u52a0\u5165\u961f\u5217 if (inDegree[nextCourse] == 0) { queue.addLast(nextCourse); } } } // \u5982\u679c\u7ed3\u679c\u96c6\u4e2d\u7684\u6570\u91cf\u4e0d\u7b49\u4e8e\u7ed3\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u4e0d\u80fd\u5b8c\u6210\u8bfe\u7a0b\u4efb\u52a1\uff0c\u8fd9\u4e00\u70b9\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u8bba int resLen = res.size(); if (resLen == numCourses) { int[] ret = new int[numCourses]; for (int i = 0; i < numCourses; i++) { ret[i] = res.get(i); } return ret; } else { return new int[0]; } } } \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 import java.util.HashSet; import java.util.Stack; /** * @author liwei * @date 18/6/24 \u4e0b\u53484:10 */ public class Solution3 { /** * @param numCourses * @param prerequisites * @return */ public int[] findOrder(int numCourses, int[][] prerequisites) { if (numCourses <= 0) { // \u8fde\u8bfe\u7a0b\u6570\u76ee\u90fd\u6ca1\u6709\uff0c\u5c31\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u7ec3\u4e60\u4e86\uff0c\u6839\u636e\u9898\u610f\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4 return new int[0]; } int plen = prerequisites.length; if (plen == 0) { // \u6ca1\u6709\u6709\u5411\u8fb9\uff0c\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8bfe\u7a0b\u4f9d\u8d56\uff0c\u4efb\u52a1\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210 int[] ret = new int[numCourses]; for (int i = 0; i < numCourses; i++) { ret[i] = i; } return ret; } int[] marked = new int[numCourses]; // \u521d\u59cb\u5316\u6709\u5411\u56fe begin HashSet<Integer>[] graph = new HashSet[numCourses]; for (int i = 0; i < numCourses; i++) { graph[i] = new HashSet<>(); } // \u521d\u59cb\u5316\u6709\u5411\u56fe end // \u6709\u5411\u56fe\u7684 key \u662f\u524d\u9a71\u7ed3\u70b9\uff0cvalue \u662f\u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408 for (int[] p : prerequisites) { graph[p[1]].add(p[0]); } // \u4f7f\u7528 Stack \u6216\u8005 List \u8bb0\u5f55\u9012\u5f52\u7684\u987a\u5e8f\uff0c\u8fd9\u91cc\u4f7f\u7528 Stack Stack<Integer> stack = new Stack<>(); for (int i = 0; i < numCourses; i++) { if (dfs(i, graph, marked, stack)) { // \u6ce8\u610f\u65b9\u6cd5\u7684\u8bed\u4e49\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u73af\uff0c\u8868\u793a\u8bfe\u7a0b\u4efb\u52a1\u4e0d\u80fd\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4 return new int[0]; } } // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u76f4 dfs \u90fd\u6ca1\u6709\u9047\u5230\u5df2\u7ecf\u91cd\u590d\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0c\u5c31\u8868\u793a\u6709\u5411\u56fe\u4e2d\u6ca1\u6709\u73af // \u6240\u6709\u8bfe\u7a0b\u4efb\u52a1\u53ef\u4ee5\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de true // \u4e0b\u9762\u8fd9\u4e2a\u65ad\u8a00\u4e00\u5b9a\u6210\u7acb\uff0c\u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u544a\u8bc9\u6211\u4eec\u7684\u7ed3\u8bba assert stack.size() == numCourses; int[] ret = new int[numCourses]; // \u60f3\u60f3\u8981\u600e\u4e48\u5f97\u5230\u7ed3\u8bba\uff0c\u6211\u4eec\u7684 dfs \u662f\u4e00\u81f4\u5c06\u540e\u7ee7\u7ed3\u70b9\u8fdb\u884c dfs \u7684 // \u6240\u4ee5\u538b\u5728\u6808\u5e95\u7684\u5143\u7d20\uff0c\u4e00\u5b9a\u662f\u90a3\u4e2a\u6ca1\u6709\u540e\u7ee7\u8bfe\u7a0b\u7684\u7ed3\u70b9 // \u90a3\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u8bfe\u7a0b\uff0c\u4e00\u5b9a\u5728\u6808\u9876\uff0c\u6240\u4ee5\u8bfe\u7a0b\u5b66\u4e60\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u662f\u4ece\u6808\u9876\u5230\u6808\u5e95 // \u4f9d\u6b21\u51fa\u6808\u5c31\u597d\u4e86 for (int i = 0; i < numCourses; i++) { ret[i] = stack.pop(); } return ret; } /** * \u6ce8\u610f\u8fd9\u4e2a dfs \u65b9\u6cd5\u7684\u8bed\u4e49 * * @param i \u5f53\u524d\u8bbf\u95ee\u7684\u8bfe\u7a0b\u7ed3\u70b9 * @param graph * @param marked \u5982\u679c == 1 \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5982\u679c == 2 \u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86 * @return true \u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\uff0cfalse \u8868\u793a\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86 */ private boolean dfs(int i, HashSet<Integer>[] graph, int[] marked, Stack<Integer> stack) { // \u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86 if (marked[i] == 1) { // \u4ece\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5230\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u8868\u793a\u9047\u5230\u4e86\u73af return true; } if (marked[i] == 2) { // \u8868\u793a\u5728\u8bbf\u95ee\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u9047\u5230\u73af\uff0c\u8fd9\u4e2a\u8282\u70b9\u8bbf\u95ee\u8fc7\u4e86 return false; } // \u8d70\u5230\u8fd9\u91cc\uff0c\u662f\u56e0\u4e3a\u521d\u59cb\u5316\u5462\uff0c\u6b64\u65f6 marked[i] == 0 // \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d marked[i] = 1; // \u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408 HashSet<Integer> successorNodes = graph[i]; for (Integer successor : successorNodes) { if (dfs(successor, graph, marked, stack)) { // \u5c42\u5c42\u9012\u5f52\u8fd4\u56de true \uff0c\u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af return true; } } // i \u7684\u6240\u6709\u540e\u7ee7\u7ed3\u70b9\u90fd\u8bbf\u95ee\u5b8c\u4e86\uff0c\u90fd\u6ca1\u6709\u5b58\u5728\u73af\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u7ed3\u675f // \u72b6\u6001\u8bbe\u7f6e\u4e3a 2 marked[i] = 2; stack.add(i); // false \u8868\u793a\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af return false; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0210-course-schedule-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"210. Course Schedule II"},{"location":"leetcode-0210-course-schedule-ii/#210-course-schedule-ii","text":"","title":"210. Course Schedule II"},{"location":"leetcode-0210-course-schedule-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u56fe\u7684\u8868\u793a\u6cd5 \u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 210. Course Schedule II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 210. \u8bfe\u7a0b\u8868 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0210-course-schedule-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u6a21\u677f\u9898\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u3002 \u6211\u4e2a\u4eba\u89c9\u5f97\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u601d\u8def\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0cdfs \u9012\u5f52\u8981\u5224\u65ad\u7ed3\u70b9\u7684\u72b6\u6001\uff0c\u6709\u90a3\u4e48\u4e00\u4e9b\u7ed5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0210-course-schedule-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0210-course-schedule-ii/#1","text":"import java.util.ArrayList; import java.util.HashSet; import java.util.LinkedList; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u5148\u5904\u7406\u6781\u7aef\u60c5\u51b5 if (numCourses <= 0) { return new int[0]; } // \u90bb\u63a5\u8868\u8868\u793a HashSet<Integer>[] graph = new HashSet[numCourses]; for (int i = 0; i < numCourses; i++) { graph[i] = new HashSet<>(); } // \u5165\u5ea6\u8868 int[] inDegree = new int[numCourses]; // \u904d\u5386 prerequisites \u7684\u65f6\u5019\uff0c\u628a \u90bb\u63a5\u8868 \u548c \u5165\u5ea6\u8868 \u90fd\u586b\u4e0a for (int[] p : prerequisites) { graph[p[1]].add(p[0]); inDegree[p[0]]++; } LinkedList<Integer> queue = new LinkedList<>(); for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.addLast(i); } } ArrayList<Integer> res = new ArrayList<>(); while (!queue.isEmpty()) { // \u5f53\u524d\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9 Integer inDegreeNode = queue.removeFirst(); // \u52a0\u5165\u7ed3\u679c\u96c6\u4e2d res.add(inDegreeNode); // \u4e0b\u9762\u4ece\u56fe\u4e2d\u5220\u53bb // \u5f97\u5230\u6240\u6709\u7684\u540e\u7ee7\u8bfe\u7a0b\uff0c\u63a5\u4e0b\u6765\u628a\u5b83\u4eec\u7684\u5165\u5ea6\u5168\u90e8\u51cf\u53bb 1 HashSet<Integer> nextCourses = graph[inDegreeNode]; for (Integer nextCourse : nextCourses) { inDegree[nextCourse]--; // \u9a6c\u4e0a\u68c0\u6d4b\u8be5\u7ed3\u70b9\u7684\u5165\u5ea6\u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u4e3a 0\uff0c\u9a6c\u4e0a\u52a0\u5165\u961f\u5217 if (inDegree[nextCourse] == 0) { queue.addLast(nextCourse); } } } // \u5982\u679c\u7ed3\u679c\u96c6\u4e2d\u7684\u6570\u91cf\u4e0d\u7b49\u4e8e\u7ed3\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u4e0d\u80fd\u5b8c\u6210\u8bfe\u7a0b\u4efb\u52a1\uff0c\u8fd9\u4e00\u70b9\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u8bba int resLen = res.size(); if (resLen == numCourses) { int[] ret = new int[numCourses]; for (int i = 0; i < numCourses; i++) { ret[i] = res.get(i); } return ret; } else { return new int[0]; } } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u3002"},{"location":"leetcode-0210-course-schedule-ii/#2","text":"import java.util.HashSet; import java.util.Stack; /** * @author liwei * @date 18/6/24 \u4e0b\u53484:10 */ public class Solution3 { /** * @param numCourses * @param prerequisites * @return */ public int[] findOrder(int numCourses, int[][] prerequisites) { if (numCourses <= 0) { // \u8fde\u8bfe\u7a0b\u6570\u76ee\u90fd\u6ca1\u6709\uff0c\u5c31\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u7ec3\u4e60\u4e86\uff0c\u6839\u636e\u9898\u610f\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4 return new int[0]; } int plen = prerequisites.length; if (plen == 0) { // \u6ca1\u6709\u6709\u5411\u8fb9\uff0c\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8bfe\u7a0b\u4f9d\u8d56\uff0c\u4efb\u52a1\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210 int[] ret = new int[numCourses]; for (int i = 0; i < numCourses; i++) { ret[i] = i; } return ret; } int[] marked = new int[numCourses]; // \u521d\u59cb\u5316\u6709\u5411\u56fe begin HashSet<Integer>[] graph = new HashSet[numCourses]; for (int i = 0; i < numCourses; i++) { graph[i] = new HashSet<>(); } // \u521d\u59cb\u5316\u6709\u5411\u56fe end // \u6709\u5411\u56fe\u7684 key \u662f\u524d\u9a71\u7ed3\u70b9\uff0cvalue \u662f\u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408 for (int[] p : prerequisites) { graph[p[1]].add(p[0]); } // \u4f7f\u7528 Stack \u6216\u8005 List \u8bb0\u5f55\u9012\u5f52\u7684\u987a\u5e8f\uff0c\u8fd9\u91cc\u4f7f\u7528 Stack Stack<Integer> stack = new Stack<>(); for (int i = 0; i < numCourses; i++) { if (dfs(i, graph, marked, stack)) { // \u6ce8\u610f\u65b9\u6cd5\u7684\u8bed\u4e49\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u73af\uff0c\u8868\u793a\u8bfe\u7a0b\u4efb\u52a1\u4e0d\u80fd\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de\u7a7a\u6570\u7ec4 return new int[0]; } } // \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u76f4 dfs \u90fd\u6ca1\u6709\u9047\u5230\u5df2\u7ecf\u91cd\u590d\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0c\u5c31\u8868\u793a\u6709\u5411\u56fe\u4e2d\u6ca1\u6709\u73af // \u6240\u6709\u8bfe\u7a0b\u4efb\u52a1\u53ef\u4ee5\u5b8c\u6210\uff0c\u5e94\u8be5\u8fd4\u56de true // \u4e0b\u9762\u8fd9\u4e2a\u65ad\u8a00\u4e00\u5b9a\u6210\u7acb\uff0c\u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u544a\u8bc9\u6211\u4eec\u7684\u7ed3\u8bba assert stack.size() == numCourses; int[] ret = new int[numCourses]; // \u60f3\u60f3\u8981\u600e\u4e48\u5f97\u5230\u7ed3\u8bba\uff0c\u6211\u4eec\u7684 dfs \u662f\u4e00\u81f4\u5c06\u540e\u7ee7\u7ed3\u70b9\u8fdb\u884c dfs \u7684 // \u6240\u4ee5\u538b\u5728\u6808\u5e95\u7684\u5143\u7d20\uff0c\u4e00\u5b9a\u662f\u90a3\u4e2a\u6ca1\u6709\u540e\u7ee7\u8bfe\u7a0b\u7684\u7ed3\u70b9 // \u90a3\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u8bfe\u7a0b\uff0c\u4e00\u5b9a\u5728\u6808\u9876\uff0c\u6240\u4ee5\u8bfe\u7a0b\u5b66\u4e60\u7684\u987a\u5e8f\u5c31\u5e94\u8be5\u662f\u4ece\u6808\u9876\u5230\u6808\u5e95 // \u4f9d\u6b21\u51fa\u6808\u5c31\u597d\u4e86 for (int i = 0; i < numCourses; i++) { ret[i] = stack.pop(); } return ret; } /** * \u6ce8\u610f\u8fd9\u4e2a dfs \u65b9\u6cd5\u7684\u8bed\u4e49 * * @param i \u5f53\u524d\u8bbf\u95ee\u7684\u8bfe\u7a0b\u7ed3\u70b9 * @param graph * @param marked \u5982\u679c == 1 \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5982\u679c == 2 \u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86 * @return true \u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af\uff0cfalse \u8868\u793a\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86 */ private boolean dfs(int i, HashSet<Integer>[] graph, int[] marked, Stack<Integer> stack) { // \u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u8bbf\u95ee\u4e86 if (marked[i] == 1) { // \u4ece\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u5230\u6b63\u5728\u8bbf\u95ee\u4e2d\uff0c\u8868\u793a\u9047\u5230\u4e86\u73af return true; } if (marked[i] == 2) { // \u8868\u793a\u5728\u8bbf\u95ee\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u9047\u5230\u73af\uff0c\u8fd9\u4e2a\u8282\u70b9\u8bbf\u95ee\u8fc7\u4e86 return false; } // \u8d70\u5230\u8fd9\u91cc\uff0c\u662f\u56e0\u4e3a\u521d\u59cb\u5316\u5462\uff0c\u6b64\u65f6 marked[i] == 0 // \u8868\u793a\u6b63\u5728\u8bbf\u95ee\u4e2d marked[i] = 1; // \u540e\u7ee7\u7ed3\u70b9\u7684\u96c6\u5408 HashSet<Integer> successorNodes = graph[i]; for (Integer successor : successorNodes) { if (dfs(successor, graph, marked, stack)) { // \u5c42\u5c42\u9012\u5f52\u8fd4\u56de true \uff0c\u8868\u793a\u56fe\u4e2d\u5b58\u5728\u73af return true; } } // i \u7684\u6240\u6709\u540e\u7ee7\u7ed3\u70b9\u90fd\u8bbf\u95ee\u5b8c\u4e86\uff0c\u90fd\u6ca1\u6709\u5b58\u5728\u73af\uff0c\u5219\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u7ed3\u675f // \u72b6\u6001\u8bbe\u7f6e\u4e3a 2 marked[i] = 2; stack.add(i); // false \u8868\u793a\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af return false; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0210-course-schedule-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/","text":"211. Add and Search Word - Data structure design \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a void addWord(word) bool search(word) search(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd . \u6216 a-z \u3002 . \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002 + \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 + \u82f1\u6587\u7f51\u5740\uff1a 211. Add and Search Word - Data structure design \u3002 + \u4e2d\u6587\u7f51\u5740\uff1a 211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a search \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684 . \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashMap; import java.util.Set; public class WordDictionary { private Node root; private class Node { private boolean isWord; private HashMap<Character, Node> next; public Node() { this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public WordDictionary() { root = new Node(); } /** * Adds a word into the data structure. */ public void addWord(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */ public boolean search(String word) { return search(root, word, 0); } private boolean search(Node node, String word, int depth) { if (depth == word.length()) { // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6 return node.isWord; } Character c = word.charAt(depth); if (c == '.') { Set<Character> keys = node.next.keySet(); for (Character key : keys) { Node nextNode = node.next.get(key); if (search(nextNode, word, depth + 1)) { return true; } } // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709 return false; } else { if (!node.next.containsKey(c)) { return false; } return search(node.next.get(c), word, depth + 1); } } public static void main(String[] args) { WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); boolean search1 = wordDictionary.search(\"pad\");// -> false System.out.println(search1); boolean search2 = wordDictionary.search(\"bad\"); // -> true System.out.println(search2); boolean search3 = wordDictionary.search(\".ad\"); // -> true System.out.println(search3); boolean search4 = wordDictionary.search(\"b..\"); //-> true System.out.println(search4); } }","title":"211. Add and Search Word - Data structure design"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/#211-add-and-search-word-data-structure-design","text":"","title":"211. Add and Search Word - Data structure design"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a void addWord(word) bool search(word) search(word) \u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd . \u6216 a-z \u3002 . \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002 + \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 + \u82f1\u6587\u7f51\u5740\uff1a 211. Add and Search Word - Data structure design \u3002 + \u4e2d\u6587\u7f51\u5740\uff1a 211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a search \u65b9\u6cd5\u9488\u5bf9\u5339\u914d\u4e32\u4e2d\u7684 . \u5b57\u7b26\uff0c\u5e94\u8be5\u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0211-add-and-search-word-data-structure-design/#1","text":"import java.util.HashMap; import java.util.Set; public class WordDictionary { private Node root; private class Node { private boolean isWord; private HashMap<Character, Node> next; public Node() { this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public WordDictionary() { root = new Node(); } /** * Adds a word into the data structure. */ public void addWord(String word) { Node curNode = root; for (int i = 0; i < word.length(); i++) { Character c = word.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } if (!curNode.isWord) { curNode.isWord = true; } } /** * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */ public boolean search(String word) { return search(root, word, 0); } private boolean search(Node node, String word, int depth) { if (depth == word.length()) { // \u53ea\u8981\u80fd\u641c\u7d22\u5230\u6700\u540e\uff0c\u5c31\u8868\u793a\u6587\u672c\u4e0e\u6a21\u5f0f\u5339\u914d // \u8fd9\u4e00\u6b65\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6 return node.isWord; } Character c = word.charAt(depth); if (c == '.') { Set<Character> keys = node.next.keySet(); for (Character key : keys) { Node nextNode = node.next.get(key); if (search(nextNode, word, depth + 1)) { return true; } } // \u5faa\u73af\u90fd\u8d70\u5b8c\u90fd\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709 return false; } else { if (!node.next.containsKey(c)) { return false; } return search(node.next.get(c), word, depth + 1); } } public static void main(String[] args) { WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); boolean search1 = wordDictionary.search(\"pad\");// -> false System.out.println(search1); boolean search2 = wordDictionary.search(\"bad\"); // -> true System.out.println(search2); boolean search3 = wordDictionary.search(\".ad\"); // -> true System.out.println(search3); boolean search4 = wordDictionary.search(\"b..\"); //-> true System.out.println(search4); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0212-word-search-ii/","text":"212. Word Search II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 words \uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: \u8f93\u5165: words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board = [ [' o ',' a ','a','n'], ['e',' t ',' a ',' e '], ['i',' h ','k','r'], ['i','f','l','v'] ] \u8f93\u51fa: [\"eat\",\"oath\"] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u7ec4\u6210\u3002 \u63d0\u793a: \u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 212. Word Search II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 212. \u5355\u8bcd\u641c\u7d22 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5b57\u5178\u6811 + \u641c\u7d22\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u3002 \u5b57\u5178\u6811\u7684\u7ed3\u70b9\u8981\u66b4\u9732\u51fa\u6765\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.HashSet; import java.util.List; import java.util.Set; public class Solution { // \u53c2\u8003\u8d44\u6599\uff1a // https://leetcode.com/problems/word-search-ii/discuss/148041/Clean-Java-Code-Trie // x-1, y // x, y-1 x, y x, y+1 // x+1,y private static final int[][] directions = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; private class TrieNode { private TrieNode[] next; private boolean isEnd; private String word; public TrieNode() { next = new TrieNode[26]; isEnd = false; } } public List<String> findWords(char[][] board, String[] words) { List<String> res = new ArrayList<>(); if (words == null || words.length == 0) { return res; } int row = board.length; if (row == 0) { return res; } int col = board[0].length; TrieNode root = new TrieNode(); boolean[][] visited = new boolean[row][col]; for (String word : words) { TrieNode curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { curNode.next[c - 'a'] = new TrieNode(); } curNode = curNode.next[c - 'a']; } if (!curNode.isEnd) { curNode.isEnd = true; curNode.word = word; } } for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dfs(board, visited, i, j, row, col, root, res); } } // \u6700\u540e\u8981\u53bb\u91cd Set<String> set = new HashSet(res); res = new ArrayList<>(set); return res; } /** * @param board \u5b57\u7b26\u9762\u677f * @param visited \u8bb0\u5f55\u5f53\u524d\u5750\u6807\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param i \u6a2a\u5750\u6807 * @param j \u7eb5\u5750\u6807 * @param row \u6a2a\u5750\u6807\u7684\u6700\u5927\u503c * @param col \u7eb5\u5750\u6807\u7684\u6700\u5927\u503c * @param node \u5f53\u524d\u5b57\u5178\u6811\u7ed3\u70b9 * @param res \u7ed3\u679c\u96c6 */ private void dfs(char[][] board, boolean[][] visited, int i, int j, int row, int col, TrieNode node, List<String> res) { if (node.isEnd) { res.add(node.word); } if (inArea(i, j, row, col) && !visited[i][j]) { TrieNode nextNode = node.next[board[i][j] - 'a']; // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e visited[i][j] = true; if (nextNode != null) { for (int k = 0; k < 4; k++) { int newX = i + directions[k][0]; int newY = j + directions[k][1]; dfs(board, visited, newX, newY, row, col, nextNode, res); } } // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e visited[i][j] = false; } } private boolean inArea(int i, int j, int row, int col) { return i >= 0 && i < row && j >= 0 && j < col; } public static void main(String[] args) { String[] words = {\"oath\", \"pea\", \"eat\", \"rain\"}; char[][] board = { {'o', 'a', 'a', 'n'}, {'e', 't', 'a', 'e'}, {'i', 'h', 'k', 'r'}, {'i', 'f', 'l', 'v'}}; Solution solution = new Solution(); List<String> solutionWords = solution.findWords(board, words); System.out.println(solutionWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0212-word-search-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"212. Word Search II"},{"location":"leetcode-0212-word-search-ii/#212-word-search-ii","text":"","title":"212. Word Search II"},{"location":"leetcode-0212-word-search-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 words \uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: \u8f93\u5165: words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board = [ [' o ',' a ','a','n'], ['e',' t ',' a ',' e '], ['i',' h ','k','r'], ['i','f','l','v'] ] \u8f93\u51fa: [\"eat\",\"oath\"] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u7ec4\u6210\u3002 \u63d0\u793a: \u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 212. Word Search II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 212. \u5355\u8bcd\u641c\u7d22 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0212-word-search-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u5b57\u5178\u6811 + \u641c\u7d22\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u3002 \u5b57\u5178\u6811\u7684\u7ed3\u70b9\u8981\u66b4\u9732\u51fa\u6765\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0212-word-search-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0212-word-search-ii/#1","text":"import java.util.ArrayList; import java.util.HashSet; import java.util.List; import java.util.Set; public class Solution { // \u53c2\u8003\u8d44\u6599\uff1a // https://leetcode.com/problems/word-search-ii/discuss/148041/Clean-Java-Code-Trie // x-1, y // x, y-1 x, y x, y+1 // x+1,y private static final int[][] directions = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; private class TrieNode { private TrieNode[] next; private boolean isEnd; private String word; public TrieNode() { next = new TrieNode[26]; isEnd = false; } } public List<String> findWords(char[][] board, String[] words) { List<String> res = new ArrayList<>(); if (words == null || words.length == 0) { return res; } int row = board.length; if (row == 0) { return res; } int col = board[0].length; TrieNode root = new TrieNode(); boolean[][] visited = new boolean[row][col]; for (String word : words) { TrieNode curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { curNode.next[c - 'a'] = new TrieNode(); } curNode = curNode.next[c - 'a']; } if (!curNode.isEnd) { curNode.isEnd = true; curNode.word = word; } } for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { dfs(board, visited, i, j, row, col, root, res); } } // \u6700\u540e\u8981\u53bb\u91cd Set<String> set = new HashSet(res); res = new ArrayList<>(set); return res; } /** * @param board \u5b57\u7b26\u9762\u677f * @param visited \u8bb0\u5f55\u5f53\u524d\u5750\u6807\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param i \u6a2a\u5750\u6807 * @param j \u7eb5\u5750\u6807 * @param row \u6a2a\u5750\u6807\u7684\u6700\u5927\u503c * @param col \u7eb5\u5750\u6807\u7684\u6700\u5927\u503c * @param node \u5f53\u524d\u5b57\u5178\u6811\u7ed3\u70b9 * @param res \u7ed3\u679c\u96c6 */ private void dfs(char[][] board, boolean[][] visited, int i, int j, int row, int col, TrieNode node, List<String> res) { if (node.isEnd) { res.add(node.word); } if (inArea(i, j, row, col) && !visited[i][j]) { TrieNode nextNode = node.next[board[i][j] - 'a']; // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e visited[i][j] = true; if (nextNode != null) { for (int k = 0; k < 4; k++) { int newX = i + directions[k][0]; int newY = j + directions[k][1]; dfs(board, visited, newX, newY, row, col, nextNode, res); } } // \u7279\u522b\u6ce8\u610f\u8fd9\u4e2a\u8bbf\u95ee\u7684\u4f4d\u7f6e visited[i][j] = false; } } private boolean inArea(int i, int j, int row, int col) { return i >= 0 && i < row && j >= 0 && j < col; } public static void main(String[] args) { String[] words = {\"oath\", \"pea\", \"eat\", \"rain\"}; char[][] board = { {'o', 'a', 'a', 'n'}, {'e', 't', 'a', 'e'}, {'i', 'h', 'k', 'r'}, {'i', 'f', 'l', 'v'}}; Solution solution = new Solution(); List<String> solutionWords = solution.findWords(board, words); System.out.println(solutionWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0212-word-search-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0215-kth-largest-element-in-an-array/","text":"215. Kth Largest Element in an Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 215. Kth Largest Element in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\u3002\u5176\u5b9e\u628a\u6570\u7ec4\u6392\u4e2a\u5e8f\uff08\u5347\u5e8f\uff09\uff0c\u8fd4\u56de\u5012\u6570\u7b2c $k$ \u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u5982\u679c\u51fa\u73b0\u5728\u7b14\u8bd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7b54\u6848\u80af\u5b9a\u4e0d\u80fd\u8fc7\u5173\u7684\uff0c\u6211\u770b\u5230\u8fc7\u7684\u89e3\u7b54\u4e2d\uff0c\u4f7f\u7528 partition \u548c\u5806\u4e5f\u662f\u9700\u8981\u638c\u63e1\u7684\u3002 \u9996\u5148\uff0c\u501f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002\u5173\u952e\u5728\u4e8e\u7406\u89e3 partition \u7684\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u503c\u662f\u62c9\u901a\u4e86\u6574\u4e2a\u6570\u7ec4\u7684\u7d22\u5f15\u503c\u3002 partition \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09\u3002 \u5982\u679c\u627e\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u5373\u7b2c n - k \u4e2a\u6700\u5927\u5143\u7d20\u3002 \u4f8b\u5982\uff1a\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 4 \uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\u3002 \u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 2 \uff0c\u5de6\u8fb9\u7684\u533a\u95f4\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002 public class Solution2 { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; if (len == 0 || k > len) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u8f6c\u6362\u4e00\u4e0b\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u64cd\u4f5c // \u7b2c k \u5927\u5143\u7d20\u7684\u7d22\u5f15\u662f len - k int target = len - k; int l = 0; int r = len - 1; while (true) { int i = partition(nums, l, r); if (i < target) { l = i + 1; } else if (i > target) { r = i - 1; } else { return nums[i]; } } } // \u5728\u533a\u95f4 [left, right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition \u64cd\u4f5c private int partition(int[] nums, int left, int right) { // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9\uff08\u4ee5\u4e0b\u8fd9\u4e24\u884c\u4ee3\u7801\u975e\u5fc5\u9700\uff09 // \u8fd9\u4e00\u6b65\u4f18\u5316\u975e\u5fc5\u9700 if (right > left) { int randomIndex = left + 1 + random.nextInt(right - left); swap(nums, left, randomIndex); } int pivot = nums[left]; int l = left; for (int i = left + 1; i <= right; i++) { if (nums[i] < pivot) { l++; swap(nums, l, i); } } swap(nums, left, l); return l; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: # \u6570\u7ec4\u4e2d\u7684\u7b2c K \u4e2a\u6700\u5927\u5143\u7d20 # \u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20\uff0c\u5b83\u7684\u7d22\u5f15\u662f len(nums) - k def findKthLargest(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" left = 0 right = len(nums) - 1 while True: index = self.__partition(nums, left, right) if index == len(nums) - k: return nums[index] if index > len(nums) - k: right = index - 1 else: left = index + 1 def __partition(self, nums, left, right): \"\"\" partition \u662f\u5fc5\u987b\u8981\u4f1a\u7684\u5b50\u6b65\u9aa4\uff0c\u4e00\u5b9a\u8981\u975e\u5e38\u719f\u7ec3 \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\uff1a[3,7,8,1,2,4] \u9047\u5230\u6bd4\u7b2c\u4e00\u4e2a\u5143\u7d20\u5927\u7684\u6216\u7b49\u4e8e\u7684\uff0c\u5c31\u653e\u8fc7\uff0c\u9047\u5230\u5c0f\u7684\uff0c\u5c31\u4ea4\u6362 \u5728 [left,right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition :param nums: :param left: :param right: :return: \"\"\" pivot = nums[left] k = left for index in range(left + 1, right + 1): if nums[index] < pivot: k += 1 nums[k], nums[index] = nums[index], nums[k] nums[left], nums[k] = nums[k], nums[left] return k \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6700\u5c0f\u5806\uff0c\u8fd9\u4e2a\u5199\u6cd5\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6709\u70b9\u6b7b\u677f\u3002 public class Solution3 { public int findKthLargest(int[] nums, int k) { int len = nums.length; if (len == 0 || k > len) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u4f7f\u7528\u4e00\u4e2a\u542b\u6709 k \u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806 PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, (a, b) -> a - b); for (int i = 0; i < k; i++) { priorityQueue.add(nums[i]); } for (int i = k; i < len; i++) { // \u770b\u4e00\u773c Integer topEle = priorityQueue.peek(); // \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5806\u9876\u51fa\u6808\uff0c\u904d\u5386\u7684\u5143\u7d20\u8fdb\u53bb if (nums[i] > topEle) { priorityQueue.poll(); priorityQueue.add(nums[i]); } } return priorityQueue.peek(); } } Python \u7684\u5199\u6cd5\uff1a import heapq # \u8fd8\u53ef\u4ee5\u53c2\u8003\uff1ahttps://leetcode.com/problems/kth-largest-element-in-an-array/discuss/167837/Python-or-tm class Solution(object): def findKthLargest(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" L = [] for index in range(k): heapq.heappush(L, nums[index]) for index in range(k, len(nums)): top = L[0] if nums[index] > top: heapq.heapreplace(L, nums[index]) return L[0] \u6700\u5c0f\u5806\u66f4\u7b80\u5355\u7684\u5199\u6cd5\u3002 Java \u5199\u6cd5\uff1a public class Solution3 { public int findKthLargest(int[] nums, int k) { PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k + 1, (a, b) -> (a - b)); for (int num : nums) { priorityQueue.add(num); if(priorityQueue.size()==k+1){ priorityQueue.poll(); } } return priorityQueue.peek(); } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u8981\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5904\u7406\u3002 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0215-kth-largest-element-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"215. Kth Largest Element in an Array"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#215-kth-largest-element-in-an-array","text":"","title":"215. Kth Largest Element in an Array"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 215. Kth Largest Element in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\u3002\u5176\u5b9e\u628a\u6570\u7ec4\u6392\u4e2a\u5e8f\uff08\u5347\u5e8f\uff09\uff0c\u8fd4\u56de\u5012\u6570\u7b2c $k$ \u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u5982\u679c\u51fa\u73b0\u5728\u7b14\u8bd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7b54\u6848\u80af\u5b9a\u4e0d\u80fd\u8fc7\u5173\u7684\uff0c\u6211\u770b\u5230\u8fc7\u7684\u89e3\u7b54\u4e2d\uff0c\u4f7f\u7528 partition \u548c\u5806\u4e5f\u662f\u9700\u8981\u638c\u63e1\u7684\u3002 \u9996\u5148\uff0c\u501f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002\u5173\u952e\u5728\u4e8e\u7406\u89e3 partition \u7684\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u503c\u662f\u62c9\u901a\u4e86\u6574\u4e2a\u6570\u7ec4\u7684\u7d22\u5f15\u503c\u3002 partition \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09\u3002 \u5982\u679c\u627e\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u5373\u7b2c n - k \u4e2a\u6700\u5927\u5143\u7d20\u3002 \u4f8b\u5982\uff1a\u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 4 \uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\u3002 \u7ed9\u5b9a\u6570\u7ec4\u4e3a\uff1a[2,5,6,1,4,7] \uff0c\u4e00\u5171 6 \u4e2a\u5143\u7d20 \u627e k = 2\uff0c\u5982\u679c\u8fd4\u56de 2 \uff0c\u5de6\u8fb9\u7684\u533a\u95f4\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#1-partition","text":"public class Solution2 { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; if (len == 0 || k > len) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u8f6c\u6362\u4e00\u4e0b\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u64cd\u4f5c // \u7b2c k \u5927\u5143\u7d20\u7684\u7d22\u5f15\u662f len - k int target = len - k; int l = 0; int r = len - 1; while (true) { int i = partition(nums, l, r); if (i < target) { l = i + 1; } else if (i > target) { r = i - 1; } else { return nums[i]; } } } // \u5728\u533a\u95f4 [left, right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition \u64cd\u4f5c private int partition(int[] nums, int left, int right) { // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9\uff08\u4ee5\u4e0b\u8fd9\u4e24\u884c\u4ee3\u7801\u975e\u5fc5\u9700\uff09 // \u8fd9\u4e00\u6b65\u4f18\u5316\u975e\u5fc5\u9700 if (right > left) { int randomIndex = left + 1 + random.nextInt(right - left); swap(nums, left, randomIndex); } int pivot = nums[left]; int l = left; for (int i = left + 1; i <= right; i++) { if (nums[i] < pivot) { l++; swap(nums, l, i); } } swap(nums, left, l); return l; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: # \u6570\u7ec4\u4e2d\u7684\u7b2c K \u4e2a\u6700\u5927\u5143\u7d20 # \u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20\uff0c\u5b83\u7684\u7d22\u5f15\u662f len(nums) - k def findKthLargest(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" left = 0 right = len(nums) - 1 while True: index = self.__partition(nums, left, right) if index == len(nums) - k: return nums[index] if index > len(nums) - k: right = index - 1 else: left = index + 1 def __partition(self, nums, left, right): \"\"\" partition \u662f\u5fc5\u987b\u8981\u4f1a\u7684\u5b50\u6b65\u9aa4\uff0c\u4e00\u5b9a\u8981\u975e\u5e38\u719f\u7ec3 \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\uff1a[3,7,8,1,2,4] \u9047\u5230\u6bd4\u7b2c\u4e00\u4e2a\u5143\u7d20\u5927\u7684\u6216\u7b49\u4e8e\u7684\uff0c\u5c31\u653e\u8fc7\uff0c\u9047\u5230\u5c0f\u7684\uff0c\u5c31\u4ea4\u6362 \u5728 [left,right] \u8fd9\u4e2a\u533a\u95f4\u6267\u884c partition :param nums: :param left: :param right: :return: \"\"\" pivot = nums[left] k = left for index in range(left + 1, right + 1): if nums[index] < pivot: k += 1 nums[k], nums[index] = nums[index], nums[k] nums[left], nums[k] = nums[k], nums[left] return k","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7684 partition \u7684\u601d\u60f3\u5b8c\u6210\u3002"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#2","text":"public class Solution3 { public int findKthLargest(int[] nums, int k) { int len = nums.length; if (len == 0 || k > len) { throw new IllegalArgumentException(\"\u53c2\u6570\u9519\u8bef\"); } // \u4f7f\u7528\u4e00\u4e2a\u542b\u6709 k \u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806 PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, (a, b) -> a - b); for (int i = 0; i < k; i++) { priorityQueue.add(nums[i]); } for (int i = k; i < len; i++) { // \u770b\u4e00\u773c Integer topEle = priorityQueue.peek(); // \u53ea\u8981\u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5806\u9876\u51fa\u6808\uff0c\u904d\u5386\u7684\u5143\u7d20\u8fdb\u53bb if (nums[i] > topEle) { priorityQueue.poll(); priorityQueue.add(nums[i]); } } return priorityQueue.peek(); } } Python \u7684\u5199\u6cd5\uff1a import heapq # \u8fd8\u53ef\u4ee5\u53c2\u8003\uff1ahttps://leetcode.com/problems/kth-largest-element-in-an-array/discuss/167837/Python-or-tm class Solution(object): def findKthLargest(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" L = [] for index in range(k): heapq.heappush(L, nums[index]) for index in range(k, len(nums)): top = L[0] if nums[index] > top: heapq.heapreplace(L, nums[index]) return L[0] \u6700\u5c0f\u5806\u66f4\u7b80\u5355\u7684\u5199\u6cd5\u3002 Java \u5199\u6cd5\uff1a public class Solution3 { public int findKthLargest(int[] nums, int k) { PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k + 1, (a, b) -> (a - b)); for (int num : nums) { priorityQueue.add(num); if(priorityQueue.size()==k+1){ priorityQueue.poll(); } } return priorityQueue.peek(); } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u6700\u5c0f\u5806\uff0c\u8fd9\u4e2a\u5199\u6cd5\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6709\u70b9\u6b7b\u677f\u3002"},{"location":"leetcode-0215-kth-largest-element-in-an-array/#3","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0215-kth-largest-element-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u8981\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5904\u7406\u3002"},{"location":"leetcode-0219-contains-duplicate-ii/","text":"219. Contains Duplicate II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j \uff0c\u4f7f\u5f97 nums [i] = nums [j] \uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,2,3,1], k = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: nums = [1,0,1,1], k = 1 \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: nums = [1,2,3,1,2,3], k = 2 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 219. Contains Duplicate II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 219. \u5b58\u5728\u91cd\u590d\u5143\u7d20 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5373\u8981\u68c0\u6d4b\u91cd\u590d\uff0c\u53c8\u8981\u77e5\u9053\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u662f\u4ec0\u4e48\uff0c\u54c8\u5e0c\u8868\u5c31\u53ef\u4ee5\u80dc\u4efb\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashMap; public class Solution { // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j\uff0c // \u4f7f\u5f97 nums [i] = nums [j]\uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\u3002 // \"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\"\uff0c\u6539\u6210\"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 k\" \u6216\u8bb8\u5c31\u597d\u7406\u89e3\u591a\u4e86 public boolean containsNearbyDuplicate(int[] nums, int k) { int len = nums.length; // \u5148\u5c06\u6781\u7aef\u7528\u4f8b\u8fd4\u56de if (len < 2) { return false; } HashMap<Integer, Integer> map = new HashMap<>(); for (int i = 0; i < len; i++) { if (map.containsKey(nums[i])) { if (i - map.get(nums[i]) <= k) { return true; } } map.put(nums[i], i); } return false; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0219-contains-duplicate-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"219. Contains Duplicate II"},{"location":"leetcode-0219-contains-duplicate-ii/#219-contains-duplicate-ii","text":"","title":"219. Contains Duplicate II"},{"location":"leetcode-0219-contains-duplicate-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j \uff0c\u4f7f\u5f97 nums [i] = nums [j] \uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k \u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,2,3,1], k = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: nums = [1,0,1,1], k = 1 \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: nums = [1,2,3,1,2,3], k = 2 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 219. Contains Duplicate II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 219. \u5b58\u5728\u91cd\u590d\u5143\u7d20 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0219-contains-duplicate-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5373\u8981\u68c0\u6d4b\u91cd\u590d\uff0c\u53c8\u8981\u77e5\u9053\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u662f\u4ec0\u4e48\uff0c\u54c8\u5e0c\u8868\u5c31\u53ef\u4ee5\u80dc\u4efb\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0219-contains-duplicate-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0219-contains-duplicate-ii/#1","text":"import java.util.HashMap; public class Solution { // \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 i \u548c j\uff0c // \u4f7f\u5f97 nums [i] = nums [j]\uff0c\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\u3002 // \"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a k\"\uff0c\u6539\u6210\"\u5e76\u4e14 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 k\" \u6216\u8bb8\u5c31\u597d\u7406\u89e3\u591a\u4e86 public boolean containsNearbyDuplicate(int[] nums, int k) { int len = nums.length; // \u5148\u5c06\u6781\u7aef\u7528\u4f8b\u8fd4\u56de if (len < 2) { return false; } HashMap<Integer, Integer> map = new HashMap<>(); for (int i = 0; i < len; i++) { if (map.containsKey(nums[i])) { if (i - map.get(nums[i]) <= k) { return true; } } map.put(nums[i], i); } return false; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0219-contains-duplicate-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0225-implement-stack-using-queues/","text":"225. Implement Stack using Queues \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 225. Implement Stack using Queues \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0225-implement-stack-using-queues \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"225. Implement Stack using Queues"},{"location":"leetcode-0225-implement-stack-using-queues/#225-implement-stack-using-queues","text":"","title":"225. Implement Stack using Queues"},{"location":"leetcode-0225-implement-stack-using-queues/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5143\u7d20 x \u5165\u6808 pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20 empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a \u6ce8\u610f: \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f push to back , peek/pop from front , size , \u548c is empty \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 225. Implement Stack using Queues \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0225-implement-stack-using-queues/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0225-implement-stack-using-queues/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0225-implement-stack-using-queues/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0225-implement-stack-using-queues \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0226-invert-binary-tree/","text":"226. Invert Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 226. Invert Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 226. \u7ffb\u8f6c\u4e8c\u53c9\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a \u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a \u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002 \u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002 \u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode invertTree(TreeNode root) { if (root == null) { return null; } // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027 TreeNode temp = root.left; root.left = root.right; root.right = temp; // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811 invertTree(root.left); invertTree(root.right); return root; } } \u53c2\u8003\u89e3\u7b542 import java.util.LinkedList; public class Solution2 { public TreeNode invertTree(TreeNode root) { // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651 if (root == null) { return null; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { TreeNode curNode = queue.removeFirst(); // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc if (curNode.left != null || curNode.right != null) { // \u5148\u7ffb\u8f6c TreeNode temp = curNode.left; curNode.left = curNode.right; curNode.right = temp; // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217 if (curNode.left != null) { queue.addLast(curNode.left); } if (curNode.right != null) { queue.addLast(curNode.right); } } } return root; } }","title":"226. Invert Binary Tree"},{"location":"leetcode-0226-invert-binary-tree/#226-invert-binary-tree","text":"","title":"226. Invert Binary Tree"},{"location":"leetcode-0226-invert-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002 \u82f1\u6587\u7f51\u5740\uff1a 226. Invert Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 226. \u7ffb\u8f6c\u4e8c\u53c9\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0226-invert-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u3002LeetCode \u4e0a\u6709\u5982\u4e0b\u5907\u6ce8\uff1a \u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 Max Howell \u7684 \u539f\u95ee\u9898 \u542f\u53d1\u7684 \uff1a \u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002 \u601d\u8def1\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u6211\u4eec\u5199\u597d\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5e76\u4e14\u662f\u524d\u5e8f\u904d\u5386\uff0c\u6709\u7684\u670b\u53cb\u53ef\u80fd\u5199\u51fa\u6765\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7981\u8981\u95ee\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4e0d\u53ef\u4ee5\uff0c\u7b54\u6848\u662f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5f88\u53ef\u80fd\u4e00\u4e2a\u7ed3\u70b9\u4f1a\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u8981\u6c42\u662f\u8fdd\u80cc\u7684\u3002 \u90a3\u4e48\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u975e\u9012\u5f52\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u601d\u8def2\uff1a\u5982\u679c\u4e0d\u8ba9\u6211\u4eec\u7528\u9012\u5f52\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u9012\u5f52\u7684\u601d\u8def\u6a21\u62df\u9012\u5f52\u5b8c\u6210\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0226-invert-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0226-invert-binary-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode invertTree(TreeNode root) { if (root == null) { return null; } // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5373\u4f7f\u5de6\u53f3\u5b50\u6811\u90fd\u7a7a\u4e5f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027 TreeNode temp = root.left; root.left = root.right; root.right = temp; // \u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811 invertTree(root.left); invertTree(root.right); return root; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0226-invert-binary-tree/#2","text":"import java.util.LinkedList; public class Solution2 { public TreeNode invertTree(TreeNode root) { // \u7ed3\u70b9\u4e3a\u7a7a\u7684\u7279\u6b8a\u60c5\u51b5\u8981\u5148\u8003\u8651 if (root == null) { return null; } LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { TreeNode curNode = queue.removeFirst(); // \u53ea\u8981\u5176\u4e2d\u4e4b\u4e00\u975e\u7a7a\uff0c\u6211\u90fd\u4ea4\u6362\uff0c\u5e76\u4e14\u628a\u975e\u7a7a\u7684\u6dfb\u52a0\u5230\u961f\u5217\u91cc if (curNode.left != null || curNode.right != null) { // \u5148\u7ffb\u8f6c TreeNode temp = curNode.left; curNode.left = curNode.right; curNode.right = temp; // \u628a\u975e\u7a7a\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217 if (curNode.left != null) { queue.addLast(curNode.left); } if (curNode.right != null) { queue.addLast(curNode.right); } } } return root; } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/","text":"230. Kth Smallest Element in a BST \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 230. Kth Smallest Element in a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386 public class Solution { private int res; private int count; // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012 // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c public int kthSmallest(TreeNode root, int k) { count = k; inOrder(root); return res; } private void inOrder(TreeNode node) { if (node == null) { return; } inOrder(node.left); count--; if (count == 0) { res = node.val; return; } inOrder(node.right); } }","title":"230. Kth Smallest Element in a BST"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/#230-kth-smallest-element-in-a-bst","text":"","title":"230. Kth Smallest Element in a BST"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 230. Kth Smallest Element in a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a1\u3001\u4e8c\u5206\u641c\u7d22\u6811\u7684\u987a\u5e8f\u6027\uff1b2\u3001\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u7279\u522b\u5730\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u6570\u4e2a\u6570\uff0c\u7b2c 1 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 1 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7b2c 2 \u4e2a\u904d\u5386\u5230\u7684\u662f\u7b2c 2 \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6570\u5230\u7b2c k \u4e2a\u591f\u6570\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0230-kth-smallest-element-in-a-bst/#1","text":"\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e00\u5b9a\u8981\u628a\u8ba1\u6570\u7684\u53d8\u91cf\u8bbe\u7f6e\u6210\u201c\u6210\u5458\u53d8\u91cf\u201d\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u5f97 k \u4f5c\u4e3a\u53c2\u6570\u5728\u65b9\u6cd5\u4e2d\u4f20\u9012\uff0c\u5c31\u53d8\u6210\u4e86\u503c\u4f20\u9012\uff0c\u5c31\u5f97\u4e0d\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } // \u89e3\u9898\u5173\u952e\uff1a\u4e2d\u5e8f\u904d\u5386 public class Solution { private int res; private int count; // k \u5982\u679c\u5728\u65b9\u6cd5\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u662f\u503c\u4f20\u9012\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u5f15\u7528\u4f20\u9012 // \u56e0\u4e3a\u6211\u4eec\u8981\u7528\u5230 k \u5168\u5c40\u7684\u503c\uff0c\u53bb\u6570\u51fa\uff0c\u6211\u662f\u7b2c\u51e0\u4e2a\u4e2d\u5e8f\u904d\u5386\u5230\u7684\u503c public int kthSmallest(TreeNode root, int k) { count = k; inOrder(root); return res; } private void inOrder(TreeNode node) { if (node == null) { return; } inOrder(node.left); count--; if (count == 0) { res = node.val; return; } inOrder(node.right); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0231-power-of-two/","text":"231. Power of Two \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 16 \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: 218 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 231. Power of Two \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 231. 2\u7684\u5e42 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u65b9\u6cd5\u5f88\u591a\uff0c\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e3b\u8981\u7684\u8003\u70b9\u8fd8\u662f\u5728\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e9b\u6027\u8d28\u4e0a\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u7248\u672c\u5427\uff0c n & (n - 1) \u8fd0\u7b97\uff0c\u80fd\u628a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0\uff0c\u8fd9\u4e00\u70b9\u5e94\u8be5\u4f5c\u4e3a\u4e00\u6761\u57fa\u672c\u6027\u8d28\u8bb0\u4f4f\u3002 public class Solution { public boolean isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; } } \u53c2\u8003\u89e3\u7b542\uff1a\u8be5\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6574\u9664\u5224\u65ad\u3002 public class Solution2 { public boolean isPowerOfTwo(int n) { if (n <= 0) { return false; } while (n % 2 == 0) { n /= 2; } return n == 1; } } \u53c2\u8003\u89e3\u7b543\uff1a\u7528\u5230\u4e86 Java \u5e93\u51fd\u6570\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u6b64\u6cd5\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\u30014 \u7684\u65b9\u5e42\u7b49\u7b49\u3002 public class Solution3 { public boolean isPowerOfTwo(int n) { return n > 0 && Integer.toString(n, 2).matches(\"^10*$\"); } } \u53c2\u8003\u89e3\u7b544\uff1a\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u4f8b\u4e3e\u51fa\u6765\u3002 import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution4 { public boolean isPowerOfTwo(int n) { if (n <= 0) { return false; } // \u6bd4 Integer.MAX_VALUE \u5c0f\u7684\u6240\u6709\u7684\u6574\u6570\u4e2d 2 \u7684\u65b9\u5e42\u7684\u6240\u6709\u7684\u6570 int[] nums = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824}; HashSet<Integer> set = new HashSet<>(); for (int num : nums) { set.add(num); } return set.contains(n); } // \u8be5 main \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6574\u578b\u8303\u56f4\u5185\u6240\u6709\u7684 2 \u7684\u65b9\u5e42 public static void main(String[] args) { int i = 1; List<Integer> list = new ArrayList<>(); while (i > 0 && i < Integer.MAX_VALUE) { list.add(i); i *= 2; } System.out.println(list); } } \u53c2\u8003\u89e3\u7b545\uff1a\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5224\u5b9a\u8d28\u6570\u7684\u65b9\u5e42\u540c\u6837\u6709\u6548\uff0c\u4f8b\u5982\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\uff0c\u4e0d\u8fc7\u5f97\u4e8b\u5148\u8ba1\u7b97\u51fa\u5728\u5141\u8bb8\u7684\u8303\u56f4\u5185 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\u3002 public class Solution5 { public boolean isPowerOfTwo(int n) { // 1073741824 \u662f\u5c0f\u4e8e Integer.MAX_VALUE \u4e2d 2 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005 return n > 0 && 1073741824 % n == 0; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0231-power-of-two \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"231. Power of Two"},{"location":"leetcode-0231-power-of-two/#231-power-of-two","text":"","title":"231. Power of Two"},{"location":"leetcode-0231-power-of-two/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 16 \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: 218 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 231. Power of Two \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 231. 2\u7684\u5e42 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0231-power-of-two/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u65b9\u6cd5\u5f88\u591a\uff0c\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e3b\u8981\u7684\u8003\u70b9\u8fd8\u662f\u5728\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e9b\u6027\u8d28\u4e0a\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0231-power-of-two/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0231-power-of-two/#1n-amp-n-1-1-0","text":"public class Solution { public boolean isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u7248\u672c\u5427\uff0cn &amp; (n - 1) \u8fd0\u7b97\uff0c\u80fd\u628a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0\uff0c\u8fd9\u4e00\u70b9\u5e94\u8be5\u4f5c\u4e3a\u4e00\u6761\u57fa\u672c\u6027\u8d28\u8bb0\u4f4f\u3002"},{"location":"leetcode-0231-power-of-two/#2","text":"public class Solution2 { public boolean isPowerOfTwo(int n) { if (n <= 0) { return false; } while (n % 2 == 0) { n /= 2; } return n == 1; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u8be5\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6574\u9664\u5224\u65ad\u3002"},{"location":"leetcode-0231-power-of-two/#3-java-3-4","text":"public class Solution3 { public boolean isPowerOfTwo(int n) { return n > 0 && Integer.toString(n, 2).matches(\"^10*$\"); } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u7528\u5230\u4e86 Java \u5e93\u51fd\u6570\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6839\u636e\u6b64\u6cd5\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\u30014 \u7684\u65b9\u5e42\u7b49\u7b49\u3002"},{"location":"leetcode-0231-power-of-two/#4","text":"import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution4 { public boolean isPowerOfTwo(int n) { if (n <= 0) { return false; } // \u6bd4 Integer.MAX_VALUE \u5c0f\u7684\u6240\u6709\u7684\u6574\u6570\u4e2d 2 \u7684\u65b9\u5e42\u7684\u6240\u6709\u7684\u6570 int[] nums = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824}; HashSet<Integer> set = new HashSet<>(); for (int num : nums) { set.add(num); } return set.contains(n); } // \u8be5 main \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6574\u578b\u8303\u56f4\u5185\u6240\u6709\u7684 2 \u7684\u65b9\u5e42 public static void main(String[] args) { int i = 1; List<Integer> list = new ArrayList<>(); while (i > 0 && i < Integer.MAX_VALUE) { list.add(i); i *= 2; } System.out.println(list); } }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u4f8b\u4e3e\u51fa\u6765\u3002"},{"location":"leetcode-0231-power-of-two/#5-3-3","text":"public class Solution5 { public boolean isPowerOfTwo(int n) { // 1073741824 \u662f\u5c0f\u4e8e Integer.MAX_VALUE \u4e2d 2 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005 return n > 0 && 1073741824 % n == 0; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0231-power-of-two \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b545\uff1a\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5224\u5b9a\u8d28\u6570\u7684\u65b9\u5e42\u540c\u6837\u6709\u6548\uff0c\u4f8b\u5982\u5224\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u662f 3 \u7684\u65b9\u5e42\uff0c\u4e0d\u8fc7\u5f97\u4e8b\u5148\u8ba1\u7b97\u51fa\u5728\u5141\u8bb8\u7684\u8303\u56f4\u5185 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u8005\u3002"},{"location":"leetcode-0232-implement-queue-using-stacks/","text":"232. Implement Queue using Stacks \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4f7f\u7528\u6808\u5b9e\u73b0\u961f\u5217\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5c06\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u7684\u5c3e\u90e8\u3002 pop() -- \u4ece\u961f\u5217\u9996\u90e8\u79fb\u9664\u5143\u7d20\u3002 peek() -- \u8fd4\u56de\u961f\u5217\u9996\u90e8\u7684\u5143\u7d20\u3002 empty() -- \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002 \u793a\u4f8b: MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // \u8fd4\u56de 1 queue.pop(); // \u8fd4\u56de 1 queue.empty(); // \u8fd4\u56de false \u8bf4\u660e: \u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c -- \u4e5f\u5c31\u662f\u53ea\u6709 push to top , peek/pop from top , size , \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002 \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 232. Implement Queue using Stacks \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 232. \u7528\u6808\u5b9e\u73b0\u961f\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0232-implement-queue-using-stacks \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"232. Implement Queue using Stacks"},{"location":"leetcode-0232-implement-queue-using-stacks/#232-implement-queue-using-stacks","text":"","title":"232. Implement Queue using Stacks"},{"location":"leetcode-0232-implement-queue-using-stacks/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4f7f\u7528\u6808\u5b9e\u73b0\u961f\u5217\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5c06\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u7684\u5c3e\u90e8\u3002 pop() -- \u4ece\u961f\u5217\u9996\u90e8\u79fb\u9664\u5143\u7d20\u3002 peek() -- \u8fd4\u56de\u961f\u5217\u9996\u90e8\u7684\u5143\u7d20\u3002 empty() -- \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002 \u793a\u4f8b: MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // \u8fd4\u56de 1 queue.pop(); // \u8fd4\u56de 1 queue.empty(); // \u8fd4\u56de false \u8bf4\u660e: \u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c -- \u4e5f\u5c31\u662f\u53ea\u6709 push to top , peek/pop from top , size , \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002 \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 232. Implement Queue using Stacks \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 232. \u7528\u6808\u5b9e\u73b0\u961f\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0232-implement-queue-using-stacks/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0232-implement-queue-using-stacks/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0232-implement-queue-using-stacks/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0232-implement-queue-using-stacks \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0234-palindrome-linked-list/","text":"234. Palindrome Linked List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2: \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 234. Palindrome Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 234. \u56de\u6587\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u7ed3\u70b9\uff0c\u505a\u4e00\u4e9b\u76f8\u5173\u7684\u5904\u7406\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u7ba1\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u8981\u5bf9\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u4ed4\u7ec6\u8003\u8651\uff0c\u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u753b\u56fe\u5e2e\u52a9\u7f16\u7801\u5b9e\u73b0\u3002 \u601d\u8def1\uff1a\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u53cd\u8f6c\u94fe\u8868\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002 \u601d\u8def2\uff1a\u5728\u5bfb\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6162\u7ed3\u70b9\u5411\u524d\u904d\u5386\u7684\u65f6\u5019\uff0c\u628a\u904d\u5386\u5230\u7684\u503c\u653e\u5165\u4e00\u4e2a\u6808\u4e2d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0234-palindrome-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"234. Palindrome Linked List"},{"location":"leetcode-0234-palindrome-linked-list/#234-palindrome-linked-list","text":"","title":"234. Palindrome Linked List"},{"location":"leetcode-0234-palindrome-linked-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2: \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 234. Palindrome Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 234. \u56de\u6587\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0234-palindrome-linked-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u7ed3\u70b9\uff0c\u505a\u4e00\u4e9b\u76f8\u5173\u7684\u5904\u7406\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u7ba1\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u8981\u5bf9\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u4ed4\u7ec6\u8003\u8651\uff0c\u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u753b\u56fe\u5e2e\u52a9\u7f16\u7801\u5b9e\u73b0\u3002 \u601d\u8def1\uff1a\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u53cd\u8f6c\u94fe\u8868\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002 \u601d\u8def2\uff1a\u5728\u5bfb\u627e\u94fe\u8868\u4e2d\u95f4\u7ed3\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6162\u7ed3\u70b9\u5411\u524d\u904d\u5386\u7684\u65f6\u5019\uff0c\u628a\u904d\u5386\u5230\u7684\u503c\u653e\u5165\u4e00\u4e2a\u6808\u4e2d\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0234-palindrome-linked-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0234-palindrome-linked-list/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0234-palindrome-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/","text":"235. Lowest Common Ancestor of a Binary Search Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684\u7956\u5148\u4e14x\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811: root = [6,2,8,0,4,7,9,null,null,3,5] _______6______ / \\ ___2__ ___8__ / \\ / \\ 0 _4 7 9 / \\ 3 5 \u793a\u4f8b 1: \u8f93\u5165: root, p = 2, q = 8 \u8f93\u51fa: 6 \u89e3\u91ca: \u8282\u70b9 2 \u548c\u8282\u70b9 8 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f 6\u3002 \u793a\u4f8b 2: \u8f93\u5165: root, p = 2, q = 4 \u8f93\u51fa: 2 \u89e3\u91ca: \u8282\u70b9 2 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f 2 , \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 235. Lowest Common Ancestor of a Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7684\u6709\u5e8f\u6027\uff0c\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\uff0c\u8fd9\u91cc\u9700\u8981\u81ea\u5df1\u753b\u56fe\u5206\u6790\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root.val > p.val && root.val > q.val) { return lowestCommonAncestor(root.left, p, q); } if (root.val < p.val && root.val < q.val) { return lowestCommonAncestor(root.right, p, q); } return root; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"235. Lowest Common Ancestor of a Binary Search Tree"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#235-lowest-common-ancestor-of-a-binary-search-tree","text":"","title":"235. Lowest Common Ancestor of a Binary Search Tree"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684\u7956\u5148\u4e14x\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811: root = [6,2,8,0,4,7,9,null,null,3,5] _______6______ / \\ ___2__ ___8__ / \\ / \\ 0 _4 7 9 / \\ 3 5 \u793a\u4f8b 1: \u8f93\u5165: root, p = 2, q = 8 \u8f93\u51fa: 6 \u89e3\u91ca: \u8282\u70b9 2 \u548c\u8282\u70b9 8 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f 6\u3002 \u793a\u4f8b 2: \u8f93\u5165: root, p = 2, q = 4 \u8f93\u51fa: 2 \u89e3\u91ca: \u8282\u70b9 2 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f 2 , \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 235. Lowest Common Ancestor of a Binary Search Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528 BST \u7684\u6709\u5e8f\u6027\uff0c\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\uff0c\u8fd9\u91cc\u9700\u8981\u81ea\u5df1\u753b\u56fe\u5206\u6790\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root.val > p.val && root.val > q.val) { return lowestCommonAncestor(root.left, p, q); } if (root.val < p.val && root.val < q.val) { return lowestCommonAncestor(root.right, p, q); } return root; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0235-lowest-common-ancestor-of-a-binary-search-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/","text":"236. Lowest Common Ancestor of a Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684 \u7956\u5148 \u4e14x\u7684\u6df1\u5ea6\u5c3d \u53ef\u80fd \u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811: root = [6,2,8,0,4,7,9,null,null,3,5] _______3______ / \\ ___5__ ___1__ / \\ / \\ 6 _2 0 8 / \\ 7 4 \u793a\u4f8b 1: \u8f93\u5165: root, p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root, p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002 \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 236. Lowest Common Ancestor of a Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u5148\u5206\u522b\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u5730\u627e\u51fa p \u548c q\uff0c\u5982\u679c\u90fd\u80fd\u627e\u5230\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7ed3\u70b9\u5c31\u662f\u8981\u627e\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { // \u521d\u59cb\u6761\u4ef6\uff1a\u53ea\u8981\u7b49\u4e8e\u5176\u4e2d\u4e4b\u4e00\uff0c\u5c31\u8fd4\u56de\u81ea\u5df1\uff0c\u4f5c\u4e3a\u540e\u5e8f\u5224\u65ad\u7684\u4f9d\u636e // \u65e2\u7136\u662f\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (root == null || root == p || root == q) { return root; } // \u5148\u5728\u5de6\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 TreeNode left = lowestCommonAncestor(root.left, p, q); // \u518d\u5728\u53f3\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 TreeNode right = lowestCommonAncestor(root.right, p, q); // \u5982\u679c\u5de6\u8fb9\u548c\u53f3\u8fb9\u4e24\u8005\u90fd\u7a7a\uff0c\u8bf4\u660e\uff0cp \u548c q \u5206\u6563\u5728 root \u7684\u5de6\u53f3\u5b50\u6811\u4e2d if (left != null && right != null) { return root; } // \u5426\u5219\u8fd4\u56de left \u548c right \u4e2d\u975e\u7a7a\u7684\u90a3\u4e2a return left == null ? right : left; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0236-lowest-common-ancestor-of-a-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"236. Lowest Common Ancestor of a Binary Tree"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#236-lowest-common-ancestor-of-a-binary-tree","text":"","title":"236. Lowest Common Ancestor of a Binary Tree"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1 \u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\uff1a \u201c\u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001v\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u3001v\u7684 \u7956\u5148 \u4e14x\u7684\u6df1\u5ea6\u5c3d \u53ef\u80fd \u5927\u3002\u201d\uff08 \u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148 \uff09 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811: root = [6,2,8,0,4,7,9,null,null,3,5] _______3______ / \\ ___5__ ___1__ / \\ / \\ 6 _2 0 8 / \\ 7 4 \u793a\u4f8b 1: \u8f93\u5165: root, p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root, p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002 \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u6307\u5b9a\u8282\u70b9\u81ea\u8eab\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 236. Lowest Common Ancestor of a Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u5148\u5206\u522b\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u5730\u627e\u51fa p \u548c q\uff0c\u5982\u679c\u90fd\u80fd\u627e\u5230\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7ed3\u70b9\u5c31\u662f\u8981\u627e\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0236-lowest-common-ancestor-of-a-binary-tree/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { // \u521d\u59cb\u6761\u4ef6\uff1a\u53ea\u8981\u7b49\u4e8e\u5176\u4e2d\u4e4b\u4e00\uff0c\u5c31\u8fd4\u56de\u81ea\u5df1\uff0c\u4f5c\u4e3a\u540e\u5e8f\u5224\u65ad\u7684\u4f9d\u636e // \u65e2\u7136\u662f\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if (root == null || root == p || root == q) { return root; } // \u5148\u5728\u5de6\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 TreeNode left = lowestCommonAncestor(root.left, p, q); // \u518d\u5728\u53f3\u5b50\u6811\u4e2d\u627e\uff0cp \u548c q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 TreeNode right = lowestCommonAncestor(root.right, p, q); // \u5982\u679c\u5de6\u8fb9\u548c\u53f3\u8fb9\u4e24\u8005\u90fd\u7a7a\uff0c\u8bf4\u660e\uff0cp \u548c q \u5206\u6563\u5728 root \u7684\u5de6\u53f3\u5b50\u6811\u4e2d if (left != null && right != null) { return root; } // \u5426\u5219\u8fd4\u56de left \u548c right \u4e2d\u975e\u7a7a\u7684\u90a3\u4e2a return left == null ? right : left; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0236-lowest-common-ancestor-of-a-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0237-delete-node-in-a-linked-list/","text":"237. Delete Node in a Linked List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002 \u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a 1 -> 2 -> 3 -> 4 \uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a 3 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210 1 -> 2 -> 4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 237. Delete Node in a Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(Integer[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public void deleteNode(ListNode node) { // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a ListNode next = node.next; node.next = next.next; node.val = next.val; next.next = null; } public static void main(String[] args) { ListNode node1 = new ListNode(0); ListNode node2 = new ListNode(1); node1.next = node2; Solution s = new Solution(); s.deleteNode(node1); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"237. Delete Node in a Linked List"},{"location":"leetcode-0237-delete-node-in-a-linked-list/#237-delete-node-in-a-linked-list","text":"","title":"237. Delete Node in a Linked List"},{"location":"leetcode-0237-delete-node-in-a-linked-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\u7684\uff09\u8282\u70b9\uff0c\u60a8\u5c06\u53ea\u88ab\u7ed9\u4e88\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002 \u6bd4\u5982\uff1a\u5047\u8bbe\u8be5\u94fe\u8868\u4e3a 1 -> 2 -> 3 -> 4 \uff0c\u7ed9\u5b9a\u60a8\u7684\u4e3a\u8be5\u94fe\u8868\u4e2d\u503c\u4e3a 3 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u60a8\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5219\u5e94\u53d8\u6210 1 -> 2 -> 4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 237. Delete Node in a Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0237-delete-node-in-a-linked-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u628a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u590d\u5236\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\u3002\u5f04\u6e05\u695a\u9898\u610f\uff0c\u9898\u76ee\u53ea\u7ed9\u4f60\u8fd9\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8ba9\u4f60\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981\u548c dummyNode \u90a3\u79cd\u5957\u8def\u6df7\u5728\u4e00\u8d77\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0237-delete-node-in-a-linked-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0237-delete-node-in-a-linked-list/#1","text":"class ListNode { int val; ListNode next; ListNode(int x) { val = x; } ListNode(Integer[] nums) { ListNode currNode = this; currNode.val = nums[0]; for (int i = 1; i < nums.length; i++) { currNode.next = new ListNode(nums[i]); currNode = currNode.next; } } @Override public String toString() { ListNode currNode = this; StringBuilder s = new StringBuilder(); while (currNode != null) { s.append(currNode.val); s.append(\" -> \"); currNode = currNode.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public void deleteNode(ListNode node) { // \u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u8bf4\u4e86\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64 node.next \u4e00\u5b9a\u975e\u7a7a ListNode next = node.next; node.next = next.next; node.val = next.val; next.next = null; } public static void main(String[] args) { ListNode node1 = new ListNode(0); ListNode node2 = new ListNode(1); node1.next = node2; Solution s = new Solution(); s.deleteNode(node1); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0237-delete-node-in-a-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0240-search-a-2d-matrix-ii/","text":"240. Search a 2D Matrix II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635\u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002 \u4f8b\u5982\uff0c \u7ed9\u5b9a\u4ee5\u4e0b\u77e9\u9635 matrix \uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u793a\u4f8b 1: \u8f93\u5165: matrix, target = 5 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix, target = 20 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 240. Search a 2D Matrix II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a + \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b + \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 \u4e0a\u9762\u7684\u56fe\u793a\u662f\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u53c2\u8003\u89e3\u7b54 1 \u81f3\u53c2\u8003\u89e3\u7b54 4 \u90fd\u662f\u8fd9\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u4e0d\u540c\u800c\u5df2\u3002 \u53c2\u8003\u89e3\u7b54 5 \u548c \u53c2\u8003\u89e3\u7b54 6 \u7ed9\u51fa\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4e0d\u65ad\u5411\u53f3\u8fb9\u8d70 // \u53f3\u8fb9\u8d70\u4e0d\u52a8\u4e86\uff0c\u5c31\u5411\u4e0b\u9762\u8d70\uff0c\u76f4\u5230\u51fa\u8fb9\u754c public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22 int x = row - 1; int y = 0; // \u6bcf\u6b21\u8003\u8651\u5411\u4e0a\u8d70 while (x >= 0) { // \u5411\u4e0a\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u53f3\u8fb9\u8d70 while (y < col && matrix[x][y] < target) { y++; } if (y < col && matrix[x][y] == target) { return true; } x--; } return false; } } \u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002 public class Solution2 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22 int x = row - 1; int y = 0; // \u6bcf\u6b21\u8003\u8651\u5411\u53f3\u8fb9\u8d70 while (y < col) { // \u5411\u53f3\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0a\u8d70 while (x >= 0 && matrix[x][y] > target) { x--; } // \u8d70\u4e0d\u52a8\u4e86\uff0c\u518d\u5411\u53f3\u8fb9\u8d70 if (x >= 0 && matrix[x][y] == target) { return true; } y++; } return false; } } \u53c2\u8003\u89e3\u7b543\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002 public class Solution3 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 int x = 0; int y = col - 1; // \u6bcf\u6b21\u8003\u8651\u5411\u4e0b\u8d70 while (x < row) { // \u5411\u4e0b\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u5de6\u8fb9\u8d70 while (y >= 0 && matrix[x][y] > target) { y--; } if (y >= 0 && matrix[x][y] == target) { return true; } x++; } return false; } } \u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002 public class Solution4 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 int x = 0; int y = col - 1; // \u6bcf\u6b21\u8003\u8651\u5411\u5de6\u8fb9\u8d70 while (y >= 0) { // \u5411\u5de6\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0b\u8d70 while (x < row && matrix[x][y] < target) { x++; } if (x < row && matrix[x][y] == target) { return true; } y--; } return false; } } \u53c2\u8003\u89e3\u7b545\uff1a public class Solution5 { // \u8fd9\u79cd\u5199\u6cd5\u6700\u6e05\u6670\u4e86 // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb, \u6bd4\u8f83 target \u548c matrix[x][y] \u7684\u503c // \u5982\u679c\u5c0f\u4e8e target\uff0c\u5219\u8be5\u884c\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 x++ // \u5982\u679c\u5927\u4e8e target\uff0c\u5219\u8be5\u5217\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 y-- // \u9047\u5230\u8fb9\u754c\u5219\u8868\u660e\u8be5\u77e9\u9635\u4e0d\u542b target public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u53f3\u4e0a\u89d2 int x = 0; int y = col - 1; while (x < row && y >= 0) { // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801 // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]); if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { y--; } else { x++; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 5; Solution5 solution5 = new Solution5(); boolean searchMatrix = solution5.searchMatrix(matrix, target); System.out.println(searchMatrix); } } \u53c2\u8003\u89e3\u7b546\uff1a\u548c\u53c2\u8003\u89e3\u7b545 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002 public class Solution6 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u5de6\u4e0b\u89d2 int x = row - 1; int y = 0; while (x >= 0 && y < col) { // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801 // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]); if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { x--; } else { y++; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 5; Solution6 solution6 = new Solution6(); boolean searchMatrix = solution6.searchMatrix(matrix, target); System.out.println(searchMatrix); } } \u53c2\u8003\u89e3\u7b547\uff1a\u4e8c\u5206\u6cd5\u3002 public class Solution7 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u5de6\u4e0b\u89d2 int x = row - 1; int y = 0; while (x >= 0 && y < col) { if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { // \u5411\u4e0a\u8d70\uff08\u5217\u56fa\u5b9a\uff0c\u884c\u53d8\u5316\uff09\uff0c\u7b49\u4e8e\u6700\u597d\uff0c\u5426\u5219\u8d70\u5230\u7b2c 1 \u4e2a\u5c0f\u4e8e\u7684\u5730\u65b9 // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u884c\u53f7 // x--; if (matrix[0][y] > target) { return false; } int left = 0; int right = x; while (left <= right) { int mid = left + (right - left) / 2; if (matrix[mid][y] == target) { return true; } else if (matrix[mid][y] < target) { left = mid + 1; } else { right = mid - 1; } } x = right; } else { // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u5217\u53f7 // \u5411\u53f3\u8fb9\u8d70 // y++; if (matrix[x][col - 1] < target) { return false; } int left = y; int right = col - 1; while (left <= right) { int mid = left + (right - left) / 2; if (matrix[x][mid] == target) { return true; } else if (matrix[x][mid] < target) { left = mid + 1; } else { right = mid - 1; } } y = left; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 40; Solution7 solution7 = new Solution7(); boolean searchMatrix = solution7.searchMatrix(matrix, target); System.out.println(searchMatrix); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0240-search-a-2d-matrix-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"240. Search a 2D Matrix II"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#240-search-a-2d-matrix-ii","text":"","title":"240. Search a 2D Matrix II"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635\u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002 \u4f8b\u5982\uff0c \u7ed9\u5b9a\u4ee5\u4e0b\u77e9\u9635 matrix \uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u793a\u4f8b 1: \u8f93\u5165: matrix, target = 5 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix, target = 20 \u8f93\u51fa: false \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 240. Search a 2D Matrix II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a + \u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b + \u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002 \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002 \u4e0a\u9762\u7684\u56fe\u793a\u662f\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u53c2\u8003\u89e3\u7b54 1 \u81f3\u53c2\u8003\u89e3\u7b54 4 \u90fd\u662f\u8fd9\u6837\u7684\uff0c\u53ea\u662f\u5199\u6cd5\u4e0d\u540c\u800c\u5df2\u3002 \u53c2\u8003\u89e3\u7b54 5 \u548c \u53c2\u8003\u89e3\u7b54 6 \u7ed9\u51fa\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#1","text":"public class Solution { // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4e0d\u65ad\u5411\u53f3\u8fb9\u8d70 // \u53f3\u8fb9\u8d70\u4e0d\u52a8\u4e86\uff0c\u5c31\u5411\u4e0b\u9762\u8d70\uff0c\u76f4\u5230\u51fa\u8fb9\u754c public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22 int x = row - 1; int y = 0; // \u6bcf\u6b21\u8003\u8651\u5411\u4e0a\u8d70 while (x >= 0) { // \u5411\u4e0a\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u53f3\u8fb9\u8d70 while (y < col && matrix[x][y] < target) { y++; } if (y < col && matrix[x][y] == target) { return true; } x--; } return false; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#21","text":"public class Solution2 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22 int x = row - 1; int y = 0; // \u6bcf\u6b21\u8003\u8651\u5411\u53f3\u8fb9\u8d70 while (y < col) { // \u5411\u53f3\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0a\u8d70 while (x >= 0 && matrix[x][y] > target) { x--; } // \u8d70\u4e0d\u52a8\u4e86\uff0c\u518d\u5411\u53f3\u8fb9\u8d70 if (x >= 0 && matrix[x][y] == target) { return true; } y++; } return false; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#31","text":"public class Solution3 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 int x = 0; int y = col - 1; // \u6bcf\u6b21\u8003\u8651\u5411\u4e0b\u8d70 while (x < row) { // \u5411\u4e0b\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u5de6\u8fb9\u8d70 while (y >= 0 && matrix[x][y] > target) { y--; } if (y >= 0 && matrix[x][y] == target) { return true; } x++; } return false; } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#41","text":"public class Solution4 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 int x = 0; int y = col - 1; // \u6bcf\u6b21\u8003\u8651\u5411\u5de6\u8fb9\u8d70 while (y >= 0) { // \u5411\u5de6\u8fb9\u8d70\u4e4b\u524d\uff0c\u5c3d\u91cf\u5411\u4e0b\u8d70 while (x < row && matrix[x][y] < target) { x++; } if (x < row && matrix[x][y] == target) { return true; } y--; } return false; } }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#5","text":"public class Solution5 { // \u8fd9\u79cd\u5199\u6cd5\u6700\u6e05\u6670\u4e86 // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb, \u6bd4\u8f83 target \u548c matrix[x][y] \u7684\u503c // \u5982\u679c\u5c0f\u4e8e target\uff0c\u5219\u8be5\u884c\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 x++ // \u5982\u679c\u5927\u4e8e target\uff0c\u5219\u8be5\u5217\u4e0d\u53ef\u80fd\u6709\u6b64\u6570\uff0c\u6240\u4ee5 y-- // \u9047\u5230\u8fb9\u754c\u5219\u8868\u660e\u8be5\u77e9\u9635\u4e0d\u542b target public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u53f3\u4e0a\u89d2 int x = 0; int y = col - 1; while (x < row && y >= 0) { // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801 // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]); if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { y--; } else { x++; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 5; Solution5 solution5 = new Solution5(); boolean searchMatrix = solution5.searchMatrix(matrix, target); System.out.println(searchMatrix); } }","title":"\u53c2\u8003\u89e3\u7b545\uff1a"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#65","text":"public class Solution6 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u5de6\u4e0b\u89d2 int x = row - 1; int y = 0; while (x >= 0 && y < col) { // \u6253\u5f00\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u7684\u4ee3\u7801 // System.out.println(\"\u6cbf\u9014\u8d70\u8fc7\u7684\u6570\u5b57\uff1a\" + matrix[x][y]); if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { x--; } else { y++; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 5; Solution6 solution6 = new Solution6(); boolean searchMatrix = solution6.searchMatrix(matrix, target); System.out.println(searchMatrix); } }","title":"\u53c2\u8003\u89e3\u7b546\uff1a\u548c\u53c2\u8003\u89e3\u7b545 \u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u5199\u6cd5\u4e0d\u540c\u3002"},{"location":"leetcode-0240-search-a-2d-matrix-ii/#7","text":"public class Solution7 { public boolean searchMatrix(int[][] matrix, int target) { int row = matrix.length; if (row == 0) { return false; } int col = matrix[0].length; // \u7ad9\u5728\u5de6\u4e0b\u89d2 int x = row - 1; int y = 0; while (x >= 0 && y < col) { if (matrix[x][y] == target) { return true; } else if (matrix[x][y] > target) { // \u5411\u4e0a\u8d70\uff08\u5217\u56fa\u5b9a\uff0c\u884c\u53d8\u5316\uff09\uff0c\u7b49\u4e8e\u6700\u597d\uff0c\u5426\u5219\u8d70\u5230\u7b2c 1 \u4e2a\u5c0f\u4e8e\u7684\u5730\u65b9 // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u884c\u53f7 // x--; if (matrix[0][y] > target) { return false; } int left = 0; int right = x; while (left <= right) { int mid = left + (right - left) / 2; if (matrix[mid][y] == target) { return true; } else if (matrix[mid][y] < target) { left = mid + 1; } else { right = mid - 1; } } x = right; } else { // \u4e8c\u5206\u6cd5\u5b9a\u4f4d\u5217\u53f7 // \u5411\u53f3\u8fb9\u8d70 // y++; if (matrix[x][col - 1] < target) { return false; } int left = y; int right = col - 1; while (left <= right) { int mid = left + (right - left) / 2; if (matrix[x][mid] == target) { return true; } else if (matrix[x][mid] < target) { left = mid + 1; } else { right = mid - 1; } } y = left; } } return false; } public static void main(String[] args) { int[][] matrix = { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30} }; int target = 40; Solution7 solution7 = new Solution7(); boolean searchMatrix = solution7.searchMatrix(matrix, target); System.out.println(searchMatrix); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0240-search-a-2d-matrix-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b547\uff1a\u4e8c\u5206\u6cd5\u3002"},{"location":"leetcode-0242-valid-anagram/","text":"242. Valid Anagram \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 242. Valid Anagram \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u4ee5\u540e\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4f4d\u8fdb\u884c\u6bd4\u8f83\u3002 public class Solution { public boolean isAnagram(String s, String t) { boolean isAnagram = true; if (s.length() != t.length()) { isAnagram = false; } else { char[] sArray = s.toCharArray(); Arrays.sort(sArray); char[] tArray = t.toCharArray(); Arrays.sort(tArray); for (int i = 0; i < sArray.length; i++) { if (sArray[i] != tArray[i]) { isAnagram = false; break; } } } return isAnagram; } } \u53c2\u8003\u89e3\u7b542\uff1a\u653e\u5165\u4e00\u4e2a Map \u4e2d\uff0c\u53ea\u8981\u540e\u9762\u6709\u4e00\u4e2a\u5143\u7d20\u4e0d\u51fa\u73b0\u5728 Map \u4e2d\uff0c\u5c31\u9000\u51fa\uff0c\u6700\u540e\u5e94\u8be5\u4f7f\u5f97\u8fd9\u4e2a Map \u91cc\u6240\u6709\u5143\u7d20\u7684 value \u503c\u90fd\u4e3a 0\u3002 public class Solution2 { public boolean isAnagram(String s, String t) { boolean isAnagram = true; if (s.length() != t.length()) { isAnagram = false; } else { char[] sArray = s.toCharArray(); Map<Character, Integer> map1 = new HashMap<>(); for (char c : sArray) { if (map1.containsKey(c)) { map1.put(c, map1.get(c) + 1); } else { map1.put(c, 1); } } char[] tArray = t.toCharArray(); for (char c : tArray) { if (map1.containsKey(c) && map1.get(c) >= 1) { map1.put(c, map1.get(c) - 1); } else { isAnagram = false; break; } } } return isAnagram; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0242-valid-anagram \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"242. Valid Anagram"},{"location":"leetcode-0242-valid-anagram/#242-valid-anagram","text":"","title":"242. Valid Anagram"},{"location":"leetcode-0242-valid-anagram/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 242. Valid Anagram \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0242-valid-anagram/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0242-valid-anagram/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0242-valid-anagram/#1","text":"public class Solution { public boolean isAnagram(String s, String t) { boolean isAnagram = true; if (s.length() != t.length()) { isAnagram = false; } else { char[] sArray = s.toCharArray(); Arrays.sort(sArray); char[] tArray = t.toCharArray(); Arrays.sort(tArray); for (int i = 0; i < sArray.length; i++) { if (sArray[i] != tArray[i]) { isAnagram = false; break; } } } return isAnagram; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u4ee5\u540e\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4f4d\u8fdb\u884c\u6bd4\u8f83\u3002"},{"location":"leetcode-0242-valid-anagram/#2-map-map-map-value-0","text":"public class Solution2 { public boolean isAnagram(String s, String t) { boolean isAnagram = true; if (s.length() != t.length()) { isAnagram = false; } else { char[] sArray = s.toCharArray(); Map<Character, Integer> map1 = new HashMap<>(); for (char c : sArray) { if (map1.containsKey(c)) { map1.put(c, map1.get(c) + 1); } else { map1.put(c, 1); } } char[] tArray = t.toCharArray(); for (char c : tArray) { if (map1.containsKey(c) && map1.get(c) >= 1) { map1.put(c, map1.get(c) - 1); } else { isAnagram = false; break; } } } return isAnagram; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0242-valid-anagram \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u653e\u5165\u4e00\u4e2a Map \u4e2d\uff0c\u53ea\u8981\u540e\u9762\u6709\u4e00\u4e2a\u5143\u7d20\u4e0d\u51fa\u73b0\u5728 Map \u4e2d\uff0c\u5c31\u9000\u51fa\uff0c\u6700\u540e\u5e94\u8be5\u4f7f\u5f97\u8fd9\u4e2a Map \u91cc\u6240\u6709\u5143\u7d20\u7684 value \u503c\u90fd\u4e3a 0\u3002"},{"location":"leetcode-0257-binary-tree-paths/","text":"257. Binary Tree Paths \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u8f93\u5165: 1 / \\ 2 3 \\ 5 \u8f93\u51fa: [\"1->2->5\", \"1->3\"] \u89e3\u91ca: \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1->2->5, 1->3 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 257. Binary Tree Paths \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4ece\u6839\u7ed3\u70b9\u5411\u4e0b\u9012\u5f52\u6267\u884c\uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u90fd\u5b58\u5728 path \u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\u624d\u8fdb\u884c\u7ed3\u7b97\u3002 Python \u5199\u6cd5\uff1a # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] if root is None: return res self.__helper(root, '', res) return res def __helper(self, node, pre, res): # \u53f6\u5b50\u7ed3\u70b9 if node.left is None and node.right is None: res.append(pre + str(node.val)) return if node.left: self.__helper(node.left, pre + str(node.val) + '->', res) if node.right: self.__helper(node.right, pre + str(node.val) + '->', res) \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u529e\u6cd5\uff0c\u60f3\u8c61 path \u5c31\u662f\u4e00\u4e2a\u7ef3\u5b50\uff0c\u4e00\u6761\u8def\u8d70\u5230\u5e95\u4ee5\u540e\uff0c\u5c31\u8981\u91ca\u653e\u3002 # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] if root is None: return res path = [] self.__helper(root, path, res) return res def __helper(self, node, path, res): \"\"\" :param node: :param path: \u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u503c\u7ec4\u6210\u7684\u5217\u8868 :param res: \u5b58\u653e\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf :return: \"\"\" if node is None: return path.append(str(node.val)) if node.left is None and node.right is None: # \u53ef\u4ee5\u7ed3\u7b97\u4e86 res.append(\"->\".join(path)) return if node.left: self.__helper(node.left, path, res) # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa # \u5de6\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa path.pop() if node.right: self.__helper(node.right, path, res) # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa # \u53f3\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa path.pop() \u53c2\u8003\u89e3\u7b543\uff1a\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u662f\u540e\u5e8f\u904d\u5386\u7684\u505a\u6cd5\uff0c\u5148\u628a\u5de6\u53f3\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u5904\u7406\u81ea\u5df1\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u601d\u8def\u8fd8\u662f\u503c\u5f97\u5b66\u4e60\u7684\u3002 Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<String> binaryTreePaths(TreeNode root) { List<String> res = new ArrayList<>(); if (root == null) { return res; } // \u8fd9\u4e2a\u8282\u70b9\u662f\u4e2a\u6839\u8282\u70b9\uff0c\u60f3\u4e00\u60f3\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5 if (root.left == null && root.right == null) { res.add(String.valueOf(root.val)); } List<String> leftS = binaryTreePaths(root.left); for (int i = 0; i < leftS.size(); i++) { res.add(String.valueOf(root.val) + \"->\" + leftS.get(i)); } List<String> rightS = binaryTreePaths(root.right); for (int i = 0; i < rightS.size(); i++) { res.add(String.valueOf(root.val) + \"->\" + rightS.get(i)); } return res; } } Python \u5199\u6cd5\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] # \u524d\u9762\u5148\u8ba8\u8bba\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\u60c5\u51b5 if root is None: return res if root.left is None and root.right is None: res.append(str(root.val)) return res # \u5b57\u7b26\u4e32\u5217\u8868 left_paths = self.binaryTreePaths(root.left) for path in left_paths: res.append(str(root.val) + '->' + path) # \u5b57\u7b26\u4e32\u5217\u8868 right_paths = self.binaryTreePaths(root.right) for path in right_paths: res.append(str(root.val) + '->' + path) return res \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0257-binary-tree-paths \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"257. Binary Tree Paths"},{"location":"leetcode-0257-binary-tree-paths/#257-binary-tree-paths","text":"","title":"257. Binary Tree Paths"},{"location":"leetcode-0257-binary-tree-paths/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u8f93\u5165: 1 / \\ 2 3 \\ 5 \u8f93\u51fa: [\"1->2->5\", \"1->3\"] \u89e3\u91ca: \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1->2->5, 1->3 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 257. Binary Tree Paths \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0257-binary-tree-paths/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0257-binary-tree-paths/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0257-binary-tree-paths/#1-path","text":"Python \u5199\u6cd5\uff1a # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] if root is None: return res self.__helper(root, '', res) return res def __helper(self, node, pre, res): # \u53f6\u5b50\u7ed3\u70b9 if node.left is None and node.right is None: res.append(pre + str(node.val)) return if node.left: self.__helper(node.left, pre + str(node.val) + '->', res) if node.right: self.__helper(node.right, pre + str(node.val) + '->', res)","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4ece\u6839\u7ed3\u70b9\u5411\u4e0b\u9012\u5f52\u6267\u884c\uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u90fd\u5b58\u5728 path \u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\u624d\u8fdb\u884c\u7ed3\u7b97\u3002"},{"location":"leetcode-0257-binary-tree-paths/#2-path","text":"# Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] if root is None: return res path = [] self.__helper(root, path, res) return res def __helper(self, node, path, res): \"\"\" :param node: :param path: \u6cbf\u9014\u7ecf\u8fc7\u7684\u7ed3\u70b9\u503c\u7ec4\u6210\u7684\u5217\u8868 :param res: \u5b58\u653e\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf :return: \"\"\" if node is None: return path.append(str(node.val)) if node.left is None and node.right is None: # \u53ef\u4ee5\u7ed3\u7b97\u4e86 res.append(\"->\".join(path)) return if node.left: self.__helper(node.left, path, res) # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa # \u5de6\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa path.pop() if node.right: self.__helper(node.right, path, res) # \u3010\u91cd\u70b9\u3011\uff1a\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f97\u5f39\u51fa # \u53f3\u8fb9\u7ed3\u70b9\u90fd\u770b\u8fc7\u4e86\uff0c\u6240\u4ee5 path \u8981\u5f39\u51fa path.pop()","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u56de\u6eaf\u7684\u529e\u6cd5\uff0c\u60f3\u8c61 path \u5c31\u662f\u4e00\u4e2a\u7ef3\u5b50\uff0c\u4e00\u6761\u8def\u8d70\u5230\u5e95\u4ee5\u540e\uff0c\u5c31\u8981\u91ca\u653e\u3002"},{"location":"leetcode-0257-binary-tree-paths/#3","text":"Java \u4ee3\u7801\uff1a class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<String> binaryTreePaths(TreeNode root) { List<String> res = new ArrayList<>(); if (root == null) { return res; } // \u8fd9\u4e2a\u8282\u70b9\u662f\u4e2a\u6839\u8282\u70b9\uff0c\u60f3\u4e00\u60f3\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5 if (root.left == null && root.right == null) { res.add(String.valueOf(root.val)); } List<String> leftS = binaryTreePaths(root.left); for (int i = 0; i < leftS.size(); i++) { res.add(String.valueOf(root.val) + \"->\" + leftS.get(i)); } List<String> rightS = binaryTreePaths(root.right); for (int i = 0; i < rightS.size(); i++) { res.add(String.valueOf(root.val) + \"->\" + rightS.get(i)); } return res; } } Python \u5199\u6cd5\uff1a # Definition for a binary tree node. class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None class Solution(object): def binaryTreePaths(self, root): \"\"\" :type root: TreeNode :rtype: List[str] \"\"\" res = [] # \u524d\u9762\u5148\u8ba8\u8bba\u9012\u5f52\u5230\u5e95\u7684\u60c5\u51b5\u60c5\u51b5 if root is None: return res if root.left is None and root.right is None: res.append(str(root.val)) return res # \u5b57\u7b26\u4e32\u5217\u8868 left_paths = self.binaryTreePaths(root.left) for path in left_paths: res.append(str(root.val) + '->' + path) # \u5b57\u7b26\u4e32\u5217\u8868 right_paths = self.binaryTreePaths(root.right) for path in right_paths: res.append(str(root.val) + '->' + path) return res \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0257-binary-tree-paths \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u662f\u540e\u5e8f\u904d\u5386\u7684\u505a\u6cd5\uff0c\u5148\u628a\u5de6\u53f3\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u5904\u7406\u81ea\u5df1\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u601d\u8def\u8fd8\u662f\u503c\u5f97\u5b66\u4e60\u7684\u3002"},{"location":"leetcode-0260-single-number-iii/","text":"260. Single Number III \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b : \u8f93\u5165: [1,2,1,3,2,5] \u8f93\u51fa: [3,5] \u6ce8\u610f\uff1a \u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c [5, 3] \u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002 \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 260. Single Number III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int[] singleNumber(int[] nums) { int a_xor_b = 0; for (int num : nums) { a_xor_b ^= num; } // n&(n-1) \u5c06\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 \u53d8\u6210 0 // n&(~(n-1)) \u53ea\u4fdd\u7559\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 int mask = a_xor_b & (~(a_xor_b - 1)); int[] res = new int[2]; for (int num : nums) { if ((num & mask) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public int[] singleNumber(int[] nums) { int xor = 0; for (int num : nums) { xor ^= num; } int[] res = new int[2]; int mask = 1; for (int i = 0; i < 32; i++) { if ((xor & mask) != 0) { break; } mask <<= 1; } for (int num : nums) { if ((num & mask) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0260-single-number-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"260. Single Number III"},{"location":"leetcode-0260-single-number-iii/#260-single-number-iii","text":"","title":"260. Single Number III"},{"location":"leetcode-0260-single-number-iii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b : \u8f93\u5165: [1,2,1,3,2,5] \u8f93\u51fa: [3,5] \u6ce8\u610f\uff1a \u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c [5, 3] \u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002 \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 260. Single Number III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0260-single-number-iii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0260-single-number-iii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0260-single-number-iii/#1","text":"public class Solution { public int[] singleNumber(int[] nums) { int a_xor_b = 0; for (int num : nums) { a_xor_b ^= num; } // n&(n-1) \u5c06\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 \u53d8\u6210 0 // n&(~(n-1)) \u53ea\u4fdd\u7559\u4ece\u53f3\u8fb9\u5230\u5de6\u8fb9\u7684\u7b2c 1 \u4e2a 1 int mask = a_xor_b & (~(a_xor_b - 1)); int[] res = new int[2]; for (int num : nums) { if ((num & mask) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0260-single-number-iii/#2","text":"public class Solution2 { public int[] singleNumber(int[] nums) { int xor = 0; for (int num : nums) { xor ^= num; } int[] res = new int[2]; int mask = 1; for (int i = 0; i < 32; i++) { if ((xor & mask) != 0) { break; } mask <<= 1; } for (int num : nums) { if ((num & mask) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0260-single-number-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0263-ugly-number/","text":"263. Ugly Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7 \u3002 \u8bf4\u660e\uff1a 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u22122 31 , 2 31 \u2212 1]\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 263. Ugly Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 263. \u4e11\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u5bb9\u6613\u4e00\u4e0b\u5b50\u5199\u5bf9\uff0c\u4e5f\u5f88\u53ef\u80fd\u628a\u95ee\u9898\u60f3\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8bb8\u8fd9\u7c7b\u95ee\u9898\u89c1\u5f97\u591a\u4e86\u5c31\u61c2\u4e86\u57fa\u672c\u7684\u5957\u8def\u4e86\u3002\u6216\u8bb8\u6a21\u4eff\u662f\u7b2c 1 \u6b65\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 // \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 public boolean isUgly(int num) { if (num <= 0) { return false; } while (num % 5 == 0) { num /= 5; } while (num % 3 == 0) { num /= 3; } while (num % 2 == 0) { num /= 2; } return num == 1; } } \u53c2\u8003\u89e3\u7b542\uff1a\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\u3002 public class Solution2 { public boolean isUgly(int num) { if (num <= 0) { return false; } int[] factors = new int[]{2, 3, 5}; for (int factor : factors) { while (num % factor == 0) { num /= factor; } } return num == 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0263-ugly-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"263. Ugly Number"},{"location":"leetcode-0263-ugly-number/#263-ugly-number","text":"","title":"263. Ugly Number"},{"location":"leetcode-0263-ugly-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7 \u3002 \u8bf4\u660e\uff1a 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u22122 31 , 2 31 \u2212 1]\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 263. Ugly Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 263. \u4e11\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0263-ugly-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u5bb9\u6613\u4e00\u4e0b\u5b50\u5199\u5bf9\uff0c\u4e5f\u5f88\u53ef\u80fd\u628a\u95ee\u9898\u60f3\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8bb8\u8fd9\u7c7b\u95ee\u9898\u89c1\u5f97\u591a\u4e86\u5c31\u61c2\u4e86\u57fa\u672c\u7684\u5957\u8def\u4e86\u3002\u6216\u8bb8\u6a21\u4eff\u662f\u7b2c 1 \u6b65\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0263-ugly-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0263-ugly-number/#1","text":"public class Solution { // \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 // \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 public boolean isUgly(int num) { if (num <= 0) { return false; } while (num % 5 == 0) { num /= 5; } while (num % 3 == 0) { num /= 3; } while (num % 2 == 0) { num /= 2; } return num == 1; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0263-ugly-number/#2","text":"public class Solution2 { public boolean isUgly(int num) { if (num <= 0) { return false; } int[] factors = new int[]{2, 3, 5}; for (int factor : factors) { while (num % factor == 0) { num /= factor; } } return num == 1; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0263-ugly-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\u3002"},{"location":"leetcode-0264-ugly-number-ii/","text":"264. Ugly Number II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b: \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc7 1690\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 264. Ugly Number II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 264. \u4e11\u6570 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u53ef\u4ee5\u53c2\u8003\u4f55\u6d77\u6d9b\u7f16\u8457\u7684\u300a\u5251\u6307Offer\u300b\u7b2c 49 \u9898\uff1a\u4e11\u6570\uff08P240\uff09\u7684\u5206\u6790\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int nthUglyNumber(int n) { if (n < 7) { return n; } int[] dp = new int[n]; int index2 = 0; int index3 = 0; int index5 = 0; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = min3(dp[index2] * 2, dp[index3] * 3, dp[index5] * 5); if (dp[i] == dp[index2] * 2) { index2++; } if (dp[i] == dp[index3] * 3) { index3++; } if (dp[i] == dp[index5] * 5) { index5++; } } return dp[n - 1]; } private int min3(int num1, int num2, int num3) { return Integer.min(Integer.min(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int nthUglyNumber = solution.nthUglyNumber(30); System.out.println(nthUglyNumber); } } \u53c2\u8003\u89e3\u7b542\uff1a\u6839\u636e LeetCode \u7b2c 313 \u9898\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u7279\u4f8b\u3002 public class Solution3 { public int nthUglyNumber(int n) { int[] primes = new int[3]; primes[0] = 2; primes[1] = 3; primes[2] = 5; int[] indexes = new int[3]; int[] dp = new int[n]; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = Integer.MAX_VALUE; for (int j = 0; j < 3; j++) { dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]); } for (int j = 0; j < 3; j++) { if (dp[i] == dp[indexes[j]] * primes[j]) { indexes[j]++; } } } return dp[n - 1]; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0264-ugly-number-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"264. Ugly Number II"},{"location":"leetcode-0264-ugly-number-ii/#264-ugly-number-ii","text":"","title":"264. Ugly Number II"},{"location":"leetcode-0264-ugly-number-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b: \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc7 1690\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 264. Ugly Number II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 264. \u4e11\u6570 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0264-ugly-number-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u53ef\u4ee5\u53c2\u8003\u4f55\u6d77\u6d9b\u7f16\u8457\u7684\u300a\u5251\u6307Offer\u300b\u7b2c 49 \u9898\uff1a\u4e11\u6570\uff08P240\uff09\u7684\u5206\u6790\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0264-ugly-number-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0264-ugly-number-ii/#1","text":"public class Solution { public int nthUglyNumber(int n) { if (n < 7) { return n; } int[] dp = new int[n]; int index2 = 0; int index3 = 0; int index5 = 0; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = min3(dp[index2] * 2, dp[index3] * 3, dp[index5] * 5); if (dp[i] == dp[index2] * 2) { index2++; } if (dp[i] == dp[index3] * 3) { index3++; } if (dp[i] == dp[index5] * 5) { index5++; } } return dp[n - 1]; } private int min3(int num1, int num2, int num3) { return Integer.min(Integer.min(num1, num2), num3); } public static void main(String[] args) { Solution solution = new Solution(); int nthUglyNumber = solution.nthUglyNumber(30); System.out.println(nthUglyNumber); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0264-ugly-number-ii/#2-leetcode-313","text":"public class Solution3 { public int nthUglyNumber(int n) { int[] primes = new int[3]; primes[0] = 2; primes[1] = 3; primes[2] = 5; int[] indexes = new int[3]; int[] dp = new int[n]; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = Integer.MAX_VALUE; for (int j = 0; j < 3; j++) { dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]); } for (int j = 0; j < 3; j++) { if (dp[i] == dp[indexes[j]] * primes[j]) { indexes[j]++; } } } return dp[n - 1]; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0264-ugly-number-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u6839\u636e LeetCode \u7b2c 313 \u9898\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u201c\u8d85\u7ea7\u4e11\u6570\u201d\u7684\u7279\u4f8b\u3002"},{"location":"leetcode-0268-missing-number/","text":"268. Missing Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0, 1, 2, ..., n \u4e2d n \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u627e\u51fa 0 .. n \u4e2d\u6ca1\u6709\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u90a3\u4e2a\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,0,1] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [9,6,4,2,3,5,7,0,1] \u8f93\u51fa: 8 \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u5e94\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0? \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 268. Missing Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 268. \u7f3a\u5931\u6570\u5b57 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6c42\u524d n \u9879\u548c\uff0c\u518d\u51cf\u53bb\u7ed9\u51fa\u7684\u6570\u7ec4\u7684\u548c\uff0c\u5c31\u662f\u7f3a\u5931\u7684\u90a3\u4e2a\u6570\u5b57\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int missingNumber(int[] nums) { int n = nums.length; int sum = (n + 1) * n / 2; for (int i = 0; i < n; i++) { sum -= nums[i]; } return sum; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0268-missing-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"268. Missing Number"},{"location":"leetcode-0268-missing-number/#268-missing-number","text":"","title":"268. Missing Number"},{"location":"leetcode-0268-missing-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0, 1, 2, ..., n \u4e2d n \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u627e\u51fa 0 .. n \u4e2d\u6ca1\u6709\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u90a3\u4e2a\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,0,1] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [9,6,4,2,3,5,7,0,1] \u8f93\u51fa: 8 \u8bf4\u660e: \u4f60\u7684\u7b97\u6cd5\u5e94\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0? \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 268. Missing Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 268. \u7f3a\u5931\u6570\u5b57 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0268-missing-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u524d n \u9879\u548c\uff0c\u518d\u51cf\u53bb\u7ed9\u51fa\u7684\u6570\u7ec4\u7684\u548c\uff0c\u5c31\u662f\u7f3a\u5931\u7684\u90a3\u4e2a\u6570\u5b57\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0268-missing-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0268-missing-number/#1","text":"public class Solution { public int missingNumber(int[] nums) { int n = nums.length; int sum = (n + 1) * n / 2; for (int i = 0; i < n; i++) { sum -= nums[i]; } return sum; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0268-missing-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0283-move-zeroes/","text":"283. Move Zeroes \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,3,12] \u8f93\u51fa: [1,3,12,0,0] \u8bf4\u660e : \u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002 \u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 283. Move Zeroes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 283. \u79fb\u52a8\u96f6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u6709 2 \u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u5b66\u4e60\u8fc7\u7b97\u6cd5\u90fd\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u5176\u5b9e\u53ea\u8981\u7b97\u6cd5\u57fa\u7840\u624e\u5b9e\uff0c\u4e5f\u662f\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u7684\u3002 \u601d\u8def1\uff1a\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u628a\u975e\u96f6\u503c\u8986\u76d6\u5728\u6570\u7ec4\u7684\u524d\u9762\uff0c\u6700\u540e\u5728\u628a\u6570\u7ec4\u7684\u672b\u5c3e\u5168\u90e8\u8d4b\u503c\u4e3a 0\u3002 \u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u53ea\u8981\u719f\u6089\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5e94\u8be5\u66f4\u5bb9\u6613\u60f3\u5230\u4e0b\u9762\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u501f\u52a9\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u60f3\uff0c\u9047\u5230 0 \u5c31\u653e\u8fc7\uff0c\u9047\u5230\u975e 0 \uff0c\u8fd9\u662f\u7b26\u5408\u9898\u76ee\u4e2d\u201c\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u201d\u8fd9\u4e2a\u8981\u6c42\u7684\u3002 \u5c31\u9010\u4e2a\u4ea4\u6362\u5230\u6570\u7ec4\u7684\u524d\u9762\u3002\u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01\u3002 \u5728\u7ec3\u4e60\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u60f3\u5230\u4e86\u201c\u6307\u9488\u5bf9\u649e\u201d\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u4f7f\u5f97\u975e\u96f6\u5143\u7d20\u6392\u5728\u96f6\u5143\u7d20\u524d\u9762\uff0c\u4f46\u662f\u4e0d\u80fd\u505a\u5230\u201c\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u201d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a public class Solution { public void moveZeroes(int[] nums) { // \u904d\u5386\u6307\u9488 int i = 0; // \u4e00\u5f00\u59cb\u90fd\u5199\u975e\u96f6\u5143\u7d20\uff0c\u7136\u540e\u90fd\u5199\u96f6\u5143\u7d20 int j = 0; for (; i < nums.length; i++) { if (nums[i] != 0) { nums[j++] = nums[i]; } } for (int k = j; k < nums.length; k++) { nums[k] = 0; } } } Python \u5199\u6cd5\uff1a class Solution: def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" not_zero_begin = 0 for i in range(len(nums)): if nums[i] != 0: nums[not_zero_begin] = nums[i] not_zero_begin += 1 for i in range(not_zero_begin, len(nums)): nums[not_zero_begin] = 0 not_zero_begin += 1 \u53c2\u8003\u89e3\u7b542 Java \u5199\u6cd5\uff1a public class Solution3 { // https://leetcode-cn.com/problems/move-zeroes/description/ // [0, 1, 0, 3, 12] // [1, 0, 0, 3, 12] // [1, 3, 0, 0, 12] // [1, 3, 12, 0, 0] // \u5e38\u89c4\u9898\uff1a\u7528\u601d\u7ef4\u5b9a\u52bf\u5c31\u53ef\u4ee5\u5b8c\u6210 /** * i \u7528\u4e8e\u904d\u5386 * \u5728\u533a\u95f4 [0,j) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u975e\u96f6 * \u800c\u5728\u533a\u95f4 [j,i) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u4e3a\u96f6 * \u521d\u59cb\u5316\u7684\u65f6\u5019 j = 0 \uff0c i = 0 * * @param nums */ public void moveZeroes(int[] nums) { int j = 0; for (int i = 0; i < nums.length; i++) { if(nums[i]!=0){ swap(nums,i,j); j++; } } } private void swap(int[] nums,int index1,int index2){ if(index1==index2){ return; } int temp = nums[index1]; nums[index1] =nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: # \u5feb\u901f\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u6700\u7b80\u5355\uff0c\u6700\u76f4\u63a5 def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # [0,not_zero_end\uff09 \u4fdd\u6301\u90fd\u975e 0\uff0c # [not_zero_end,len-1] \u4e3a 0 not_zero_end = 0 for i in range(len(nums)): if nums[i] != 0: self.__swap(nums, not_zero_end, i) not_zero_end += 1 def __swap(self, nums, index1, index2): if index1 == index2: return temp = nums[index1] nums[index1] = nums[index2] nums[index2] = temp Python \u5199\u6cd5\uff1a class Solution: # \u5feb\u6392\u5b9e\u73b0\uff1a # Python \u4ea4\u6362\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u7528 Python \u7279\u6b8a\u7684\u8bed\u6cd5\u5b9e\u73b0 def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" not_zero_end = 0 # \u4e0d\u5305\u62ec\u672b\u5c3e\u5143\u7d20 for j in range(len(nums)): if nums[j] != 0: nums[not_zero_end], nums[j] = nums[j], nums[not_zero_end] not_zero_end += 1 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0283-move-zeroes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"283. Move Zeroes"},{"location":"leetcode-0283-move-zeroes/#283-move-zeroes","text":"","title":"283. Move Zeroes"},{"location":"leetcode-0283-move-zeroes/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,3,12] \u8f93\u51fa: [1,3,12,0,0] \u8bf4\u660e : \u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002 \u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 283. Move Zeroes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 283. \u79fb\u52a8\u96f6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0283-move-zeroes/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u6709 2 \u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u5b66\u4e60\u8fc7\u7b97\u6cd5\u90fd\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u5176\u5b9e\u53ea\u8981\u7b97\u6cd5\u57fa\u7840\u624e\u5b9e\uff0c\u4e5f\u662f\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u7684\u3002 \u601d\u8def1\uff1a\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u628a\u975e\u96f6\u503c\u8986\u76d6\u5728\u6570\u7ec4\u7684\u524d\u9762\uff0c\u6700\u540e\u5728\u628a\u6570\u7ec4\u7684\u672b\u5c3e\u5168\u90e8\u8d4b\u503c\u4e3a 0\u3002 \u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u53ea\u8981\u719f\u6089\u4e86\u5feb\u901f\u6392\u5e8f\uff0c\u5e94\u8be5\u66f4\u5bb9\u6613\u60f3\u5230\u4e0b\u9762\u7684\u5199\u6cd5\u3002 \u601d\u8def2\uff08\u63a8\u8350\uff09\uff1a\u501f\u52a9\u5feb\u901f\u6392\u5e8f partition \u7684\u601d\u60f3\uff0c\u9047\u5230 0 \u5c31\u653e\u8fc7\uff0c\u9047\u5230\u975e 0 \uff0c\u8fd9\u662f\u7b26\u5408\u9898\u76ee\u4e2d\u201c\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u201d\u8fd9\u4e2a\u8981\u6c42\u7684\u3002 \u5c31\u9010\u4e2a\u4ea4\u6362\u5230\u6570\u7ec4\u7684\u524d\u9762\u3002\u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01\u3002 \u5728\u7ec3\u4e60\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u60f3\u5230\u4e86\u201c\u6307\u9488\u5bf9\u649e\u201d\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u4f7f\u5f97\u975e\u96f6\u5143\u7d20\u6392\u5728\u96f6\u5143\u7d20\u524d\u9762\uff0c\u4f46\u662f\u4e0d\u80fd\u505a\u5230\u201c\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u201d\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0283-move-zeroes/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0283-move-zeroes/#1","text":"Java \u5199\u6cd5\uff1a public class Solution { public void moveZeroes(int[] nums) { // \u904d\u5386\u6307\u9488 int i = 0; // \u4e00\u5f00\u59cb\u90fd\u5199\u975e\u96f6\u5143\u7d20\uff0c\u7136\u540e\u90fd\u5199\u96f6\u5143\u7d20 int j = 0; for (; i < nums.length; i++) { if (nums[i] != 0) { nums[j++] = nums[i]; } } for (int k = j; k < nums.length; k++) { nums[k] = 0; } } } Python \u5199\u6cd5\uff1a class Solution: def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" not_zero_begin = 0 for i in range(len(nums)): if nums[i] != 0: nums[not_zero_begin] = nums[i] not_zero_begin += 1 for i in range(not_zero_begin, len(nums)): nums[not_zero_begin] = 0 not_zero_begin += 1","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0283-move-zeroes/#2","text":"Java \u5199\u6cd5\uff1a public class Solution3 { // https://leetcode-cn.com/problems/move-zeroes/description/ // [0, 1, 0, 3, 12] // [1, 0, 0, 3, 12] // [1, 3, 0, 0, 12] // [1, 3, 12, 0, 0] // \u5e38\u89c4\u9898\uff1a\u7528\u601d\u7ef4\u5b9a\u52bf\u5c31\u53ef\u4ee5\u5b8c\u6210 /** * i \u7528\u4e8e\u904d\u5386 * \u5728\u533a\u95f4 [0,j) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u975e\u96f6 * \u800c\u5728\u533a\u95f4 [j,i) \u91cc\uff0c\u6240\u6709\u7684\u503c\u90fd\u4e3a\u96f6 * \u521d\u59cb\u5316\u7684\u65f6\u5019 j = 0 \uff0c i = 0 * * @param nums */ public void moveZeroes(int[] nums) { int j = 0; for (int i = 0; i < nums.length; i++) { if(nums[i]!=0){ swap(nums,i,j); j++; } } } private void swap(int[] nums,int index1,int index2){ if(index1==index2){ return; } int temp = nums[index1]; nums[index1] =nums[index2]; nums[index2] = temp; } } Python \u5199\u6cd5\uff1a class Solution: # \u5feb\u901f\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u6700\u7b80\u5355\uff0c\u6700\u76f4\u63a5 def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" # [0,not_zero_end\uff09 \u4fdd\u6301\u90fd\u975e 0\uff0c # [not_zero_end,len-1] \u4e3a 0 not_zero_end = 0 for i in range(len(nums)): if nums[i] != 0: self.__swap(nums, not_zero_end, i) not_zero_end += 1 def __swap(self, nums, index1, index2): if index1 == index2: return temp = nums[index1] nums[index1] = nums[index2] nums[index2] = temp Python \u5199\u6cd5\uff1a class Solution: # \u5feb\u6392\u5b9e\u73b0\uff1a # Python \u4ea4\u6362\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u7528 Python \u7279\u6b8a\u7684\u8bed\u6cd5\u5b9e\u73b0 def moveZeroes(self, nums): \"\"\" :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. \"\"\" not_zero_end = 0 # \u4e0d\u5305\u62ec\u672b\u5c3e\u5143\u7d20 for j in range(len(nums)): if nums[j] != 0: nums[not_zero_end], nums[j] = nums[j], nums[not_zero_end] not_zero_end += 1 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0283-move-zeroes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0284-peeking-iterator/","text":"284. Peeking Iterator \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a next() \u548c hasNext() \u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 peek() \u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531 next() \u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20 peek() \u51fa\u6765\u3002 \u793a\u4f8b: \u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868 [1,2,3] \u3002 \u8c03\u7528 next() \u8fd4\u56de 1 \uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u73b0\u5728\u8c03\u7528 peek() \u8fd4\u56de 2 \uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528 next() \u4ecd\u7136\u8fd4\u56de 2 \u3002 \u6700\u540e\u4e00\u6b21\u8c03\u7528 next() \u8fd4\u56de 3 \uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528 hasNext() \u5e94\u8be5\u8fd4\u56de false \u3002 \u8fdb\u9636\uff1a \u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 284. Peeking Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 284. \u9876\u7aef\u8fed\u4ee3\u5668 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.Iterator; import java.util.List; // Java Iterator interface reference: // https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html class PeekingIterator implements Iterator<Integer> { private Iterator<Integer> iterator; private Integer peek = null; private boolean peeked = false; public PeekingIterator(Iterator<Integer> iterator) { // initialize any member here. this.iterator = iterator; } // Returns the next element in the iteration without advancing the iterator. public Integer peek() { if (peeked) { return peek; } else { peeked = true; peek = iterator.next(); } return peek; } // hasNext() and next() should behave the same as in the Iterator interface. // Override them if needed. @Override public Integer next() { if (peeked) { peeked = false; return peek; } else { return iterator.next(); } } @Override public boolean hasNext() { return peeked || iterator.hasNext(); } public static void main(String[] args) { List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); Iterator<Integer> iterator = list.iterator(); PeekingIterator peekingIterator = new PeekingIterator(iterator); Integer peek1 = peekingIterator.peek(); System.out.println(peek1); Integer peek2 = peekingIterator.peek(); System.out.println(peek2); Integer peek3 = peekingIterator.peek(); System.out.println(peek3); Integer peek4 = peekingIterator.peek(); System.out.println(peek4); Integer next1 = peekingIterator.next(); System.out.println(next1); Integer peek5 = peekingIterator.peek(); System.out.println(peek5); Integer next2 = peekingIterator.next(); System.out.println(next2); Integer next3 = peekingIterator.next(); System.out.println(next3); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0284-peeking-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"284. Peeking Iterator"},{"location":"leetcode-0284-peeking-iterator/#284-peeking-iterator","text":"","title":"284. Peeking Iterator"},{"location":"leetcode-0284-peeking-iterator/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a next() \u548c hasNext() \u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 peek() \u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531 next() \u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20 peek() \u51fa\u6765\u3002 \u793a\u4f8b: \u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868 [1,2,3] \u3002 \u8c03\u7528 next() \u8fd4\u56de 1 \uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u73b0\u5728\u8c03\u7528 peek() \u8fd4\u56de 2 \uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528 next() \u4ecd\u7136\u8fd4\u56de 2 \u3002 \u6700\u540e\u4e00\u6b21\u8c03\u7528 next() \u8fd4\u56de 3 \uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528 hasNext() \u5e94\u8be5\u8fd4\u56de false \u3002 \u8fdb\u9636\uff1a \u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 284. Peeking Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 284. \u9876\u7aef\u8fed\u4ee3\u5668 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0284-peeking-iterator/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0284-peeking-iterator/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0284-peeking-iterator/#1","text":"import java.util.ArrayList; import java.util.Iterator; import java.util.List; // Java Iterator interface reference: // https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html class PeekingIterator implements Iterator<Integer> { private Iterator<Integer> iterator; private Integer peek = null; private boolean peeked = false; public PeekingIterator(Iterator<Integer> iterator) { // initialize any member here. this.iterator = iterator; } // Returns the next element in the iteration without advancing the iterator. public Integer peek() { if (peeked) { return peek; } else { peeked = true; peek = iterator.next(); } return peek; } // hasNext() and next() should behave the same as in the Iterator interface. // Override them if needed. @Override public Integer next() { if (peeked) { peeked = false; return peek; } else { return iterator.next(); } } @Override public boolean hasNext() { return peeked || iterator.hasNext(); } public static void main(String[] args) { List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); Iterator<Integer> iterator = list.iterator(); PeekingIterator peekingIterator = new PeekingIterator(iterator); Integer peek1 = peekingIterator.peek(); System.out.println(peek1); Integer peek2 = peekingIterator.peek(); System.out.println(peek2); Integer peek3 = peekingIterator.peek(); System.out.println(peek3); Integer peek4 = peekingIterator.peek(); System.out.println(peek4); Integer next1 = peekingIterator.next(); System.out.println(next1); Integer peek5 = peekingIterator.peek(); System.out.println(peek5); Integer next2 = peekingIterator.next(); System.out.println(next2); Integer next3 = peekingIterator.next(); System.out.println(next3); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0284-peeking-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0290-word-pattern/","text":"290. Word Pattern \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u79cd pattern(\u6a21\u5f0f) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 str \uff0c\u5224\u65ad str \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u8fd9\u91cc\u7684 \u9075\u5faa \u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c pattern \u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32 str \u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002 \u793a\u4f8b1: \u8f93\u5165: pattern = \"abba\" , str = \"dog cat cat dog\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: pattern = \"abba\" , str = \"dog cat cat fish\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: pattern = \"aaaa\" , str = \"dog cat cat dog\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: pattern = \"abba\" , str = \"dog dog dog dog\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe pattern \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c str \u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 290. Word Pattern \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 290. \u5355\u8bcd\u6a21\u5f0f \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u6211\u7684\u89e3\u7b54\uff1a \u6211\u7684\u601d\u8def\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5751\uff0c\u5c31\u662f\u5f53\u6d4b\u8bd5\u7528\u4f8b\u662f\uff1a String pattern = \"abba\";String str = \"dog dog dog dog\"; \u7684\u65f6\u5019\uff0c\u6211\u4eec\u987b\u8981\u5224\u65ad\u51fa\u7ed3\u679c\u662f false\u3002 public class Solution { public boolean wordPattern(String pattern, String str) { boolean wordPattern = false; int patternLength = pattern.length(); String[] strArray = str.split(\" \"); if (patternLength == strArray.length) { Map<Character, String> map1 = new HashMap<>(); Set<String> uniqueValue = new HashSet<>(); char[] patternArray = pattern.toCharArray(); for (int i = 0; i < patternLength; i++) { if (map1.containsKey(patternArray[i])) { if (!map1.get(patternArray[i]).equals(strArray[i])) { return wordPattern; } } else { if (uniqueValue.contains(strArray[i])) { return wordPattern; } uniqueValue.add(strArray[i]); map1.put(patternArray[i], strArray[i]); } } wordPattern = true; } return wordPattern; } public static void main(String[] args) { Solution solution = new Solution(); String pattern = \"abba\"; String str = \"dog dog dog dog\"; boolean wordPattern = solution.wordPattern(pattern, str); System.out.println(wordPattern); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0290-word-pattern \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"290. Word Pattern"},{"location":"leetcode-0290-word-pattern/#290-word-pattern","text":"","title":"290. Word Pattern"},{"location":"leetcode-0290-word-pattern/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u79cd pattern(\u6a21\u5f0f) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 str \uff0c\u5224\u65ad str \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u8fd9\u91cc\u7684 \u9075\u5faa \u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c pattern \u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32 str \u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002 \u793a\u4f8b1: \u8f93\u5165: pattern = \"abba\" , str = \"dog cat cat dog\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: pattern = \"abba\" , str = \"dog cat cat fish\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: pattern = \"aaaa\" , str = \"dog cat cat dog\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: pattern = \"abba\" , str = \"dog dog dog dog\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe pattern \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c str \u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 290. Word Pattern \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 290. \u5355\u8bcd\u6a21\u5f0f \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0290-word-pattern/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0290-word-pattern/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0290-word-pattern/#1","text":"\u6211\u7684\u89e3\u7b54\uff1a \u6211\u7684\u601d\u8def\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5751\uff0c\u5c31\u662f\u5f53\u6d4b\u8bd5\u7528\u4f8b\u662f\uff1a String pattern = \"abba\";String str = \"dog dog dog dog\"; \u7684\u65f6\u5019\uff0c\u6211\u4eec\u987b\u8981\u5224\u65ad\u51fa\u7ed3\u679c\u662f false\u3002 public class Solution { public boolean wordPattern(String pattern, String str) { boolean wordPattern = false; int patternLength = pattern.length(); String[] strArray = str.split(\" \"); if (patternLength == strArray.length) { Map<Character, String> map1 = new HashMap<>(); Set<String> uniqueValue = new HashSet<>(); char[] patternArray = pattern.toCharArray(); for (int i = 0; i < patternLength; i++) { if (map1.containsKey(patternArray[i])) { if (!map1.get(patternArray[i]).equals(strArray[i])) { return wordPattern; } } else { if (uniqueValue.contains(strArray[i])) { return wordPattern; } uniqueValue.add(strArray[i]); map1.put(patternArray[i], strArray[i]); } } wordPattern = true; } return wordPattern; } public static void main(String[] args) { Solution solution = new Solution(); String pattern = \"abba\"; String str = \"dog dog dog dog\"; boolean wordPattern = solution.wordPattern(pattern, str); System.out.println(wordPattern); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0290-word-pattern \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/","text":"297. Serialize and Deserialize Binary Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u4e00\u4e2a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002 \u793a\u4f8b: \u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 3 / \\ 4 5 \u5e8f\u5217\u5316\u4e3a \"[1,2,3,null,null,4,5]\" \u63d0\u793a: \u8fd9\u4e0eLeetCode\u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605 how LeetCode OJ serializes a binary tree \u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u521b\u9020\u6027\u7684\u7528\u5176\u4ed6\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8bf4\u660e: \u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u673a\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u673a\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 297. Serialize and Deserialize Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528\u524d\u5e8f\u904d\u5386\uff0c\u5c31\u53ef\u4ee5\u5e8f\u5217\u5316\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u540c\u6837\uff0c\u5229\u7528\u53cd\u5e8f\u5217\u5316\uff0c\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { if (root == null) { return \"\"; } StringBuilder builder = new StringBuilder(); preOrder(root, builder); return builder.toString(); } private void preOrder(TreeNode node, StringBuilder builder) { if (node == null) { builder.append(\"#\"); builder.append(\",\"); return; } builder.append(node.val); builder.append(\",\"); preOrder(node.left, builder); preOrder(node.right, builder); } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { if (data == null || data.length() == 0) { return null; } LinkedList<String> queue = new LinkedList<>(); String[] split = data.split(\",\"); for(String s:split){ queue.addLast(s); } return preOrder(queue); } private TreeNode preOrder(LinkedList<String> queue ) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if(\"#\".equals(s)){ return null; } TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = preOrder(queue); root.right = preOrder(queue); return root; } // 1 // 2 3 // 4 5 6 7 public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node5 = new TreeNode(5); TreeNode node6 = new TreeNode(6); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node5; node3.left = node6; node3.right = node7; Codec codec = new Codec(); String serialize = codec.serialize(node1); System.out.println(serialize); } } // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.deserialize(codec.serialize(root)); \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0297-serialize-and-deserialize-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"297. Serialize and Deserialize Binary Tree"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/#297-serialize-and-deserialize-binary-tree","text":"","title":"297. Serialize and Deserialize Binary Tree"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u4e00\u4e2a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002 \u793a\u4f8b: \u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a 1 / \\ 2 3 / \\ 4 5 \u5e8f\u5217\u5316\u4e3a \"[1,2,3,null,null,4,5]\" \u63d0\u793a: \u8fd9\u4e0eLeetCode\u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605 how LeetCode OJ serializes a binary tree \u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u521b\u9020\u6027\u7684\u7528\u5176\u4ed6\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8bf4\u660e: \u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u673a\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u673a\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 297. Serialize and Deserialize Binary Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5229\u7528\u524d\u5e8f\u904d\u5386\uff0c\u5c31\u53ef\u4ee5\u5e8f\u5217\u5316\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u540c\u6837\uff0c\u5229\u7528\u53cd\u5e8f\u5217\u5316\uff0c\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0297-serialize-and-deserialize-binary-tree/#1","text":"import java.util.LinkedList; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { if (root == null) { return \"\"; } StringBuilder builder = new StringBuilder(); preOrder(root, builder); return builder.toString(); } private void preOrder(TreeNode node, StringBuilder builder) { if (node == null) { builder.append(\"#\"); builder.append(\",\"); return; } builder.append(node.val); builder.append(\",\"); preOrder(node.left, builder); preOrder(node.right, builder); } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { if (data == null || data.length() == 0) { return null; } LinkedList<String> queue = new LinkedList<>(); String[] split = data.split(\",\"); for(String s:split){ queue.addLast(s); } return preOrder(queue); } private TreeNode preOrder(LinkedList<String> queue ) { if (queue.isEmpty()) { return null; } String s = queue.removeFirst(); if(\"#\".equals(s)){ return null; } TreeNode root = new TreeNode(Integer.parseInt(s)); root.left = preOrder(queue); root.right = preOrder(queue); return root; } // 1 // 2 3 // 4 5 6 7 public static void main(String[] args) { TreeNode node1 = new TreeNode(1); TreeNode node2 = new TreeNode(2); TreeNode node3 = new TreeNode(3); TreeNode node4 = new TreeNode(4); TreeNode node5 = new TreeNode(5); TreeNode node6 = new TreeNode(6); TreeNode node7 = new TreeNode(7); node1.left = node2; node1.right = node3; node2.left = node4; node2.right = node5; node3.left = node6; node3.right = node7; Codec codec = new Codec(); String serialize = codec.serialize(node1); System.out.println(serialize); } } // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.deserialize(codec.serialize(root)); \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0297-serialize-and-deserialize-binary-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0300-longest-increasing-subsequence/","text":"300. Longest Increasing Subsequence \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [10,9,2,5,3,7,101,18] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c \u5b83\u7684\u957f\u5ea6\u662f 4 \u3002 \u8bf4\u660e: \u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002 \u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O( n 2 ) \u3002 \u8fdb\u9636: \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 O( n log n ) \u5417? \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 300. Longest Increasing Subsequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u4ee5 num[i] \u7ed3\u5c3e \u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u7684\u6570\u4e2d\u6bd4 num[i] \u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9 + \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; // \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898 // 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 // https://leetcode-cn.com/problems/longest-increasing-subsequence/description/ public class Solution { //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005 // \u4ee5\u6570\u7ec4 [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a // dp \u7684\u503c\uff1a 1 1 1 2 2 3 4 4 // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002 public int lengthOfLIS(int[] nums) { int len = nums.length; if (len == 0) { return 0; } // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1 int[] dp = new int[len]; Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684 for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c int curVal = nums[i]; for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c if (curVal > nums[j]) { dp[i] = Integer.max(dp[j] + 1, dp[i]); } } } // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c int res = dp[0]; for (int i = 0; i < len; i++) { res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = {10, 9, 2, 5, 3, 7, 101, 18}; Solution solution = new Solution(); int lengthOfLIS = solution.lengthOfLIS(nums); System.out.println(lengthOfLIS); } } \u53c2\u8003\u89e3\u7b542 import java.util.Arrays; public class Solution4 { // \u6709\u8d2a\u5fc3\u9009\u62e9\u7684\u610f\u601d public int lengthOfLIS(int[] nums) { int len = nums.length; // \u5148\u8003\u8651\u6781\u7aef\u8f93\u5165 if (len <= 1) { return len; } // tail \u6570\u7ec4\u7684\u5b9a\u4e49\uff1a\u957f\u5ea6\u4e3a i+1 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u6700\u5c0f\u662f\u51e0 int[] tail = new int[len]; // \u904d\u5386\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 tail[0] = nums[0]; int res = 0; for (int i = 1; i < len; i++) { // \u6bd4 tail \u6570\u7ec4\u5b9e\u9645\u6709\u6548\u7684\u672b\u5c3e\u7684\u90a3\u4e2a\u5143\u7d20\u8fd8\u5927 if (nums[i] > tail[res]) { // \u76f4\u63a5\u6dfb\u52a0\u5728\u90a3\u4e2a\u5143\u7d20\u7684\u540e\u9762 tail[++res] = nums[i]; } else { // \u4e8c\u5206\u67e5\u627e\u5230\u7b2c 1 \u4e2a\u6bd4 nums[i] \u8fd8\u5927\u7684\u5143\u7d20\uff0c\u66f4\u65b0\u5230\u90a3\u4e2a\u4f4d\u7f6e int l = 0; int r = res; while (l < r) { int mid = l + (r - l) / 2; // \u6709\u5c31\u5565\u90fd\u4e0d\u505a\u4e86 if (tail[mid] == nums[i]) { l = mid; break; } else if (tail[mid] >= nums[i]) { r = mid; } else { l = mid + 1; } } tail[l] = nums[i]; } printArray(nums[i], tail); } return ++res; } // \u8c03\u8bd5\u65b9\u6cd5\uff0c\u4ee5\u89c2\u5bdf\u662f\u5426\u8fd0\u884c\u6b63\u786e private void printArray(int num, int[] tail) { System.out.print(\"\u5f53\u524d\u6570\u5b57\uff1a\" + num); System.out.print(\"\\t\u5f53\u524d tail \u6570\u7ec4\uff1a\"); int len = tail.length; for (int i = 0; i < len; i++) { if (tail[i] == 0) { break; } System.out.print(tail[i] + \", \"); } System.out.println(); } public static void main(String[] args) { int[] nums = new int[]{3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12}; Solution4 solution4 = new Solution4(); int lengthOfLIS = solution4.lengthOfLIS(nums); System.out.println(\"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff1a\" + lengthOfLIS); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0300-longest-increasing-subsequence \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"300. Longest Increasing Subsequence"},{"location":"leetcode-0300-longest-increasing-subsequence/#300-longest-increasing-subsequence","text":"","title":"300. Longest Increasing Subsequence"},{"location":"leetcode-0300-longest-increasing-subsequence/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [10,9,2,5,3,7,101,18] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c \u5b83\u7684\u957f\u5ea6\u662f 4 \u3002 \u8bf4\u660e: \u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002 \u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O( n 2 ) \u3002 \u8fdb\u9636: \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 O( n log n ) \u5417? \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 300. Longest Increasing Subsequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0300-longest-increasing-subsequence/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u72b6\u6001\u7684\u5b9a\u4e49\uff1a\u4ee5 num[i] \u7ed3\u5c3e \u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u7684\u6570\u4e2d\u6bd4 num[i] \u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u9009\u62e9 + \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0300-longest-increasing-subsequence/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0300-longest-increasing-subsequence/#1","text":"import java.util.Arrays; // \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898 // 300. \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 // https://leetcode-cn.com/problems/longest-increasing-subsequence/description/ public class Solution { //\u3010\u5173\u952e\u3011\u5c06 dp \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 // \u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a dp \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u8005 // \u4ee5\u6570\u7ec4 [10, 9, 2, 5, 3, 7, 101, 18] \u4e3a\u4f8b\uff1a // dp \u7684\u503c\uff1a 1 1 1 2 2 3 4 4 // \u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002 public int lengthOfLIS(int[] nums) { int len = nums.length; if (len == 0) { return 0; } // \u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e4b\u524d\u6bd4\u6700\u540e\u90a3\u4e2a\u6570\u5b57\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 + 1 int[] dp = new int[len]; Arrays.fill(dp, 1); // \u5982\u679c\u53ea\u6709 1 \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u81ea\u5df1\u5c31\u6784\u6210\u4e86\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a 1 \u662f\u5408\u7406\u7684 for (int i = 1; i < len; i++) { // \u4ece\u7b2c 2 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u5199\u51fa dp \u6570\u7ec4\u7684\u5143\u7d20\u7684\u503c int curVal = nums[i]; for (int j = 0; j < i; j++) { // \u627e\u51fa\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c if (curVal > nums[j]) { dp[i] = Integer.max(dp[j] + 1, dp[i]); } } } // \u6700\u540e\u8981\u5168\u90e8\u8d70\u4e00\u904d\uff0c\u770b\u6700\u5927\u503c int res = dp[0]; for (int i = 0; i < len; i++) { res = Integer.max(res, dp[i]); } return res; } public static void main(String[] args) { int[] nums = {10, 9, 2, 5, 3, 7, 101, 18}; Solution solution = new Solution(); int lengthOfLIS = solution.lengthOfLIS(nums); System.out.println(lengthOfLIS); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0300-longest-increasing-subsequence/#2","text":"import java.util.Arrays; public class Solution4 { // \u6709\u8d2a\u5fc3\u9009\u62e9\u7684\u610f\u601d public int lengthOfLIS(int[] nums) { int len = nums.length; // \u5148\u8003\u8651\u6781\u7aef\u8f93\u5165 if (len <= 1) { return len; } // tail \u6570\u7ec4\u7684\u5b9a\u4e49\uff1a\u957f\u5ea6\u4e3a i+1 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u6700\u5c0f\u662f\u51e0 int[] tail = new int[len]; // \u904d\u5386\u4e00\u904d\u6574\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5 tail[0] = nums[0]; int res = 0; for (int i = 1; i < len; i++) { // \u6bd4 tail \u6570\u7ec4\u5b9e\u9645\u6709\u6548\u7684\u672b\u5c3e\u7684\u90a3\u4e2a\u5143\u7d20\u8fd8\u5927 if (nums[i] > tail[res]) { // \u76f4\u63a5\u6dfb\u52a0\u5728\u90a3\u4e2a\u5143\u7d20\u7684\u540e\u9762 tail[++res] = nums[i]; } else { // \u4e8c\u5206\u67e5\u627e\u5230\u7b2c 1 \u4e2a\u6bd4 nums[i] \u8fd8\u5927\u7684\u5143\u7d20\uff0c\u66f4\u65b0\u5230\u90a3\u4e2a\u4f4d\u7f6e int l = 0; int r = res; while (l < r) { int mid = l + (r - l) / 2; // \u6709\u5c31\u5565\u90fd\u4e0d\u505a\u4e86 if (tail[mid] == nums[i]) { l = mid; break; } else if (tail[mid] >= nums[i]) { r = mid; } else { l = mid + 1; } } tail[l] = nums[i]; } printArray(nums[i], tail); } return ++res; } // \u8c03\u8bd5\u65b9\u6cd5\uff0c\u4ee5\u89c2\u5bdf\u662f\u5426\u8fd0\u884c\u6b63\u786e private void printArray(int num, int[] tail) { System.out.print(\"\u5f53\u524d\u6570\u5b57\uff1a\" + num); System.out.print(\"\\t\u5f53\u524d tail \u6570\u7ec4\uff1a\"); int len = tail.length; for (int i = 0; i < len; i++) { if (tail[i] == 0) { break; } System.out.print(tail[i] + \", \"); } System.out.println(); } public static void main(String[] args) { int[] nums = new int[]{3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12}; Solution4 solution4 = new Solution4(); int lengthOfLIS = solution4.lengthOfLIS(nums); System.out.println(\"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff1a\" + lengthOfLIS); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0300-longest-increasing-subsequence \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0307-range-sum-query-mutable/","text":"307. Range Sum Query - Mutable \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j ( i \u2264 j ) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 update(i, val) \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a i \u7684\u6570\u503c\u66f4\u65b0\u4e3a val \uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002 \u793a\u4f8b: Given nums = [1, 3, 5] sumRange(0, 2) -> 9 update(1, 2) sumRange(0, 2) -> 8 \u8bf4\u660e: \u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728 update \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8c03\u7528 update \u51fd\u6570\u548c sumRange \u51fd\u6570\u7684\u6b21\u6570\u662f\u76f8\u7b49\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 307. Range Sum Query - Mutable \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0307-range-sum-query-mutable \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"307. Range Sum Query - Mutable"},{"location":"leetcode-0307-range-sum-query-mutable/#307-range-sum-query-mutable","text":"","title":"307. Range Sum Query - Mutable"},{"location":"leetcode-0307-range-sum-query-mutable/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j ( i \u2264 j ) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 update(i, val) \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a i \u7684\u6570\u503c\u66f4\u65b0\u4e3a val \uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002 \u793a\u4f8b: Given nums = [1, 3, 5] sumRange(0, 2) -> 9 update(1, 2) sumRange(0, 2) -> 8 \u8bf4\u660e: \u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728 update \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8c03\u7528 update \u51fd\u6570\u548c sumRange \u51fd\u6570\u7684\u6b21\u6570\u662f\u76f8\u7b49\u7684\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 307. Range Sum Query - Mutable \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0307-range-sum-query-mutable/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0307-range-sum-query-mutable/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0307-range-sum-query-mutable/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0307-range-sum-query-mutable \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0313-super-ugly-number/","text":"313. Super Ugly Number \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u5728\u957f\u5ea6\u4e3a k \u7684\u8d28\u6570\u5217\u8868 primes \u4e2d\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: n = 12, primes = [2,7,13,19] \u8f93\u51fa: 32 \u89e3\u91ca: [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] \uff0c\u662f\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684 \u8d28\u6570\u5217\u8868 primes = [2,7,13,19] \u7684\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4efb\u4f55\u7ed9\u5b9a primes \u7684\u8d85\u7ea7\u4e11\u6570\u3002 \u7ed9\u5b9a primes \u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002 0 < k \u2264 100, 0 < n \u2264 10 6 , 0 < primes[i] < 1000 \u3002 \u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u7684\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 313. Super Ugly Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 313. \u8d85\u7ea7\u4e11\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int nthSuperUglyNumber(int n, int[] primes) { int[] dp = new int[n]; int plen = primes.length; if (n <= 0 || plen == 0) { return 0; } int[] indexes = new int[primes.length]; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = Integer.MAX_VALUE; for (int j = 0; j < plen; j++) { dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]); } for (int j = 0; j < plen; j++) { if (dp[i] == dp[indexes[j]] * primes[j]) { indexes[j]++; } } } return dp[n - 1]; } public static void main(String[] args) { int n = 12; int[] nums = {2, 7, 13, 19}; Solution solution = new Solution(); int nthSuperUglyNumber = solution.nthSuperUglyNumber(n, nums); System.out.println(nthSuperUglyNumber); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0313-super-ugly-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"313. Super Ugly Number"},{"location":"leetcode-0313-super-ugly-number/#313-super-ugly-number","text":"","title":"313. Super Ugly Number"},{"location":"leetcode-0313-super-ugly-number/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u5728\u957f\u5ea6\u4e3a k \u7684\u8d28\u6570\u5217\u8868 primes \u4e2d\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: n = 12, primes = [2,7,13,19] \u8f93\u51fa: 32 \u89e3\u91ca: [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] \uff0c\u662f\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684 \u8d28\u6570\u5217\u8868 primes = [2,7,13,19] \u7684\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4efb\u4f55\u7ed9\u5b9a primes \u7684\u8d85\u7ea7\u4e11\u6570\u3002 \u7ed9\u5b9a primes \u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002 0 < k \u2264 100, 0 < n \u2264 10 6 , 0 < primes[i] < 1000 \u3002 \u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u7684\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 313. Super Ugly Number \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 313. \u8d85\u7ea7\u4e11\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0313-super-ugly-number/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0313-super-ugly-number/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0313-super-ugly-number/#1","text":"public class Solution { public int nthSuperUglyNumber(int n, int[] primes) { int[] dp = new int[n]; int plen = primes.length; if (n <= 0 || plen == 0) { return 0; } int[] indexes = new int[primes.length]; dp[0] = 1; for (int i = 1; i < n; i++) { dp[i] = Integer.MAX_VALUE; for (int j = 0; j < plen; j++) { dp[i] = Integer.min(dp[i], dp[indexes[j]] * primes[j]); } for (int j = 0; j < plen; j++) { if (dp[i] == dp[indexes[j]] * primes[j]) { indexes[j]++; } } } return dp[n - 1]; } public static void main(String[] args) { int n = 12; int[] nums = {2, 7, 13, 19}; Solution solution = new Solution(); int nthSuperUglyNumber = solution.nthSuperUglyNumber(n, nums); System.out.println(nthSuperUglyNumber); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0313-super-ugly-number \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0326-power-of-three/","text":"326. Power of Three \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3 \u7684\u5e42\u6b21\u65b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: 27 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 0 \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: true \u793a\u4f8b 4: \u8f93\u5165: 45 \u8f93\u51fa: false \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 326. Power of Three \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 326. 3\u7684\u5e42 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u8fd8\u86ee\u591a\u7684\uff0c\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002 1\u3001\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u5217\u51fa\u6765\uff0c\u653e\u5165\u54c8\u5e0c\u8868\u4e2d\u5224\u65ad\uff1b 2\u3001 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution { // \u6253\u8868\u6cd5 public boolean isPowerOfThree(int n) { int[] nums = new int[]{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467}; HashSet<Integer> set = new HashSet<>(); for (int num : nums) { set.add(num); } return set.contains(n); } public static void main(String[] args) { List<Integer> res = new ArrayList<>(); int n = 1; System.out.println(Integer.MAX_VALUE); while (n > 0 && n < 2147483647) { res.add(n); n = n * 3; } System.out.println(res); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { /** * \u56e0\u4e3a 3 \u662f\u8d28\u6570\uff0c\u7528 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u503c\u53bb\u6574\u9664\u8fd9\u4e2a\u5f85\u68c0\u6d4b\u7684\u6570\u5373\u53ef * * @param n * @return */ public boolean isPowerOfThree(int n) { return n > 0 && 1162261467 % n == 0; } } \u53c2\u8003\u89e3\u7b543 public class Solution3 { /** * \u8f6c\u6362\u6210\u4e00\u4e2a 3 \u8fdb\u5236\u7684\u6570\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e00\u5b9a\u662f\u4ee5 1 \u5f00\u5934\uff0c\u540e\u9762\u5168\u90e8\u662f 0 * * @param n * @return */ public boolean isPowerOfThree(int n) { return n > 0 && Integer.toString(n, 3).matches(\"^10*$\"); } public static void main(String[] args) { int num = 27; System.out.println(Integer.toString(num, 3)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0326-power-of-three \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"326. Power of Three"},{"location":"leetcode-0326-power-of-three/#326-power-of-three","text":"","title":"326. Power of Three"},{"location":"leetcode-0326-power-of-three/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3 \u7684\u5e42\u6b21\u65b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: 27 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 0 \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: true \u793a\u4f8b 4: \u8f93\u5165: 45 \u8f93\u51fa: false \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 326. Power of Three \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 326. 3\u7684\u5e42 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0326-power-of-three/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u89e3\u6cd5\u8fd8\u86ee\u591a\u7684\uff0c\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002 1\u3001\u6253\u8868\u6cd5\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u5217\u51fa\u6765\uff0c\u653e\u5165\u54c8\u5e0c\u8868\u4e2d\u5224\u65ad\uff1b 2\u3001","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0326-power-of-three/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0326-power-of-three/#1","text":"import java.util.ArrayList; import java.util.HashSet; import java.util.List; public class Solution { // \u6253\u8868\u6cd5 public boolean isPowerOfThree(int n) { int[] nums = new int[]{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467}; HashSet<Integer> set = new HashSet<>(); for (int num : nums) { set.add(num); } return set.contains(n); } public static void main(String[] args) { List<Integer> res = new ArrayList<>(); int n = 1; System.out.println(Integer.MAX_VALUE); while (n > 0 && n < 2147483647) { res.add(n); n = n * 3; } System.out.println(res); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0326-power-of-three/#2","text":"public class Solution2 { /** * \u56e0\u4e3a 3 \u662f\u8d28\u6570\uff0c\u7528 3 \u7684\u65b9\u5e42\u7684\u6700\u5927\u503c\u53bb\u6574\u9664\u8fd9\u4e2a\u5f85\u68c0\u6d4b\u7684\u6570\u5373\u53ef * * @param n * @return */ public boolean isPowerOfThree(int n) { return n > 0 && 1162261467 % n == 0; } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0326-power-of-three/#3","text":"public class Solution3 { /** * \u8f6c\u6362\u6210\u4e00\u4e2a 3 \u8fdb\u5236\u7684\u6570\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e00\u5b9a\u662f\u4ee5 1 \u5f00\u5934\uff0c\u540e\u9762\u5168\u90e8\u662f 0 * * @param n * @return */ public boolean isPowerOfThree(int n) { return n > 0 && Integer.toString(n, 3).matches(\"^10*$\"); } public static void main(String[] args) { int num = 27; System.out.println(Integer.toString(num, 3)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0326-power-of-three \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543"},{"location":"leetcode-0328-odd-even-linked-list/","text":"328. Odd Even Linked List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"328. Odd Even Linked List"},{"location":"leetcode-0328-odd-even-linked-list/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"leetcode-0328-odd-even-linked-list/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0328-odd-even-linked-list/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0328-odd-even-linked-list/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0328-odd-even-linked-list/#1","text":"Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0328-odd-even-linked-list/#2","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"leetcode-0328-odd-even-linked-list/#2_1","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"leetcode-0336-palindrome-pairs/","text":"336. Palindrome Pairs \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u7ec4 \u72ec\u7279 \u7684\u5355\u8bcd\uff0c \u627e\u51fa\u5728\u7ed9\u5b9a\u5217\u8868\u4e2d \u4e0d\u540c \u7684\u7d22\u5f15\u5bf9 (i, j) ,\u4f7f\u5f97\u5173\u8054\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u4f8b\u5982\uff1a words[i] + words[j] \u5f62\u6210\u56de\u6587\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a words = [\"bat\", \"tab\", \"cat\"] \u8fd4\u56de [[0, 1], [1, 0]] \u56de\u6587\u662f [\"battab\", \"tabbat\"] \u793a\u4f8b 2: \u7ed9\u5b9a words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"] \u8fd4\u56de [[0, 1], [1, 0], [3, 2], [2, 4]] \u56de\u6587\u662f [\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"] \u8d21\u732e\u8005: \u7279\u522b\u611f\u8c22 @dietpepsi \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u63d0\u4f9b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 336. Palindrome Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 336. \u56de\u6587\u5bf9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0336-palindrome-pairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"336. Palindrome Pairs"},{"location":"leetcode-0336-palindrome-pairs/#336-palindrome-pairs","text":"","title":"336. Palindrome Pairs"},{"location":"leetcode-0336-palindrome-pairs/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u7ec4 \u72ec\u7279 \u7684\u5355\u8bcd\uff0c \u627e\u51fa\u5728\u7ed9\u5b9a\u5217\u8868\u4e2d \u4e0d\u540c \u7684\u7d22\u5f15\u5bf9 (i, j) ,\u4f7f\u5f97\u5173\u8054\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u4f8b\u5982\uff1a words[i] + words[j] \u5f62\u6210\u56de\u6587\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a words = [\"bat\", \"tab\", \"cat\"] \u8fd4\u56de [[0, 1], [1, 0]] \u56de\u6587\u662f [\"battab\", \"tabbat\"] \u793a\u4f8b 2: \u7ed9\u5b9a words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"] \u8fd4\u56de [[0, 1], [1, 0], [3, 2], [2, 4]] \u56de\u6587\u662f [\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"] \u8d21\u732e\u8005: \u7279\u522b\u611f\u8c22 @dietpepsi \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u63d0\u4f9b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 336. Palindrome Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 336. \u56de\u6587\u5bf9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0336-palindrome-pairs/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0336-palindrome-pairs/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0336-palindrome-pairs/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0336-palindrome-pairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0337-house-robber-iii/","text":"337. House Robber III \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5c0f\u5077\u53c8\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u70b9\u3002 \u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u79f0\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u6839\u90e8\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u7236\u623f\u5b50\u3002 \u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u5f62\u6210\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5c0f\u5077\u4e00\u665a\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: 3 / \\ 2 3 \\ \\ 3 1 \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = 7 . \u793a\u4f8b 2: 3 / \\ 4 5 / \\ \\ 1 3 1 \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 4 + 5 = 9 . \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @dietpepsi \u6dfb\u52a0\u6b64\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 337. House Robber III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 337. \u6253\u5bb6\u52ab\u820d III \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public int rob(TreeNode root) { if (root == null) { return 0; } int val = root.val; if(root.left!=null){ val+= rob(root.left.left) + rob(root.left.right); } if(root.right!=null){ val+= rob(root.right.left) + rob(root.right.right); } return Math.max(val,rob(root.left) + rob(root.right)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0337-house-robber-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"337. House Robber III"},{"location":"leetcode-0337-house-robber-iii/#337-house-robber-iii","text":"","title":"337. House Robber III"},{"location":"leetcode-0337-house-robber-iii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5c0f\u5077\u53c8\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u70b9\u3002 \u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u79f0\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u6839\u90e8\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u7236\u623f\u5b50\u3002 \u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u5f62\u6210\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5c0f\u5077\u4e00\u665a\u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: 3 / \\ 2 3 \\ \\ 3 1 \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = 7 . \u793a\u4f8b 2: 3 / \\ 4 5 / \\ \\ 1 3 1 \u80fd\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 4 + 5 = 9 . \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @dietpepsi \u6dfb\u52a0\u6b64\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 337. House Robber III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 337. \u6253\u5bb6\u52ab\u820d III \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0337-house-robber-iii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0337-house-robber-iii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0337-house-robber-iii/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public int rob(TreeNode root) { if (root == null) { return 0; } int val = root.val; if(root.left!=null){ val+= rob(root.left.left) + rob(root.left.right); } if(root.right!=null){ val+= rob(root.right.left) + rob(root.right.right); } return Math.max(val,rob(root.left) + rob(root.right)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0337-house-robber-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0341-flatten-nested-list-iterator/","text":"341. Flatten Nested List Iterator \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002 \u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u5217\u8868 [[1,1],2,[1,1]] , \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNex t \u8fd4\u56defalse\uff0c next \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,1,2,1,1] . \u793a\u4f8b 2: \u7ed9\u5b9a\u5217\u8868 [1,[4,[6]]] , \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNex t \u8fd4\u56defalse\uff0c next \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,4,6] . \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 341. Flatten Nested List Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Python3 \u5199\u6cd5\uff1a # \"\"\" # This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # \"\"\" # class NestedInteger(object): # def isInteger(self): # \"\"\" # @return True if this NestedInteger holds a single integer, rather than a nested list. # :rtype bool # \"\"\" # # def getInteger(self): # \"\"\" # @return the single integer that this NestedInteger holds, if it holds a single integer # Return None if this NestedInteger holds a nested list # :rtype int # \"\"\" # # def getList(self): # \"\"\" # @return the nested list that this NestedInteger holds, if it holds a nested list # Return None if this NestedInteger holds a single integer # :rtype List[NestedInteger] # \"\"\" class NestedIterator(object): def __init__(self, nestedList): \"\"\" Initialize your data structure here. :type nestedList: List[NestedInteger] \"\"\" self.stack = nestedList[::-1] # \u4e34\u65f6\u5b58\u653e\u503c\u7684\u5730\u65b9 self.value = None def next(self): \"\"\" :rtype: int \"\"\" result = self.hasNext() if result: ret = self.value self.value = None return ret def hasNext(self): \"\"\" :rtype: bool \"\"\" if self.value is not None: # \u5c31\u4e0d\u6267\u884c\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u88ab\u53d6\u51fa\u6765 return True # \u5982\u679c self.value \u4e3a None \u7684\u8bdd # \u5c31\u8981\u4ece stack \u4e2d\u5f39\u51fa\u5143\u7d20\u4e86 while self.stack: top = self.stack.pop() # \u5982\u679c\u6808\u4e2d\u6709\u5143\u7d20\uff0c\u770b\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48 if top.isInteger(): # \u662f\u6570\u5b57\uff0c\u5c31\u653e\u5728\u4e34\u65f6\u53d8\u91cf\u4e0a self.value = top.getInteger() return True else: self.stack.extend(top.getList()[::-1]) return False # Your NestedIterator object will be instantiated and called as such: # i, v = NestedIterator(nestedList), [] # while i.hasNext(): v.append(i.next()) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0341-flatten-nested-list-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"341. Flatten Nested List Iterator"},{"location":"leetcode-0341-flatten-nested-list-iterator/#341-flatten-nested-list-iterator","text":"","title":"341. Flatten Nested List Iterator"},{"location":"leetcode-0341-flatten-nested-list-iterator/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002 \u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u5217\u8868 [[1,1],2,[1,1]] , \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNex t \u8fd4\u56defalse\uff0c next \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,1,2,1,1] . \u793a\u4f8b 2: \u7ed9\u5b9a\u5217\u8868 [1,[4,[6]]] , \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNex t \u8fd4\u56defalse\uff0c next \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,4,6] . \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 341. Flatten Nested List Iterator \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0341-flatten-nested-list-iterator/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0341-flatten-nested-list-iterator/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0341-flatten-nested-list-iterator/#1","text":"Python3 \u5199\u6cd5\uff1a # \"\"\" # This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # \"\"\" # class NestedInteger(object): # def isInteger(self): # \"\"\" # @return True if this NestedInteger holds a single integer, rather than a nested list. # :rtype bool # \"\"\" # # def getInteger(self): # \"\"\" # @return the single integer that this NestedInteger holds, if it holds a single integer # Return None if this NestedInteger holds a nested list # :rtype int # \"\"\" # # def getList(self): # \"\"\" # @return the nested list that this NestedInteger holds, if it holds a nested list # Return None if this NestedInteger holds a single integer # :rtype List[NestedInteger] # \"\"\" class NestedIterator(object): def __init__(self, nestedList): \"\"\" Initialize your data structure here. :type nestedList: List[NestedInteger] \"\"\" self.stack = nestedList[::-1] # \u4e34\u65f6\u5b58\u653e\u503c\u7684\u5730\u65b9 self.value = None def next(self): \"\"\" :rtype: int \"\"\" result = self.hasNext() if result: ret = self.value self.value = None return ret def hasNext(self): \"\"\" :rtype: bool \"\"\" if self.value is not None: # \u5c31\u4e0d\u6267\u884c\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u88ab\u53d6\u51fa\u6765 return True # \u5982\u679c self.value \u4e3a None \u7684\u8bdd # \u5c31\u8981\u4ece stack \u4e2d\u5f39\u51fa\u5143\u7d20\u4e86 while self.stack: top = self.stack.pop() # \u5982\u679c\u6808\u4e2d\u6709\u5143\u7d20\uff0c\u770b\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48 if top.isInteger(): # \u662f\u6570\u5b57\uff0c\u5c31\u653e\u5728\u4e34\u65f6\u53d8\u91cf\u4e0a self.value = top.getInteger() return True else: self.stack.extend(top.getList()[::-1]) return False # Your NestedIterator object will be instantiated and called as such: # i, v = NestedIterator(nestedList), [] # while i.hasNext(): v.append(i.next()) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0341-flatten-nested-list-iterator \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0342-power-of-four/","text":"342. Power of Four \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 (32\u4f4d\u6709\u7b26\u6574\u6570\u578b)\uff0c\u8bf7\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u662f\u5426\u662f4\u7684\u5e42\u3002 \u793a\u4f8b: \u5f53 num = 16 \u65f6 \uff0c\u8fd4\u56de true \u3002 \u5f53 num = 5\u65f6\uff0c\u8fd4\u56de false\u3002 \u95ee\u9898\u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af/\u9012\u5f52\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @yukuairoy \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 342. Power of Four \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 342. 4\u7684\u5e42 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u5217\u51fa $4^1$\u3001$4^1$\u3001$4^2$\u3001$4^3$ \u7b49\u7b49\uff0c\u627e\u51fa\u89c4\u5f8b\uff1b $4^1 = 2^2 = 2^2$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100$\uff0c$1$ \u540e\u9762 $2$ \u4e2a\u201c$0$\u201d\uff1b $4^2 = (2^2)^2 = 2^4$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000$\uff0c$1$ \u540e\u9762 $4$ \u4e2a\u201c$0$\u201d\uff1b $4^3 = (2^2)^3 = 2^6$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $1000000$\uff0c$1$ \u540e\u9762 $6$ \u4e2a\u201c$0$\u201d\uff1b $4^4 = (2^2)^4 = 2^8$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100000000$\uff0c$1$ \u540e\u9762 $8$ \u4e2a\u201c$0$\u201d\uff1b $4^5 = (2^2)^5 = 2^10$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000000000$\uff0c$1$ \u540e\u9762 $10$ \u4e2a\u201c$0$\u201d\u3002 2\u3001\u5982\u679c\u662f\u8d1f\u6570\uff0c\u76f4\u63a5\u8fd4\u56de false\uff1b 3\u3001\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u4e0e\u8fd0\u7b97\u53bb\u505a\u5224\u65ad\uff1b 4\u3001\u4e0d\u8981\u5fd8\u8bb0\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u4ee5\u540e\uff0c\u540e\u9762\u8ddf\u7684 0 \u662f\u5076\u6570\uff0c\u6240\u4ee5\u539f\u6765\u7684\u4f4d\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002 \u4e0b\u9762\u7684\u89e3\u6cd5\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\u3002 public boolean isPowerOfFour(int num) { return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0; } \u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a 1\u3001 num > 0 \u5f88\u597d\u7406\u89e3\uff0c4 \u7684\u6574\u6570\u65b9\u5e42\u4e00\u5b9a\u662f\u6b63\u6570\uff1b 2\u3001 num & (num - 1) \u8fd9\u4e2a\u8fd0\u7b97\u80fd\u591f\u5c06 num \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a \"1\" \u53d8\u6210 \"0\"\uff0c\u6839\u636e 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\uff0c\u8fd9\u4e2a\u6570\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u6570\u4f4d\u4e0a\u662f\u201c1\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u4f4d\u662f\u6700\u9ad8\u4f4d\uff0c\u56e0\u6b64 num & (num - 1) \u4e00\u5b9a\u662f 0\uff1b 3\u3001 \u5728\u6ee1\u8db3\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \u7684\u524d\u63d0\u4e0b \uff0c $num - 1$ \u5168\u90e8\u6570\u4f4d\u4e0a\u53ea\u6709 1 (\u5e76\u4e14\u662f\u5076\u6570\u4e2a)\uff0c\u5e76\u4e14\u6bcf\u9694\u4e24\u4e2a\u6570\u4f4d\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u516c\u56e0\u5f0f\uff0c\u4e14\u4e00\u5b9a\u4f1a\u6709\u56e0\u5b50 \"11\"\uff08\u5341\u8fdb\u5236\u4e3a 3 \uff09\uff0c\u56e0\u6b64\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u51fa\u516c\u56e0\u5b50 3\uff0c\u4f8b\u5982\u4e8c\u8fdb\u5236\u6570 $111111$ \uff0c\u672c\u6765\u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ (111111)_2 = 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 1 \\times 2^1 + 1 \\times 2^0 $$ \u5176\u4e2d $1 \\times 2^3 + 1 \\times 2^2$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ 1 \\times 2^3 + 1 \\times 2^2 = 2^2 \\times (1 \\times 2^1 + 1 \\times 2^0 ) $$ \u5176\u4e2d $1 \\times 2^5 + 1 \\times 2^4$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ 1 \\times 2^5 + 1 \\times 2^4 = 2^2 \\times (1 \\times 2^3 + 1 \\times 2^2 ) $$ \u8fd9\u79cd\u505a\u6cd5\u53ef\u4ee5\u9012\u5f52\u4e0b\u53bb\uff0c\u5f97\u5230 $$ (111111)_2 = 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = 2^2 \\times [2^2 \\times (1 \\times 2^1 + 1 \\times 2^0)] + 2^2 \\times (1 \\times 2^1 + 1 \\times 2^0) + (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = [2^2 \\times 2^2 + 2^2 + 1] \\times (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = [2^2 \\times 2^2 + 2^2 + 1] \\times 3 $$ \u4ee5\u4e0a\u7684 3 \u4e2a\u6761\u4ef6\u5747\u4e3a\u4e00\u4e2a\u6574\u6570\u4e3a 4 \u7684\u65b9\u5e42\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u540c\u65f6\u6210\u7acb\u5c31\u6210\u4e3a\u4e86\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5faa\u73af\u8fdb\u884c\u5224\u65ad\u3002 public boolean isPowerOfFour(int num) { if (num <= 0) { return false; } while (num % 4 == 0) { num /= 4; } return num == 1; } \u53c2\u8003\u89e3\u7b542\uff1a\u89c2\u5bdf 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\u3002 public class Solution { public boolean isPowerOfFour(int num) { if (num <= 0) { return false; } String binaryString = Integer.toBinaryString(num); // System.out.println(binaryString); int len = binaryString.length(); return len % 2 == 1 && (num & 1 << (len - 1)) == num; } public static void main(String[] args) { Solution solution = new Solution(); boolean powerOfFour = solution.isPowerOfFour(-2147483648); System.out.println(powerOfFour); } } \u53c2\u8003\u89e3\u7b543\uff1a\u5145\u5206\u6316\u6398\u6570\u5b66\u6027\u8d28\u3002 public class Solution2 { public boolean isPowerOfFour(int num) { return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0342-power-of-four \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"342. Power of Four"},{"location":"leetcode-0342-power-of-four/#342-power-of-four","text":"","title":"342. Power of Four"},{"location":"leetcode-0342-power-of-four/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 (32\u4f4d\u6709\u7b26\u6574\u6570\u578b)\uff0c\u8bf7\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u662f\u5426\u662f4\u7684\u5e42\u3002 \u793a\u4f8b: \u5f53 num = 16 \u65f6 \uff0c\u8fd4\u56de true \u3002 \u5f53 num = 5\u65f6\uff0c\u8fd4\u56de false\u3002 \u95ee\u9898\u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af/\u9012\u5f52\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @yukuairoy \u6dfb\u52a0\u8fd9\u4e2a\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 342. Power of Four \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 342. 4\u7684\u5e42 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0342-power-of-four/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u5217\u51fa $4^1$\u3001$4^1$\u3001$4^2$\u3001$4^3$ \u7b49\u7b49\uff0c\u627e\u51fa\u89c4\u5f8b\uff1b $4^1 = 2^2 = 2^2$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100$\uff0c$1$ \u540e\u9762 $2$ \u4e2a\u201c$0$\u201d\uff1b $4^2 = (2^2)^2 = 2^4$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000$\uff0c$1$ \u540e\u9762 $4$ \u4e2a\u201c$0$\u201d\uff1b $4^3 = (2^2)^3 = 2^6$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $1000000$\uff0c$1$ \u540e\u9762 $6$ \u4e2a\u201c$0$\u201d\uff1b $4^4 = (2^2)^4 = 2^8$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $100000000$\uff0c$1$ \u540e\u9762 $8$ \u4e2a\u201c$0$\u201d\uff1b $4^5 = (2^2)^5 = 2^10$\uff0c\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u5c31\u662f $10000000000$\uff0c$1$ \u540e\u9762 $10$ \u4e2a\u201c$0$\u201d\u3002 2\u3001\u5982\u679c\u662f\u8d1f\u6570\uff0c\u76f4\u63a5\u8fd4\u56de false\uff1b 3\u3001\u4f7f\u7528\u4f4d\u8fd0\u7b97\u7684\u4e0e\u8fd0\u7b97\u53bb\u505a\u5224\u65ad\uff1b 4\u3001\u4e0d\u8981\u5fd8\u8bb0\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u4ee5\u540e\uff0c\u540e\u9762\u8ddf\u7684 0 \u662f\u5076\u6570\uff0c\u6240\u4ee5\u539f\u6765\u7684\u4f4d\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002 \u4e0b\u9762\u7684\u89e3\u6cd5\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\u3002 public boolean isPowerOfFour(int num) { return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0; } \u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a 1\u3001 num > 0 \u5f88\u597d\u7406\u89e3\uff0c4 \u7684\u6574\u6570\u65b9\u5e42\u4e00\u5b9a\u662f\u6b63\u6570\uff1b 2\u3001 num & (num - 1) \u8fd9\u4e2a\u8fd0\u7b97\u80fd\u591f\u5c06 num \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a \"1\" \u53d8\u6210 \"0\"\uff0c\u6839\u636e 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\uff0c\u8fd9\u4e2a\u6570\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u6570\u4f4d\u4e0a\u662f\u201c1\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u4f4d\u662f\u6700\u9ad8\u4f4d\uff0c\u56e0\u6b64 num & (num - 1) \u4e00\u5b9a\u662f 0\uff1b 3\u3001 \u5728\u6ee1\u8db3\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \u7684\u524d\u63d0\u4e0b \uff0c $num - 1$ \u5168\u90e8\u6570\u4f4d\u4e0a\u53ea\u6709 1 (\u5e76\u4e14\u662f\u5076\u6570\u4e2a)\uff0c\u5e76\u4e14\u6bcf\u9694\u4e24\u4e2a\u6570\u4f4d\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u516c\u56e0\u5f0f\uff0c\u4e14\u4e00\u5b9a\u4f1a\u6709\u56e0\u5b50 \"11\"\uff08\u5341\u8fdb\u5236\u4e3a 3 \uff09\uff0c\u56e0\u6b64\u4e00\u5b9a\u53ef\u4ee5\u63d0\u53d6\u51fa\u516c\u56e0\u5b50 3\uff0c\u4f8b\u5982\u4e8c\u8fdb\u5236\u6570 $111111$ \uff0c\u672c\u6765\u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ (111111)_2 = 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 1 \\times 2^1 + 1 \\times 2^0 $$ \u5176\u4e2d $1 \\times 2^3 + 1 \\times 2^2$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ 1 \\times 2^3 + 1 \\times 2^2 = 2^2 \\times (1 \\times 2^1 + 1 \\times 2^0 ) $$ \u5176\u4e2d $1 \\times 2^5 + 1 \\times 2^4$ \u53ef\u4ee5\u8868\u793a\u6210\uff1a $$ 1 \\times 2^5 + 1 \\times 2^4 = 2^2 \\times (1 \\times 2^3 + 1 \\times 2^2 ) $$ \u8fd9\u79cd\u505a\u6cd5\u53ef\u4ee5\u9012\u5f52\u4e0b\u53bb\uff0c\u5f97\u5230 $$ (111111)_2 = 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = 2^2 \\times [2^2 \\times (1 \\times 2^1 + 1 \\times 2^0)] + 2^2 \\times (1 \\times 2^1 + 1 \\times 2^0) + (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = [2^2 \\times 2^2 + 2^2 + 1] \\times (1 \\times 2^1 + 1 \\times 2^0) $$ $$ (111111)_2 = [2^2 \\times 2^2 + 2^2 + 1] \\times 3 $$ \u4ee5\u4e0a\u7684 3 \u4e2a\u6761\u4ef6\u5747\u4e3a\u4e00\u4e2a\u6574\u6570\u4e3a 4 \u7684\u65b9\u5e42\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u6b64\u5b83\u4eec\u540c\u65f6\u6210\u7acb\u5c31\u6210\u4e3a\u4e86\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0342-power-of-four/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0342-power-of-four/#1","text":"public boolean isPowerOfFour(int num) { if (num <= 0) { return false; } while (num % 4 == 0) { num /= 4; } return num == 1; }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u5faa\u73af\u8fdb\u884c\u5224\u65ad\u3002"},{"location":"leetcode-0342-power-of-four/#2-4","text":"public class Solution { public boolean isPowerOfFour(int num) { if (num <= 0) { return false; } String binaryString = Integer.toBinaryString(num); // System.out.println(binaryString); int len = binaryString.length(); return len % 2 == 1 && (num & 1 << (len - 1)) == num; } public static void main(String[] args) { Solution solution = new Solution(); boolean powerOfFour = solution.isPowerOfFour(-2147483648); System.out.println(powerOfFour); } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u89c2\u5bdf 4 \u7684\u65b9\u5e42\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7279\u70b9\u3002"},{"location":"leetcode-0342-power-of-four/#3","text":"public class Solution2 { public boolean isPowerOfFour(int num) { return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0342-power-of-four \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], processEscapes: true }, displayAlign : \"left\", TeX: { equationNumbers: { autoNumber: \"all\", useLabelIds: true } }, \"HTML-CSS\": { linebreaks: { automatic: true }, scale: 100, styles: { \".MathJax_Display\": { \"text-align\": \"left\", \"width\" : \"auto\", \"margin\": \"10px 0px 10px 0px !important\", \"background-color\": \"#f5f5f5 !important\", \"border-radius\": \"3px !important\", border: \"1px solid #ccc !important\", padding: \"5px 5px 5px 5px !important\" }, \".MathJax\": { \"background-color\": \"#f5f5f5 !important\", padding: \"2px 2px 2px 2px !important\" } } }, SVG: { linebreaks: { automatic: true } } });","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u5145\u5206\u6316\u6398\u6570\u5b66\u6027\u8d28\u3002"},{"location":"leetcode-0344-reverse-string/","text":"344. Reverse String \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u529f\u80fd\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a s = \"hello\" \u8fd4\u56de\uff1a \"olleh\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 344. Reverse String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u592a\u591a\u53ef\u4ee5\u8bf4\u660e\u7684\uff0c\u5c31\u662f\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u9010\u4e2a\u4ea4\u6362\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public String reverseString(String s) { int len = s.length(); if (len < 2) { return s; } char[] chars = s.toCharArray(); reverseString(chars); return String.valueOf(chars); } private void reverseString(char[] arr) { int l = 0; int r = arr.length - 1; while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { String s = \"hello\"; Solution solution =new Solution(); String reverseString = solution.reverseString(s); System.out.println(reverseString); } } \u601d\u8def1\uff1a\u4f7f\u7528 Java \u8bed\u8a00\u63d0\u4f9b\u7684\u53cd\u8f6c API \u5b8c\u6210 public class Solution { public String reverseString(String s) { StringBuilder reverse = new StringBuilder(); for (int i = s.length()-1; i >=0 ; i--) { reverse.append(s.charAt(i)); } return reverse.toString(); } // Given s = \"hello\", return \"olleh\". public static void main(String[] args) { String s = \"hello\"; Solution solution = new Solution(); String reverseString = solution.reverseString(s); System.out.println(reverseString); } } \u601d\u8def2\uff1a\u4f7f\u7528\u6307\u9488\u5bf9\u649e Java \u4ee3\u7801\u5b9e\u73b0\uff1a public class Solution { public String reverseString(String s) { char[] cArray = s.toCharArray(); int i = 0; int j = cArray.length - 1; while (i < j) { swap(cArray, i, j); i++; j--; } return new String(cArray); } private void swap(char[] s, int index1, int index2) { if (index1 == index2) return; char temp = s[index1]; s[index1] = s[index2]; s[index2] = temp; } public static void main(String[] args) { Solution solution = new Solution(); String result = solution.reverseString(\"hello world\"); System.out.println(result); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0344-reverse-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"344. Reverse String"},{"location":"leetcode-0344-reverse-string/#344-reverse-string","text":"","title":"344. Reverse String"},{"location":"leetcode-0344-reverse-string/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u529f\u80fd\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a s = \"hello\" \u8fd4\u56de\uff1a \"olleh\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 344. Reverse String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0344-reverse-string/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u592a\u591a\u53ef\u4ee5\u8bf4\u660e\u7684\uff0c\u5c31\u662f\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u9010\u4e2a\u4ea4\u6362\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0344-reverse-string/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0344-reverse-string/#1","text":"public class Solution { public String reverseString(String s) { int len = s.length(); if (len < 2) { return s; } char[] chars = s.toCharArray(); reverseString(chars); return String.valueOf(chars); } private void reverseString(char[] arr) { int l = 0; int r = arr.length - 1; while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { String s = \"hello\"; Solution solution =new Solution(); String reverseString = solution.reverseString(s); System.out.println(reverseString); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0344-reverse-string/#1-java-api","text":"public class Solution { public String reverseString(String s) { StringBuilder reverse = new StringBuilder(); for (int i = s.length()-1; i >=0 ; i--) { reverse.append(s.charAt(i)); } return reverse.toString(); } // Given s = \"hello\", return \"olleh\". public static void main(String[] args) { String s = \"hello\"; Solution solution = new Solution(); String reverseString = solution.reverseString(s); System.out.println(reverseString); } }","title":"\u601d\u8def1\uff1a\u4f7f\u7528 Java \u8bed\u8a00\u63d0\u4f9b\u7684\u53cd\u8f6c API \u5b8c\u6210"},{"location":"leetcode-0344-reverse-string/#2","text":"Java \u4ee3\u7801\u5b9e\u73b0\uff1a public class Solution { public String reverseString(String s) { char[] cArray = s.toCharArray(); int i = 0; int j = cArray.length - 1; while (i < j) { swap(cArray, i, j); i++; j--; } return new String(cArray); } private void swap(char[] s, int index1, int index2) { if (index1 == index2) return; char temp = s[index1]; s[index1] = s[index2]; s[index2] = temp; } public static void main(String[] args) { Solution solution = new Solution(); String result = solution.reverseString(\"hello world\"); System.out.println(result); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0344-reverse-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u601d\u8def2\uff1a\u4f7f\u7528\u6307\u9488\u5bf9\u649e"},{"location":"leetcode-0345-reverse-vowels-of-a-string/","text":"345. Reverse Vowels of a String \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a s = \"hello\", \u8fd4\u56de \"holle\". \u793a\u4f8b 2\uff1a \u7ed9\u5b9a s = \"leetcode\", \u8fd4\u56de \"leotcede\". \u6ce8\u610f: \u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u62ec \"y\". \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 345. Reverse Vowels of a String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 345. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 title: leetcode 345. Reverse Vowels of a String date: 2017-09-23 16:16:36 tags: Reverse Vowels of a String https://leetcode.com/problems/reverse-vowels-of-a-string/description/ Write a function that takes a string as input and reverse only the vowels of a string. Example 1: Given s = \"hello\", return \"holle\". Example 2: Given s = \"leetcode\", return \"leotcede\". Note: The vowels does not include the letter \"y\". \u6211\u7684\u601d\u8def \u4f7f\u7528\u6307\u9488\u5bf9\u649e\uff0c\u9047\u5230\u5143\u97f3\u5b57\u7b26\u7684\u65f6\u5019\u5c31\u542c\u4e0b\u6765\u4ea4\u6362\uff0c\u4ea4\u6362\u4ee5\u540e\u6307\u9488\u7ee7\u7eed\u5411\u524d\uff1b \u8fd9\u6837\u7684\u4ee3\u7801\u5176\u5b9e\u662f\u5957\u8def\uff0c\u591a\u5199\u51e0\u904d\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u4e86\uff0c\u6211\u4eec\u5728\u57fa\u7840\u7b97\u6cd5\u7684\u5b66\u4e60\u4e2d\uff0c\u66fe\u7ecf\u4e5f\u6709\u9047\u5230\u8fc7\u3002 \u6211\u7684\u89e3\u7b54 Java \u4ee3\u7801\u5b9e\u73b0\uff1a public class Solution { /** * \u5199\u591a\u4e86\u5c31\u77e5\u9053\uff0c\u8fd9\u662f\u5957\u8def\u4e86 * * @param s * @return */ public String reverseVowels(String s) { if (s.length() == 0) return \"\"; char[] chars = s.toCharArray(); int i = 0; int j = chars.length - 1; while (true) { // \u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b while (i < chars.length && !checkVowels(chars[i])) { i++; } while (j >= 0 && !checkVowels(chars[j])) { j--; } if (i < j) { swap(chars, i, j); i++; j--; } else { break; } } return new String(chars); } private void swap(char[] chars, int index1, int index2) { if (index1 == index2) return; char temp = chars[index1]; chars[index1] = chars[index2]; chars[index2] = temp; } private boolean checkVowels(char c) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { return true; } else { return false; } } public static void main(String[] args) { Solution solution = new Solution(); //String result1 = solution.reverseVowels(\"hello\"); //System.out.println(result1); //String result2 = solution.reverseVowels(\"leetcode\"); //System.out.println(result2); String result3 = solution.reverseVowels(\" \"); System.out.println(result3); } } \u8981\u6ce8\u610f\u7684\u5730\u65b9 \u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff1a if (s.length() == 0) return \"\"; \uff1b \u8fd8\u6709\u4e00\u79cd\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff0c\u5c31\u662f i \u548c j \u53ef\u4ee5\u4e00\u76f4\u8d70\u5230\u5e95\u7684\u60c5\u51b5\uff0c\u7ffb\u8bd1\u6210\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a while (i < chars.length && !checkVowels(chars[i])) { i++; } while (j >= 0 && !checkVowels(chars[j])) { j--; } \u4e0a\u8ff0\u4ee3\u7801\u7279\u522b\u5bb9\u6613\u5ffd\u7565\u6389\uff1a i < chars.length \u548c j >= 0 \u8fd9\u4e24\u4e2a\u524d\u63d0\u6761\u4ef6\u3002 \u4e0a\u9762\u7684\u5199\u6cd5\u592a\u81c3\u80bf\uff1a class Solution(object): def reverseVowels(self, s): \"\"\" :type s: str :rtype: str \"\"\" vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) s = list(s) left = 0 right = len(s) - 1 while left < right: if s[left] not in vowels: left += 1 elif s[right] not in vowels: right -= 1 else: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0345-reverse-vowels-of-a-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"345. Reverse Vowels of a String"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#345-reverse-vowels-of-a-string","text":"","title":"345. Reverse Vowels of a String"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a s = \"hello\", \u8fd4\u56de \"holle\". \u793a\u4f8b 2\uff1a \u7ed9\u5b9a s = \"leetcode\", \u8fd4\u56de \"leotcede\". \u6ce8\u610f: \u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u62ec \"y\". \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 345. Reverse Vowels of a String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 345. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#1","text":"title: leetcode 345. Reverse Vowels of a String date: 2017-09-23 16:16:36 tags: Reverse Vowels of a String https://leetcode.com/problems/reverse-vowels-of-a-string/description/ Write a function that takes a string as input and reverse only the vowels of a string. Example 1: Given s = \"hello\", return \"holle\". Example 2: Given s = \"leetcode\", return \"leotcede\". Note: The vowels does not include the letter \"y\".","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_4","text":"\u4f7f\u7528\u6307\u9488\u5bf9\u649e\uff0c\u9047\u5230\u5143\u97f3\u5b57\u7b26\u7684\u65f6\u5019\u5c31\u542c\u4e0b\u6765\u4ea4\u6362\uff0c\u4ea4\u6362\u4ee5\u540e\u6307\u9488\u7ee7\u7eed\u5411\u524d\uff1b \u8fd9\u6837\u7684\u4ee3\u7801\u5176\u5b9e\u662f\u5957\u8def\uff0c\u591a\u5199\u51e0\u904d\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u4e86\uff0c\u6211\u4eec\u5728\u57fa\u7840\u7b97\u6cd5\u7684\u5b66\u4e60\u4e2d\uff0c\u66fe\u7ecf\u4e5f\u6709\u9047\u5230\u8fc7\u3002","title":"\u6211\u7684\u601d\u8def"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_5","text":"Java \u4ee3\u7801\u5b9e\u73b0\uff1a public class Solution { /** * \u5199\u591a\u4e86\u5c31\u77e5\u9053\uff0c\u8fd9\u662f\u5957\u8def\u4e86 * * @param s * @return */ public String reverseVowels(String s) { if (s.length() == 0) return \"\"; char[] chars = s.toCharArray(); int i = 0; int j = chars.length - 1; while (true) { // \u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b while (i < chars.length && !checkVowels(chars[i])) { i++; } while (j >= 0 && !checkVowels(chars[j])) { j--; } if (i < j) { swap(chars, i, j); i++; j--; } else { break; } } return new String(chars); } private void swap(char[] chars, int index1, int index2) { if (index1 == index2) return; char temp = chars[index1]; chars[index1] = chars[index2]; chars[index2] = temp; } private boolean checkVowels(char c) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { return true; } else { return false; } } public static void main(String[] args) { Solution solution = new Solution(); //String result1 = solution.reverseVowels(\"hello\"); //System.out.println(result1); //String result2 = solution.reverseVowels(\"leetcode\"); //System.out.println(result2); String result3 = solution.reverseVowels(\" \"); System.out.println(result3); } }","title":"\u6211\u7684\u89e3\u7b54"},{"location":"leetcode-0345-reverse-vowels-of-a-string/#_6","text":"\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff1a if (s.length() == 0) return \"\"; \uff1b \u8fd8\u6709\u4e00\u79cd\u6781\u7aef\u7684\u60c5\u51b5\u8981\u8003\u8651\u5230\uff0c\u5c31\u662f i \u548c j \u53ef\u4ee5\u4e00\u76f4\u8d70\u5230\u5e95\u7684\u60c5\u51b5\uff0c\u7ffb\u8bd1\u6210\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u5982\u679c\u8d70\u5230\u6700\u540e\u4e00\u4f4d\u90fd\u4e0d\u7b26\u53f7\u8981\u6c42\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a while (i < chars.length && !checkVowels(chars[i])) { i++; } while (j >= 0 && !checkVowels(chars[j])) { j--; } \u4e0a\u8ff0\u4ee3\u7801\u7279\u522b\u5bb9\u6613\u5ffd\u7565\u6389\uff1a i < chars.length \u548c j >= 0 \u8fd9\u4e24\u4e2a\u524d\u63d0\u6761\u4ef6\u3002 \u4e0a\u9762\u7684\u5199\u6cd5\u592a\u81c3\u80bf\uff1a class Solution(object): def reverseVowels(self, s): \"\"\" :type s: str :rtype: str \"\"\" vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) s = list(s) left = 0 right = len(s) - 1 while left < right: if s[left] not in vowels: left += 1 elif s[right] not in vowels: right -= 1 else: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0345-reverse-vowels-of-a-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u8981\u6ce8\u610f\u7684\u5730\u65b9"},{"location":"leetcode-0349-intersection-of-two-arrays/","text":"349. Intersection of Two Arrays \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u4f8b\u5b50: \u7ed9\u5b9a num1 = [1, 2, 2, 1] , nums2 = [2, 2] , \u8fd4\u56de [2] . \u63d0\u793a: \u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 349. Intersection of Two Arrays \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 349. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u201c\u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u201d\uff0c\u8bbe\u8ba1\u4e00\u4e2a set \u5224\u65ad\u5143\u7d20\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\uff081\uff09\u5148\u8bb0\u5f55\u5230\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\uff1b\uff082\uff09\u4ece set \u4e2d\u5220\u9664\uff0c\u4ee5\u514d nums2 \u4e2d\u91cd\u590d\u7684\u8bb0\u5f55\u88ab\u8bb0\u5f55\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class Solution: def intersection(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" result = [] # \u53bb\u91cd s = set(nums1) for num in nums2: if num in s: result.append(num) # \u53d1\u73b0\u4e00\u6837\u7684\u5143\u7d20\u4ee5\u540e\uff0c\u5c31\u4ece set \u91cc\u5220\u9664\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u590d s.remove(num) return result \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0349-intersection-of-two-arrays \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"349. Intersection of Two Arrays"},{"location":"leetcode-0349-intersection-of-two-arrays/#349-intersection-of-two-arrays","text":"","title":"349. Intersection of Two Arrays"},{"location":"leetcode-0349-intersection-of-two-arrays/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u4f8b\u5b50: \u7ed9\u5b9a num1 = [1, 2, 2, 1] , nums2 = [2, 2] , \u8fd4\u56de [2] . \u63d0\u793a: \u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 349. Intersection of Two Arrays \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 349. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0349-intersection-of-two-arrays/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u201c\u6bcf\u4e2a\u5728\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u5fc5\u5b9a\u662f\u552f\u4e00\u7684\u201d\uff0c\u8bbe\u8ba1\u4e00\u4e2a set \u5224\u65ad\u5143\u7d20\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\uff081\uff09\u5148\u8bb0\u5f55\u5230\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\uff1b\uff082\uff09\u4ece set \u4e2d\u5220\u9664\uff0c\u4ee5\u514d nums2 \u4e2d\u91cd\u590d\u7684\u8bb0\u5f55\u88ab\u8bb0\u5f55\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0349-intersection-of-two-arrays/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0349-intersection-of-two-arrays/#1","text":"class Solution: def intersection(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" result = [] # \u53bb\u91cd s = set(nums1) for num in nums2: if num in s: result.append(num) # \u53d1\u73b0\u4e00\u6837\u7684\u5143\u7d20\u4ee5\u540e\uff0c\u5c31\u4ece set \u91cc\u5220\u9664\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u590d s.remove(num) return result \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0349-intersection-of-two-arrays \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/","text":"350. Intersection of Two Arrays II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u4f8b\u5982: \u7ed9\u5b9a nums1 = [1, 2, 2, 1] , nums2 = [2, 2] , \u8fd4\u56de [2, 2] . \u6ce8\u610f\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8ddf\u8fdb: \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 350. Intersection of Two Arrays II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\u201c\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u201d\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u8ba1\u6570\u5668\u3002 class Solution(object): def intersect(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" counter = {} for num in nums1: counter[num] = counter.get(num, 0) + 1 result = [] for num in nums2: if num in counter and counter[num] > 0: result.append(num) counter[num] -= 1 return result \u53c2\u8003\u89e3\u7b542\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002 class Solution(object): def intersect(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" nums1.sort() nums2.sort() p1 = 0 p2 = 0 l1 = len(nums1) l2 = len(nums2) result = [] while p1 < l1 and p2 < l2: if nums1[p1] < nums2[p2]: p1 += 1 elif nums1[p1] > nums2[p2]: p2 += 1 else: result.append(nums1[p1]) p1 += 1 p2 += 1 return result \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0350-intersection-of-two-arrays-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"350. Intersection of Two Arrays II"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#350-intersection-of-two-arrays-ii","text":"","title":"350. Intersection of Two Arrays II"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u5199\u4e00\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u4f8b\u5982: \u7ed9\u5b9a nums1 = [1, 2, 2, 1] , nums2 = [2, 2] , \u8fd4\u56de [2, 2] . \u6ce8\u610f\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8ddf\u8fdb: \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 350. Intersection of Two Arrays II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\u201c\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u201d\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#1","text":"class Solution(object): def intersect(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" counter = {} for num in nums1: counter[num] = counter.get(num, 0) + 1 result = [] for num in nums2: if num in counter and counter[num] > 0: result.append(num) counter[num] -= 1 return result","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u4f7f\u7528\u8ba1\u6570\u5668\u3002"},{"location":"leetcode-0350-intersection-of-two-arrays-ii/#2","text":"class Solution(object): def intersect(self, nums1, nums2): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: List[int] \"\"\" nums1.sort() nums2.sort() p1 = 0 p2 = 0 l1 = len(nums1) l2 = len(nums2) result = [] while p1 < l1 and p2 < l2: if nums1[p1] < nums2[p2]: p1 += 1 elif nums1[p1] > nums2[p2]: p2 += 1 else: result.append(nums1[p1]) p1 += 1 p2 += 1 return result \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0350-intersection-of-two-arrays-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u9010\u4e2a\u6bd4\u8f83\u3002"},{"location":"leetcode-0367-valid-perfect-square/","text":"367. Valid Perfect Square \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 num \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c num \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 \u6ce8\u610f\uff1a \u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982 sqrt \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 16 \u8f93\u51fa\uff1a True \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 14 \u8f93\u51fa\uff1a False \u5f52\u529f\u4e8e: \u7279\u522b\u611f\u8c22 @elmirap \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 367. Valid Perfect Square \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0367-valid-perfect-square \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"367. Valid Perfect Square"},{"location":"leetcode-0367-valid-perfect-square/#367-valid-perfect-square","text":"","title":"367. Valid Perfect Square"},{"location":"leetcode-0367-valid-perfect-square/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 num \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c num \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 \u6ce8\u610f\uff1a \u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982 sqrt \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 16 \u8f93\u51fa\uff1a True \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 14 \u8f93\u51fa\uff1a False \u5f52\u529f\u4e8e: \u7279\u522b\u611f\u8c22 @elmirap \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 367. Valid Perfect Square \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0367-valid-perfect-square/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0367-valid-perfect-square/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0367-valid-perfect-square/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0367-valid-perfect-square \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0371-sum-of-two-integers/","text":"371. Sum of Two Integers \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4e0d\u4f7f\u7528 \u8fd0\u7b97\u7b26 + \u548c - \uff0c\u8ba1\u7b97\u4e24\u6574\u6570 a \u3001 b \u4e4b\u548c\u3002 \u793a\u4f8b\uff1a \u82e5 a = 1 \uff0c b = 2\uff0c\u8fd4\u56de 3\u3002 \u81f4\u8c22\uff1a \u7279\u522b\u611f\u8c22 @fujiaozhu \u6dfb\u52a0\u8fd9\u9053\u95ee\u9898\u5e76\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 371. Sum of Two Integers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 371. \u4e24\u6574\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4e86\u89e3\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002 \u65e2\u7136\u4e0d\u5141\u8bb8\u4f7f\u7528\u52a0\u6cd5\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u5c31\u662f\u9996\u9009\u4e86\u3002 \u4f4d\u8fd0\u7b97\u4e2d\u6709\u4e00\u79cd\u8fd0\u7b97\u53eb\u505a\u201c\u534a\u52a0\u8fd0\u7b97\u201d\uff0c\u4e5f\u79f0\u4f5c\u201c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u201d\uff0c\u5373\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u6210\u6ca1\u6709\u8fdb\u4f4d\u7684\u52a0\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u4f1a\u7528\u4e0a\u5b83\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u89e3\u51b3\u7684\u5c31\u662f\u8fdb\u4f4d\u7684\u95ee\u9898\u4e86\u3002\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u8fdb\u4f4d\u5462\uff0c\u540c\u4e3a 1 \u7684\u65f6\u5019\u624d\u8fdb\u4f4d\uff0c\u7279\u6b8a\u5904\u7406\u540c\u4e3a 1 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u201c\u4e0e\u201d\u8fd0\u7b97\u5e72\u7684\u4e8b\u60c5\uff0c\u8fdb\u4f4d\u662f\u5411\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u6211\u4eec\u628a\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u5de6\u79fb 1 \u4f4d\u5c31\u597d\u4e86\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u8fdb\u4f4d\u53ef\u80fd\u662f\u63a5\u8fde\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u8981\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u8fdb\u884c\u3002 \u5982\u679c\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u662f 0\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u4e0b\u53bb\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { /** * \u5148\u505a\u52a0\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u5f02\u6216\u8fd0\u7b97 * \u518d\u505a\u8fdb\u4f4d * 1 0 1 1 * 1 1 1 1 * \u5f02\u6216\uff1a 0 1 0 0 * \u4e0e\u8fd0\u7b97 1 0 1 1 * * @param a * @param b * @return */ public int getSum(int a, int b) { int sum; while (true) { sum = a ^ b; int carry = a & b; if (carry == 0) { break; } a = sum; b = carry << 1; } return sum; } } \u53c2\u8003\u89e3\u7b542\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002 public class Solution2 { public int getSum(int a, int b) { int sum; int carry; do { sum = a ^ b; carry = a & b; a = sum; b = carry << 1; } while (carry != 0); return sum; } } \u53c2\u8003\u89e3\u7b543\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002 public class Solution3 { public int getSum(int a, int b) { int sum = 0; int carry = 0; while (true) { sum = a ^ b; // \u62ec\u53f7\u4e0d\u80fd\u4e22 carry = (a & b) << 1; if (carry == 0) { break; } a = sum; b = carry; } return sum; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0371-sum-of-two-integers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"371. Sum of Two Integers"},{"location":"leetcode-0371-sum-of-two-integers/#371-sum-of-two-integers","text":"","title":"371. Sum of Two Integers"},{"location":"leetcode-0371-sum-of-two-integers/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4e0d\u4f7f\u7528 \u8fd0\u7b97\u7b26 + \u548c - \uff0c\u8ba1\u7b97\u4e24\u6574\u6570 a \u3001 b \u4e4b\u548c\u3002 \u793a\u4f8b\uff1a \u82e5 a = 1 \uff0c b = 2\uff0c\u8fd4\u56de 3\u3002 \u81f4\u8c22\uff1a \u7279\u522b\u611f\u8c22 @fujiaozhu \u6dfb\u52a0\u8fd9\u9053\u95ee\u9898\u5e76\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 371. Sum of Two Integers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 371. \u4e24\u6574\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0371-sum-of-two-integers/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4e86\u89e3\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002 \u65e2\u7136\u4e0d\u5141\u8bb8\u4f7f\u7528\u52a0\u6cd5\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u5c31\u662f\u9996\u9009\u4e86\u3002 \u4f4d\u8fd0\u7b97\u4e2d\u6709\u4e00\u79cd\u8fd0\u7b97\u53eb\u505a\u201c\u534a\u52a0\u8fd0\u7b97\u201d\uff0c\u4e5f\u79f0\u4f5c\u201c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u201d\uff0c\u5373\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u6210\u6ca1\u6709\u8fdb\u4f4d\u7684\u52a0\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u4f1a\u7528\u4e0a\u5b83\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u89e3\u51b3\u7684\u5c31\u662f\u8fdb\u4f4d\u7684\u95ee\u9898\u4e86\u3002\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u8fdb\u4f4d\u5462\uff0c\u540c\u4e3a 1 \u7684\u65f6\u5019\u624d\u8fdb\u4f4d\uff0c\u7279\u6b8a\u5904\u7406\u540c\u4e3a 1 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u201c\u4e0e\u201d\u8fd0\u7b97\u5e72\u7684\u4e8b\u60c5\uff0c\u8fdb\u4f4d\u662f\u5411\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u6211\u4eec\u628a\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u5de6\u79fb 1 \u4f4d\u5c31\u597d\u4e86\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u8fdb\u4f4d\u53ef\u80fd\u662f\u63a5\u8fde\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u8981\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u8fdb\u884c\u3002 \u5982\u679c\u201c\u4e0e\u201d\u8fd0\u7b97\u7684\u7ed3\u679c\u662f 0\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u4e0b\u53bb\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0371-sum-of-two-integers/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0371-sum-of-two-integers/#1","text":"public class Solution { /** * \u5148\u505a\u52a0\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u5f02\u6216\u8fd0\u7b97 * \u518d\u505a\u8fdb\u4f4d * 1 0 1 1 * 1 1 1 1 * \u5f02\u6216\uff1a 0 1 0 0 * \u4e0e\u8fd0\u7b97 1 0 1 1 * * @param a * @param b * @return */ public int getSum(int a, int b) { int sum; while (true) { sum = a ^ b; int carry = a & b; if (carry == 0) { break; } a = sum; b = carry << 1; } return sum; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0371-sum-of-two-integers/#2-1","text":"public class Solution2 { public int getSum(int a, int b) { int sum; int carry; do { sum = a ^ b; carry = a & b; a = sum; b = carry << 1; } while (carry != 0); return sum; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002"},{"location":"leetcode-0371-sum-of-two-integers/#3-1","text":"public class Solution3 { public int getSum(int a, int b) { int sum = 0; int carry = 0; while (true) { sum = a ^ b; // \u62ec\u53f7\u4e0d\u80fd\u4e22 carry = (a & b) << 1; if (carry == 0) { break; } a = sum; b = carry; } return sum; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0371-sum-of-two-integers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u540c\u53c2\u8003\u89e3\u7b54 1 \uff0c\u5199\u6cd5\u4e0d\u4e00\u6837\u800c\u5df2\u3002"},{"location":"leetcode-0377-combination-sum-iv/","text":"377. Combination Sum IV \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 377. Combination Sum IV \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 377. Combination Sum IV \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230 \u9012\u5f52\u5173\u7cfb\u5f0f \uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int combinationSum4(int[] nums, int target) { int[] dp = new int[target + 1]; // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1 // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1 // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a dp[0] = 1; for (int i = 1; i < target + 1; i++) { for (int num : nums) { if (i >= num) { dp[i] = dp[i] + dp[i - num]; } } } return dp[target]; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 2, 3}; int target = 4; int combinationSum4 = solution.combinationSum4(nums, target); System.out.println(combinationSum4); } }","title":"377. Combination Sum IV"},{"location":"leetcode-0377-combination-sum-iv/#377-combination-sum-iv","text":"","title":"377. Combination Sum IV"},{"location":"leetcode-0377-combination-sum-iv/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 377. Combination Sum IV \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 377. Combination Sum IV \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0377-combination-sum-iv/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6309\u7167\u4e0b\u56fe\u6240\u793a\u7684\u89c4\u5f8b\u627e\u5230 \u9012\u5f52\u5173\u7cfb\u5f0f \uff0c\u4f53\u4f1a\u6211\u4eec\u5728\u8fd9\u9053\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u6211\u4eec\u4e0d\u662f\u80e1\u4e71\u641c\u7d22\uff0c\u800c\u662f\u6309\u7167\u987a\u5e8f\u641c\u7d22\uff1a\u6bcf\u6b21\u90fd\u51cf\u53bb\u4e00\u679a\u786c\u5e01\u7684\u503c\uff0c\u770b\u51cf\u53bb\u4e86\u4e00\u679a\u786c\u5e01\u7684\u5269\u4f59\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u6709\u591a\u5c11\uff0c\u548c\u6ca1\u6709\u51cf\u53bb\u8fd9\u679a\u786c\u5e01\u7684\u4ef7\u503c\u7684\u7ec4\u5408\u4e2a\u6570\u5efa\u7acb\u5173\u7cfb\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0377-combination-sum-iv/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0377-combination-sum-iv/#1","text":"public class Solution { public int combinationSum4(int[] nums, int target) { int[] dp = new int[target + 1]; // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48 dp[0] \u662f 1 // \u56e0\u4e3a 0 \u8868\u793a\u7a7a\u96c6\uff0c\u7a7a\u96c6\u548c\u5b83\"\u524d\u9762\"\u7684\u5143\u7d20\u51d1\u6210\u4e00\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u662f 1 // \u8fd9\u4e00\u6b65\u8981\u52a0\u6df1\u4f53\u4f1a dp[0] = 1; for (int i = 1; i < target + 1; i++) { for (int num : nums) { if (i >= num) { dp[i] = dp[i] + dp[i - num]; } } } return dp[target]; } public static void main(String[] args) { Solution solution = new Solution(); int[] nums = {1, 2, 3}; int target = 4; int combinationSum4 = solution.combinationSum4(nums, target); System.out.println(combinationSum4); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0389-find-the-difference/","text":"389. Find the Difference \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u5b57\u7b26\u4e32 t \u7531\u5b57\u7b26\u4e32 s \u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8bf7\u627e\u51fa\u5728 t \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a s = \"abcd\" t = \"abcde\" \u8f93\u51fa\uff1a e \u89e3\u91ca\uff1a 'e' \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 389. Find the Difference \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 389. \u627e\u4e0d\u540c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u53d7 LeetCode \u7b2c 136 \u9898\u4f7f\u7528\u4f4d\u8fd0\u7b97\u627e\u4e0d\u540c\u6570\u5b57\u7684\u542f\u53d1\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u5982\u6cd5\u70ae\u5236\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u53ea\u5305\u542b\u5c0f\u5199\u6570\u5b57\uff0c\u5e72\u8106\u5168\u90e8\u8f6c\u6210 0-25 \u7684\u6570\u5b57\u5c31\u597d\u4e86 // \u6839\u636e\u9898\u610f\uff0ct \u6bd4 s \u591a 1 \u4e2a\u5b57\u7b26\uff0c\u5e72\u8106\u521d\u59cb\u503c\u5c31\u53d6 t \u7684\u7b2c 1 \u4e2a\u5b57\u7b26 public char findTheDifference(String s, String t) { int slen = s.length(); int tlen = t.length(); int res = t.charAt(0) - 'a'; for (int i = 0; i < slen; i++) { res ^= (s.charAt(i) - 'a'); } for (int i = 1; i < tlen; i++) { res ^= (t.charAt(i) - 'a'); } return (char) (res + 'a'); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { // \u5728\u7f16\u5199\u6ce8\u91ca\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u5176\u5b9e char \u5c31\u662f\u6574\u578b\u6570\u5b57\uff0c\u56e0\u6b64\u6839\u672c\u4e0d\u7528\u505a\u8f6c\u6362 public char findTheDifference(String s, String t) { int slen = s.length(); int tlen = t.length(); int res = t.charAt(0); for (int i = 0; i < slen; i++) { res ^= (s.charAt(i)); } for (int i = 1; i < tlen; i++) { res ^= (t.charAt(i)); } return (char) (res); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0389-find-the-difference \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"389. Find the Difference"},{"location":"leetcode-0389-find-the-difference/#389-find-the-difference","text":"","title":"389. Find the Difference"},{"location":"leetcode-0389-find-the-difference/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u5b57\u7b26\u4e32 t \u7531\u5b57\u7b26\u4e32 s \u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8bf7\u627e\u51fa\u5728 t \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a s = \"abcd\" t = \"abcde\" \u8f93\u51fa\uff1a e \u89e3\u91ca\uff1a 'e' \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 389. Find the Difference \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 389. \u627e\u4e0d\u540c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0389-find-the-difference/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u53d7 LeetCode \u7b2c 136 \u9898\u4f7f\u7528\u4f4d\u8fd0\u7b97\u627e\u4e0d\u540c\u6570\u5b57\u7684\u542f\u53d1\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u5982\u6cd5\u70ae\u5236\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0389-find-the-difference/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0389-find-the-difference/#1","text":"public class Solution { // \u53ea\u5305\u542b\u5c0f\u5199\u6570\u5b57\uff0c\u5e72\u8106\u5168\u90e8\u8f6c\u6210 0-25 \u7684\u6570\u5b57\u5c31\u597d\u4e86 // \u6839\u636e\u9898\u610f\uff0ct \u6bd4 s \u591a 1 \u4e2a\u5b57\u7b26\uff0c\u5e72\u8106\u521d\u59cb\u503c\u5c31\u53d6 t \u7684\u7b2c 1 \u4e2a\u5b57\u7b26 public char findTheDifference(String s, String t) { int slen = s.length(); int tlen = t.length(); int res = t.charAt(0) - 'a'; for (int i = 0; i < slen; i++) { res ^= (s.charAt(i) - 'a'); } for (int i = 1; i < tlen; i++) { res ^= (t.charAt(i) - 'a'); } return (char) (res + 'a'); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0389-find-the-difference/#2","text":"public class Solution2 { // \u5728\u7f16\u5199\u6ce8\u91ca\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u5176\u5b9e char \u5c31\u662f\u6574\u578b\u6570\u5b57\uff0c\u56e0\u6b64\u6839\u672c\u4e0d\u7528\u505a\u8f6c\u6362 public char findTheDifference(String s, String t) { int slen = s.length(); int tlen = t.length(); int res = t.charAt(0); for (int i = 0; i < slen; i++) { res ^= (s.charAt(i)); } for (int i = 1; i < tlen; i++) { res ^= (t.charAt(i)); } return (char) (res); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0389-find-the-difference \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0392-is-subsequence/","text":"392. Is Subsequence \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a s \u548c t \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 t \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c s \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002 \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c \"ace\" \u662f \"abcde\" \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c \"aec\" \u4e0d\u662f\uff09\u3002 \u793a\u4f8b 1: s = \"abc\" , t = \"ahbgdc\" \u8fd4\u56de true . \u793a\u4f8b 2: s = \"axc\" , t = \"ahbgdc\" \u8fd4\u56de false . \u540e\u7eed\u6311\u6218 : \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @pbrother \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 392. Is Subsequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 392. \u5224\u65ad\u5b50\u5e8f\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u8574\u542b\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u60f3\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a public class Solution { public boolean isSubsequence(String s, String t) { int slen = s.length(); int tlen = t.length(); int sl = 0; int tl = 0; while (sl < slen && tl < tlen) { while (tl < tlen && s.charAt(sl) != t.charAt(tl)) { tl++; } if (tl == tlen) { break; } sl++; tl++; } return sl == slen; } } \u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e2a\u4f18\u5316\u7684\u7248\u672c public class Solution2 { public boolean isSubsequence(String s, String t) { int slen = s.length(); int tlen = t.length(); int i = 0; int j = 0; while (i < slen && j < tlen) { if (s.charAt(i) == t.charAt(j)) { i++; } j++; } return i == slen; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0392-is-subsequence \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"392. Is Subsequence"},{"location":"leetcode-0392-is-subsequence/#392-is-subsequence","text":"","title":"392. Is Subsequence"},{"location":"leetcode-0392-is-subsequence/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a s \u548c t \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 t \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c s \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002 \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c \"ace\" \u662f \"abcde\" \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c \"aec\" \u4e0d\u662f\uff09\u3002 \u793a\u4f8b 1: s = \"abc\" , t = \"ahbgdc\" \u8fd4\u56de true . \u793a\u4f8b 2: s = \"axc\" , t = \"ahbgdc\" \u8fd4\u56de false . \u540e\u7eed\u6311\u6218 : \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f \u81f4\u8c22: \u7279\u522b\u611f\u8c22 @pbrother \u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 392. Is Subsequence \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 392. \u5224\u65ad\u5b50\u5e8f\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0392-is-subsequence/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u8574\u542b\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u60f3\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0392-is-subsequence/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0392-is-subsequence/#1","text":"public class Solution { public boolean isSubsequence(String s, String t) { int slen = s.length(); int tlen = t.length(); int sl = 0; int tl = 0; while (sl < slen && tl < tlen) { while (tl < tlen && s.charAt(sl) != t.charAt(tl)) { tl++; } if (tl == tlen) { break; } sl++; tl++; } return sl == slen; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a"},{"location":"leetcode-0392-is-subsequence/#21","text":"public class Solution2 { public boolean isSubsequence(String s, String t) { int slen = s.length(); int tlen = t.length(); int i = 0; int j = 0; while (i < slen && j < tlen) { if (s.charAt(i) == t.charAt(j)) { i++; } j++; } return i == slen; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0392-is-subsequence \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e2a\u4f18\u5316\u7684\u7248\u672c"},{"location":"leetcode-0397-integer-replacement/","text":"397. Integer Replacement \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a 1. \u5982\u679c n \u662f\u5076\u6570\uff0c\u5219\u7528 n / 2 \u66ff\u6362 n \u3002 2. \u5982\u679c n \u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528 n + 1 \u6216 n - 1 \u66ff\u6362 n \u3002 n \u53d8\u4e3a 1 \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f \u793a\u4f8b 1: \u8f93\u5165: 8 \u8f93\u51fa: 3 \u89e3\u91ca: 8 -> 4 -> 2 -> 1 \u793a\u4f8b 2: \u8f93\u5165: 7 \u8f93\u51fa: 4 \u89e3\u91ca: 7 -> 8 -> 4 -> 2 -> 1 \u6216 7 -> 6 -> 3 -> 2 -> 1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 397. Integer Replacement \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 397. \u6574\u6570\u66ff\u6362 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u505a\u6cd5\u662f\u6839\u636e\u9898\u610f\uff0c\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u3002 \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662f\u6574\u578b\u6570\u7684\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\uff1a1111111111111111111111111111111\uff0c\u5bf9\u4e8e\u5b83\u7684\u7ed3\u679c\u662f 32\uff08\u6211\u662f\u4ece\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u770b\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8fd9\u4e2a\u6570\u8981\u53d8\u6210 1 \u5e94\u8be5\u7ecf\u8fc7 33 \u6b65\uff09\uff0c\u4e0d\u8fc7\u53ea\u6709\u8fd9\u4e00\u4e2a\u7279\u6b8a\u7684\u7528\u4f8b\uff0c\u6211\u4eec\u6682\u4e14\u8fd9\u6837\u5199\u662f\u4e0d\u4f1a\u9519\u7684\u3002 public class Solution6 { public int integerReplacement(int n) { if (n == Integer.MAX_VALUE) { return 32; } if (n == 1) { return 0; } if (n == 2) { return 1; } if (n % 2 == 0) { return 1 + integerReplacement(n / 2); } return 1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1)); } } \u5199\u6210\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a public class Solution { public int integerReplacement(int n) { return longReplacement(n); } private int longReplacement(long n) { if (n <= 1) { return 0; } if (n == 2) { return 1; } if (n % 2 == 0) { return longReplacement(n / 2) + 1; } return 1 + Math.min(longReplacement(n + 1), longReplacement(n - 1)); } public static void main(String[] args) { Solution solution = new Solution(); int n = Integer.MAX_VALUE; int integerReplacement = solution.integerReplacement(n); System.out.println(integerReplacement); } } \u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\u3002 \u4f7f\u7528\u4e86\u9012\u5f52\uff0c\u90a3\u4e48\u6839\u636e\u5957\u8def\uff0c\u53ef\u4ee5\u5c06\u8fd9\u9053\u95ee\u9898\u7684\u89e3\u6cd5\u6539\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7528\u52a8\u6001\u89c4\u5212\u8bd5\u8bd5\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f83\u5c11\u7684\u6570\u7684\u7ed3\u679c\u8ba1\u7b97\u5f97\u5230\uff0c\u4e8e\u662f\uff0c\u5f88\u5bb9\u6613\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002 \u4f46\u662f\uff0c\u63d0\u4ea4\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e0b\u5b50\u8981\u5f00\u8f9f\u90a3\u4e48\u591a\u7a7a\u95f4\u5176\u5b9e\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6211\u4eec\u8981\u8ba1\u7b97 8 \uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981 1\u30012\u30014 \u7684\u7ed3\u679c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u4f9d\u6b21\u8ba1\u7b97 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u66f4\u6d6a\u8d39\u65f6\u95f4\u548c\u7a7a\u95f4\u3002 (\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u79cd\u505a\u6cd5\u4e0d\u80fd\u901a\u8fc7\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u53cd\u4f8b\u3002) public class Solution2 { // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u901a\u4e0d\u8fc7\uff0c\u4e0d\u8fc7\u91c7\u7528\u52a8\u6001\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86 // \u8fd9\u884c\u89e3\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 public int integerReplacement(int n) { // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50 if (n <= 1) { return 0; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 0; dp[2] = 1; for (int i = 3; i <= n; i++) { if (i % 2 == 0) { dp[i] = dp[i / 2] + 1; } else { // \u8fd9\u6837\u5199\u5c31\u592a\u6b7b\u677f\u4e86 // dp[i] = 1 + Math.min(dp[i - 1], dp[i + 1]); dp[i] = Math.min(dp[i - 1] + 1, dp[(i + 1) / 2] + 2); } } return dp[n]; } } \u4e0d\u8fc7\uff0c\u6211\u4eec\u4e0d\u7528\u90a3\u4e48\u6b7b\u677f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4e0b\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\u66f4\u50cf\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 import java.util.HashMap; import java.util.Map; public class Solution2 { // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528 Hash \u8868 // \u4f7f\u7528\u52a8\u6001\u7684\u7ea2\u9ed1\u6811\u5c31\u4e0d\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 \u4e86 public int integerReplacement(int n) { // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50 if (n <= 1) { return 0; } Map<Integer, Integer> map = new HashMap<>(); map.put(1, 0); return helper(n, map); } private int helper(int n, Map<Integer, Integer> map) { Integer value = map.get(n); if (value == null) { if (n % 2 == 0) { value = helper(n / 2, map) + 1; } else { // n-1 /2 // n+1 /2 value = 2 + Math.min(helper(n / 2, map), helper(n / 2 + 1, map)); } } return value; } } \u53c2\u8003\u89e3\u7b543\uff1a\u8fd9\u79cd\u5199\u6cd5\u8981\u4f7f\u7528\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\u3002 \u6839\u636e\u89c4\u5219\uff0c\u5982\u679c\u9047\u5230\u5947\u6570\uff0c\u8981\u5148\u53d8\u6210\u5076\u6570\u3002 \u4e8c\u8fdb\u5236\u540e\u9762\u7684 0 \u8d8a\u591a\uff0c\u8868\u793a\u9664\u4ee5 2 \u4e00\u76f4\u53ef\u4ee5\u6574\u9664\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5199\u51fa\u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u53ef\u4ee5\u63d0\u53d6\u51fa 2 \u7684\u6b21\u65b9\u6570\u3002 \u6839\u636e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002 public class Solution3 { // https://www.cnblogs.com/maizi-1993/p/5909887.html // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d public int integerReplacement(int n) { // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5 if (n == Integer.MAX_VALUE) { return 32; } int res = 0; while (n != 1) { // \u5f53 n \u4e0d\u8bba\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u53d8\u6210\u5076\u6570\uff0c\u6d88\u8017\u4e00\u4e2a\u64cd\u4f5c res++; if ((n & 1) == 0) { n >>= 1; } else { // \u8c01\u672b\u5c3e\u7684 0 \u591a\uff0c\u5c31\u53d8\u6210\u8c01 // \u53ea\u6709 3 \u8fd9\u4e00\u4e2a\u7279\u4f8b if (n == 3 || countTailZeros(n - 1) > countTailZeros(n + 1)) { n--; } else { n++; } } } return res; } // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // 110100 52 26 13 // \u8fd9\u4e2a\u505a\u6cd5\u6709\u70b9\"\u8fc7\"\uff0c\u662f\u5f88\u5145\u5206\u7684\u505a\u6cd5 private int countTailZeros(int num) { int count = 0; while (num % 2 == 0) { count++; num >>= 1; } return count; } public static void main(String[] args) { System.out.println(Integer.toBinaryString(Integer.MAX_VALUE)); } } \u53c2\u8003\u89e3\u7b544\uff1a\u8fd9\u79cd\u89e3\u6cd5\u66f4\u6df1\u5730\u6316\u6398\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u7684\u6027\u8d28\u3002 public class Solution4 { // \u53c2\u8003\u8d44\u6599\uff1ahttps://segmentfault.com/a/1190000007318944 public int integerReplacement(int n) { long num = n; int res = 0; while (num != 1) { res++; if ((num & 1) == 0) { // \u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u53f3\u79fb num >>= 1; } else { // \u662f\u5947\u6570\u7684\u65f6\u5019 // 2 \u7684\u4e8c\u8fdb\u5236\u662f 10\uff0c\u5373\u5982\u679c\u5012\u6570\u7b2c 2 \u4f4d\u662f 1 \u7684\u8bdd // \u52a0 1 \u80fd\u6d88\u8017\u6389\u66f4\u591a\u7684 1 // \u4f8b\u5982\uff1a // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 0\uff0c\u90a3\u4e48 n - 1 \u7684\u64cd\u4f5c\u6bd4 n + 1 \u7684\u64cd\u4f5c\u80fd\u6d88\u6389\u66f4\u591a\u7684 1 // 1001 + 1 = 1010 // 1001 - 1 = 1000 // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 1\uff0c\u90a3\u4e48 n + 1 \u7684\u64cd\u4f5c\u80fd\u6bd4 n - 1\u7684\u64cd\u4f5c\u6d88\u6389\u66f4\u591a\u7684 1 // 1011 + 1 = 1100 // 1111 + 1 = 10000 if ((num & 2) != 0 && num != 3) { num++; } else { num--; } } } return res; } } \u53c2\u8003\u89e3\u7b541 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0397-integer-replacement \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"397. Integer Replacement"},{"location":"leetcode-0397-integer-replacement/#397-integer-replacement","text":"","title":"397. Integer Replacement"},{"location":"leetcode-0397-integer-replacement/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a 1. \u5982\u679c n \u662f\u5076\u6570\uff0c\u5219\u7528 n / 2 \u66ff\u6362 n \u3002 2. \u5982\u679c n \u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528 n + 1 \u6216 n - 1 \u66ff\u6362 n \u3002 n \u53d8\u4e3a 1 \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f \u793a\u4f8b 1: \u8f93\u5165: 8 \u8f93\u51fa: 3 \u89e3\u91ca: 8 -> 4 -> 2 -> 1 \u793a\u4f8b 2: \u8f93\u5165: 7 \u8f93\u51fa: 4 \u89e3\u91ca: 7 -> 8 -> 4 -> 2 -> 1 \u6216 7 -> 6 -> 3 -> 2 -> 1 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 397. Integer Replacement \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 397. \u6574\u6570\u66ff\u6362 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0397-integer-replacement/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0397-integer-replacement/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0397-integer-replacement/#1","text":"\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662f\u6574\u578b\u6570\u7684\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\uff1a1111111111111111111111111111111\uff0c\u5bf9\u4e8e\u5b83\u7684\u7ed3\u679c\u662f 32\uff08\u6211\u662f\u4ece\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u770b\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u8fd9\u4e2a\u6570\u8981\u53d8\u6210 1 \u5e94\u8be5\u7ecf\u8fc7 33 \u6b65\uff09\uff0c\u4e0d\u8fc7\u53ea\u6709\u8fd9\u4e00\u4e2a\u7279\u6b8a\u7684\u7528\u4f8b\uff0c\u6211\u4eec\u6682\u4e14\u8fd9\u6837\u5199\u662f\u4e0d\u4f1a\u9519\u7684\u3002 public class Solution6 { public int integerReplacement(int n) { if (n == Integer.MAX_VALUE) { return 32; } if (n == 1) { return 0; } if (n == 2) { return 1; } if (n % 2 == 0) { return 1 + integerReplacement(n / 2); } return 1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1)); } } \u5199\u6210\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a public class Solution { public int integerReplacement(int n) { return longReplacement(n); } private int longReplacement(long n) { if (n <= 1) { return 0; } if (n == 2) { return 1; } if (n % 2 == 0) { return longReplacement(n / 2) + 1; } return 1 + Math.min(longReplacement(n + 1), longReplacement(n - 1)); } public static void main(String[] args) { Solution solution = new Solution(); int n = Integer.MAX_VALUE; int integerReplacement = solution.integerReplacement(n); System.out.println(integerReplacement); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u505a\u6cd5\u662f\u6839\u636e\u9898\u610f\uff0c\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u3002"},{"location":"leetcode-0397-integer-replacement/#2","text":"\u4f7f\u7528\u4e86\u9012\u5f52\uff0c\u90a3\u4e48\u6839\u636e\u5957\u8def\uff0c\u53ef\u4ee5\u5c06\u8fd9\u9053\u95ee\u9898\u7684\u89e3\u6cd5\u6539\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7528\u52a8\u6001\u89c4\u5212\u8bd5\u8bd5\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f83\u5c11\u7684\u6570\u7684\u7ed3\u679c\u8ba1\u7b97\u5f97\u5230\uff0c\u4e8e\u662f\uff0c\u5f88\u5bb9\u6613\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002 \u4f46\u662f\uff0c\u63d0\u4ea4\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e0b\u5b50\u8981\u5f00\u8f9f\u90a3\u4e48\u591a\u7a7a\u95f4\u5176\u5b9e\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6211\u4eec\u8981\u8ba1\u7b97 8 \uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981 1\u30012\u30014 \u7684\u7ed3\u679c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u4f9d\u6b21\u8ba1\u7b97 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u66f4\u6d6a\u8d39\u65f6\u95f4\u548c\u7a7a\u95f4\u3002 (\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u79cd\u505a\u6cd5\u4e0d\u80fd\u901a\u8fc7\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u53cd\u4f8b\u3002) public class Solution2 { // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u901a\u4e0d\u8fc7\uff0c\u4e0d\u8fc7\u91c7\u7528\u52a8\u6001\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86 // \u8fd9\u884c\u89e3\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 public int integerReplacement(int n) { // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50 if (n <= 1) { return 0; } int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 0; dp[2] = 1; for (int i = 3; i <= n; i++) { if (i % 2 == 0) { dp[i] = dp[i / 2] + 1; } else { // \u8fd9\u6837\u5199\u5c31\u592a\u6b7b\u677f\u4e86 // dp[i] = 1 + Math.min(dp[i - 1], dp[i + 1]); dp[i] = Math.min(dp[i - 1] + 1, dp[(i + 1) / 2] + 2); } } return dp[n]; } } \u4e0d\u8fc7\uff0c\u6211\u4eec\u4e0d\u7528\u90a3\u4e48\u6b7b\u677f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4e0b\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\u66f4\u50cf\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 import java.util.HashMap; import java.util.Map; public class Solution2 { // \u63a5\u4e0b\u6765\u628a\u9012\u5f52\u6539\u6210\u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528 Hash \u8868 // \u4f7f\u7528\u52a8\u6001\u7684\u7ea2\u9ed1\u6811\u5c31\u4e0d\u4f1a \u8d85\u51fa\u5185\u5b58\u9650\u5236 \u4e86 public int integerReplacement(int n) { // 0 \u8981\u5360\u4e00\u4e2a\u4f4d\u5b50\uff0c\u6240\u4ee5\u8981\u7ed9\u51fa n+1 \u4e2a\u4f4d\u5b50 if (n <= 1) { return 0; } Map<Integer, Integer> map = new HashMap<>(); map.put(1, 0); return helper(n, map); } private int helper(int n, Map<Integer, Integer> map) { Integer value = map.get(n); if (value == null) { if (n % 2 == 0) { value = helper(n / 2, map) + 1; } else { // n-1 /2 // n+1 /2 value = 2 + Math.min(helper(n / 2, map), helper(n / 2 + 1, map)); } } return value; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\u3002"},{"location":"leetcode-0397-integer-replacement/#3","text":"\u6839\u636e\u89c4\u5219\uff0c\u5982\u679c\u9047\u5230\u5947\u6570\uff0c\u8981\u5148\u53d8\u6210\u5076\u6570\u3002 \u4e8c\u8fdb\u5236\u540e\u9762\u7684 0 \u8d8a\u591a\uff0c\u8868\u793a\u9664\u4ee5 2 \u4e00\u76f4\u53ef\u4ee5\u6574\u9664\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5199\u51fa\u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u53ef\u4ee5\u63d0\u53d6\u51fa 2 \u7684\u6b21\u65b9\u6570\u3002 \u6839\u636e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u5199\u51fa\u4e0b\u9762\u7684\u4ee3\u7801\u3002 public class Solution3 { // https://www.cnblogs.com/maizi-1993/p/5909887.html // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d public int integerReplacement(int n) { // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5 if (n == Integer.MAX_VALUE) { return 32; } int res = 0; while (n != 1) { // \u5f53 n \u4e0d\u8bba\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u53d8\u6210\u5076\u6570\uff0c\u6d88\u8017\u4e00\u4e2a\u64cd\u4f5c res++; if ((n & 1) == 0) { n >>= 1; } else { // \u8c01\u672b\u5c3e\u7684 0 \u591a\uff0c\u5c31\u53d8\u6210\u8c01 // \u53ea\u6709 3 \u8fd9\u4e00\u4e2a\u7279\u4f8b if (n == 3 || countTailZeros(n - 1) > countTailZeros(n + 1)) { n--; } else { n++; } } } return res; } // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // \u8fd9\u91cc\u5f88\u5173\u952e\uff01\uff01\uff01\u672b\u5c3e\u6709\u51e0\u4e2a 0 \u5c31\u8868\u793a\u53ef\u4ee5\u63d0\u53d6\u7684\u516c\u56e0\u5b50\uff01 // 110100 52 26 13 // \u8fd9\u4e2a\u505a\u6cd5\u6709\u70b9\"\u8fc7\"\uff0c\u662f\u5f88\u5145\u5206\u7684\u505a\u6cd5 private int countTailZeros(int num) { int count = 0; while (num % 2 == 0) { count++; num >>= 1; } return count; } public static void main(String[] args) { System.out.println(Integer.toBinaryString(Integer.MAX_VALUE)); } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u8fd9\u79cd\u5199\u6cd5\u8981\u4f7f\u7528\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\u3002"},{"location":"leetcode-0397-integer-replacement/#4","text":"public class Solution4 { // \u53c2\u8003\u8d44\u6599\uff1ahttps://segmentfault.com/a/1190000007318944 public int integerReplacement(int n) { long num = n; int res = 0; while (num != 1) { res++; if ((num & 1) == 0) { // \u662f\u5076\u6570\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u53f3\u79fb num >>= 1; } else { // \u662f\u5947\u6570\u7684\u65f6\u5019 // 2 \u7684\u4e8c\u8fdb\u5236\u662f 10\uff0c\u5373\u5982\u679c\u5012\u6570\u7b2c 2 \u4f4d\u662f 1 \u7684\u8bdd // \u52a0 1 \u80fd\u6d88\u8017\u6389\u66f4\u591a\u7684 1 // \u4f8b\u5982\uff1a // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 0\uff0c\u90a3\u4e48 n - 1 \u7684\u64cd\u4f5c\u6bd4 n + 1 \u7684\u64cd\u4f5c\u80fd\u6d88\u6389\u66f4\u591a\u7684 1 // 1001 + 1 = 1010 // 1001 - 1 = 1000 // \u5982\u679c\u5012\u6570\u7b2c\u4e8c\u4f4d\u662f 1\uff0c\u90a3\u4e48 n + 1 \u7684\u64cd\u4f5c\u80fd\u6bd4 n - 1\u7684\u64cd\u4f5c\u6d88\u6389\u66f4\u591a\u7684 1 // 1011 + 1 = 1100 // 1111 + 1 = 10000 if ((num & 2) != 0 && num != 3) { num++; } else { num--; } } } return res; } }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u8fd9\u79cd\u89e3\u6cd5\u66f4\u6df1\u5730\u6316\u6398\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u7684\u6027\u8d28\u3002"},{"location":"leetcode-0397-integer-replacement/#1_1","text":"","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0397-integer-replacement/#1_2","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0397-integer-replacement \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0398-random-pick-index/","text":"398. Random Pick Index \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002 \u6ce8\u610f\uff1a \u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002 \u793a\u4f8b: int[] nums = new int[] {1,2,3,3,3}; Solution solution = new Solution(nums); // pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002 solution.pick(3); // pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002 solution.pick(1); \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 398. Random Pick Index \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 398. \u968f\u673a\u6570\u7d22\u5f15 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0398-random-pick-index \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"398. Random Pick Index"},{"location":"leetcode-0398-random-pick-index/#398-random-pick-index","text":"","title":"398. Random Pick Index"},{"location":"leetcode-0398-random-pick-index/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002 \u6ce8\u610f\uff1a \u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002 \u793a\u4f8b: int[] nums = new int[] {1,2,3,3,3}; Solution solution = new Solution(nums); // pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002 solution.pick(3); // pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002 solution.pick(1); \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 398. Random Pick Index \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 398. \u968f\u673a\u6570\u7d22\u5f15 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0398-random-pick-index/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0398-random-pick-index/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0398-random-pick-index/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0398-random-pick-index \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/","text":"405. Convert a Number to Hexadecimal \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 \u8865\u7801\u8fd0\u7b97 \u65b9\u6cd5\u3002 \u6ce8\u610f: \u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd( a-f )\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002 \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26 '0' \u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002 \u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002 \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 26 \u8f93\u51fa: \"1a\" \u793a\u4f8b 2\uff1a \u8f93\u5165: -1 \u8f93\u51fa: \"ffffffff\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 405. Convert a Number to Hexadecimal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u4e5f\u6bd4\u8f83\u5178\u578b\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u4f4e 4 \u4f4d\u505a\u4e00\u4e2a\u6620\u5c04\u3002 \u7279\u522b\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u524d\u5bfc \u201c0\u201d\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u4ee5\u540e\u9ad8\u4f4d\u662f 0 \u7684\u60c5\u51b5\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { /** * \u7d22\u5f15\u5230\u5b57\u7b26\u7684\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u5b57\u5178\u7684\u529f\u80fd */ private static char[] map = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}; /** * 15 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5c31\u662f 1111 */ private static final int MASK = 15; public String toHex(int num) { // \u6ce8\u610f\u70b9 1\uff1a\u5bf9\u4e8e 0 \u7684\u7279\u6b8a\u5904\u7406 if (num == 0) { return \"0\"; } StringBuilder hex = new StringBuilder(); // \u6ce8\u610f\u70b9 2\uff1a\u5982\u679c\u9ad8\u4f4d\u5df2\u7ecf\u662f 0 \uff0c\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\uff0c\u8fd9\u662f\u9898\u76ee\u4e2d\u7684\u8981\u6c42 for (int i = 0; i < 8 && num != 0; i++) { // \u53d6\u6700\u4f4e 4 \u4f4d\uff0c\u8fdb\u884c\u8f6c\u6362 hex.insert(0, map[num & MASK]); // \u65e0\u7b26\u53f7\u53f3\u79fb 4 \u4f4d // 10001011 num >>>= 4; } return hex.toString(); } public static void main(String[] args) { Solution solution = new Solution(); int num = 16; String toHex = solution.toHex(num); System.out.println(toHex); System.out.println(-1); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0405-convert-a-number-to-hexadecimal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"405. Convert a Number to Hexadecimal"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/#405-convert-a-number-to-hexadecimal","text":"","title":"405. Convert a Number to Hexadecimal"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 \u8865\u7801\u8fd0\u7b97 \u65b9\u6cd5\u3002 \u6ce8\u610f: \u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd( a-f )\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002 \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26 '0' \u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002 \u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002 \u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 26 \u8f93\u51fa: \"1a\" \u793a\u4f8b 2\uff1a \u8f93\u5165: -1 \u8f93\u51fa: \"ffffffff\" \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 405. Convert a Number to Hexadecimal \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7684\u5199\u6cd5\u4e5f\u6bd4\u8f83\u5178\u578b\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u4f4e 4 \u4f4d\u505a\u4e00\u4e2a\u6620\u5c04\u3002 \u7279\u522b\u6ce8\u610f\u9898\u76ee\u4e2d\u8981\u6c42\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u524d\u5bfc \u201c0\u201d\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u4ee5\u540e\u9ad8\u4f4d\u662f 0 \u7684\u60c5\u51b5\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0405-convert-a-number-to-hexadecimal/#1","text":"public class Solution { /** * \u7d22\u5f15\u5230\u5b57\u7b26\u7684\u6620\u5c04\u8868\uff0c\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u5b57\u5178\u7684\u529f\u80fd */ private static char[] map = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}; /** * 15 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5c31\u662f 1111 */ private static final int MASK = 15; public String toHex(int num) { // \u6ce8\u610f\u70b9 1\uff1a\u5bf9\u4e8e 0 \u7684\u7279\u6b8a\u5904\u7406 if (num == 0) { return \"0\"; } StringBuilder hex = new StringBuilder(); // \u6ce8\u610f\u70b9 2\uff1a\u5982\u679c\u9ad8\u4f4d\u5df2\u7ecf\u662f 0 \uff0c\u5c31\u4e0d\u5fc5\u518d\u62fc\u63a5 0 \u4e86\uff0c\u8fd9\u662f\u9898\u76ee\u4e2d\u7684\u8981\u6c42 for (int i = 0; i < 8 && num != 0; i++) { // \u53d6\u6700\u4f4e 4 \u4f4d\uff0c\u8fdb\u884c\u8f6c\u6362 hex.insert(0, map[num & MASK]); // \u65e0\u7b26\u53f7\u53f3\u79fb 4 \u4f4d // 10001011 num >>>= 4; } return hex.toString(); } public static void main(String[] args) { Solution solution = new Solution(); int num = 16; String toHex = solution.toHex(num); System.out.println(toHex); System.out.println(-1); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0405-convert-a-number-to-hexadecimal \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0415-add-strings/","text":"415. Add Strings \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 num1 \u548c num2 \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002 \u6ce8\u610f\uff1a num1 \u548c num2 \u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100. num1 \u548c num2 \u90fd\u53ea\u5305\u542b\u6570\u5b57 0-9 . num1 \u548c num2 \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c \u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 415. Add Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 415. \u5b57\u7b26\u4e32\u76f8\u52a0 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7b97\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u4e86\uff0c\u548c LeetCode \u7b2c 2 \u9898\u662f\u4e00\u7c7b\u95ee\u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public String addStrings(String num1, String num2) { StringBuilder stringBuilder = new StringBuilder(); int len1 = num1.length(); int len2 = num2.length(); // \u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c if (len1 == 0) { return num2; } if (len2 == 0) { return num1; } int index1 = len1 - 1; int index2 = len2 - 1; int sum = 0; while (index1 >= 0 || index2 >= 0) { if (index1 >= 0) { int a = num1.charAt(index1) - '0'; sum += a; index1--; } if (index2 >= 0) { int b = num2.charAt(index2) - '0'; sum += b; index2--; } stringBuilder.append(sum % 10); // \u8868\u793a\u662f\u5426\u8fdb\u4f4d sum /= 10; } // \u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86 if (sum == 1) { stringBuilder.append(1); } return stringBuilder.reverse().toString(); } public static void main(String[] args) { Solution solution = new Solution(); String num1 = \"1234\"; String num2 = \"5678\"; String addStrings = solution.addStrings(num1, num2); System.out.println(addStrings); System.out.println(Integer.valueOf(num1) + Integer.valueOf(num2)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0415-add-strings \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"415. Add Strings"},{"location":"leetcode-0415-add-strings/#415-add-strings","text":"","title":"415. Add Strings"},{"location":"leetcode-0415-add-strings/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 num1 \u548c num2 \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002 \u6ce8\u610f\uff1a num1 \u548c num2 \u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100. num1 \u548c num2 \u90fd\u53ea\u5305\u542b\u6570\u5b57 0-9 . num1 \u548c num2 \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c \u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 415. Add Strings \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 415. \u5b57\u7b26\u4e32\u76f8\u52a0 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0415-add-strings/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u7b97\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u4e86\uff0c\u548c LeetCode \u7b2c 2 \u9898\u662f\u4e00\u7c7b\u95ee\u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0415-add-strings/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0415-add-strings/#1","text":"public class Solution { public String addStrings(String num1, String num2) { StringBuilder stringBuilder = new StringBuilder(); int len1 = num1.length(); int len2 = num2.length(); // \u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c if (len1 == 0) { return num2; } if (len2 == 0) { return num1; } int index1 = len1 - 1; int index2 = len2 - 1; int sum = 0; while (index1 >= 0 || index2 >= 0) { if (index1 >= 0) { int a = num1.charAt(index1) - '0'; sum += a; index1--; } if (index2 >= 0) { int b = num2.charAt(index2) - '0'; sum += b; index2--; } stringBuilder.append(sum % 10); // \u8868\u793a\u662f\u5426\u8fdb\u4f4d sum /= 10; } // \u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u8bb0\u4e86 if (sum == 1) { stringBuilder.append(1); } return stringBuilder.reverse().toString(); } public static void main(String[] args) { Solution solution = new Solution(); String num1 = \"1234\"; String num2 = \"5678\"; String addStrings = solution.addStrings(num1, num2); System.out.println(addStrings); System.out.println(Integer.valueOf(num1) + Integer.valueOf(num2)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0415-add-strings \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/","text":"421. Maximum XOR of Two Numbers in an Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a 0 , a 1 , a 2 , \u2026 , a n-1 \uff0c\u5176\u4e2d 0 \u2264 a i < 2 31 \u3002 \u627e\u5230 a i \u548ca j \u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 \u2264 i , j < n \u3002 \u4f60\u80fd\u5728O( n )\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u793a\u4f8b: \u8f93\u5165: [3, 10, 5, 25, 2, 8] \u8f93\u51fa: 28 \u89e3\u91ca: \u6700\u5927\u7684\u7ed3\u679c\u662f 5 ^ 25 = 28. \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 421. Maximum XOR of Two Numbers in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u4f46\u4e0d\u63a8\u8350\u3002 public class Solution { public int findMaximumXOR(int[] nums) { int len = nums.length; int res = 0; // i \u5230 len -2 \u5c31\u53ef\u4ee5\u4e86 for (int i = 0; i < len - 1; i++) { for (int j = i + 1; j < len; j++) { res = Math.max(res, nums[i] ^ nums[j]); } } return res; } } \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u51b3\u5b9a\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\u3002 import java.util.HashSet; import java.util.Set; public class Solution2 { public int findMaximumXOR(int[] nums) { int res = 0; int mask = 0; for (int i = 31; i >= 0; i--) { // \u6ce8\u610f\u70b91\uff1a\u6ce8\u610f\u4fdd\u7559\u524d\u7f00\u7684\u65b9\u6cd5\uff0cmask \u662f\u8fd9\u6837\u5f97\u6765\u7684 // \u7528\u5f02\u6216\u4e5f\u662f\u53ef\u4ee5\u7684 mask = mask ^ (1 << i); mask = mask | (1 << i); Set<Integer> set = new HashSet<>(); for (int num : nums) { // \u6ce8\u610f\u70b92\uff1a\u8fd9\u91cc\u4f7f\u7528 & \uff0c\u4fdd\u7559\u524d\u7f00\u7684\u610f\u601d\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09 set.add(num & mask); } // \u8fd9\u91cc\u5148\u5047\u5b9a\u7b2c n \u4f4d\u4e3a 1 \uff0c\u524d n-1 \u4f4d res \u4e3a\u4e4b\u524d\u8fed\u4ee3\u6c42\u5f97 int temp = res | (1 << i); for (Integer prefix : set) { // \u5229\u7528\u6027\u8d28 a ^ b = c \uff0c\u5219 a ^ c = b\uff0c\u4e14 b ^ c = a if (set.contains(prefix ^ temp)) { res = temp; break; } } } return res; } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002 public class Solution3 { // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html private class TrieNode { private TrieNode[] next; public TrieNode() { next = new TrieNode[2]; } } public int findMaximumXOR(int[] nums) { int len = nums.length; if (len == 0) { return 0; } TrieNode root = new TrieNode(); // \u5c06\u6240\u6709\u7684 num \u6784\u5efa\u5230 Trie \u6570\u4e2d for (int num : nums) { TrieNode node = root; for (int i = 30; i >= 0; i--) { // \u770b\u770b\u6700\u9ad8\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0 int cur = (num >>> i) & 1; if (node.next[cur] == null) { node.next[cur] = new TrieNode(); } node = node.next[cur]; } } int res = 0; for (int num : nums) { TrieNode node = root; int xor = 0; for (int i = 30; i >= 0; i--) { int cur = (num >>> i) & 1; if (node.next[cur ^ 1] != null) { xor |= (1 << i); node = node.next[cur ^ 1]; } else { node = node.next[cur]; } } res = Math.max(res, xor); } return res; } } \u53c2\u8003\u89e3\u7b544\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002 public class Solution4 { // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html private class TrieNode { private TrieNode[] next; public TrieNode() { this.next = new TrieNode[2]; } } public int findMaximumXOR(int[] nums) { int len = nums.length; if (len == 0) { return 0; } TrieNode root = new TrieNode(); int res = 0; for (int num : nums) { int xor = 0; TrieNode insert = root; TrieNode search = root; for (int i = 30; i >= 0; i--) { int bit = (num >>> i) & 1; // 1 \u53d8\u6210 0 \uff0c0 \u53d8\u6210 1 int rbit = bit ^ 1; if (insert.next[bit] == null) { insert.next[bit] = new TrieNode(); } insert = insert.next[bit]; if (search != null) { if (search.next[rbit] != null) { xor += (1 << i); search = search.next[rbit]; } else { search = search.next[bit]; } } } res = Math.max(res, xor); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0421-maximum-xor-of-two-numbers-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"421. Maximum XOR of Two Numbers in an Array"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#421-maximum-xor-of-two-numbers-in-an-array","text":"","title":"421. Maximum XOR of Two Numbers in an Array"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a 0 , a 1 , a 2 , \u2026 , a n-1 \uff0c\u5176\u4e2d 0 \u2264 a i < 2 31 \u3002 \u627e\u5230 a i \u548ca j \u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 \u2264 i , j < n \u3002 \u4f60\u80fd\u5728O( n )\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u793a\u4f8b: \u8f93\u5165: [3, 10, 5, 25, 2, 8] \u8f93\u51fa: 28 \u89e3\u91ca: \u6700\u5927\u7684\u7ed3\u679c\u662f 5 ^ 25 = 28. \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 421. Maximum XOR of Two Numbers in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#1","text":"public class Solution { public int findMaximumXOR(int[] nums) { int len = nums.length; int res = 0; // i \u5230 len -2 \u5c31\u53ef\u4ee5\u4e86 for (int i = 0; i < len - 1; i++) { for (int j = i + 1; j < len; j++) { res = Math.max(res, nums[i] ^ nums[j]); } } return res; } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u4f46\u4e0d\u63a8\u8350\u3002"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#2-1-0","text":"import java.util.HashSet; import java.util.Set; public class Solution2 { public int findMaximumXOR(int[] nums) { int res = 0; int mask = 0; for (int i = 31; i >= 0; i--) { // \u6ce8\u610f\u70b91\uff1a\u6ce8\u610f\u4fdd\u7559\u524d\u7f00\u7684\u65b9\u6cd5\uff0cmask \u662f\u8fd9\u6837\u5f97\u6765\u7684 // \u7528\u5f02\u6216\u4e5f\u662f\u53ef\u4ee5\u7684 mask = mask ^ (1 << i); mask = mask | (1 << i); Set<Integer> set = new HashSet<>(); for (int num : nums) { // \u6ce8\u610f\u70b92\uff1a\u8fd9\u91cc\u4f7f\u7528 & \uff0c\u4fdd\u7559\u524d\u7f00\u7684\u610f\u601d\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09 set.add(num & mask); } // \u8fd9\u91cc\u5148\u5047\u5b9a\u7b2c n \u4f4d\u4e3a 1 \uff0c\u524d n-1 \u4f4d res \u4e3a\u4e4b\u524d\u8fed\u4ee3\u6c42\u5f97 int temp = res | (1 << i); for (Integer prefix : set) { // \u5229\u7528\u6027\u8d28 a ^ b = c \uff0c\u5219 a ^ c = b\uff0c\u4e14 b ^ c = a if (set.contains(prefix ^ temp)) { res = temp; break; } } } return res; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u51b3\u5b9a\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0\u3002"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#3trie","text":"public class Solution3 { // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html private class TrieNode { private TrieNode[] next; public TrieNode() { next = new TrieNode[2]; } } public int findMaximumXOR(int[] nums) { int len = nums.length; if (len == 0) { return 0; } TrieNode root = new TrieNode(); // \u5c06\u6240\u6709\u7684 num \u6784\u5efa\u5230 Trie \u6570\u4e2d for (int num : nums) { TrieNode node = root; for (int i = 30; i >= 0; i--) { // \u770b\u770b\u6700\u9ad8\u4f4d\u4e0a\u662f 1 \u8fd8\u662f 0 int cur = (num >>> i) & 1; if (node.next[cur] == null) { node.next[cur] = new TrieNode(); } node = node.next[cur]; } } int res = 0; for (int num : nums) { TrieNode node = root; int xor = 0; for (int i = 30; i >= 0; i--) { int cur = (num >>> i) & 1; if (node.next[cur ^ 1] != null) { xor |= (1 << i); node = node.next[cur ^ 1]; } else { node = node.next[cur]; } } res = Math.max(res, xor); } return res; } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002"},{"location":"leetcode-0421-maximum-xor-of-two-numbers-in-an-array/#4trie","text":"public class Solution4 { // \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/njufl/p/6403043.html private class TrieNode { private TrieNode[] next; public TrieNode() { this.next = new TrieNode[2]; } } public int findMaximumXOR(int[] nums) { int len = nums.length; if (len == 0) { return 0; } TrieNode root = new TrieNode(); int res = 0; for (int num : nums) { int xor = 0; TrieNode insert = root; TrieNode search = root; for (int i = 30; i >= 0; i--) { int bit = (num >>> i) & 1; // 1 \u53d8\u6210 0 \uff0c0 \u53d8\u6210 1 int rbit = bit ^ 1; if (insert.next[bit] == null) { insert.next[bit] = new TrieNode(); } insert = insert.next[bit]; if (search != null) { if (search.next[rbit] != null) { xor += (1 << i); search = search.next[rbit]; } else { search = search.next[bit]; } } } res = Math.max(res, xor); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0421-maximum-xor-of-two-numbers-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u4f7f\u7528\u5b57\u5178\u6811\uff08Trie\uff09\u3002"},{"location":"leetcode-0435-non-overlapping-intervals/","text":"435. Non-overlapping Intervals \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002 \u6ce8\u610f: \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002 \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [1,2], [2,3], [3,4], [1,3] ] \u8f93\u51fa: 1 \u89e3\u91ca: \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 2: \u8f93\u5165: [ [1,2], [1,2], [1,2] ] \u8f93\u51fa: 2 \u89e3\u91ca: \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 3: \u8f93\u5165: [ [1,2], [2,3] ] \u8f93\u51fa: 0 \u89e3\u91ca: \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 435. Non-overlapping Intervals \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 435. \u65e0\u91cd\u53e0\u533a\u95f4 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u9996\u5148\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u8fd9\u4e9b\u5b50\u533a\u95f4\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e2a\u4e0d\u91cd\u5408\u7684\u5b50\u533a\u95f4\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u7528\u7c7b\u4f3c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e00\u6837\u7684\u601d\u8def\u6765\u6c42\u89e3\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; import java.util.Comparator; class Interval { int start; int end; Interval() { start = 0; end = 0; } Interval(int s, int e) { start = s; end = e; } } /** * \u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\uff1a * \u5148\u5c06\u539f\u95ee\u9898\u8f6c\u6362\u6210\uff0c\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u533a\u95f4 * \u7136\u540e\u4e3a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3 * \u6700\u540e\u5c06\u5b50\u533a\u95f4\u7684\u6570\u91cf - \u4e0a\u4e00\u6b65\u6240\u5f97\u7684\u7ed3\u679c */ public class Solution { public int eraseOverlapIntervals(Interval[] intervals) { int ilen = intervals.length; if (ilen == 0) { return 0; } Arrays.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { if (o1.start != o2.start) { return o1.start - o2.start; } return o1.end - o2.end; } }); // dp[i] \u8868\u793a\u4ee5 intervals[i] \u4e3a\u7ed3\u5c3e\u7684\u533a\u95f4\u80fd\u591f\u6210\u7684\u6700\u957f\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u5e8f\u5217\u6709\u51e0\u4e2a int[] dp = new int[ilen]; Arrays.fill(dp, 1); for (int i = 1; i < ilen; i++) { for (int j = 0; j < i; j++) { if (intervals[i].start >= intervals[j].end) { dp[i] = Integer.max(dp[i], dp[j] + 1); } } } // System.out.println(Arrays.toString(dp)); int res = dp[0]; for (int i = 1; i < ilen; i++) { res = Integer.max(res, dp[i]); } return ilen - res; } } \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b542 import java.util.Arrays; import java.util.Comparator; /** * \u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5982\u679c\u533a\u95f4\u7ed3\u5c3e\u5f97\u8d8a\u65e9\uff0c\u540e\u9762\u80fd\u591f\u63a5\u4e0a\u4e00\u4e2a\u65b0\u533a\u95f4\u7684\u6982\u7387\u5c31\u8d8a\u5927 */ public class Solution2 { public int eraseOverlapIntervals(Interval[] intervals) { int ilen = intervals.length; if (ilen == 0) { return 0; } Arrays.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { if (o1.end != o2.end) { return o1.end - o2.end; } return o1.start - o2.start; } }); int res = 1; int pre = 0; for (int i = 1; i < ilen; i++) { if (intervals[i].start >= intervals[pre].end) { res++; pre = i; } } return ilen - res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0435-non-overlapping-intervals \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"435. Non-overlapping Intervals"},{"location":"leetcode-0435-non-overlapping-intervals/#435-non-overlapping-intervals","text":"","title":"435. Non-overlapping Intervals"},{"location":"leetcode-0435-non-overlapping-intervals/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002 \u6ce8\u610f: \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002 \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [1,2], [2,3], [3,4], [1,3] ] \u8f93\u51fa: 1 \u89e3\u91ca: \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 2: \u8f93\u5165: [ [1,2], [1,2], [1,2] ] \u8f93\u51fa: 2 \u89e3\u91ca: \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 3: \u8f93\u5165: [ [1,2], [2,3] ] \u8f93\u51fa: 0 \u89e3\u91ca: \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 435. Non-overlapping Intervals \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 435. \u65e0\u91cd\u53e0\u533a\u95f4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0435-non-overlapping-intervals/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u9996\u5148\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u8fd9\u4e9b\u5b50\u533a\u95f4\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e2a\u4e0d\u91cd\u5408\u7684\u5b50\u533a\u95f4\u3002 \u601d\u8def1\uff1a\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u7528\u7c7b\u4f3c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e00\u6837\u7684\u601d\u8def\u6765\u6c42\u89e3\u3002 \u601d\u8def2\uff1a\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0435-non-overlapping-intervals/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0435-non-overlapping-intervals/#1","text":"import java.util.Arrays; import java.util.Comparator; class Interval { int start; int end; Interval() { start = 0; end = 0; } Interval(int s, int e) { start = s; end = e; } } /** * \u52a8\u6001\u89c4\u5212\u7684\u5199\u6cd5\uff1a * \u5148\u5c06\u539f\u95ee\u9898\u8f6c\u6362\u6210\uff0c\u6700\u591a\u53ef\u4ee5\u6784\u6210\u591a\u5c11\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u533a\u95f4 * \u7136\u540e\u4e3a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3 * \u6700\u540e\u5c06\u5b50\u533a\u95f4\u7684\u6570\u91cf - \u4e0a\u4e00\u6b65\u6240\u5f97\u7684\u7ed3\u679c */ public class Solution { public int eraseOverlapIntervals(Interval[] intervals) { int ilen = intervals.length; if (ilen == 0) { return 0; } Arrays.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { if (o1.start != o2.start) { return o1.start - o2.start; } return o1.end - o2.end; } }); // dp[i] \u8868\u793a\u4ee5 intervals[i] \u4e3a\u7ed3\u5c3e\u7684\u533a\u95f4\u80fd\u591f\u6210\u7684\u6700\u957f\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u5e8f\u5217\u6709\u51e0\u4e2a int[] dp = new int[ilen]; Arrays.fill(dp, 1); for (int i = 1; i < ilen; i++) { for (int j = 0; j < i; j++) { if (intervals[i].start >= intervals[j].end) { dp[i] = Integer.max(dp[i], dp[j] + 1); } } } // System.out.println(Arrays.toString(dp)); int res = dp[0]; for (int i = 1; i < ilen; i++) { res = Integer.max(res, dp[i]); } return ilen - res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0435-non-overlapping-intervals/#_4","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0435-non-overlapping-intervals/#2","text":"import java.util.Arrays; import java.util.Comparator; /** * \u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5982\u679c\u533a\u95f4\u7ed3\u5c3e\u5f97\u8d8a\u65e9\uff0c\u540e\u9762\u80fd\u591f\u63a5\u4e0a\u4e00\u4e2a\u65b0\u533a\u95f4\u7684\u6982\u7387\u5c31\u8d8a\u5927 */ public class Solution2 { public int eraseOverlapIntervals(Interval[] intervals) { int ilen = intervals.length; if (ilen == 0) { return 0; } Arrays.sort(intervals, new Comparator<Interval>() { @Override public int compare(Interval o1, Interval o2) { if (o1.end != o2.end) { return o1.end - o2.end; } return o1.start - o2.start; } }); int res = 1; int pre = 0; for (int i = 1; i < ilen; i++) { if (intervals[i].start >= intervals[pre].end) { res++; pre = i; } } return ilen - res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0435-non-overlapping-intervals \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/","text":"438. Find All Anagrams in a String \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 p \uff0c\u627e\u5230 s \u4e2d\u6240\u6709\u662f p \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002 \u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002 \u8bf4\u660e\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s: \"cbaebabacd\" p: \"abc\" \u8f93\u51fa: [0, 6] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 2: \u8f93\u5165: s: \"abab\" p: \"ab\" \u8f93\u51fa: [0, 1, 2] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 438. Find All Anagrams in a String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u6211\u7528\u4e86\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\u624d\u628a\u8fd9\u4e2a\u89e3\u7b54\u5199\u6e05\u695a\uff0c\u786e\u5b9e\u6709\u70b9\u7ed5\u3002 import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { // \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u89e3\u51b3\uff0c\u6807\u8bb0\u4e3a\u7b80\u5355\u54e6 // s = \"cbaebabacd\"\uff0cp = \"abc\" // \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/chenwuji91/article/details/52981530 public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5 if (s == null || s.length() == 0 || p == null || p.length() == 0) { return res; } // \u8fd9\u4e2a hash \u8868\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5373\u8ba1\u6570\u503c // ASCII \u7684\u957f\u5ea6\u662f 256 \u4f4d int[] hash = new int[256]; // \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c int l = 0; // \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c int r = 0; // \u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6 int distance = p.length(); for (char c : p.toCharArray()) { hash[c]++; } int sLen = s.length(); while (r < sLen) { if (hash[s.charAt(r)] > 0) { // \u5438\u7eb3\u8fdb\u6765\u4ee5\u540e\uff0c\u8bf4\u660e\u5dee\u8ddd\u51cf\u5c11 1 distance--; } // \u5982\u679c\u662f\u7b49\u4e8e 0 \u7684\u5c31\u8bf4\u660e\u6ca1\u6709\u51fa\u73b0\u5728 p \u4e2d\uff0c\u4e5f --\uff0c\u4ee5\u540e\u5de6\u8fb9\u754c\u626b\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u5b83\u4e0d\u5728 p \u6307\u5b9a\u7684\u8303\u56f4\u4e2d\u4e86 // \u4e0d\u7ba1\u5f53\u524d\u5b57\u7b26\u5728\u4e0d\u5728 hash \u8868\u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\uff08\u542c\u4e0b\u6765\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09 hash[s.charAt(r)]--; r++; if (distance == 0) { // \u5dee\u8ddd\u4e3a 0 \u4e86\uff0c\u5c31\u8868\u793a\u662f\u4e00\u4e2a\u7ed3\u679c\uff0c\u5de6\u7aef\u70b9\u52a0\u5165\u7ed3\u679c\u96c6 res.add(l); } if (r - l == p.length()) { // \u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u5b57\u7b26\u5728 p \u4e2d\uff0c\u90a3\u4e9b\u662f\u8d1f\u7684\u5b57\u7b26\u8bf4\u660e\u4e0d\u5728 p \u4e2d if (hash[s.charAt(l)] >= 0) { // \u5dee\u8ddd\u53c8\u62c9\u5927\u4e86 1 // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\uff0c\u5dee\u8ddd\u52a0\u5927 1 distance++; } // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3 // \u4e0d\u7ba1 \u5b57\u7b26 \u5728\u4e0d\u5728 p \u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91 hash[s.charAt(l)]++; l++; } } // System.out.println(Arrays.toString(hash)); return res; } // c b a e b a b a c d // 0 1 2 3 4 public static void main(String[] args) { Solution solution = new Solution(); String s = \"cbaebabacd\"; String p = \"abc\"; List<Integer> anagrams = solution.findAnagrams(s, p); System.out.println(anagrams); } } \u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002 import java.util.ArrayList; import java.util.List; public class Solution2 { public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\uff0c\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd int[] chars = new int[26]; if (s == null || s.length() == 0 || p == null || p.length() == 0) { return res; } for (char c : p.toCharArray()) { chars[c - 'a']++; } int left = 0; int right = 0; int distance = p.length(); while (right < s.length()) { if (chars[s.charAt(right) - 'a'] > 0) { distance--; } chars[s.charAt(right) - 'a']--; right++; if (distance == 0) { res.add(left); } if (right - left == p.length()) { if (chars[s.charAt(left) - 'a'] >= 0) { distance++; } chars[s.charAt(left) - 'a']++; left++; } } return res; } } \u53c2\u8003\u89e3\u7b543\uff1a import java.util.ArrayList; import java.util.List; public class Solution3 { // \u53c2\u8003\u4e86\u5c0f Q \u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd8\u662f\u6ed1\u52a8\u7a97\u53e3 public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); int[] cntp = new int[256]; int[] cnts = new int[256]; for (char c : p.toCharArray()) { cntp[c]++; } int same = 0; for (int i = 0; i < 256; i++) { if (cntp[i] == 0) { same++; } } int plen = p.length(); int slen = s.length(); for (int i = 0; i < slen; i++) { int curChar = s.charAt(i); cnts[curChar]++; if (cnts[curChar] == cntp[curChar]) { same++; } else if (cnts[curChar] == cntp[curChar] + 1) { // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86 same--; } // \u5f53 i>= p.lenght() \u7684\u65f6\u5019\uff0c\u5de6\u8fb9\u7a97\u53e3\u8981\u8003\u8651\u5de6\u79fb\u4e86 if (i >= plen) { int deleteChar = s.charAt(i - plen); cnts[deleteChar]--; if (cnts[deleteChar] == cntp[deleteChar]) { same++; } else if (cnts[deleteChar] == cntp[deleteChar] - 1) { // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86 same--; } } if (same == 256) { res.add(i - plen + 1); } } return res; } } \u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b543 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002 import java.util.ArrayList; import java.util.List; public class Solution5 { // \u8fd9\u79cd\u89e3\u6cd5\u4ece\u8bed\u4e49\u4e0a\u66f4\u597d\u7406\u89e3\u4e00\u4e9b public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); int[] cntp = new int[26]; int[] cnts = new int[26]; int plen = p.length(); int slen = s.length(); // \u6570\u7ec4 cntp \u5728\u9884\u5904\u7406\u4ee5\u540e\u662f\u6ca1\u6709\u53d8\u5316\u7684 for (int i = 0; i < plen; i++) { cntp[p.charAt(i) - 'a']++; } int same = 0; for (int i = 0; i < 26; i++) { if (cntp[i] == 0) { same++; } } for (int i = 0; i < slen; i++) { char curChar = s.charAt(i); cnts[curChar - 'a']++; if (cnts[curChar - 'a'] == cntp[curChar - 'a']) { same++; } else if (cnts[curChar - 'a'] == cntp[curChar - 'a'] + 1) { same--; } if (i >= plen) { int deleteIndex = i - plen; char deleteChar = s.charAt(deleteIndex); cnts[deleteChar - 'a']--; if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a']) { same++; } else if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a'] - 1) { same--; } } if (same == 26) { res.add(i - plen + 1); } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0438-find-all-anagrams-in-a-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"438. Find All Anagrams in a String"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#438-find-all-anagrams-in-a-string","text":"","title":"438. Find All Anagrams in a String"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 p \uff0c\u627e\u5230 s \u4e2d\u6240\u6709\u662f p \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002 \u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002 \u8bf4\u660e\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s: \"cbaebabacd\" p: \"abc\" \u8f93\u51fa: [0, 6] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 2: \u8f93\u5165: s: \"abab\" p: \"ab\" \u8f93\u51fa: [0, 1, 2] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 438. Find All Anagrams in a String \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#1","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { // \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u89e3\u51b3\uff0c\u6807\u8bb0\u4e3a\u7b80\u5355\u54e6 // s = \"cbaebabacd\"\uff0cp = \"abc\" // \u53c2\u8003\u8d44\u6599\uff1ahttps://blog.csdn.net/chenwuji91/article/details/52981530 public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); // \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5 if (s == null || s.length() == 0 || p == null || p.length() == 0) { return res; } // \u8fd9\u4e2a hash \u8868\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5373\u8ba1\u6570\u503c // ASCII \u7684\u957f\u5ea6\u662f 256 \u4f4d int[] hash = new int[256]; // \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c int l = 0; // \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c int r = 0; // \u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6 int distance = p.length(); for (char c : p.toCharArray()) { hash[c]++; } int sLen = s.length(); while (r < sLen) { if (hash[s.charAt(r)] > 0) { // \u5438\u7eb3\u8fdb\u6765\u4ee5\u540e\uff0c\u8bf4\u660e\u5dee\u8ddd\u51cf\u5c11 1 distance--; } // \u5982\u679c\u662f\u7b49\u4e8e 0 \u7684\u5c31\u8bf4\u660e\u6ca1\u6709\u51fa\u73b0\u5728 p \u4e2d\uff0c\u4e5f --\uff0c\u4ee5\u540e\u5de6\u8fb9\u754c\u626b\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u77e5\u9053\u5b83\u4e0d\u5728 p \u6307\u5b9a\u7684\u8303\u56f4\u4e2d\u4e86 // \u4e0d\u7ba1\u5f53\u524d\u5b57\u7b26\u5728\u4e0d\u5728 hash \u8868\u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91\uff08\u542c\u4e0b\u6765\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09 hash[s.charAt(r)]--; r++; if (distance == 0) { // \u5dee\u8ddd\u4e3a 0 \u4e86\uff0c\u5c31\u8868\u793a\u662f\u4e00\u4e2a\u7ed3\u679c\uff0c\u5de6\u7aef\u70b9\u52a0\u5165\u7ed3\u679c\u96c6 res.add(l); } if (r - l == p.length()) { // \u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u5b57\u7b26\u5728 p \u4e2d\uff0c\u90a3\u4e9b\u662f\u8d1f\u7684\u5b57\u7b26\u8bf4\u660e\u4e0d\u5728 p \u4e2d if (hash[s.charAt(l)] >= 0) { // \u5dee\u8ddd\u53c8\u62c9\u5927\u4e86 1 // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3\uff0c\u5dee\u8ddd\u52a0\u5927 1 distance++; } // \u5de6\u7aef\u70b9\u79bb\u5f00\u6ed1\u52a8\u7a97\u53e3 // \u4e0d\u7ba1 \u5b57\u7b26 \u5728\u4e0d\u5728 p \u4e2d\uff0c\u90fd\u9002\u7528\u4e8e\u8fd9\u4e2a\u903b\u8f91 hash[s.charAt(l)]++; l++; } } // System.out.println(Arrays.toString(hash)); return res; } // c b a e b a b a c d // 0 1 2 3 4 public static void main(String[] args) { Solution solution = new Solution(); String s = \"cbaebabacd\"; String p = \"abc\"; List<Integer> anagrams = solution.findAnagrams(s, p); System.out.println(anagrams); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u6211\u7528\u4e86\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\u624d\u628a\u8fd9\u4e2a\u89e3\u7b54\u5199\u6e05\u695a\uff0c\u786e\u5b9e\u6709\u70b9\u7ed5\u3002"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#21","text":"import java.util.ArrayList; import java.util.List; public class Solution2 { public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); // \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\uff0c\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd int[] chars = new int[26]; if (s == null || s.length() == 0 || p == null || p.length() == 0) { return res; } for (char c : p.toCharArray()) { chars[c - 'a']++; } int left = 0; int right = 0; int distance = p.length(); while (right < s.length()) { if (chars[s.charAt(right) - 'a'] > 0) { distance--; } chars[s.charAt(right) - 'a']--; right++; if (distance == 0) { res.add(left); } if (right - left == p.length()) { if (chars[s.charAt(left) - 'a'] >= 0) { distance++; } chars[s.charAt(left) - 'a']++; left++; } } return res; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u548c\u53c2\u8003\u89e3\u7b541 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#3","text":"import java.util.ArrayList; import java.util.List; public class Solution3 { // \u53c2\u8003\u4e86\u5c0f Q \u7684\u601d\u8def\uff0c\u5176\u5b9e\u8fd8\u662f\u6ed1\u52a8\u7a97\u53e3 public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); int[] cntp = new int[256]; int[] cnts = new int[256]; for (char c : p.toCharArray()) { cntp[c]++; } int same = 0; for (int i = 0; i < 256; i++) { if (cntp[i] == 0) { same++; } } int plen = p.length(); int slen = s.length(); for (int i = 0; i < slen; i++) { int curChar = s.charAt(i); cnts[curChar]++; if (cnts[curChar] == cntp[curChar]) { same++; } else if (cnts[curChar] == cntp[curChar] + 1) { // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86 same--; } // \u5f53 i>= p.lenght() \u7684\u65f6\u5019\uff0c\u5de6\u8fb9\u7a97\u53e3\u8981\u8003\u8651\u5de6\u79fb\u4e86 if (i >= plen) { int deleteChar = s.charAt(i - plen); cnts[deleteChar]--; if (cnts[deleteChar] == cntp[deleteChar]) { same++; } else if (cnts[deleteChar] == cntp[deleteChar] - 1) { // \u8d85\u8fc7\u4e86 same \u5c31\u51cf 1\uff0c\u518d\u8d85\u8fc7\u53cd\u6b63\u5df2\u7ecf\u51cf\u4e86 1 \uff0c\u5c31\u4e0d\u7528\u518d\u51cf\u4e86 same--; } } if (same == 256) { res.add(i - plen + 1); } } return res; } }","title":"\u53c2\u8003\u89e3\u7b543\uff1a"},{"location":"leetcode-0438-find-all-anagrams-in-a-string/#43","text":"import java.util.ArrayList; import java.util.List; public class Solution5 { // \u8fd9\u79cd\u89e3\u6cd5\u4ece\u8bed\u4e49\u4e0a\u66f4\u597d\u7406\u89e3\u4e00\u4e9b public List<Integer> findAnagrams(String s, String p) { List<Integer> res = new ArrayList<>(); int[] cntp = new int[26]; int[] cnts = new int[26]; int plen = p.length(); int slen = s.length(); // \u6570\u7ec4 cntp \u5728\u9884\u5904\u7406\u4ee5\u540e\u662f\u6ca1\u6709\u53d8\u5316\u7684 for (int i = 0; i < plen; i++) { cntp[p.charAt(i) - 'a']++; } int same = 0; for (int i = 0; i < 26; i++) { if (cntp[i] == 0) { same++; } } for (int i = 0; i < slen; i++) { char curChar = s.charAt(i); cnts[curChar - 'a']++; if (cnts[curChar - 'a'] == cntp[curChar - 'a']) { same++; } else if (cnts[curChar - 'a'] == cntp[curChar - 'a'] + 1) { same--; } if (i >= plen) { int deleteIndex = i - plen; char deleteChar = s.charAt(deleteIndex); cnts[deleteChar - 'a']--; if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a']) { same++; } else if (cnts[deleteChar - 'a'] == cntp[deleteChar - 'a'] - 1) { same--; } } if (same == 26) { res.add(i - plen + 1); } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0438-find-all-anagrams-in-a-string \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b544\uff1a\u548c\u53c2\u8003\u89e3\u7b543 \u4e00\u6837\u7684\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u4e86\u66f4\u5c11\u7684\u7a7a\u95f4\u3002"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/","text":"442. Find All Duplicates in an Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 \u2264 a[i] \u2264 n \uff08 n \u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0 \u4e24\u6b21 \u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0 \u4e00\u6b21 \u3002 \u627e\u5230\u6240\u6709\u51fa\u73b0 \u4e24\u6b21 \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O( n )\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u793a\u4f8b\uff1a \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [2,3] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 442. Find All Duplicates in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; public class Solution { public List<Integer> findDuplicates(int[] nums) { List<Integer> res = new ArrayList<>(); int len = nums.length; if (len == 0) { return res; } for (int i = 0; i < len; i++) { while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) { swap(nums, i, nums[i] - 1); } } for (int i = 0; i < len; i++) { if (nums[i] - 1 != i) { res.add(nums[i]); } } return res; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { int[] nums = {4, 3, 2, 7, 8, 2, 3, 1}; Solution solution = new Solution(); List<Integer> duplicates = solution.findDuplicates(nums); System.out.println(duplicates); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0442-find-all-duplicates-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"442. Find All Duplicates in an Array"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/#442-find-all-duplicates-in-an-array","text":"","title":"442. Find All Duplicates in an Array"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 \u2264 a[i] \u2264 n \uff08 n \u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0 \u4e24\u6b21 \u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0 \u4e00\u6b21 \u3002 \u627e\u5230\u6240\u6709\u51fa\u73b0 \u4e24\u6b21 \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O( n )\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \u793a\u4f8b\uff1a \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [2,3] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 442. Find All Duplicates in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0442-find-all-duplicates-in-an-array/#1","text":"import java.util.ArrayList; import java.util.List; public class Solution { public List<Integer> findDuplicates(int[] nums) { List<Integer> res = new ArrayList<>(); int len = nums.length; if (len == 0) { return res; } for (int i = 0; i < len; i++) { while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) { swap(nums, i, nums[i] - 1); } } for (int i = 0; i < len; i++) { if (nums[i] - 1 != i) { res.add(nums[i]); } } return res; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { int[] nums = {4, 3, 2, 7, 8, 2, 3, 1}; Solution solution = new Solution(); List<Integer> duplicates = solution.findDuplicates(nums); System.out.println(duplicates); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0442-find-all-duplicates-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0445-add-two-numbers-ii/","text":"445. Add Two Numbers II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002 \u793a\u4f8b: \u8f93\u5165: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa: 7 -> 8 -> 0 -> 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 445. Add Two Numbers II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 445. \u4e24\u6570\u76f8\u52a0 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6808\u5c06\u4e24\u4e2a\u94fe\u8868\u9006\u5411\u5b58\u50a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u4e2a\u4f4d\u5f00\u59cb\u5bf9\u9f50\u76f8\u52a0\u3001\u8fdb\u4f4d \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None class Solution: def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" stack1 = [] stack2 = [] p1 = l1 p2 = l2 while p1: stack1.append(p1.val) p1 = p1.next while p2: stack2.append(p2.val) p2 = p2.next res = [] s = 0 while stack1 or stack2: if stack1: s += stack1.pop() if stack2: s += stack2.pop() res.append(s % 10) s //= 10 if s == 1: res.append(1) head = ListNode(res.pop()) cur_node = head while len(res): cur_node.next = ListNode(res.pop()) cur_node = cur_node.next return head \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"445. Add Two Numbers II"},{"location":"leetcode-0445-add-two-numbers-ii/#445-add-two-numbers-ii","text":"","title":"445. Add Two Numbers II"},{"location":"leetcode-0445-add-two-numbers-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002 \u793a\u4f8b: \u8f93\u5165: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa: 7 -> 8 -> 0 -> 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 445. Add Two Numbers II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 445. \u4e24\u6570\u76f8\u52a0 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0445-add-two-numbers-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528\u6808\u5c06\u4e24\u4e2a\u94fe\u8868\u9006\u5411\u5b58\u50a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u4e2a\u4f4d\u5f00\u59cb\u5bf9\u9f50\u76f8\u52a0\u3001\u8fdb\u4f4d","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0445-add-two-numbers-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0445-add-two-numbers-ii/#1","text":"# Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None class Solution: def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" stack1 = [] stack2 = [] p1 = l1 p2 = l2 while p1: stack1.append(p1.val) p1 = p1.next while p2: stack2.append(p2.val) p2 = p2.next res = [] s = 0 while stack1 or stack2: if stack1: s += stack1.pop() if stack2: s += stack2.pop() res.append(s % 10) s //= 10 if s == 1: res.append(1) head = ListNode(res.pop()) cur_node = head while len(res): cur_node.next = ListNode(res.pop()) cur_node = cur_node.next return head \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0445-add-two-numbers-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/","text":"448. Find All Numbers Disappeared in an Array \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n ] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002 \u793a\u4f8b: \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [5,6] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 448. Find All Numbers Disappeared in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { public List<Integer> findDisappearedNumbers(int[] nums) { List<Integer> res = new ArrayList<>(); int len = nums.length; if (len == 0) { return res; } // 4 3 2 1 6 8 7 6 for (int i = 0; i < len; i++) { while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) { swap(nums, nums[i] - 1, i); } } // System.out.println(Arrays.toString(nums)); // 1 2 3 4 for (int i = 0; i < len; i++) { if (nums[i] - 1 != i) { res.add(i + 1); } } return res; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { int[] nums = {4, 3, 2, 7, 8, 2, 3, 1}; Solution solution = new Solution(); List<Integer> disappearedNumbers = solution.findDisappearedNumbers(nums); System.out.println(disappearedNumbers); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0448-find-all-numbers-disappeared-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"448. Find All Numbers Disappeared in an Array"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/#448-find-all-numbers-disappeared-in-an-array","text":"","title":"448. Find All Numbers Disappeared in an Array"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n ] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002 \u793a\u4f8b: \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [5,6] \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 448. Find All Numbers Disappeared in an Array \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0448-find-all-numbers-disappeared-in-an-array/#1","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Solution { public List<Integer> findDisappearedNumbers(int[] nums) { List<Integer> res = new ArrayList<>(); int len = nums.length; if (len == 0) { return res; } // 4 3 2 1 6 8 7 6 for (int i = 0; i < len; i++) { while (nums[i] <= len && nums[nums[i] - 1] != nums[i]) { swap(nums, nums[i] - 1, i); } } // System.out.println(Arrays.toString(nums)); // 1 2 3 4 for (int i = 0; i < len; i++) { if (nums[i] - 1 != i) { res.add(i + 1); } } return res; } private void swap(int[] nums, int index1, int index2) { if (index1 == index2) { return; } int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } public static void main(String[] args) { int[] nums = {4, 3, 2, 7, 8, 2, 3, 1}; Solution solution = new Solution(); List<Integer> disappearedNumbers = solution.findDisappearedNumbers(nums); System.out.println(disappearedNumbers); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0448-find-all-numbers-disappeared-in-an-array \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0450-delete-node-in-a-bst/","text":"450. Delete Node in a BST \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u503c key \uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684 key \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a \u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b \u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002 \u8bf4\u660e\uff1a \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002 \u793a\u4f8b: root = [5,3,6,2,4,null,7] key = 3 5 / \\ 3 6 / \\ \\ 2 4 7 \u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002 \u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002 5 / \\ 4 6 / \\ 2 7 \u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002 5 / \\ 2 6 \\ \\ 4 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 450. Delete Node in a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1aBST \u7684\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u5728\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b\u8fd9\u4e00\u7c7b\u7684\u6559\u79d1\u4e66\u4e0a\u90fd\u6709\u4ecb\u7ecd\u3002 \u867d\u7136\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Hibbard \u53d1\u660e\u7684\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\u4e14\u76f4\u89c2\u3002 \u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\uff0c\u5f53\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8ba9\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u6216\u8005\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff\u5b83\uff0c\u8fd9\u6837\u5c31\u80fd\u6210\u4e3a\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8fd8\u662f BST\uff0c\u5426\u5219\u5c31\u53d8\u6210\u68ee\u6797\uff0c\u6216\u8005\u4e0d\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\u4e86\u3002 \u5728\u8349\u7a3f\u7eb8\u4e0a\u5f88\u5bb9\u6613\u753b\u51fa BST \u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u7684\u8fd9 3 \u79cd\u60c5\u51b5\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u7528\u524d\u9a71\u7ed3\u70b9\u4ee3\u66ff class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } class Solution { public TreeNode deleteNode(TreeNode root, int key) { if (root == null) { return null; } if (key < root.val) { root.left = deleteNode(root.left, key); return root; } if (key > root.val) { root.right = deleteNode(root.right, key); return root; } assert key == root.val; if (root.left == null) { TreeNode right = root.right; root.right = null; return right; } if (root.right == null) { TreeNode left = root.left; root.left = null; return left; } TreeNode predecessor = maximum(root.left); TreeNode predecessorCopy = new TreeNode(predecessor.val); predecessorCopy.left = removeMax(root.left); predecessorCopy.right = root.right; root.left = null; root.right = null; return predecessorCopy; } private TreeNode removeMax(TreeNode node) { if (node.right == null) { TreeNode left = node.left; node.left = null; return left; } node.right = removeMax(node.right); return node; } private TreeNode maximum(TreeNode node) { if (node.right == null) { return node; } return maximum(node.right); } } \u53c2\u8003\u89e3\u7b542\uff1a\u7528\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * https://leetcode-cn.com/problems/delete-node-in-a-bst/description/ * * @author liwei */ public class Solution { private TreeNode minNode(TreeNode node) { while (node.left != null) { node = node.left; } return node; } /** * \u5220\u9664\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6811\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u628a\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\u8fd4\u56de\u56de\u53bb * \u4f7f\u7528\u9012\u5f52\uff0c\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5b9a\u4e49\u7684\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\uff0c\u5220\u9664\u4e86\u6700\u5c0f\u503c\u8282\u70b9\u4ee5\u540e\u7684\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839 * * @param node * @return */ private TreeNode removeMin(TreeNode node) { if (node.left == null) { // \u5c31\u662f\u90a3\u4e2a\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9 TreeNode rightNode = node.right; node.right = null; return rightNode; } node.left = removeMin(node.left); return node; } public TreeNode deleteNode(TreeNode root, int key) { if (root == null) { return null; } if (root.val < key) { root.right = deleteNode(root.right, key); return root; } else if (root.val > key) { root.left = deleteNode(root.left, key); return root; } else { // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u5de6\u5b69\u5b50\u4e3a\u7a7a if (root.left == null) { TreeNode rightNode = root.right; root.right = null; return rightNode; } // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u53f3\u5b69\u5b50 if (root.right == null) { TreeNode leftNode = root.left; root.left = null; return leftNode; } // \u4ece\u5b83\u7684\u53f3\u5b50\u6811\u4e2d\u62ff\u5230\u6700\u5c0f\u7684 TreeNode successor = new TreeNode(minNode(root.right).val); successor.left = root.left; successor.right = removeMin(root.right); root.left = null; root.right = null; return successor; } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0450-delete-node-in-a-bst \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"450. Delete Node in a BST"},{"location":"leetcode-0450-delete-node-in-a-bst/#450-delete-node-in-a-bst","text":"","title":"450. Delete Node in a BST"},{"location":"leetcode-0450-delete-node-in-a-bst/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u503c key \uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684 key \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a \u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b \u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002 \u8bf4\u660e\uff1a \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002 \u793a\u4f8b: root = [5,3,6,2,4,null,7] key = 3 5 / \\ 3 6 / \\ \\ 2 4 7 \u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002 \u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002 5 / \\ 4 6 / \\ 2 7 \u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002 5 / \\ 2 6 \\ \\ 4 7 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 450. Delete Node in a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0450-delete-node-in-a-bst/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1aBST \u7684\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u5728\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b\u8fd9\u4e00\u7c7b\u7684\u6559\u79d1\u4e66\u4e0a\u90fd\u6709\u4ecb\u7ecd\u3002 \u867d\u7136\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Hibbard \u53d1\u660e\u7684\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\u4e14\u76f4\u89c2\u3002 \u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\uff0c\u5f53\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u8ba9\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u6216\u8005\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff\u5b83\uff0c\u8fd9\u6837\u5c31\u80fd\u6210\u4e3a\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8fd8\u662f BST\uff0c\u5426\u5219\u5c31\u53d8\u6210\u68ee\u6797\uff0c\u6216\u8005\u4e0d\u4fdd\u6301 BST \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u6027\u4e86\u3002 \u5728\u8349\u7a3f\u7eb8\u4e0a\u5f88\u5bb9\u6613\u753b\u51fa BST \u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u7684\u8fd9 3 \u79cd\u60c5\u51b5\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0450-delete-node-in-a-bst/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0450-delete-node-in-a-bst/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } class Solution { public TreeNode deleteNode(TreeNode root, int key) { if (root == null) { return null; } if (key < root.val) { root.left = deleteNode(root.left, key); return root; } if (key > root.val) { root.right = deleteNode(root.right, key); return root; } assert key == root.val; if (root.left == null) { TreeNode right = root.right; root.right = null; return right; } if (root.right == null) { TreeNode left = root.left; root.left = null; return left; } TreeNode predecessor = maximum(root.left); TreeNode predecessorCopy = new TreeNode(predecessor.val); predecessorCopy.left = removeMax(root.left); predecessorCopy.right = root.right; root.left = null; root.right = null; return predecessorCopy; } private TreeNode removeMax(TreeNode node) { if (node.right == null) { TreeNode left = node.left; node.left = null; return left; } node.right = removeMax(node.right); return node; } private TreeNode maximum(TreeNode node) { if (node.right == null) { return node; } return maximum(node.right); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u7528\u524d\u9a71\u7ed3\u70b9\u4ee3\u66ff"},{"location":"leetcode-0450-delete-node-in-a-bst/#2","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * https://leetcode-cn.com/problems/delete-node-in-a-bst/description/ * * @author liwei */ public class Solution { private TreeNode minNode(TreeNode node) { while (node.left != null) { node = node.left; } return node; } /** * \u5220\u9664\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6811\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u628a\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839\u8fd4\u56de\u56de\u53bb * \u4f7f\u7528\u9012\u5f52\uff0c\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5b9a\u4e49\u7684\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\uff0c\u5220\u9664\u4e86\u6700\u5c0f\u503c\u8282\u70b9\u4ee5\u540e\u7684\u65b0\u7684\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6839 * * @param node * @return */ private TreeNode removeMin(TreeNode node) { if (node.left == null) { // \u5c31\u662f\u90a3\u4e2a\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9 TreeNode rightNode = node.right; node.right = null; return rightNode; } node.left = removeMin(node.left); return node; } public TreeNode deleteNode(TreeNode root, int key) { if (root == null) { return null; } if (root.val < key) { root.right = deleteNode(root.right, key); return root; } else if (root.val > key) { root.left = deleteNode(root.left, key); return root; } else { // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u5de6\u5b69\u5b50\u4e3a\u7a7a if (root.left == null) { TreeNode rightNode = root.right; root.right = null; return rightNode; } // \u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u53f3\u5b69\u5b50 if (root.right == null) { TreeNode leftNode = root.left; root.left = null; return leftNode; } // \u4ece\u5b83\u7684\u53f3\u5b50\u6811\u4e2d\u62ff\u5230\u6700\u5c0f\u7684 TreeNode successor = new TreeNode(minNode(root.right).val); successor.left = root.left; successor.right = removeMin(root.right); root.left = null; root.right = null; return successor; } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0450-delete-node-in-a-bst \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u7528\u540e\u7ee7\u7ed3\u70b9\u4ee3\u66ff"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/","text":"452. Minimum Number of Arrows to Burst Balloons \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5y\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684x\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002\u5e73\u9762\u5185\u6700\u591a\u5b58\u572810 4 \u4e2a\u6c14\u7403\u3002 \u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740x\u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807x\u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a x start\uff0c x end\uff0c \u4e14\u6ee1\u8db3 x start \u2264 x \u2264 x end\uff0c \u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206 \u3002 \u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002 Example: \u8f93\u5165: [[10,16], [2,8], [1,6], [7,12]] \u8f93\u51fa: 2 \u89e3\u91ca: \u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728x = 6\uff08\u5c04\u7206[2,8],[1,6]\u4e24\u4e2a\u6c14\u7403\uff09\u548c x = 11\uff08\u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 452. Minimum Number of Arrows to Burst Balloons \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u6765\u505a\u7684\u9898\uff0c\u56e0\u4e3a\u5c40\u90e8\u6700\u4f18\u89e3\u5c31\u7b49\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u9996\u5148\u7ed9\u533a\u95f4\u6392\u5e8f\uff1b 2\u3001\u7136\u540e\u6211\u4eec\u5c06 res \u521d\u59cb\u5316\u4e3a 1 \uff0c\u56e0\u4e3a\u6c14\u7403\u6570\u91cf\u4e0d\u4e3a 0 \uff0c\u6240\u4ee5\u600e\u4e48\u4e5f\u5f97\u5148\u6765\u4e00\u53d1\u554a\uff0c\u7136\u540e\u8fd9\u4e00\u7bad\u80fd\u8986\u76d6\u7684\u6700\u8fdc\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u4e2a\u6c14\u7403\u7684\u7ed3\u675f\u70b9\uff0c\u7528\u53d8\u91cf end \u6765\u8868\u793a\uff1b 3\u3001\u7136\u540e\u6211\u4eec\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u6c14\u7403\uff0c\u5982\u679c\u5f53\u524d\u6c14\u7403\u7684\u5f00\u59cb\u70b9\u5c0f\u4e8e\u7b49\u4e8e end \uff0c\u8bf4\u660e\u8ddf\u4e4b\u524d\u7684\u6c14\u7403\u6709\u91cd\u5408\uff0c\u4e4b\u524d\u90a3\u4e00\u7bad\u4e5f\u53ef\u4ee5\u7167\u987e\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u66f4\u65b0 end \u7684\u4f4d\u7f6e\uff0c end \u66f4\u65b0\u4e3a\u4e24\u4e2a\u6c14\u7403\u7ed3\u675f\u70b9\u4e4b\u95f4\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e5f\u662f\u5f53\u524d\u6c14\u7403\u548c\u4e4b\u524d\u6c14\u7403\u7684\u91cd\u5408\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u540e\u9762\u7684\u6c14\u7403\uff1b 4\u3001\u5982\u679c\u67d0\u4e2a\u6c14\u7403\u7684\u8d77\u59cb\u70b9\u5927\u4e8e end \u4e86\uff0c\u8bf4\u660e\u524d\u9762\u7684\u7bad\u65e0\u6cd5\u8986\u76d6\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u90a3\u4e48\u5c31\u5f97\u518d\u6765\u4e00\u53d1\uff0c\u65e2\u7136\u53c8\u6765\u4e86\u4e00\u53d1\uff0c\u90a3\u4e48\u6211\u4eec\u6b64\u65f6\u5c31\u8981\u628a end \u8bbe\u4e3a\u5f53\u524d\u6c14\u7403\u7684\u7ed3\u675f\u70b9\u4e86\uff0c\u8fd9\u6837\u8d2a\u5a6a\u7b97\u6cd5\u904d\u5386\u7ed3\u675f\u540e\u5c31\u80fd\u5f97\u5230\u6700\u5c11\u7684\u7bad\u6570\u4e86\u3002 \u753b\u56fe\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/grandyang/p/6050562.html http://bgmeow.xyz/2016/12/30/LeetCode-452/ \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002 Python \u7684\u5199\u6cd5\uff1a class Solution: def findMinArrowShots(self, points): \"\"\" :type points: List[List[int]] :rtype: int \"\"\" if len(points) < 2: return len(points) # \u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f points = sorted(points, key=lambda x: x[0]) min_arrow_shots = 1 end = points[0][1] for point in points[1:]: if point[0] <= end: end = min(end, point[1]) else: min_arrow_shots += 1 end = point[1] return min_arrow_shots if __name__ == '__main__': points = [[10, 16], [2, 8], [1, 6], [7, 12]] s = Solution() result = s.findMinArrowShots(points) print(result) \u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8ba8\u8bba\u80fd\u591f\u5c11\u4e00\u4e9b\u3002 \u53c2\u8003\u4e86\u82b1\u82b1\u9171\u7684\u89e3\u7b54\u3002 Python \u7684\u5199\u6cd5\uff1a class Solution: def findMinArrowShots(self, points): \"\"\" :type points: List[List[int]] :rtype: int \"\"\" if len(points) < 2: return len(points) # \u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f points = sorted(points, key=lambda x: x[1]) min_arrow_shots = 1 end = points[0][1] for point in points[1:]: if point[0] > end: end = point[1] min_arrow_shots += 1 return min_arrow_shots if __name__ == '__main__': points = [[10, 16], [2, 8], [1, 6], [7, 12]] s = Solution() result = s.findMinArrowShots(points) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0452-minimum-number-of-arrows-to-burst-balloons \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"452. Minimum Number of Arrows to Burst Balloons"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#452-minimum-number-of-arrows-to-burst-balloons","text":"","title":"452. Minimum Number of Arrows to Burst Balloons"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5y\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684x\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002\u5e73\u9762\u5185\u6700\u591a\u5b58\u572810 4 \u4e2a\u6c14\u7403\u3002 \u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740x\u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807x\u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a x start\uff0c x end\uff0c \u4e14\u6ee1\u8db3 x start \u2264 x \u2264 x end\uff0c \u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206 \u3002 \u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002 Example: \u8f93\u5165: [[10,16], [2,8], [1,6], [7,12]] \u8f93\u51fa: 2 \u89e3\u91ca: \u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728x = 6\uff08\u5c04\u7206[2,8],[1,6]\u4e24\u4e2a\u6c14\u7403\uff09\u548c x = 11\uff08\u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403\uff09\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 452. Minimum Number of Arrows to Burst Balloons \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u5178\u578b\u7684\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u6765\u505a\u7684\u9898\uff0c\u56e0\u4e3a\u5c40\u90e8\u6700\u4f18\u89e3\u5c31\u7b49\u4e8e\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u9996\u5148\u7ed9\u533a\u95f4\u6392\u5e8f\uff1b 2\u3001\u7136\u540e\u6211\u4eec\u5c06 res \u521d\u59cb\u5316\u4e3a 1 \uff0c\u56e0\u4e3a\u6c14\u7403\u6570\u91cf\u4e0d\u4e3a 0 \uff0c\u6240\u4ee5\u600e\u4e48\u4e5f\u5f97\u5148\u6765\u4e00\u53d1\u554a\uff0c\u7136\u540e\u8fd9\u4e00\u7bad\u80fd\u8986\u76d6\u7684\u6700\u8fdc\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u4e2a\u6c14\u7403\u7684\u7ed3\u675f\u70b9\uff0c\u7528\u53d8\u91cf end \u6765\u8868\u793a\uff1b 3\u3001\u7136\u540e\u6211\u4eec\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u6c14\u7403\uff0c\u5982\u679c\u5f53\u524d\u6c14\u7403\u7684\u5f00\u59cb\u70b9\u5c0f\u4e8e\u7b49\u4e8e end \uff0c\u8bf4\u660e\u8ddf\u4e4b\u524d\u7684\u6c14\u7403\u6709\u91cd\u5408\uff0c\u4e4b\u524d\u90a3\u4e00\u7bad\u4e5f\u53ef\u4ee5\u7167\u987e\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u66f4\u65b0 end \u7684\u4f4d\u7f6e\uff0c end \u66f4\u65b0\u4e3a\u4e24\u4e2a\u6c14\u7403\u7ed3\u675f\u70b9\u4e4b\u95f4\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e5f\u662f\u5f53\u524d\u6c14\u7403\u548c\u4e4b\u524d\u6c14\u7403\u7684\u91cd\u5408\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u540e\u9762\u7684\u6c14\u7403\uff1b 4\u3001\u5982\u679c\u67d0\u4e2a\u6c14\u7403\u7684\u8d77\u59cb\u70b9\u5927\u4e8e end \u4e86\uff0c\u8bf4\u660e\u524d\u9762\u7684\u7bad\u65e0\u6cd5\u8986\u76d6\u5230\u5f53\u524d\u7684\u6c14\u7403\uff0c\u90a3\u4e48\u5c31\u5f97\u518d\u6765\u4e00\u53d1\uff0c\u65e2\u7136\u53c8\u6765\u4e86\u4e00\u53d1\uff0c\u90a3\u4e48\u6211\u4eec\u6b64\u65f6\u5c31\u8981\u628a end \u8bbe\u4e3a\u5f53\u524d\u6c14\u7403\u7684\u7ed3\u675f\u70b9\u4e86\uff0c\u8fd9\u6837\u8d2a\u5a6a\u7b97\u6cd5\u904d\u5386\u7ed3\u675f\u540e\u5c31\u80fd\u5f97\u5230\u6700\u5c11\u7684\u7bad\u6570\u4e86\u3002 \u753b\u56fe\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002 \u53c2\u8003\u8d44\u6599\uff1ahttp://www.cnblogs.com/grandyang/p/6050562.html http://bgmeow.xyz/2016/12/30/LeetCode-452/","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#1","text":"Python \u7684\u5199\u6cd5\uff1a class Solution: def findMinArrowShots(self, points): \"\"\" :type points: List[List[int]] :rtype: int \"\"\" if len(points) < 2: return len(points) # \u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f points = sorted(points, key=lambda x: x[0]) min_arrow_shots = 1 end = points[0][1] for point in points[1:]: if point[0] <= end: end = min(end, point[1]) else: min_arrow_shots += 1 end = point[1] return min_arrow_shots if __name__ == '__main__': points = [[10, 16], [2, 8], [1, 6], [7, 12]] s = Solution() result = s.findMinArrowShots(points) print(result)","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u6309\u7167\u533a\u95f4\u7684\u5de6\u4fa7\u7aef\u70b9\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002"},{"location":"leetcode-0452-minimum-number-of-arrows-to-burst-balloons/#2","text":"\u53c2\u8003\u4e86\u82b1\u82b1\u9171\u7684\u89e3\u7b54\u3002 Python \u7684\u5199\u6cd5\uff1a class Solution: def findMinArrowShots(self, points): \"\"\" :type points: List[List[int]] :rtype: int \"\"\" if len(points) < 2: return len(points) # \u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f points = sorted(points, key=lambda x: x[1]) min_arrow_shots = 1 end = points[0][1] for point in points[1:]: if point[0] > end: end = point[1] min_arrow_shots += 1 return min_arrow_shots if __name__ == '__main__': points = [[10, 16], [2, 8], [1, 6], [7, 12]] s = Solution() result = s.findMinArrowShots(points) print(result) \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0452-minimum-number-of-arrows-to-burst-balloons \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u6309\u7167\u533a\u95f4\u7684\u53f3\u4fa7\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8ba8\u8bba\u80fd\u591f\u5c11\u4e00\u4e9b\u3002"},{"location":"leetcode-0454-4sum-ii/","text":"454. 4Sum II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868 A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 (i, j, k, l) \uff0c\u4f7f\u5f97 A[i] + B[j] + C[k] + D[l] = 0 \u3002 \u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6 N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2 28 \u5230 2 28 - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7 2 31 - 1 \u3002 \u4f8b\u5982: \u8f93\u5165: A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b: 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 454. 4Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 454. \u56db\u6570\u76f8\u52a0 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashMap; public class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { // key \u662f A \u548c B \u6570\u7ec4\u5206\u522b\u53d6\u4e00\u4e2a\u6570\u53ef\u80fd\u7684\u548c\uff0cvalue \u662f\u8fd9\u4e2a\u548c\u53ef\u80fd\u7531\u51e0\u4e2a\u4e0d\u540c\u7684\u7ec4\u5408 HashMap<Integer, Integer> map = new HashMap<>(); // \u8ba1\u6570\u5668 int res = 0; for (int a : A) { for (int b : B) { int sum = a + b; if (map.containsKey(sum)) { map.put(sum, map.get(sum) + 1); } else { map.put(sum, 1); } } } for (int c : C) { for (int d : D) { int target = -c - d; if (map.containsKey(target)) { res += map.get(target); } } } return res; } public static void main(String[] args) { int[] A = {1, 2}; int[] B = {-2, -1}; int[] C = {-1, 2}; int[] D = {0, 2}; Solution solution = new Solution(); int fourSumCount = solution.fourSumCount(A, B, C, D); System.out.println(fourSumCount); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0454-4sum-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"454. 4Sum II"},{"location":"leetcode-0454-4sum-ii/#454-4sum-ii","text":"","title":"454. 4Sum II"},{"location":"leetcode-0454-4sum-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868 A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 (i, j, k, l) \uff0c\u4f7f\u5f97 A[i] + B[j] + C[k] + D[l] = 0 \u3002 \u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6 N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2 28 \u5230 2 28 - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7 2 31 - 1 \u3002 \u4f8b\u5982: \u8f93\u5165: A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b: 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 454. 4Sum II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 454. \u56db\u6570\u76f8\u52a0 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0454-4sum-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0454-4sum-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0454-4sum-ii/#1","text":"import java.util.HashMap; public class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { // key \u662f A \u548c B \u6570\u7ec4\u5206\u522b\u53d6\u4e00\u4e2a\u6570\u53ef\u80fd\u7684\u548c\uff0cvalue \u662f\u8fd9\u4e2a\u548c\u53ef\u80fd\u7531\u51e0\u4e2a\u4e0d\u540c\u7684\u7ec4\u5408 HashMap<Integer, Integer> map = new HashMap<>(); // \u8ba1\u6570\u5668 int res = 0; for (int a : A) { for (int b : B) { int sum = a + b; if (map.containsKey(sum)) { map.put(sum, map.get(sum) + 1); } else { map.put(sum, 1); } } } for (int c : C) { for (int d : D) { int target = -c - d; if (map.containsKey(target)) { res += map.get(target); } } } return res; } public static void main(String[] args) { int[] A = {1, 2}; int[] B = {-2, -1}; int[] C = {-1, 2}; int[] D = {0, 2}; Solution solution = new Solution(); int fourSumCount = solution.fourSumCount(A, B, C, D); System.out.println(fourSumCount); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0454-4sum-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0459-repeated-substring-pattern/","text":"459. Repeated Substring Pattern \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abab\" \u8f93\u51fa: True \u89e3\u91ca: \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"ab\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"aba\" \u8f93\u51fa: False \u793a\u4f8b 3: \u8f93\u5165: \"abcabcabcabc\" \u8f93\u51fa: True \u89e3\u91ca: \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"abc\" \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 \"abcabc\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002) \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 459. Repeated Substring Pattern \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 459. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f9d\u636e\u9898\u76ee\u7684\u8981\u6c42\uff0c\u9010\u4e2a\u8fdb\u884c\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 1\u3001\u9996\u5148\u5206\u6790\u51fa\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u6700\u5c0f\u662f 1 \uff0c\u6700\u5927\u662f len/2\uff08\u5411\u4e0b\u53d6\u6574\uff09\uff1b 2\u3001\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u80fd\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\uff0c\u8fd9\u4e00\u8f6e\u5faa\u73af\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e86\uff1b 3\u3001\u63a5\u7740\u5c31\u662f\u6bd4\u8f83\uff0c\u89e3\u6cd5 1 \u662f\u6211\u7684\u5199\u6cd5\uff0c\u89e3\u6cd5 2 \u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u5229\u7528\u4e86\u6c42\u6a21\u8fd0\u7b97\uff1b 4\u3001\u89e3\u6cd5 3 \u4e5f\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u6bd4\u8f83\u5de7\u5999\uff0c\u975e\u5e38\u7b80\u6d01\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public boolean repeatedSubstringPattern(String s) { int len = s.length(); if (len < 2) { return false; } for (int i = 1; i <= len / 2; i++) { // \u53ea\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad if (len % i == 0) { // \u7b2c 1 \u4e2a\u91cd\u590d\u5355\u5143\u7684\u5b57\u7b26\u4e32 String template = s.substring(0, i); // \u6bcf\u4e00\u8f6e\u5185\u5c42\u5faa\u73af\u90fd\u5047\u8bbe\u80fd\u627e\u5230\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\uff0c\u8fd9\u4e2a\u503c\u5c31\u4f1a\u88ab\u7f6e\u4e3a false\uff0c\u7136\u540e\u9000\u51fa\u5185\u5c42\u5faa\u73af boolean found = true; // \u6ce8\u610f\uff1asubstring \u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u53f3\u8fb9\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230 for (int j = i; j + i <= len; j += i) { String segment = s.substring(j, j + i); if (!template.equals(segment)) { found = false; break; } } // \u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u90fd\u6ca1\u6709\u5c06 found \u6539\u4e3a false\uff0c\u5c31\u8bf4\u660e\uff0c\u8be5\u5b57\u7b26\u4e32\u7b26\u5408\u9898\u610f\uff0c\u5b58\u5728\u6027\u6210\u7acb\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de if (found) { return true; } } } // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\u90fd\u4e0d\u80fd\u8fd4\u56de true\uff0c\u5c31\u5f97\u8fd4\u56de false return false; } } \u53c2\u8003\u89e3\u7b542 public class Solution { public boolean repeatedSubstringPattern(String s) { int len = s.length(); if (len < 2) { return false; } // 5 \u5230 2 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4 // 6 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5 // 7 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6 // i \u8868\u793a\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6 for (int i = 1; i <= len / 2; i++) { // \u5982\u679c\u4e0d\u80fd\u88ab\u91cd\u590d\u5355\u5143\u6574\u9664\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u7b26\u5408\u9898\u610f if (len % i != 0) { continue; } int j = i; // \u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u5224\u65ad\u662f\u5173\u952e while (j < len && s.charAt(j) == s.charAt(j % i)) { j++; } if (j == len) { // \u5982\u679c\u5b58\u5728\u5c31\u9a6c\u4e0a\u8fd4\u56de return true; } } // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\uff0c\u5c31\u5f97\u8fd4\u56de false return false; } public static void main(String[] args) { String s = \"abab\"; Solution solution = new Solution(); boolean repeatedSubstringPattern = solution.repeatedSubstringPattern(s); System.out.println(repeatedSubstringPattern); } } \u53c2\u8003\u89e3\u7b543 public class Solution { public boolean repeatedSubstringPattern3(String s) { // \u91cd\u590d\u4e00\u6b21\uff0c\u6390\u5934\u53bb\u5c3e\uff0c\u53ea\u8981\u5305\u542b\u5c31\u53ef\u4ee5\u4e86 return ((s + s).substring(1, 2 * s.length() - 1).contains(s)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0459-repeated-substring-pattern \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"459. Repeated Substring Pattern"},{"location":"leetcode-0459-repeated-substring-pattern/#459-repeated-substring-pattern","text":"","title":"459. Repeated Substring Pattern"},{"location":"leetcode-0459-repeated-substring-pattern/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abab\" \u8f93\u51fa: True \u89e3\u91ca: \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"ab\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"aba\" \u8f93\u51fa: False \u793a\u4f8b 3: \u8f93\u5165: \"abcabcabcabc\" \u8f93\u51fa: True \u89e3\u91ca: \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 \"abc\" \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 \"abcabc\" \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002) \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 459. Repeated Substring Pattern \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 459. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0459-repeated-substring-pattern/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f9d\u636e\u9898\u76ee\u7684\u8981\u6c42\uff0c\u9010\u4e2a\u8fdb\u884c\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 1\u3001\u9996\u5148\u5206\u6790\u51fa\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u6700\u5c0f\u662f 1 \uff0c\u6700\u5927\u662f len/2\uff08\u5411\u4e0b\u53d6\u6574\uff09\uff1b 2\u3001\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u80fd\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\uff0c\u8fd9\u4e00\u8f6e\u5faa\u73af\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e86\uff1b 3\u3001\u63a5\u7740\u5c31\u662f\u6bd4\u8f83\uff0c\u89e3\u6cd5 1 \u662f\u6211\u7684\u5199\u6cd5\uff0c\u89e3\u6cd5 2 \u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u5229\u7528\u4e86\u6c42\u6a21\u8fd0\u7b97\uff1b 4\u3001\u89e3\u6cd5 3 \u4e5f\u662f\u4ece\u8ba8\u8bba\u533a\u770b\u6765\u7684\uff0c\u6bd4\u8f83\u5de7\u5999\uff0c\u975e\u5e38\u7b80\u6d01\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0459-repeated-substring-pattern/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0459-repeated-substring-pattern/#1","text":"public class Solution { public boolean repeatedSubstringPattern(String s) { int len = s.length(); if (len < 2) { return false; } for (int i = 1; i <= len / 2; i++) { // \u53ea\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u6574\u9664\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad if (len % i == 0) { // \u7b2c 1 \u4e2a\u91cd\u590d\u5355\u5143\u7684\u5b57\u7b26\u4e32 String template = s.substring(0, i); // \u6bcf\u4e00\u8f6e\u5185\u5c42\u5faa\u73af\u90fd\u5047\u8bbe\u80fd\u627e\u5230\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u5339\u914d\uff0c\u8fd9\u4e2a\u503c\u5c31\u4f1a\u88ab\u7f6e\u4e3a false\uff0c\u7136\u540e\u9000\u51fa\u5185\u5c42\u5faa\u73af boolean found = true; // \u6ce8\u610f\uff1asubstring \u7684\u7b2c 2 \u4e2a\u53c2\u6570\u662f\u53f3\u8fb9\u7aef\u70b9\uff0c\u53d6\u4e0d\u5230 for (int j = i; j + i <= len; j += i) { String segment = s.substring(j, j + i); if (!template.equals(segment)) { found = false; break; } } // \u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u90fd\u6ca1\u6709\u5c06 found \u6539\u4e3a false\uff0c\u5c31\u8bf4\u660e\uff0c\u8be5\u5b57\u7b26\u4e32\u7b26\u5408\u9898\u610f\uff0c\u5b58\u5728\u6027\u6210\u7acb\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de if (found) { return true; } } } // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\u90fd\u4e0d\u80fd\u8fd4\u56de true\uff0c\u5c31\u5f97\u8fd4\u56de false return false; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0459-repeated-substring-pattern/#2","text":"public class Solution { public boolean repeatedSubstringPattern(String s) { int len = s.length(); if (len < 2) { return false; } // 5 \u5230 2 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4 // 6 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5 // 7 \u5230 3 \u4e3a\u6b62 0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6 // i \u8868\u793a\u91cd\u590d\u5355\u5143\u7684\u957f\u5ea6 for (int i = 1; i <= len / 2; i++) { // \u5982\u679c\u4e0d\u80fd\u88ab\u91cd\u590d\u5355\u5143\u6574\u9664\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u7b26\u5408\u9898\u610f if (len % i != 0) { continue; } int j = i; // \u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u5224\u65ad\u662f\u5173\u952e while (j < len && s.charAt(j) == s.charAt(j % i)) { j++; } if (j == len) { // \u5982\u679c\u5b58\u5728\u5c31\u9a6c\u4e0a\u8fd4\u56de return true; } } // \u5b58\u5728\u6027\u95ee\u9898\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5224\u65ad\u5b8c\u6bd5\uff0c\u5c31\u5f97\u8fd4\u56de false return false; } public static void main(String[] args) { String s = \"abab\"; Solution solution = new Solution(); boolean repeatedSubstringPattern = solution.repeatedSubstringPattern(s); System.out.println(repeatedSubstringPattern); } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0459-repeated-substring-pattern/#3","text":"public class Solution { public boolean repeatedSubstringPattern3(String s) { // \u91cd\u590d\u4e00\u6b21\uff0c\u6390\u5934\u53bb\u5c3e\uff0c\u53ea\u8981\u5305\u542b\u5c31\u53ef\u4ee5\u4e86 return ((s + s).substring(1, 2 * s.length() - 1).contains(s)); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0459-repeated-substring-pattern \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543"},{"location":"leetcode-0460-lfu-cache/","text":"460. LFU Cache \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u8bbe\u8ba1\u5e76\u5b9e\u73b0 \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09 \u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a get \u548c put \u3002 get(key) - \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 put(key, value) - \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u8bbe\u7f6e\u6216\u63d2\u5165\u503c\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u76ee\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u76ee\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c \u6700\u8fd1 \u6700\u5c11\u4f7f\u7528\u7684\u952e\u5c06\u88ab\u53bb\u9664\u3002 \u8fdb\u9636\uff1a \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f \u793a\u4f8b\uff1a LFUCache cache = new LFUCache( 2 /* capacity (\u7f13\u5b58\u5bb9\u91cf) */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u53bb\u9664 key 2 cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230key 2) cache.get(3); // \u8fd4\u56de 3 cache.put(4, 4); // \u53bb\u9664 key 1 cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230 key 1) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 460. LFU Cache \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 460. LFU\u7f13\u5b58 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0460-lfu-cache \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"460. LFU Cache"},{"location":"leetcode-0460-lfu-cache/#460-lfu-cache","text":"","title":"460. LFU Cache"},{"location":"leetcode-0460-lfu-cache/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u8bbe\u8ba1\u5e76\u5b9e\u73b0 \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09 \u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a get \u548c put \u3002 get(key) - \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 put(key, value) - \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u8bbe\u7f6e\u6216\u63d2\u5165\u503c\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u76ee\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u76ee\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c \u6700\u8fd1 \u6700\u5c11\u4f7f\u7528\u7684\u952e\u5c06\u88ab\u53bb\u9664\u3002 \u8fdb\u9636\uff1a \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f \u793a\u4f8b\uff1a LFUCache cache = new LFUCache( 2 /* capacity (\u7f13\u5b58\u5bb9\u91cf) */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u53bb\u9664 key 2 cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230key 2) cache.get(3); // \u8fd4\u56de 3 cache.put(4, 4); // \u53bb\u9664 key 1 cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230 key 1) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4 \u9898\u76ee\u96be\u5ea6\uff1a \u56f0\u96be \u3002 \u82f1\u6587\u7f51\u5740\uff1a 460. LFU Cache \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 460. LFU\u7f13\u5b58 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0460-lfu-cache/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0460-lfu-cache/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0460-lfu-cache/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0460-lfu-cache \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0461-hamming-distance/","text":"461. Hamming Distance \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002 \u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 x \u548c y \uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u6ce8\u610f\uff1a 0 \u2264 x , y < 2 31 . \u793a\u4f8b: \u8f93\u5165: x = 1, y = 4 \u8f93\u51fa: 2 \u89e3\u91ca: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 \u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 461. Hamming Distance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 461. \u6c49\u660e\u8ddd\u79bb \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570\u5c31\u662f\u6c49\u660e\u8ddd\u79bb\u3002 \u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c 1 \u8868\u793a\u4e0d\u540c\uff0c\u6b63\u597d\u4e3a\u6c49\u660e\u8ddd\u79bb\u8d21\u732e 1\uff0c 0 \u8868\u793a\u76f8\u540c\uff0c\u6539\u4f4d\u5bf9\u6c49\u660e\u8ddd\u79bb\u6ca1\u6709\u8d21\u732e\u503c\u3002 \u7edf\u8ba1\u4e8c\u8fdb\u5236 1 \u7684\u4e2a\u6570\u53ef\u4ee5\u4f7f\u7528 a & (a - 1) \u76f4\u5230\u8fd9\u4e2a\u6570\u4e3a 0\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int hammingDistance(int x, int y) { int a = x ^ y; int count = 0; while (a != 0) { a = a & (a - 1); count++; } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0461-hamming-distance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"461. Hamming Distance"},{"location":"leetcode-0461-hamming-distance/#461-hamming-distance","text":"","title":"461. Hamming Distance"},{"location":"leetcode-0461-hamming-distance/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002 \u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 x \u548c y \uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u6ce8\u610f\uff1a 0 \u2264 x , y < 2 31 . \u793a\u4f8b: \u8f93\u5165: x = 1, y = 4 \u8f93\u51fa: 2 \u89e3\u91ca: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 \u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 461. Hamming Distance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 461. \u6c49\u660e\u8ddd\u79bb \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0461-hamming-distance/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570\u5c31\u662f\u6c49\u660e\u8ddd\u79bb\u3002 \u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c 1 \u8868\u793a\u4e0d\u540c\uff0c\u6b63\u597d\u4e3a\u6c49\u660e\u8ddd\u79bb\u8d21\u732e 1\uff0c 0 \u8868\u793a\u76f8\u540c\uff0c\u6539\u4f4d\u5bf9\u6c49\u660e\u8ddd\u79bb\u6ca1\u6709\u8d21\u732e\u503c\u3002 \u7edf\u8ba1\u4e8c\u8fdb\u5236 1 \u7684\u4e2a\u6570\u53ef\u4ee5\u4f7f\u7528 a & (a - 1) \u76f4\u5230\u8fd9\u4e2a\u6570\u4e3a 0\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97\u7684\u6280\u5de7\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0461-hamming-distance/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0461-hamming-distance/#1","text":"public class Solution { public int hammingDistance(int x, int y) { int a = x ^ y; int count = 0; while (a != 0) { a = a & (a - 1); count++; } return count; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0461-hamming-distance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0476-number-complement/","text":"476. Number Complement \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002 \u6ce8\u610f: \u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u572832\u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 \u8f93\u51fa: 2 \u89e3\u91ca: 5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa2\u3002 \u793a\u4f8b 2: \u8f93\u5165: 1 \u8f93\u51fa: 0 \u89e3\u91ca: 1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 476. Number Complement \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 476. \u6570\u5b57\u7684\u8865\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u4f7f\u7528\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\uff1b 2\u3001\u4f7f\u7528 mask \u5c0f\u6280\u5de7\u4ee5\u53ca\u5f02\u6216\u8fd0\u7b97\u5b8c\u6210 1 \u53d8 0 \uff0c 0 \u53d8 1\uff1b \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u5bb9\u6613\u60f3\u5230 public class Solution { /** * \u4f7f\u7528 Java \u5e93\u51fd\u6570 Integer.toBinaryString() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a * @param num * @return */ public int findComplement(int num) { if (num <= 0) { throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\"); } String numStr = Integer.toBinaryString(num); StringBuilder stringBuilder = new StringBuilder(); for (Character c : numStr.toCharArray()) { if (c == '0') { stringBuilder.append(1); } else { stringBuilder.append(0); } } numStr = stringBuilder.toString(); return Integer.valueOf(numStr, 2); } } \u53c2\u8003\u89e3\u7b542\uff1a\u5178\u578b public class Solution2 { public int findComplement(int num) { if (num <= 0) { throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\"); } // \u8fd9\u4e2a\u590d\u5236\u51fa\u6765\u7684\u6570\u5bf9\u8fd0\u7b97\u7ed3\u679c\u4e0d\u8d77\u76f4\u63a5\u4f5c\u7528\uff0c\u53ea\u662f\u7528\u6765\u5224\u65ad\u9700\u8981\u53d6\u53cd\u7684\u64cd\u4f5c\u7684\u6b21\u6570 int numCopy = num; int mask = 1; // \u6b63\u6574\u6570\uff0c\u53f3\u79fb\uff0c\u5de6\u8fb9\u8865 0 while (numCopy > 0) { // \u548c 1 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a0 1 -> 1 \uff0c1 1 -> 0\uff1a // \u548c 0 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a1 0 -> 1 \uff0c0 0 -> 0\uff1a num ^= mask; mask <<= 1; numCopy >>= 1; } return num; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0476-number-complement \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"476. Number Complement"},{"location":"leetcode-0476-number-complement/#476-number-complement","text":"","title":"476. Number Complement"},{"location":"leetcode-0476-number-complement/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002 \u6ce8\u610f: \u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u572832\u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 \u8f93\u51fa: 2 \u89e3\u91ca: 5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa2\u3002 \u793a\u4f8b 2: \u8f93\u5165: 1 \u8f93\u51fa: 0 \u89e3\u91ca: 1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa0\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 476. Number Complement \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 476. \u6570\u5b57\u7684\u8865\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0476-number-complement/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a 1\u3001\u4f7f\u7528\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8868\u793a\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\uff1b 2\u3001\u4f7f\u7528 mask \u5c0f\u6280\u5de7\u4ee5\u53ca\u5f02\u6216\u8fd0\u7b97\u5b8c\u6210 1 \u53d8 0 \uff0c 0 \u53d8 1\uff1b","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0476-number-complement/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0476-number-complement/#1","text":"public class Solution { /** * \u4f7f\u7528 Java \u5e93\u51fd\u6570 Integer.toBinaryString() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a * @param num * @return */ public int findComplement(int num) { if (num <= 0) { throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\"); } String numStr = Integer.toBinaryString(num); StringBuilder stringBuilder = new StringBuilder(); for (Character c : numStr.toCharArray()) { if (c == '0') { stringBuilder.append(1); } else { stringBuilder.append(0); } } numStr = stringBuilder.toString(); return Integer.valueOf(numStr, 2); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u5bb9\u6613\u60f3\u5230"},{"location":"leetcode-0476-number-complement/#2","text":"public class Solution2 { public int findComplement(int num) { if (num <= 0) { throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u662f\u6b63\u6574\u6570\"); } // \u8fd9\u4e2a\u590d\u5236\u51fa\u6765\u7684\u6570\u5bf9\u8fd0\u7b97\u7ed3\u679c\u4e0d\u8d77\u76f4\u63a5\u4f5c\u7528\uff0c\u53ea\u662f\u7528\u6765\u5224\u65ad\u9700\u8981\u53d6\u53cd\u7684\u64cd\u4f5c\u7684\u6b21\u6570 int numCopy = num; int mask = 1; // \u6b63\u6574\u6570\uff0c\u53f3\u79fb\uff0c\u5de6\u8fb9\u8865 0 while (numCopy > 0) { // \u548c 1 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a0 1 -> 1 \uff0c1 1 -> 0\uff1a // \u548c 0 \u505a\u5f02\u6216\u64cd\u4f5c\uff1a1 0 -> 1 \uff0c0 0 -> 0\uff1a num ^= mask; mask <<= 1; numCopy >>= 1; } return num; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0476-number-complement \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u5178\u578b"},{"location":"leetcode-0477-total-hamming-distance/","text":"477. Total Hamming Distance \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u4e24\u4e2a\u6574\u6570\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002 \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: 4, 14, 2 \u8f93\u51fa: 6 \u89e3\u91ca: \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09 \u6240\u4ee5\u7b54\u6848\u4e3a\uff1a HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. \u6ce8\u610f: \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece 0 \u5230 10^9 \u3002 \u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 10^4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 477. Total Hamming Distance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 477. \u6c49\u660e\u8ddd\u79bb\u603b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u201c \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002\u201d\u8fd9\u91cc\u7684\u5173\u952e\u5b57\u662f\u201c\u4efb\u610f\u201d\u548c\u201c\u603b\u548c\u201d\u3002 \u4e00\u4e2a\u6570\u8981\u4e0e\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u6570\u90fd\u8fdb\u884c\u4e00\u6b21\u6c49\u660e\u8ddd\u79bb\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u518d\u628a\u6240\u6709\u7684\u6c49\u660e\u8ddd\u79bb\u6c42\u548c\u3002 \u4e00\u4e2a\u6574\u6570\u6709 32 \u4f4d\uff0c\u53ef\u4ee5\u7edf\u8ba1\u8ba1\u7b97\u6bcf 1 \u4f4d\u4e0a\uff0c\u6240\u6709\u6570\u7ec4\u4e2d\u7684\u8fd9\u4e9b\u6570\u4e0a\u7684 1 \u548c 0 \u7684\u4e2a\u6570\uff0c\u628a\u5b83\u4eec\u76f8\u4e58\uff0c\u5c31\u662f\u8fd9\u4e2a\u6570\u4f4d\u4e0a\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u201c\u8d21\u732e\u201d\u3002 \u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5176\u5b9e\u65e0\u975e\u5c31\u662f\u628a\u52a0\u6cd5\u53d8\u6210\u4e86\u4e58\u6cd5\u3002 \u4f8b\u5982\uff1a 1000 1100 0111 0101 \u8fd9 4 \u4e2a\u6570\uff0c\u5148\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u770b\u8d77\uff0c\u6709 2 \u4e2a 0 \u548c 2 \u4e2a 1\uff1a1 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u8d21\u732e\u4e86 2 \u4e2a\u6c49\u660e\u8ddd\u79bb\uff0c\u90a3\u4e48 2 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u5c31\u8d21\u732e\u4e86 $2 \\times 2 = 4$ \u4e2a\u6c49\u660e\u8ddd\u79bb\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u6280\u5de7\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a mask \u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u7f16\u7801\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \uff0c\u5176\u4f59\u4f4d\u90fd\u662f 0\uff0c\u53bb\u5224\u65ad\u4e00\u4e2a\u6570\u4f4d\u662f\u5426\u662f 1\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution2 { public int totalHammingDistance(int[] nums) { int len = nums.length; int mask = 1; int res = 0; for (int i = 0; i < 32; i++) { // 0 \u7684\u4e2a\u6570 int zeros = 0; for (int num : nums) { if ((num & mask) == 0) { zeros++; } } res += ((len - zeros) * zeros); mask <<= 1; } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0477-total-hamming-distance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"477. Total Hamming Distance"},{"location":"leetcode-0477-total-hamming-distance/#477-total-hamming-distance","text":"","title":"477. Total Hamming Distance"},{"location":"leetcode-0477-total-hamming-distance/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u4e24\u4e2a\u6574\u6570\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002 \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: 4, 14, 2 \u8f93\u51fa: 6 \u89e3\u91ca: \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09 \u6240\u4ee5\u7b54\u6848\u4e3a\uff1a HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. \u6ce8\u610f: \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece 0 \u5230 10^9 \u3002 \u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 10^4 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 477. Total Hamming Distance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 477. \u6c49\u660e\u8ddd\u79bb\u603b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0477-total-hamming-distance/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u9898\u76ee\u8981\u6c42\u201c \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002\u201d\u8fd9\u91cc\u7684\u5173\u952e\u5b57\u662f\u201c\u4efb\u610f\u201d\u548c\u201c\u603b\u548c\u201d\u3002 \u4e00\u4e2a\u6570\u8981\u4e0e\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u6570\u90fd\u8fdb\u884c\u4e00\u6b21\u6c49\u660e\u8ddd\u79bb\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u518d\u628a\u6240\u6709\u7684\u6c49\u660e\u8ddd\u79bb\u6c42\u548c\u3002 \u4e00\u4e2a\u6574\u6570\u6709 32 \u4f4d\uff0c\u53ef\u4ee5\u7edf\u8ba1\u8ba1\u7b97\u6bcf 1 \u4f4d\u4e0a\uff0c\u6240\u6709\u6570\u7ec4\u4e2d\u7684\u8fd9\u4e9b\u6570\u4e0a\u7684 1 \u548c 0 \u7684\u4e2a\u6570\uff0c\u628a\u5b83\u4eec\u76f8\u4e58\uff0c\u5c31\u662f\u8fd9\u4e2a\u6570\u4f4d\u4e0a\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u201c\u8d21\u732e\u201d\u3002 \u53ef\u4ee5\u4e3e\u51fa\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5176\u5b9e\u65e0\u975e\u5c31\u662f\u628a\u52a0\u6cd5\u53d8\u6210\u4e86\u4e58\u6cd5\u3002 \u4f8b\u5982\uff1a 1000 1100 0111 0101 \u8fd9 4 \u4e2a\u6570\uff0c\u5148\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u770b\u8d77\uff0c\u6709 2 \u4e2a 0 \u548c 2 \u4e2a 1\uff1a1 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u8d21\u732e\u4e86 2 \u4e2a\u6c49\u660e\u8ddd\u79bb\uff0c\u90a3\u4e48 2 \u4e2a 0 \u4e0e 2 \u4e2a 1 \u5c31\u8d21\u732e\u4e86 $2 \\times 2 = 4$ \u4e2a\u6c49\u660e\u8ddd\u79bb\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u6280\u5de7\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a mask \u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u7f16\u7801\u53ea\u6709\u6700\u9ad8\u4f4d\u662f 1 \uff0c\u5176\u4f59\u4f4d\u90fd\u662f 0\uff0c\u53bb\u5224\u65ad\u4e00\u4e2a\u6570\u4f4d\u662f\u5426\u662f 1\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0477-total-hamming-distance/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0477-total-hamming-distance/#1","text":"public class Solution2 { public int totalHammingDistance(int[] nums) { int len = nums.length; int mask = 1; int res = 0; for (int i = 0; i < 32; i++) { // 0 \u7684\u4e2a\u6570 int zeros = 0; for (int num : nums) { if ((num & mask) == 0) { zeros++; } } res += ((len - zeros) * zeros); mask <<= 1; } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0477-total-hamming-distance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/","text":"515. Find Largest Value in Each Tree Row \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1 / \\ 3 2 / \\ \\ 5 3 9 \u8f93\u51fa: [1, 3, 9] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 515. Find Largest Value in Each Tree Row \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u95ee\u9898\u4e86\uff0c\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.LinkedList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<Integer> largestValues(TreeNode root) { List<Integer> res = new ArrayList<>(); if (root == null) { return res; } // \u6b64\u65f6 root \u4e00\u5b9a\u4e0d\u4e3a\u7a7a LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { int size = queue.size(); int max = Integer.MIN_VALUE; for (int i = 0; i < size; i++) { TreeNode node = queue.removeFirst(); max = Math.max(max, node.val); if (node.left != null) { queue.addLast(node.left); } if (node.right != null) { queue.addLast(node.right); } } res.add(max); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0515-find-largest-value-in-each-tree-row \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"515. Find Largest Value in Each Tree Row"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/#515-find-largest-value-in-each-tree-row","text":"","title":"515. Find Largest Value in Each Tree Row"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1 / \\ 3 2 / \\ \\ 5 3 9 \u8f93\u51fa: [1, 3, 9] \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 515. Find Largest Value in Each Tree Row \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u95ee\u9898\u4e86\uff0c\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0515-find-largest-value-in-each-tree-row/#1","text":"import java.util.ArrayList; import java.util.LinkedList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public List<Integer> largestValues(TreeNode root) { List<Integer> res = new ArrayList<>(); if (root == null) { return res; } // \u6b64\u65f6 root \u4e00\u5b9a\u4e0d\u4e3a\u7a7a LinkedList<TreeNode> queue = new LinkedList<>(); queue.addLast(root); while (!queue.isEmpty()) { int size = queue.size(); int max = Integer.MIN_VALUE; for (int i = 0; i < size; i++) { TreeNode node = queue.removeFirst(); max = Math.max(max, node.val); if (node.left != null) { queue.addLast(node.left); } if (node.right != null) { queue.addLast(node.right); } } res.add(max); } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0515-find-largest-value-in-each-tree-row \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0538-convert-bst-to-greater-tree/","text":"538. Convert BST to Greater Tree \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002 \u4f8b\u5982\uff1a \u8f93\u5165: \u4e8c\u53c9\u641c\u7d22\u6811: 5 / \\ 2 13 \u8f93\u51fa: \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811: 18 / \\ 20 13 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 538. Convert BST to Greater Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6c42\u89e3\u8fd9\u9053\u9898\u6211\u91c7\u7528\u7684\u662f\u548c\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\uff08LeetCode \u7b2c 94 \u9898\uff09\uff0c\u501f\u52a9\u6808\u6765\u5b8c\u6210\u3002 \u53ef\u4ee5\u5148\u4e86\u89e3\u4e00\u4e0b LeetCode \u7b2c 94 \u9898\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Stack; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode convertBST(TreeNode root) { if (root == null) { return root; } Stack<TreeNode> stack = new Stack<>(); TreeNode p = root; int cumSum = 0; while (p != null || !stack.empty()) { while (p != null) { stack.push(p); p = p.right; } TreeNode pop = stack.pop(); int curVal = pop.val; pop.val += cumSum; cumSum += curVal; p = pop.left; } return root; } /** * \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u6253\u5370\u8f93\u51fa BST * * @param node */ private void printBST(TreeNode node) { if (node == null) { return; } printBST(node.left); System.out.println(node.val); printBST(node.right); } public static void main(String[] args) { TreeNode node5 = new TreeNode(5); TreeNode node2 = new TreeNode(2); TreeNode node13 = new TreeNode(13); node5.left = node2; node5.right = node13; Solution solution = new Solution(); solution.convertBST(node5); System.out.println(\"\u4e2d\u5e8f\u904d\u5386 BST\uff1a\"); solution.printBST(node5); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0538-convert-bst-to-greater-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"538. Convert BST to Greater Tree"},{"location":"leetcode-0538-convert-bst-to-greater-tree/#538-convert-bst-to-greater-tree","text":"","title":"538. Convert BST to Greater Tree"},{"location":"leetcode-0538-convert-bst-to-greater-tree/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002 \u4f8b\u5982\uff1a \u8f93\u5165: \u4e8c\u53c9\u641c\u7d22\u6811: 5 / \\ 2 13 \u8f93\u51fa: \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811: 18 / \\ 20 13 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 538. Convert BST to Greater Tree \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0538-convert-bst-to-greater-tree/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6c42\u89e3\u8fd9\u9053\u9898\u6211\u91c7\u7528\u7684\u662f\u548c\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\uff08LeetCode \u7b2c 94 \u9898\uff09\uff0c\u501f\u52a9\u6808\u6765\u5b8c\u6210\u3002 \u53ef\u4ee5\u5148\u4e86\u89e3\u4e00\u4e0b LeetCode \u7b2c 94 \u9898\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0538-convert-bst-to-greater-tree/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0538-convert-bst-to-greater-tree/#1","text":"import java.util.Stack; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public TreeNode convertBST(TreeNode root) { if (root == null) { return root; } Stack<TreeNode> stack = new Stack<>(); TreeNode p = root; int cumSum = 0; while (p != null || !stack.empty()) { while (p != null) { stack.push(p); p = p.right; } TreeNode pop = stack.pop(); int curVal = pop.val; pop.val += cumSum; cumSum += curVal; p = pop.left; } return root; } /** * \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u6253\u5370\u8f93\u51fa BST * * @param node */ private void printBST(TreeNode node) { if (node == null) { return; } printBST(node.left); System.out.println(node.val); printBST(node.right); } public static void main(String[] args) { TreeNode node5 = new TreeNode(5); TreeNode node2 = new TreeNode(2); TreeNode node13 = new TreeNode(13); node5.left = node2; node5.right = node13; Solution solution = new Solution(); solution.convertBST(node5); System.out.println(\"\u4e2d\u5e8f\u904d\u5386 BST\uff1a\"); solution.printBST(node5); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0538-convert-bst-to-greater-tree \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0541-reverse-string-ii/","text":"541. Reverse String II \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u4e2a 2k \u4e2a\u5b57\u7b26\u7684\u524dk\u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002\u5982\u679c\u5269\u4f59\u5c11\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u5c06\u5269\u4f59\u7684\u6240\u6709\u5168\u90e8\u53cd\u8f6c\u3002\u5982\u679c\u6709\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"abcdefg\", k = 2 \u8f93\u51fa: \"bacdfeg\" \u8981\u6c42: \u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u3002 \u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728[1, 10000]\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 541. Reverse String II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u5355\u8bcd\u7684\u8fb9\u754c\u8fd9\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public String reverseStr(String s, int k) { int len = s.length(); char[] charArr = s.toCharArray(); int begin = 0; int step = 2 * k; while (begin < len) { int end = begin + k - 1; reverseCharArr(charArr, begin, end > len - 1 ? len - 1 : end); begin += step; } return String.valueOf(charArr); } // \u53cd\u8f6c\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u90e8\u5206 private void reverseCharArr(char[] arr, int l, int r) { while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { String s = \"abcdefg\"; int k = 2; // \"bacdfeg\" Solution solution = new Solution(); String reverseStr = solution.reverseStr(s, k); System.out.println(reverseStr); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0541-reverse-string-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"541. Reverse String II"},{"location":"leetcode-0541-reverse-string-ii/#541-reverse-string-ii","text":"","title":"541. Reverse String II"},{"location":"leetcode-0541-reverse-string-ii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u4e2a 2k \u4e2a\u5b57\u7b26\u7684\u524dk\u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002\u5982\u679c\u5269\u4f59\u5c11\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u5c06\u5269\u4f59\u7684\u6240\u6709\u5168\u90e8\u53cd\u8f6c\u3002\u5982\u679c\u6709\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"abcdefg\", k = 2 \u8f93\u51fa: \"bacdfeg\" \u8981\u6c42: \u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u3002 \u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728[1, 10000]\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 541. Reverse String II \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0541-reverse-string-ii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u5355\u8bcd\u7684\u8fb9\u754c\u8fd9\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0541-reverse-string-ii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0541-reverse-string-ii/#1","text":"public class Solution { public String reverseStr(String s, int k) { int len = s.length(); char[] charArr = s.toCharArray(); int begin = 0; int step = 2 * k; while (begin < len) { int end = begin + k - 1; reverseCharArr(charArr, begin, end > len - 1 ? len - 1 : end); begin += step; } return String.valueOf(charArr); } // \u53cd\u8f6c\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u7684\u6307\u5b9a\u90e8\u5206 private void reverseCharArr(char[] arr, int l, int r) { while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { String s = \"abcdefg\"; int k = 2; // \"bacdfeg\" Solution solution = new Solution(); String reverseStr = solution.reverseStr(s, k); System.out.println(reverseStr); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0541-reverse-string-ii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0542-01-matrix/","text":"542. 01 Matrix \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002 \u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 0 0 0 0 1 0 0 0 0 \u8f93\u51fa: 0 0 0 0 1 0 0 0 0 \u793a\u4f8b 2: \u8f93\u5165: 0 0 0 0 1 0 1 1 1 \u8f93\u51fa: 0 0 0 0 1 0 1 2 1 \u6ce8\u610f: \u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002 \u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002 \u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 542. 01 Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 542. 01 \u77e9\u9635 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; import java.util.LinkedList; public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private static int[][] directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}}; public int[][] updateMatrix(int[][] matrix) { int row = matrix.length; if (row == 0) { return new int[0][0]; } int col = matrix[0].length; LinkedList<Integer[]> queue = new LinkedList<>(); for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { if (matrix[i][j] == 0) { // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u5411\u5916\u6269\u6563 queue.addLast(new Integer[]{i, j}); } else { // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u8bf4\u660e\u5f53\u524d\u8fd9\u4e2a\u5750\u6807\u7684\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u6269\u6563\u5230 matrix[i][j] = -1; } } } // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386 while (!queue.isEmpty()) { // \u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\"0\" \u6b63\u597d\uff0c\u5230\"0\" \u7684\u8ddd\u79bb\u4e5f\u662f 0 \uff0c\u7b26\u5408\u9898\u610f Integer[] curPostion = queue.removeFirst(); // \u73b0\u5728\u8981\u5f80 4 \u4e2a\u65b9\u5411\u6269\u6563 for (int i = 0; i < 4; i++) { int newX = curPostion[0] + directions[i][0]; int newY = curPostion[1] + directions[i][1]; // \u5728\u6709\u6548\u7684\u5750\u6807\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 if (inArea(newX, newY, row, col) && matrix[newX][newY] == -1) { matrix[newX][newY] = matrix[curPostion[0]][curPostion[1]] + 1; queue.addLast(new Integer[]{newX, newY}); } } } return matrix; } private boolean inArea(int x, int y, int row, int col) { return x >= 0 && x < row && y >= 0 && y < col; } public static void main(String[] args) { int[][] matrix = new int[][]{ {0, 0, 0}, {0, 1, 0}, {1, 1, 1} }; Solution solution = new Solution(); int[][] updateMatrix = solution.updateMatrix(matrix); for (int i = 0; i < updateMatrix.length; i++) { System.out.println(Arrays.toString(updateMatrix[i])); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0542-01-matrix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"542. 01 Matrix"},{"location":"leetcode-0542-01-matrix/#542-01-matrix","text":"","title":"542. 01 Matrix"},{"location":"leetcode-0542-01-matrix/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002 \u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 0 0 0 0 1 0 0 0 0 \u8f93\u51fa: 0 0 0 0 1 0 0 0 0 \u793a\u4f8b 2: \u8f93\u5165: 0 0 0 0 1 0 1 1 1 \u8f93\u51fa: 0 0 0 0 1 0 1 2 1 \u6ce8\u610f: \u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002 \u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002 \u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 542. 01 Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 542. 01 \u77e9\u9635 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0542-01-matrix/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u4e86\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0542-01-matrix/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0542-01-matrix/#1","text":"import java.util.Arrays; import java.util.LinkedList; public class Solution { /** * x-1,y * x,y-1 x,y x,y+1 * x+1,y */ private static int[][] directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}}; public int[][] updateMatrix(int[][] matrix) { int row = matrix.length; if (row == 0) { return new int[0][0]; } int col = matrix[0].length; LinkedList<Integer[]> queue = new LinkedList<>(); for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { if (matrix[i][j] == 0) { // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u5411\u5916\u6269\u6563 queue.addLast(new Integer[]{i, j}); } else { // \u8bbe\u7f6e\u6210\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u8bf4\u660e\u5f53\u524d\u8fd9\u4e2a\u5750\u6807\u7684\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u6269\u6563\u5230 matrix[i][j] = -1; } } } // \u4ece\u4e3a 0 \u7684\u5730\u65b9\u5f00\u59cb\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386 while (!queue.isEmpty()) { // \u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\"0\" \u6b63\u597d\uff0c\u5230\"0\" \u7684\u8ddd\u79bb\u4e5f\u662f 0 \uff0c\u7b26\u5408\u9898\u610f Integer[] curPostion = queue.removeFirst(); // \u73b0\u5728\u8981\u5f80 4 \u4e2a\u65b9\u5411\u6269\u6563 for (int i = 0; i < 4; i++) { int newX = curPostion[0] + directions[i][0]; int newY = curPostion[1] + directions[i][1]; // \u5728\u6709\u6548\u7684\u5750\u6807\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 if (inArea(newX, newY, row, col) && matrix[newX][newY] == -1) { matrix[newX][newY] = matrix[curPostion[0]][curPostion[1]] + 1; queue.addLast(new Integer[]{newX, newY}); } } } return matrix; } private boolean inArea(int x, int y, int row, int col) { return x >= 0 && x < row && y >= 0 && y < col; } public static void main(String[] args) { int[][] matrix = new int[][]{ {0, 0, 0}, {0, 1, 0}, {1, 1, 1} }; Solution solution = new Solution(); int[][] updateMatrix = solution.updateMatrix(matrix); for (int i = 0; i < updateMatrix.length; i++) { System.out.println(Arrays.toString(updateMatrix[i])); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0542-01-matrix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/","text":"557. Reverse Words in a String III \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"Let's take LeetCode contest\" \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\" \u6ce8\u610f\uff1a \u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 557. Reverse Words in a String III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 557. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5b9e\u73b0\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u628a\u5269\u4e0b\u6ca1\u6709\u7ffb\u8f6c\u7684\uff0c\u518d\u7ffb\u8f6c\u4e00\u6b21\u5373\u53ef\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public String reverseWords(String s) { int len = s.length(); if (len == 1) { return s; } char[] charArr = s.toCharArray(); int begin = 0; for (int i = 0; i < len; i++) { if (s.charAt(i) == ' ') { reverseCharArray(charArr, begin, i - 1); begin = i + 1; } } reverseCharArray(charArr, begin, len - 1); return String.valueOf(charArr); } private void reverseCharArray(char[] arr, int l, int r) { while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { // \u8f93\u5165: \"Let's take LeetCode contest\" // \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\" String s = \"Let's take LeetCode contest\"; Solution solution =new Solution(); String reverseWords = solution.reverseWords(s); System.out.println(reverseWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0557-reverse-words-in-a-string-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"557. Reverse Words in a String III"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/#557-reverse-words-in-a-string-iii","text":"","title":"557. Reverse Words in a String III"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"Let's take LeetCode contest\" \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\" \u6ce8\u610f\uff1a \u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 557. Reverse Words in a String III \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 557. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5b9e\u73b0\u7ffb\u8f6c\u5b57\u7b26\u6570\u7ec4\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u628a\u5269\u4e0b\u6ca1\u6709\u7ffb\u8f6c\u7684\uff0c\u518d\u7ffb\u8f6c\u4e00\u6b21\u5373\u53ef\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0557-reverse-words-in-a-string-iii/#1","text":"public class Solution { public String reverseWords(String s) { int len = s.length(); if (len == 1) { return s; } char[] charArr = s.toCharArray(); int begin = 0; for (int i = 0; i < len; i++) { if (s.charAt(i) == ' ') { reverseCharArray(charArr, begin, i - 1); begin = i + 1; } } reverseCharArray(charArr, begin, len - 1); return String.valueOf(charArr); } private void reverseCharArray(char[] arr, int l, int r) { while (l < r) { swap(arr, l, r); l++; r--; } } private void swap(char[] arr, int l, int r) { char temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; } public static void main(String[] args) { // \u8f93\u5165: \"Let's take LeetCode contest\" // \u8f93\u51fa: \"s'teL ekat edoCteeL tsetnoc\" String s = \"Let's take LeetCode contest\"; Solution solution =new Solution(); String reverseWords = solution.reverseWords(s); System.out.println(reverseWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0557-reverse-words-in-a-string-iii \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0566-reshape-the-matrix/","text":"566. Reshape the Matrix \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 reshape \uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570 r \u548c c \uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002 \u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684 \u884c\u904d\u5386\u987a\u5e8f \u586b\u5145\u3002 \u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684 reshape \u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [[1,2], [3,4]] r = 1, c = 4 \u8f93\u51fa: [[1,2,3,4]] \u89e3\u91ca: \u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002 \u793a\u4f8b 2: \u8f93\u5165: nums = [[1,2], [3,4]] r = 2, c = 4 \u8f93\u51fa: [[1,2], [3,4]] \u89e3\u91ca: \u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002 \u6ce8\u610f\uff1a \u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002 \u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 566. Reshape the Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 566. \u91cd\u5851\u77e9\u9635 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6211\u7b54\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u4efb\u4f55\u7b97\u6cd5\u7684\u77e5\u8bc6\u3002 \u8d77\u521d\u6211\u60f3\u628a\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u590d\u5236\u5230\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\uff0c\u518d\u5199\u5165\u65b0\u77e9\u9635\u3002 \u540e\u6765\u6211\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\u590d\u5236\u4e00\u4e2a\u77e9\u9635\u51fa\u6765\uff0c\u76f4\u63a5\u5728\u904d\u5386\u7684\u65f6\u5019\u8fb9\u8bfb\u8fb9\u5199\u5c31\u53ef\u4ee5\u4e86\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u5373\u53ef\u3002 \u5c31\u5982\u540c\u6211\u4eec\u5199\u5b57\uff0c\u5199\u5b8c\u4e00\u884c\uff0c\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u4ece\u5934\u5f00\u59cb\u5199\u4e00\u6837\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; public class Solution { public int[][] matrixReshape(int[][] nums, int r, int c) { int row = nums.length; if (row == 0) { return nums; } int col = nums[0].length; // \u5982\u679c\u578b\u53f7\u4e0d\u76f8\u7b49\uff0c\u5219\u6ca1\u6709\u529e\u6cd5\u8f6c\u6362\uff0c\u6839\u636e\u9898\u610f\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u77e9\u9635 if (row * col != r * c) { return nums; } int[][] ret = new int[r][c]; // \u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668 int counter = 0; // \u65b0\u77e9\u9635\u7684\u884c\u5750\u6807 int x = 0; // \u5728\u904d\u5386\u539f\u77e9\u9635\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ed9\u65b0\u77e9\u9635\u8d4b\u503c\u4e86 // \u89c4\u5219\u5c31\u662f\u4ece\u5de6\u5411\u53f3\uff0c\u5982\u679c\u8d8a\u754c\u4e86\uff0c\u5c31\u91cd\u7f6e\uff0c\u5e76\u4e14\u884c\u53f7\u52a0 1 for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { ret[x][counter] = nums[i][j]; counter++; if (counter == c) { // \u8d8a\u754c\uff0c\u91cd\u7f6e\u5217\u5750\u6807\uff0c\u884c\u53f7 + 1 counter = 0; x++; } } } return ret; } public static void main(String[] args) { int[][] nums = new int[][]{ {1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12} }; int r = 4; int c = 3; Solution solution = new Solution(); int[][] matrixReshape = solution.matrixReshape(nums, r, c); for (int i = 0; i < matrixReshape.length; i++) { System.out.println(Arrays.toString(matrixReshape[i])); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0566-reshape-the-matrix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"566. Reshape the Matrix"},{"location":"leetcode-0566-reshape-the-matrix/#566-reshape-the-matrix","text":"","title":"566. Reshape the Matrix"},{"location":"leetcode-0566-reshape-the-matrix/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 reshape \uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570 r \u548c c \uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002 \u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684 \u884c\u904d\u5386\u987a\u5e8f \u586b\u5145\u3002 \u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684 reshape \u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [[1,2], [3,4]] r = 1, c = 4 \u8f93\u51fa: [[1,2,3,4]] \u89e3\u91ca: \u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002 \u793a\u4f8b 2: \u8f93\u5165: nums = [[1,2], [3,4]] r = 2, c = 4 \u8f93\u51fa: [[1,2], [3,4]] \u89e3\u91ca: \u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002 \u6ce8\u610f\uff1a \u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002 \u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 566. Reshape the Matrix \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 566. \u91cd\u5851\u77e9\u9635 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0566-reshape-the-matrix/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6211\u7b54\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u4efb\u4f55\u7b97\u6cd5\u7684\u77e5\u8bc6\u3002 \u8d77\u521d\u6211\u60f3\u628a\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u590d\u5236\u5230\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\uff0c\u518d\u5199\u5165\u65b0\u77e9\u9635\u3002 \u540e\u6765\u6211\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\u590d\u5236\u4e00\u4e2a\u77e9\u9635\u51fa\u6765\uff0c\u76f4\u63a5\u5728\u904d\u5386\u7684\u65f6\u5019\u8fb9\u8bfb\u8fb9\u5199\u5c31\u53ef\u4ee5\u4e86\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u5373\u53ef\u3002 \u5c31\u5982\u540c\u6211\u4eec\u5199\u5b57\uff0c\u5199\u5b8c\u4e00\u884c\uff0c\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u4ece\u5934\u5f00\u59cb\u5199\u4e00\u6837\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0566-reshape-the-matrix/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0566-reshape-the-matrix/#1","text":"import java.util.Arrays; public class Solution { public int[][] matrixReshape(int[][] nums, int r, int c) { int row = nums.length; if (row == 0) { return nums; } int col = nums[0].length; // \u5982\u679c\u578b\u53f7\u4e0d\u76f8\u7b49\uff0c\u5219\u6ca1\u6709\u529e\u6cd5\u8f6c\u6362\uff0c\u6839\u636e\u9898\u610f\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u77e9\u9635 if (row * col != r * c) { return nums; } int[][] ret = new int[r][c]; // \u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668 int counter = 0; // \u65b0\u77e9\u9635\u7684\u884c\u5750\u6807 int x = 0; // \u5728\u904d\u5386\u539f\u77e9\u9635\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ed9\u65b0\u77e9\u9635\u8d4b\u503c\u4e86 // \u89c4\u5219\u5c31\u662f\u4ece\u5de6\u5411\u53f3\uff0c\u5982\u679c\u8d8a\u754c\u4e86\uff0c\u5c31\u91cd\u7f6e\uff0c\u5e76\u4e14\u884c\u53f7\u52a0 1 for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) { ret[x][counter] = nums[i][j]; counter++; if (counter == c) { // \u8d8a\u754c\uff0c\u91cd\u7f6e\u5217\u5750\u6807\uff0c\u884c\u53f7 + 1 counter = 0; x++; } } } return ret; } public static void main(String[] args) { int[][] nums = new int[][]{ {1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12} }; int r = 4; int c = 3; Solution solution = new Solution(); int[][] matrixReshape = solution.matrixReshape(nums, r, c); for (int i = 0; i < matrixReshape.length; i++) { System.out.println(Arrays.toString(matrixReshape[i])); } } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0566-reshape-the-matrix \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0620-not-boring-movies/","text":"620. Not Boring Movies \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002 \u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a \u975e boring (\u4e0d\u65e0\u804a) \u7684\u5e76\u4e14 id \u4e3a\u5947\u6570 \u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7 rating \u6392\u5217\u3002 \u4f8b\u5982\uff0c\u4e0b\u8868 cinema : +---------+-----------+--------------+-----------+ | id | movie | description | rating | +---------+-----------+--------------+-----------+ | 1 | War | great 3D | 8.9 | | 2 | Science | fiction | 8.5 | | 3 | irish | boring | 6.2 | | 4 | Ice song | Fantacy | 8.6 | | 5 | House card| Interesting| 9.1 | +---------+-----------+--------------+-----------+ \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a +---------+-----------+--------------+-----------+ | id | movie | description | rating | +---------+-----------+--------------+-----------+ | 5 | House card| Interesting| 9.1 | | 1 | War | great 3D | 8.9 | +---------+-----------+--------------+-----------+ \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 620. Not Boring Movies \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 620. \u6709\u8da3\u7684\u7535\u5f71 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a drop table if exists cinema; create table cinema( id int primary key auto_increment, movie varchar(100), description varchar(100), rating double ); insert into cinema(movie,description,rating) values('War','great 3D',8.9); insert into cinema(movie,description,rating) values('Science','fiction',8.5); insert into cinema(movie,description,rating) values('irish','boring',6.2); insert into cinema(movie,description,rating) values('Ice song','Fantacy',8.6); insert into cinema(movie,description,rating) values('House card','Interesting',9.1); \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 select id, movie, description, rating from cinema where description != 'boring' and id % 2 = 1 order by rating desc; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0620-not-boring-movies \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"620. Not Boring Movies"},{"location":"leetcode-0620-not-boring-movies/#620-not-boring-movies","text":"","title":"620. Not Boring Movies"},{"location":"leetcode-0620-not-boring-movies/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002 \u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a \u975e boring (\u4e0d\u65e0\u804a) \u7684\u5e76\u4e14 id \u4e3a\u5947\u6570 \u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7 rating \u6392\u5217\u3002 \u4f8b\u5982\uff0c\u4e0b\u8868 cinema : +---------+-----------+--------------+-----------+ | id | movie | description | rating | +---------+-----------+--------------+-----------+ | 1 | War | great 3D | 8.9 | | 2 | Science | fiction | 8.5 | | 3 | irish | boring | 6.2 | | 4 | Ice song | Fantacy | 8.6 | | 5 | House card| Interesting| 9.1 | +---------+-----------+--------------+-----------+ \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a +---------+-----------+--------------+-----------+ | id | movie | description | rating | +---------+-----------+--------------+-----------+ | 5 | House card| Interesting| 9.1 | | 1 | War | great 3D | 8.9 | +---------+-----------+--------------+-----------+ \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 620. Not Boring Movies \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 620. \u6709\u8da3\u7684\u7535\u5f71 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0620-not-boring-movies/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a drop table if exists cinema; create table cinema( id int primary key auto_increment, movie varchar(100), description varchar(100), rating double ); insert into cinema(movie,description,rating) values('War','great 3D',8.9); insert into cinema(movie,description,rating) values('Science','fiction',8.5); insert into cinema(movie,description,rating) values('irish','boring',6.2); insert into cinema(movie,description,rating) values('Ice song','Fantacy',8.6); insert into cinema(movie,description,rating) values('House card','Interesting',9.1);","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0620-not-boring-movies/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0620-not-boring-movies/#1","text":"select id, movie, description, rating from cinema where description != 'boring' and id % 2 = 1 order by rating desc; \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0620-not-boring-movies \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0627-swap-salary/","text":"627. Swap Salary \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a salary \u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709m=\u7537\u6027 \u548c f=\u5973\u6027\u7684\u503c \u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c(\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136)\u3002\u8981\u6c42\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\u67e5\u8be2\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u4e34\u65f6\u8868\u3002 \u4f8b\u5982: | id | name | sex | salary | |----|------|-----|--------| | 1 | A | m | 2500 | | 2 | B | f | 1500 | | 3 | C | m | 5500 | | 4 | D | f | 500 | \u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868: | id | name | sex | salary | |----|------|-----|--------| | 1 | A | f | 2500 | | 2 | B | m | 1500 | | 3 | C | f | 5500 | | 4 | D | m | 500 | \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 627. Swap Salary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 627. \u4ea4\u6362\u5de5\u8d44 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a drop table if exists salary; create table salary( id int primary key auto_increment, name varchar(200), sex char(1), salary int ); insert into salary(name,sex,salary) values('A','m',2500); insert into salary(name,sex,salary) values('B','f',1500); insert into salary(name,sex,salary) values('C','m',5500); insert into salary(name,sex,salary) values('D','f',500); select * from salary; \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 UPDATE `salary` SET sex = IF(sex='m','f','m'); \u53c2\u8003\u89e3\u7b542 UPDATE `salary` SET sex = (CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END); \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0627-swap-salary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"627. Swap Salary"},{"location":"leetcode-0627-swap-salary/#627-swap-salary","text":"","title":"627. Swap Salary"},{"location":"leetcode-0627-swap-salary/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a salary \u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709m=\u7537\u6027 \u548c f=\u5973\u6027\u7684\u503c \u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c(\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136)\u3002\u8981\u6c42\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\u67e5\u8be2\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u4e34\u65f6\u8868\u3002 \u4f8b\u5982: | id | name | sex | salary | |----|------|-----|--------| | 1 | A | m | 2500 | | 2 | B | f | 1500 | | 3 | C | m | 5500 | | 4 | D | f | 500 | \u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868: | id | name | sex | salary | |----|------|-----|--------| | 1 | A | f | 2500 | | 2 | B | m | 1500 | | 3 | C | f | 5500 | | 4 | D | m | 500 | \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 627. Swap Salary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 627. \u4ea4\u6362\u5de5\u8d44 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0627-swap-salary/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a \u7528\u4e8e\u6d4b\u8bd5\u7684 SQL \u8bed\u53e5\uff1a drop table if exists salary; create table salary( id int primary key auto_increment, name varchar(200), sex char(1), salary int ); insert into salary(name,sex,salary) values('A','m',2500); insert into salary(name,sex,salary) values('B','f',1500); insert into salary(name,sex,salary) values('C','m',5500); insert into salary(name,sex,salary) values('D','f',500); select * from salary;","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0627-swap-salary/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0627-swap-salary/#1","text":"UPDATE `salary` SET sex = IF(sex='m','f','m');","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0627-swap-salary/#2","text":"UPDATE `salary` SET sex = (CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END); \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0627-swap-salary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0633-sum-of-square-numbers/","text":"633. Sum of Square Numbers \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 c \uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 a \u548c b \uff0c\u4f7f\u5f97 a 2 + b 2 = c\u3002 \u793a\u4f8b1: \u8f93\u5165: 5 \u8f93\u51fa: True \u89e3\u91ca: 1 * 1 + 2 * 2 = 5 \u793a\u4f8b2: \u8f93\u5165: 3 \u8f93\u51fa: False \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 633. Sum of Square Numbers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 633. \u5e73\u65b9\u6570\u4e4b\u548c \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0633-sum-of-square-numbers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"633. Sum of Square Numbers"},{"location":"leetcode-0633-sum-of-square-numbers/#633-sum-of-square-numbers","text":"","title":"633. Sum of Square Numbers"},{"location":"leetcode-0633-sum-of-square-numbers/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 c \uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 a \u548c b \uff0c\u4f7f\u5f97 a 2 + b 2 = c\u3002 \u793a\u4f8b1: \u8f93\u5165: 5 \u8f93\u51fa: True \u89e3\u91ca: 1 * 1 + 2 * 2 = 5 \u793a\u4f8b2: \u8f93\u5165: 3 \u8f93\u51fa: False \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 633. Sum of Square Numbers \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 633. \u5e73\u65b9\u6570\u4e4b\u548c \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0633-sum-of-square-numbers/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0633-sum-of-square-numbers/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0633-sum-of-square-numbers/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0633-sum-of-square-numbers \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0648-replace-words/","text":"648. Replace Words \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a \u8bcd\u6839 (root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a \u7ee7\u627f\u8bcd (successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839 an \uff0c\u8ddf\u968f\u7740\u5355\u8bcd other (\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd another (\u53e6\u4e00\u4e2a)\u3002 \u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709 \u7ee7\u627f\u8bcd \u7528 \u8bcd\u6839 \u66ff\u6362\u6389\u3002\u5982\u679c \u7ee7\u627f\u8bcd \u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684 \u8bcd\u6839 \uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002 \u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002 \u793a\u4f8b 1: \u8f93\u5165: dict(\u8bcd\u5178) = [\"cat\", \"bat\", \"rat\"] sentence(\u53e5\u5b50) = \"the cattle was rattled by the battery\" \u8f93\u51fa: \"the cat was rat by the bat\" \u6ce8: \u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 1 <= \u5b57\u5178\u5355\u8bcd\u6570 <=1000 1 <= \u53e5\u4e2d\u8bcd\u8bed\u6570 <= 1000 1 <= \u8bcd\u6839\u957f\u5ea6 <= 100 1 <= \u53e5\u4e2d\u8bcd\u8bed\u957f\u5ea6 <= 1000 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 648. Replace Words \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 648. \u5355\u8bcd\u66ff\u6362 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; import java.util.List; public class Solution { // \u6211\u81ea\u5df1\u5199\u7684\u4ee3\u7801\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b57\u5178\u6811 Trie private class Trie { private Node root; private class Node { private Node[] next; private boolean isEnd; public Node() { this.next = new Node[26]; this.isEnd = false; } } public Trie() { root = new Node(); } /** * insert \u65b9\u6cd5\u548c\u4e00\u534a\u524d\u7f00\u6811\u65e0\u5f02 * * @param word */ public void insert(String word) { Node curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { curNode.next[c - 'a'] = new Node(); } curNode = curNode.next[c - 'a']; } if (!curNode.isEnd) { curNode.isEnd = true; } } /** * @param word \u8bcd\u6839 * @return \u5982\u679c\u662f\u8bcd\u6839\uff0c\u5219\u8fd4\u56de\u5230\u8bcd\u6839\u7684\u7d22\u5f15\u503c\uff08\u4e0d\u5305\u542b\u8be5\u7d22\u5f15\uff09\uff0c\u5982\u679c\u4e0d\u662f\u8bcd\u6839\uff0c\u8fd4\u56de 0 */ public int startsWith(String word) { int index = 0; Node curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { return 0; } curNode = curNode.next[c - 'a']; index++; if (curNode.isEnd) { return index; } } // \u5982\u679c\u662f\u524d\u7f00\uff0c\u5219\u8fd4\u56de 0 \uff0c\u4f8b\u5982\uff1a\u5b57\u5178\u91cc\u9762\u662f hello\uff0c\u800c\u904d\u5386\u7684\u5355\u8bcd\u662f he return 0; } } public String replaceWords(List<String> dict, String sentence) { if (dict == null || dict.size() == 0 || sentence == null || sentence.length() == 0) { return \"\"; } Trie trie = new Trie(); for (String word : dict) { trie.insert(word); } StringBuilder stringBuilder = new StringBuilder(); for (String word : sentence.split(\" \")) { int index = trie.startsWith(word); if (index == 0) { stringBuilder.append(word); } else { stringBuilder.append(word.substring(0, index)); } stringBuilder.append(\" \"); } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c stringBuilder.deleteCharAt(stringBuilder.length() - 1); return stringBuilder.toString(); } public static void main(String[] args) { Solution solution = new Solution(); List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"}); String sentence = \"the cattle was rattled by the battery\"; String replaceWords = solution.replaceWords(dict, sentence); System.out.println(replaceWords); } } \u53c2\u8003\u89e3\u7b542 import java.util.Arrays; import java.util.HashSet; import java.util.List; import java.util.Set; public class Solution2 { public String replaceWords(List<String> dict, String sentence) { Set<String> set = new HashSet<>(); set.addAll(dict); StringBuilder stringBuilder = new StringBuilder(); String[] words = sentence.split(\" \"); int len = words.length; for (int i = 0; i < len; i++) { for (int j = 1; j <= words[i].length(); j++) { String prefix = words[i].substring(0, j); if (set.contains(prefix)) { words[i] = prefix; break; } } stringBuilder.append(words[i]); stringBuilder.append(\" \"); } return stringBuilder.substring(0, stringBuilder.length() - 1); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"}); String sentence = \"the cattle was rattled by the battery\"; String replaceWords = solution2.replaceWords(dict, sentence); System.out.println(replaceWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0648-replace-words \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"648. Replace Words"},{"location":"leetcode-0648-replace-words/#648-replace-words","text":"","title":"648. Replace Words"},{"location":"leetcode-0648-replace-words/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a \u8bcd\u6839 (root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a \u7ee7\u627f\u8bcd (successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839 an \uff0c\u8ddf\u968f\u7740\u5355\u8bcd other (\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd another (\u53e6\u4e00\u4e2a)\u3002 \u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709 \u7ee7\u627f\u8bcd \u7528 \u8bcd\u6839 \u66ff\u6362\u6389\u3002\u5982\u679c \u7ee7\u627f\u8bcd \u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684 \u8bcd\u6839 \uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002 \u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002 \u793a\u4f8b 1: \u8f93\u5165: dict(\u8bcd\u5178) = [\"cat\", \"bat\", \"rat\"] sentence(\u53e5\u5b50) = \"the cattle was rattled by the battery\" \u8f93\u51fa: \"the cat was rat by the bat\" \u6ce8: \u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 1 <= \u5b57\u5178\u5355\u8bcd\u6570 <=1000 1 <= \u53e5\u4e2d\u8bcd\u8bed\u6570 <= 1000 1 <= \u8bcd\u6839\u957f\u5ea6 <= 100 1 <= \u53e5\u4e2d\u8bcd\u8bed\u957f\u5ea6 <= 1000 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 648. Replace Words \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 648. \u5355\u8bcd\u66ff\u6362 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0648-replace-words/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0648-replace-words/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0648-replace-words/#1","text":"import java.util.Arrays; import java.util.List; public class Solution { // \u6211\u81ea\u5df1\u5199\u7684\u4ee3\u7801\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b57\u5178\u6811 Trie private class Trie { private Node root; private class Node { private Node[] next; private boolean isEnd; public Node() { this.next = new Node[26]; this.isEnd = false; } } public Trie() { root = new Node(); } /** * insert \u65b9\u6cd5\u548c\u4e00\u534a\u524d\u7f00\u6811\u65e0\u5f02 * * @param word */ public void insert(String word) { Node curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { curNode.next[c - 'a'] = new Node(); } curNode = curNode.next[c - 'a']; } if (!curNode.isEnd) { curNode.isEnd = true; } } /** * @param word \u8bcd\u6839 * @return \u5982\u679c\u662f\u8bcd\u6839\uff0c\u5219\u8fd4\u56de\u5230\u8bcd\u6839\u7684\u7d22\u5f15\u503c\uff08\u4e0d\u5305\u542b\u8be5\u7d22\u5f15\uff09\uff0c\u5982\u679c\u4e0d\u662f\u8bcd\u6839\uff0c\u8fd4\u56de 0 */ public int startsWith(String word) { int index = 0; Node curNode = root; for (char c : word.toCharArray()) { if (curNode.next[c - 'a'] == null) { return 0; } curNode = curNode.next[c - 'a']; index++; if (curNode.isEnd) { return index; } } // \u5982\u679c\u662f\u524d\u7f00\uff0c\u5219\u8fd4\u56de 0 \uff0c\u4f8b\u5982\uff1a\u5b57\u5178\u91cc\u9762\u662f hello\uff0c\u800c\u904d\u5386\u7684\u5355\u8bcd\u662f he return 0; } } public String replaceWords(List<String> dict, String sentence) { if (dict == null || dict.size() == 0 || sentence == null || sentence.length() == 0) { return \"\"; } Trie trie = new Trie(); for (String word : dict) { trie.insert(word); } StringBuilder stringBuilder = new StringBuilder(); for (String word : sentence.split(\" \")) { int index = trie.startsWith(word); if (index == 0) { stringBuilder.append(word); } else { stringBuilder.append(word.substring(0, index)); } stringBuilder.append(\" \"); } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c stringBuilder.deleteCharAt(stringBuilder.length() - 1); return stringBuilder.toString(); } public static void main(String[] args) { Solution solution = new Solution(); List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"}); String sentence = \"the cattle was rattled by the battery\"; String replaceWords = solution.replaceWords(dict, sentence); System.out.println(replaceWords); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0648-replace-words/#2","text":"import java.util.Arrays; import java.util.HashSet; import java.util.List; import java.util.Set; public class Solution2 { public String replaceWords(List<String> dict, String sentence) { Set<String> set = new HashSet<>(); set.addAll(dict); StringBuilder stringBuilder = new StringBuilder(); String[] words = sentence.split(\" \"); int len = words.length; for (int i = 0; i < len; i++) { for (int j = 1; j <= words[i].length(); j++) { String prefix = words[i].substring(0, j); if (set.contains(prefix)) { words[i] = prefix; break; } } stringBuilder.append(words[i]); stringBuilder.append(\" \"); } return stringBuilder.substring(0, stringBuilder.length() - 1); } public static void main(String[] args) { Solution2 solution2 = new Solution2(); List<String> dict = Arrays.asList(new String[]{\"cat\", \"bat\", \"rat\"}); String sentence = \"the cattle was rattled by the battery\"; String replaceWords = solution2.replaceWords(dict, sentence); System.out.println(replaceWords); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0648-replace-words \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/","text":"653. Two Sum IV - Input is a BST \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002 \u6848\u4f8b 1: \u8f93\u5165: 5 / \\ 3 6 / \\ \\ 2 4 7 Target = 9 \u8f93\u51fa: True \u6848\u4f8b 2: \u8f93\u5165: 5 / \\ 3 6 / \\ \\ 2 4 7 Target = 28 \u8f93\u51fa: False \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 653. Two Sum IV - Input is a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 653. \u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u662f LeetCode \u7b2c 1 \u9898\u548c\u7b2c 167 \u9898\u7684\u6269\u5c55\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5229\u7528\u5b83\u4eec\u4e24\u9053\u9898\u7684\u601d\u8def\u6765\u5b8c\u6210\u3002 1\u3001\u91c7\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u5230\u4e86\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\uff1b 2\u3001\u5982\u679c\u501f\u52a9\u54c8\u5e0c\u8868\uff0c\u5404\u79cd\u904d\u5386\u65b9\u5f0f\u5c31\u90fd\u53ef\u4ee5\u4e86\uff08\u6ca1\u6709\u5229\u7528\u5230\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean findTarget(TreeNode root, int k) { if (root == null) { return false; } List<Integer> list = new ArrayList<>(); // \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4 inOrder(root, list); int len = list.size(); int l = 0; int r = len - 1; // \u5728\u987a\u5e8f\u6570\u7ec4\u4e2d\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5 while (l < r) { int sum = list.get(l) + list.get(r); if (sum > k) { r--; } else if (sum < k) { l++; } else { assert sum == k; return true; } } return false; } private void inOrder(TreeNode node, List<Integer> list) { if (node == null) { return; } inOrder(node.left, list); list.add(node.val); inOrder(node.right, list); } } \u53c2\u8003\u89e3\u7b542 import java.util.HashSet; /** * @author liwei * @date 18/6/22 \u4e0b\u53482:18 */ public class Solution2 { /** * \u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\uff0c\u5176\u5b9e\u524d\u4e2d\u540e\u5e8f\u90fd\u80fd\u901a\u8fc7\uff0c\u751a\u81f3\u5c42\u5e8f\u904d\u5386\u4e5f\u884c * @param root * @param k * @return */ public boolean findTarget(TreeNode root, int k) { if (root == null) { return false; } // \u56e0\u4e3a BST \u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Set HashSet<Integer> set = new HashSet<>(); boolean[] res = new boolean[1]; preOrder(root, set, k, res); return res[0]; } private void preOrder(TreeNode node, HashSet<Integer> set, int k, boolean[] res) { if (node == null) { return; } // 2 * node.val == k \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a BST \u4e2d\uff0c\u6240\u6709\u7684\u6570\u90fd\u4e0d\u76f8\u540c\uff08\u5373 k \u7684\u4e00\u534a\u8fd9\u4e2a\u6570\u4e00\u5b9a\u4e0d\u662f\u6211\u4eec\u8981\u627e\u7684 \uff09 if (set.contains(k - node.val) && 2 * node.val != k) { res[0] = true; return; } else { set.add(node.val); } preOrder(node.left, set, k, res); preOrder(node.right, set, k, res); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0653-two-sum-iv-input-is-a-bst \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"653. Two Sum IV - Input is a BST"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#653-two-sum-iv-input-is-a-bst","text":"","title":"653. Two Sum IV - Input is a BST"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002 \u6848\u4f8b 1: \u8f93\u5165: 5 / \\ 3 6 / \\ \\ 2 4 7 Target = 9 \u8f93\u51fa: True \u6848\u4f8b 2: \u8f93\u5165: 5 / \\ 3 6 / \\ \\ 2 4 7 Target = 28 \u8f93\u51fa: False \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 653. Two Sum IV - Input is a BST \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 653. \u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u95ee\u9898\u662f LeetCode \u7b2c 1 \u9898\u548c\u7b2c 167 \u9898\u7684\u6269\u5c55\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5229\u7528\u5b83\u4eec\u4e24\u9053\u9898\u7684\u601d\u8def\u6765\u5b8c\u6210\u3002 1\u3001\u91c7\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u5229\u7528\u5230\u4e86\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\uff1b 2\u3001\u5982\u679c\u501f\u52a9\u54c8\u5e0c\u8868\uff0c\u5404\u79cd\u904d\u5386\u65b9\u5f0f\u5c31\u90fd\u53ef\u4ee5\u4e86\uff08\u6ca1\u6709\u5229\u7528\u5230\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6709\u5e8f\u6027\uff09\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#1","text":"import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { public boolean findTarget(TreeNode root, int k) { if (root == null) { return false; } List<Integer> list = new ArrayList<>(); // \u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u4e00\u4e2a\u987a\u5e8f\u6570\u7ec4 inOrder(root, list); int len = list.size(); int l = 0; int r = len - 1; // \u5728\u987a\u5e8f\u6570\u7ec4\u4e2d\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5 while (l < r) { int sum = list.get(l) + list.get(r); if (sum > k) { r--; } else if (sum < k) { l++; } else { assert sum == k; return true; } } return false; } private void inOrder(TreeNode node, List<Integer> list) { if (node == null) { return; } inOrder(node.left, list); list.add(node.val); inOrder(node.right, list); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0653-two-sum-iv-input-is-a-bst/#2","text":"import java.util.HashSet; /** * @author liwei * @date 18/6/22 \u4e0b\u53482:18 */ public class Solution2 { /** * \u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\uff0c\u5176\u5b9e\u524d\u4e2d\u540e\u5e8f\u90fd\u80fd\u901a\u8fc7\uff0c\u751a\u81f3\u5c42\u5e8f\u904d\u5386\u4e5f\u884c * @param root * @param k * @return */ public boolean findTarget(TreeNode root, int k) { if (root == null) { return false; } // \u56e0\u4e3a BST \u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Set HashSet<Integer> set = new HashSet<>(); boolean[] res = new boolean[1]; preOrder(root, set, k, res); return res[0]; } private void preOrder(TreeNode node, HashSet<Integer> set, int k, boolean[] res) { if (node == null) { return; } // 2 * node.val == k \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a BST \u4e2d\uff0c\u6240\u6709\u7684\u6570\u90fd\u4e0d\u76f8\u540c\uff08\u5373 k \u7684\u4e00\u534a\u8fd9\u4e2a\u6570\u4e00\u5b9a\u4e0d\u662f\u6211\u4eec\u8981\u627e\u7684 \uff09 if (set.contains(k - node.val) && 2 * node.val != k) { res[0] = true; return; } else { set.add(node.val); } preOrder(node.left, set, k, res); preOrder(node.right, set, k, res); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0653-two-sum-iv-input-is-a-bst \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0677-map-sum-pairs/","text":"677. Map Sum Pairs \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 677. Map Sum Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 677. \u952e\u503c\u6620\u5c04 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528 Trie \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684 isWord \u8bbe\u8ba1\u6210 value \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765 isWord \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002 + \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002 + \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a import java.util.HashMap; public class MapSum { private Node root; private class Node { private int value; private HashMap<Character, Node> next; public Node() { this(0); } public Node(int value) { this.value = value; this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public MapSum() { root = new Node(); } public void insert(String key, int val) { Node curNode = root; for (int i = 0; i < key.length(); i++) { Character c = key.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } curNode.value = val; } // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83 public int sum(String prefix) { Node curNode = root; for (int i = 0; i < prefix.length(); i++) { Character c = prefix.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return 0; } } return sum(curNode); } // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c private int sum(Node node) { int res = node.value; for (Character key : node.next.keySet()) { // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9 res += sum(node.next.get(key)); } return res; } public static void main(String[] args) { // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3 // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5 MapSum2 mapSum = new MapSum2(); mapSum.insert(\"apple\", 3); int sum1 = mapSum.sum(\"ap\"); System.out.println(sum1); mapSum.insert(\"app\", 2); int sum2 = mapSum.sum(\"ap\"); System.out.println(sum2); } } Python \u5199\u6cd5\uff1a class MapSum(object): # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053 class TrieNode: def __init__(self): self.val = 0 self.next = {} def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.root = MapSum.TrieNode() def insert(self, key, val): \"\"\" :type key: str :type val: int :rtype: void \"\"\" cur_node = self.root for c in key: if c not in cur_node.next.keys(): cur_node.next[c] = MapSum.TrieNode() cur_node = cur_node.next[c] cur_node.val = val def sum(self, prefix): \"\"\" :type prefix: str :rtype: int \"\"\" cur_node = self.root for c in prefix: if c in cur_node.next.keys(): cur_node = cur_node.next[c] else: return 0 return self.__sum(cur_node) # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52 def __sum(self, node): res = node.val # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0 for c in node.next.keys(): res += self.__sum(node.next[c]) return res # Your MapSum object will be instantiated and called as such: # obj = MapSum() # obj.insert(key,val) # param_2 = obj.sum(prefix)","title":"677. Map Sum Pairs"},{"location":"leetcode-0677-map-sum-pairs/#677-map-sum-pairs","text":"","title":"677. Map Sum Pairs"},{"location":"leetcode-0677-map-sum-pairs/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0cinsert \u548c sum\u3002\u5bf9\u4e8e\u65b9\u6cd5 insert\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5bf9\u4e8e\u65b9\u6cd5 sum\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 677. Map Sum Pairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 677. \u952e\u503c\u6620\u5c04 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0677-map-sum-pairs/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u4f7f\u7528 Trie \u5355\u8bcd\u67e5\u627e\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u5c06\u539f\u6765\u7684 isWord \u8bbe\u8ba1\u6210 value \u5b83\u4e0d\u4f46\u53ef\u4ee5\u8868\u8fbe\u539f\u6765 isWord \u7684\u542b\u4e49\uff0c\u8fd8\u80fd\u8868\u793a\u9898\u76ee\u4e2d\u4e00\u4e2a\u5355\u8bcd\u643a\u5e26\u7684\u6574\u6570\u7684\u542b\u4e49\u3002 + \u9996\u5148\u5148\u628a\u524d\u7f00\u904d\u5386\u5b8c\uff0c\u5982\u679c\u524d\u7f00\u90fd\u4e0d\u80fd\u904d\u5386\u5b8c\u6210\uff0c\u5c31\u8bf4\u660e\u5355\u8bcd\u67e5\u627e\u6811\u4e2d\u4e0d\u5b58\u5728\u4ee5\u8fd9\u4e2a\u5355\u8bcd\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\uff0c\u5e94\u8be5\u8fd4\u56de 0\uff0c\u5426\u5219\u4ee5\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u6839\uff0c\u5faa\u73af\u904d\u5386\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u9014\u5f84\u7684\u6240\u6709 value \u503c\u90fd\u5e94\u8be5\u52a0\u548c\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u91cc\u3002 + \u8ba1\u7b97 sum \u8bbe\u8ba1\u6210\u4e00\u4e2a\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u51e0\u884c\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5730\u5199\u51fa\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u4f46\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5df2\u7ecf\u5305\u542b\u5728\u65b9\u6cd5\u4f53\u4e2d\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0677-map-sum-pairs/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0677-map-sum-pairs/#1","text":"Java \u5199\u6cd5\uff1a import java.util.HashMap; public class MapSum { private Node root; private class Node { private int value; private HashMap<Character, Node> next; public Node() { this(0); } public Node(int value) { this.value = value; this.next = new HashMap<>(); } } /** * Initialize your data structure here. */ public MapSum() { root = new Node(); } public void insert(String key, int val) { Node curNode = root; for (int i = 0; i < key.length(); i++) { Character c = key.charAt(i); if (!curNode.next.containsKey(c)) { curNode.next.put(c, new Node()); } curNode = curNode.next.get(c); } curNode.value = val; } // \u8bbe\u8ba1\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u53bb\u5b8c\u6210\u5b83 public int sum(String prefix) { Node curNode = root; for (int i = 0; i < prefix.length(); i++) { Character c = prefix.charAt(i); if (curNode.next.containsKey(c)) { curNode = curNode.next.get(c); } else { return 0; } } return sum(curNode); } // \u8ba1\u7b97\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u6240\u6709 value \u503c\u7684\u548c private int sum(Node node) { int res = node.value; for (Character key : node.next.keySet()) { // \u4e00\u76f4\u627e\u5230\u6839\u8282\u70b9 res += sum(node.next.get(key)); } return res; } public static void main(String[] args) { // \u8f93\u5165: insert(\"apple\", 3), \u8f93\u51fa: Null // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 3 // \u8f93\u5165: insert(\"app\", 2), \u8f93\u51fa: Null // \u8f93\u5165: sum(\"ap\"), \u8f93\u51fa: 5 MapSum2 mapSum = new MapSum2(); mapSum.insert(\"apple\", 3); int sum1 = mapSum.sum(\"ap\"); System.out.println(sum1); mapSum.insert(\"app\", 2); int sum2 = mapSum.sum(\"ap\"); System.out.println(sum2); } } Python \u5199\u6cd5\uff1a class MapSum(object): # \u8bbe\u8ba1\u6210\u5185\u90e8\u7c7b\uff0c\u5916\u90e8\u6ca1\u6709\u5fc5\u8981\u77e5\u9053 class TrieNode: def __init__(self): self.val = 0 self.next = {} def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.root = MapSum.TrieNode() def insert(self, key, val): \"\"\" :type key: str :type val: int :rtype: void \"\"\" cur_node = self.root for c in key: if c not in cur_node.next.keys(): cur_node.next[c] = MapSum.TrieNode() cur_node = cur_node.next[c] cur_node.val = val def sum(self, prefix): \"\"\" :type prefix: str :rtype: int \"\"\" cur_node = self.root for c in prefix: if c in cur_node.next.keys(): cur_node = cur_node.next[c] else: return 0 return self.__sum(cur_node) # \u8fd9\u91cc\u7528\u5230\u4e86\u9012\u5f52 def __sum(self, node): res = node.val # \u8fd9\u91cc\u4e0d\u80fd\u521d\u59cb\u5316\u4e3a 0 for c in node.next.keys(): res += self.__sum(node.next[c]) return res # Your MapSum object will be instantiated and called as such: # obj = MapSum() # obj.insert(key,val) # param_2 = obj.sum(prefix)","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0686-repeated-string-match/","text":"686. Repeated String Match \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 A \u548c B, \u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32A\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32B\u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32A\u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cA = \"abcd\"\uff0cB = \"cdabcdab\"\u3002 \u7b54\u6848\u4e3a 3\uff0c \u56e0\u4e3a A \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a \u201cabcdabcdabcd\u201d\uff0c\u6b64\u65f6 B \u662f\u5176\u5b50\u4e32\uff1bA \u91cd\u590d\u53e0\u52a0\u4e24\u904d\u540e\u4e3a\"abcdabcd\"\uff0cB \u5e76\u4e0d\u662f\u5176\u5b50\u4e32\u3002 \u6ce8\u610f: A \u4e0e B \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u57281\u548c10000\u533a\u95f4\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 686. Repeated String Match \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 686. \u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\uff1a A=\"abc\", B=\"cab\" // A \"abcd\"\uff0c // \"abcdabcd\" // B = \"cdabcdab\"\u3002 public int repeatedStringMatch(String A, String B) { int blen = B.length(); int count = 1; StringBuilder stringBuilder = new StringBuilder(A); while (stringBuilder.length() < blen) { stringBuilder.append(A); count++; } if (stringBuilder.indexOf(B) >= 0) { return count; } stringBuilder.append(A); if (stringBuilder.indexOf(B) >= 0) { return count + 1; } return -1; } public static void main(String[] args) { String A = \"abcd\"; String B = \"cdabcdab\"; Solution solution = new Solution(); int repeatedStringMatch = solution.repeatedStringMatch(A, B); System.out.println(repeatedStringMatch); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0686-repeated-string-match \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"686. Repeated String Match"},{"location":"leetcode-0686-repeated-string-match/#686-repeated-string-match","text":"","title":"686. Repeated String Match"},{"location":"leetcode-0686-repeated-string-match/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 A \u548c B, \u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32A\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32B\u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32A\u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cA = \"abcd\"\uff0cB = \"cdabcdab\"\u3002 \u7b54\u6848\u4e3a 3\uff0c \u56e0\u4e3a A \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a \u201cabcdabcdabcd\u201d\uff0c\u6b64\u65f6 B \u662f\u5176\u5b50\u4e32\uff1bA \u91cd\u590d\u53e0\u52a0\u4e24\u904d\u540e\u4e3a\"abcdabcd\"\uff0cB \u5e76\u4e0d\u662f\u5176\u5b50\u4e32\u3002 \u6ce8\u610f: A \u4e0e B \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u57281\u548c10000\u533a\u95f4\u8303\u56f4\u5185\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 686. Repeated String Match \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 686. \u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0686-repeated-string-match/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0686-repeated-string-match/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0686-repeated-string-match/#1","text":"public class Solution { // \u7279\u6b8a\u6d4b\u8bd5\u7528\u4f8b\uff1a A=\"abc\", B=\"cab\" // A \"abcd\"\uff0c // \"abcdabcd\" // B = \"cdabcdab\"\u3002 public int repeatedStringMatch(String A, String B) { int blen = B.length(); int count = 1; StringBuilder stringBuilder = new StringBuilder(A); while (stringBuilder.length() < blen) { stringBuilder.append(A); count++; } if (stringBuilder.indexOf(B) >= 0) { return count; } stringBuilder.append(A); if (stringBuilder.indexOf(B) >= 0) { return count + 1; } return -1; } public static void main(String[] args) { String A = \"abcd\"; String B = \"cdabcdab\"; Solution solution = new Solution(); int repeatedStringMatch = solution.repeatedStringMatch(A, B); System.out.println(repeatedStringMatch); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0686-repeated-string-match \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0687-longest-univalue-path/","text":"687. Longest Univalue Path \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002 \u6ce8\u610f \uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 / \\ 4 5 / \\ \\ 1 1 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 1 / \\ 4 5 / \\ \\ 4 4 5 \u8f93\u51fa: 2 \u6ce8\u610f: \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002 \u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 687. Longest Univalue Path \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 687. \u6700\u957f\u540c\u503c\u8def\u5f84 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * 687. \u6700\u957f\u540c\u503c\u8def\u5f84 * https://leetcode-cn.com/problems/longest-univalue-path/description/ * * @author liwei */ public class Solution { public int longestUnivaluePath(TreeNode root) { if (root == null) { return 0; } int[] res = new int[1]; longestUnivaluePath(root, res); return res[0]; } /** * \u9014\u5f84 node \u7684\u76f8\u540c\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84 * * @param node * @param res * @return */ private int longestUnivaluePath(TreeNode node, int[] res) { if (node == null) { return 0; } int l = longestUnivaluePath(node.left, res); int r = longestUnivaluePath(node.right, res); int pl = 0; int pr = 0; if (node.left != null && node.val == node.left.val) { pl = l + 1; } if (node.right != null && node.val == node.right.val) { pr = r + 1; } // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u8fd9\u4e00\u6b65\u5728\u66f4\u65b0\u5168\u5c40\u7684 answer res[0] = Math.max(res[0], pl + pr); // \u8fd4\u56de\u53ea\u80fd\u4f7f\u7528\u5355\u8fb9\u6700\u957f\u7684\u989d\u8def\u5f84 return Math.max(pl, pr); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0687-longest-univalue-path \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"687. Longest Univalue Path"},{"location":"leetcode-0687-longest-univalue-path/#687-longest-univalue-path","text":"","title":"687. Longest Univalue Path"},{"location":"leetcode-0687-longest-univalue-path/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002 \u6ce8\u610f \uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 / \\ 4 5 / \\ \\ 1 1 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 1 / \\ 4 5 / \\ \\ 4 4 5 \u8f93\u51fa: 2 \u6ce8\u610f: \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002 \u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 687. Longest Univalue Path \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 687. \u6700\u957f\u540c\u503c\u8def\u5f84 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0687-longest-univalue-path/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0687-longest-univalue-path/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0687-longest-univalue-path/#1","text":"class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } /** * 687. \u6700\u957f\u540c\u503c\u8def\u5f84 * https://leetcode-cn.com/problems/longest-univalue-path/description/ * * @author liwei */ public class Solution { public int longestUnivaluePath(TreeNode root) { if (root == null) { return 0; } int[] res = new int[1]; longestUnivaluePath(root, res); return res[0]; } /** * \u9014\u5f84 node \u7684\u76f8\u540c\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84 * * @param node * @param res * @return */ private int longestUnivaluePath(TreeNode node, int[] res) { if (node == null) { return 0; } int l = longestUnivaluePath(node.left, res); int r = longestUnivaluePath(node.right, res); int pl = 0; int pr = 0; if (node.left != null && node.val == node.left.val) { pl = l + 1; } if (node.right != null && node.val == node.right.val) { pr = r + 1; } // \u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u8fd9\u4e00\u6b65\u5728\u66f4\u65b0\u5168\u5c40\u7684 answer res[0] = Math.max(res[0], pl + pr); // \u8fd4\u56de\u53ea\u80fd\u4f7f\u7528\u5355\u8fb9\u6700\u957f\u7684\u989d\u8def\u5f84 return Math.max(pl, pr); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0687-longest-univalue-path \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0690-employee-importance/","text":"690. Employee Importance \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5 \u552f\u4e00\u7684id \uff0c \u91cd\u8981\u5ea6 \u548c \u76f4\u7cfb\u4e0b\u5c5e\u7684id \u3002 \u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e \u5e76\u4e0d\u662f\u76f4\u7cfb \u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002 \u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1 \u8f93\u51fa: 11 \u89e3\u91ca: \u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002 \u6ce8\u610f: \u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a \u76f4\u7cfb \u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a \u76f4\u7cfb \u4e0b\u5c5e \u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 690. Employee Importance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 690. \u5458\u5de5\u7684\u91cd\u8981\u6027 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u56fe\u7b97\u6cd5\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u904d\u5386\u5230\u6ca1\u6709\u4e0b\u5c5e\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e24\u79cd\u904d\u5386\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u4f7f\u7528 + \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9690\u5f0f\u5730\u8c03\u7528\u6808\u3002 + \u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u663e\u793a\u5730\u4f7f\u7528\u961f\u5217\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1aDFS\u3002 import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.List; import java.util.Map; import java.util.Set; class Employee { // It's the unique id of each node; // unique id of this employee public int id; // the importance value of this employee public int importance; // the id of direct subordinates public List<Integer> subordinates; }; public class Solution { private int sum = 0; private Set<Integer> visited; private Map<Integer, Employee> map; // \u6df1\u5ea6\u4f18\u5148\u904d\u5386 public int getImportance(List<Employee> employees, int id) { map = new HashMap<>(); for (Employee employee : employees) { map.put(employee.id, employee); } visited = new HashSet<>(); dfs(map.get(id)); return this.sum; } private void dfs(Employee employee) { if (!visited.contains(employee.id)) { visited.add(employee.id); this.sum += employee.importance; for (Integer id : employee.subordinates) { dfs(map.get(id)); } } } public static void main(String[] args) { Employee employee1 = new Employee(); employee1.id = 1; employee1.importance = 5; List<Integer> subordinates1 = new ArrayList<>(); subordinates1.add(2); subordinates1.add(3); employee1.subordinates = subordinates1; Employee employee2 = new Employee(); employee2.id = 2; employee2.importance = 3; employee2.subordinates = new ArrayList<>(); Employee employee3 = new Employee(); employee3.id = 3; employee3.importance = 3; employee3.subordinates = new ArrayList<>(); List<Employee> employees = new ArrayList<>(); employees.add(employee1); employees.add(employee2); employees.add(employee3); Solution solution = new Solution(); int importance = solution.getImportance(employees, 1); System.out.println(importance); } } \u53c2\u8003\u89e3\u7b542\uff1aBFS\u3002 import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Set; public class Solution2 { public int getImportance(List<Employee> employees, int id) { Map<Integer, Employee> map = new HashMap<>(); for (Employee employee : employees) { map.put(employee.id, employee); } Set<Integer> visited = new HashSet<>(); LinkedList<Integer> queue = new LinkedList<>(); int res = 0; queue.addLast(id); while (!queue.isEmpty()) { Integer curId = queue.removeFirst(); if (!visited.contains(curId)) { Employee curEmp = map.get(curId); res += curEmp.importance; for (Integer eid : curEmp.subordinates) { queue.addLast(eid); } } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0690-employee-importance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"690. Employee Importance"},{"location":"leetcode-0690-employee-importance/#690-employee-importance","text":"","title":"690. Employee Importance"},{"location":"leetcode-0690-employee-importance/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5 \u552f\u4e00\u7684id \uff0c \u91cd\u8981\u5ea6 \u548c \u76f4\u7cfb\u4e0b\u5c5e\u7684id \u3002 \u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e \u5e76\u4e0d\u662f\u76f4\u7cfb \u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002 \u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1 \u8f93\u51fa: 11 \u89e3\u91ca: \u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002 \u6ce8\u610f: \u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a \u76f4\u7cfb \u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a \u76f4\u7cfb \u4e0b\u5c5e \u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 690. Employee Importance \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 690. \u5458\u5de5\u7684\u91cd\u8981\u6027 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0690-employee-importance/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u56fe\u7b97\u6cd5\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u904d\u5386\u5230\u6ca1\u6709\u4e0b\u5c5e\u7ed3\u70b9\u7684\u7ed3\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e24\u79cd\u904d\u5386\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u4f7f\u7528 + \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9690\u5f0f\u5730\u8c03\u7528\u6808\u3002 + \u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u663e\u793a\u5730\u4f7f\u7528\u961f\u5217\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0690-employee-importance/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0690-employee-importance/#1dfs","text":"import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.List; import java.util.Map; import java.util.Set; class Employee { // It's the unique id of each node; // unique id of this employee public int id; // the importance value of this employee public int importance; // the id of direct subordinates public List<Integer> subordinates; }; public class Solution { private int sum = 0; private Set<Integer> visited; private Map<Integer, Employee> map; // \u6df1\u5ea6\u4f18\u5148\u904d\u5386 public int getImportance(List<Employee> employees, int id) { map = new HashMap<>(); for (Employee employee : employees) { map.put(employee.id, employee); } visited = new HashSet<>(); dfs(map.get(id)); return this.sum; } private void dfs(Employee employee) { if (!visited.contains(employee.id)) { visited.add(employee.id); this.sum += employee.importance; for (Integer id : employee.subordinates) { dfs(map.get(id)); } } } public static void main(String[] args) { Employee employee1 = new Employee(); employee1.id = 1; employee1.importance = 5; List<Integer> subordinates1 = new ArrayList<>(); subordinates1.add(2); subordinates1.add(3); employee1.subordinates = subordinates1; Employee employee2 = new Employee(); employee2.id = 2; employee2.importance = 3; employee2.subordinates = new ArrayList<>(); Employee employee3 = new Employee(); employee3.id = 3; employee3.importance = 3; employee3.subordinates = new ArrayList<>(); List<Employee> employees = new ArrayList<>(); employees.add(employee1); employees.add(employee2); employees.add(employee3); Solution solution = new Solution(); int importance = solution.getImportance(employees, 1); System.out.println(importance); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1aDFS\u3002"},{"location":"leetcode-0690-employee-importance/#2bfs","text":"import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Set; public class Solution2 { public int getImportance(List<Employee> employees, int id) { Map<Integer, Employee> map = new HashMap<>(); for (Employee employee : employees) { map.put(employee.id, employee); } Set<Integer> visited = new HashSet<>(); LinkedList<Integer> queue = new LinkedList<>(); int res = 0; queue.addLast(id); while (!queue.isEmpty()) { Integer curId = queue.removeFirst(); if (!visited.contains(curId)) { Employee curEmp = map.get(curId); res += curEmp.importance; for (Integer eid : curEmp.subordinates) { queue.addLast(eid); } } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0690-employee-importance \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542\uff1aBFS\u3002"},{"location":"leetcode-0693-binary-number-with-alternating-bits/","text":"693. Binary Number with Alternating Bits \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u4ed6\u662f\u5426\u4e3a\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4ed6\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u6570\u6c38\u4e0d\u76f8\u7b49\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 \u8f93\u51fa: True \u89e3\u91ca: 5\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 101 \u793a\u4f8b 2: \u8f93\u5165: 7 \u8f93\u51fa: False \u89e3\u91ca: 7\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 111 \u793a\u4f8b 3: \u8f93\u5165: 11 \u8f93\u51fa: False \u89e3\u91ca: 11\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1011 \u793a\u4f8b 4: \u8f93\u5165: 10 \u8f93\u51fa: True \u89e3\u91ca: 10\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1010 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 693. Binary Number with Alternating Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 693. \u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u4e00\u7248\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6bd4\u8f83\u5e38\u89c4\uff0c\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u3002 public class Solution { public boolean hasAlternatingBits(int n) { // \u9898\u76ee\u8bf4\u4e86\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u8d1f\u6570\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\u4e86 if (n <= 0) { return false; } boolean flag = ((n & 1) == 0); while ((n != 0)) { n >>= 1; boolean curFlag = ((n & 1) == 0); if (flag == curFlag) { return false; } else { flag = curFlag; } } // \u8fd9\u79cd\u68c0\u6d4b\uff0c\u4e00\u5b9a\u4f1a\u5c06\u6240\u6709\u7684\u6570\u4f4d\u90fd\u68c0\u67e5\u5b8c\uff0c\u56e0\u6b64\uff0c // \u80fd\u8fd0\u884c\u5230\u6700\u540e\u7684\uff0c\u4e00\u5b9a\u90fd\u4f1a\u8fd4\u56de true return true; } public static void main(String[] args) { Solution solution = new Solution(); int n = 10; System.out.println(Integer.toBinaryString(n)); boolean hasAlternatingBits = solution.hasAlternatingBits(n); System.out.println(hasAlternatingBits); } } \u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u7ecf\u5e38\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u5173\u4e8e\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u3002 /** * @author liwei * @date 18/6/29 \u4e0b\u53488:43 */ public class Solution2 { public boolean hasAlternatingBits(int n) { String nStr = Integer.toBinaryString(n); int len = nStr.length(); for (int i = 0; i < len - 1; i++) { if (nStr.charAt(i) == nStr.charAt(i + 1)) { return false; } } return true; } } \u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u5e76\u7ed3\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u5224\u65ad\u3002 public class Solution3 { public boolean hasAlternatingBits(int n) { String nStr = Integer.toBinaryString(n); // \u56e0\u4e3a\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4ee5 1 \u5f00\u5934 return nStr.matches(\"(10)*1?\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0693-binary-number-with-alternating-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"693. Binary Number with Alternating Bits"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#693-binary-number-with-alternating-bits","text":"","title":"693. Binary Number with Alternating Bits"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u4ed6\u662f\u5426\u4e3a\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4ed6\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u6570\u6c38\u4e0d\u76f8\u7b49\u3002 \u793a\u4f8b 1: \u8f93\u5165: 5 \u8f93\u51fa: True \u89e3\u91ca: 5\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 101 \u793a\u4f8b 2: \u8f93\u5165: 7 \u8f93\u51fa: False \u89e3\u91ca: 7\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 111 \u793a\u4f8b 3: \u8f93\u5165: 11 \u8f93\u51fa: False \u89e3\u91ca: 11\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1011 \u793a\u4f8b 4: \u8f93\u5165: 10 \u8f93\u51fa: True \u89e3\u91ca: 10\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1010 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 693. Binary Number with Alternating Bits \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 693. \u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#1","text":"public class Solution { public boolean hasAlternatingBits(int n) { // \u9898\u76ee\u8bf4\u4e86\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u8d1f\u6570\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\u4e86 if (n <= 0) { return false; } boolean flag = ((n & 1) == 0); while ((n != 0)) { n >>= 1; boolean curFlag = ((n & 1) == 0); if (flag == curFlag) { return false; } else { flag = curFlag; } } // \u8fd9\u79cd\u68c0\u6d4b\uff0c\u4e00\u5b9a\u4f1a\u5c06\u6240\u6709\u7684\u6570\u4f4d\u90fd\u68c0\u67e5\u5b8c\uff0c\u56e0\u6b64\uff0c // \u80fd\u8fd0\u884c\u5230\u6700\u540e\u7684\uff0c\u4e00\u5b9a\u90fd\u4f1a\u8fd4\u56de true return true; } public static void main(String[] args) { Solution solution = new Solution(); int n = 10; System.out.println(Integer.toBinaryString(n)); boolean hasAlternatingBits = solution.hasAlternatingBits(n); System.out.println(hasAlternatingBits); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a\u8fd9\u4e00\u7248\u662f\u6211\u6700\u5f00\u59cb\u7684\u5199\u6cd5\uff0c\u6bd4\u8f83\u5e38\u89c4\uff0c\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u3002"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#2-java-integertobinarystringn","text":"/** * @author liwei * @date 18/6/29 \u4e0b\u53488:43 */ public class Solution2 { public boolean hasAlternatingBits(int n) { String nStr = Integer.toBinaryString(n); int len = nStr.length(); for (int i = 0; i < len - 1; i++) { if (nStr.charAt(i) == nStr.charAt(i + 1)) { return false; } } return true; } }","title":"\u53c2\u8003\u89e3\u7b542\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u7ecf\u5e38\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u5173\u4e8e\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u3002"},{"location":"leetcode-0693-binary-number-with-alternating-bits/#3-java-integertobinarystringn","text":"public class Solution3 { public boolean hasAlternatingBits(int n) { String nStr = Integer.toBinaryString(n); // \u56e0\u4e3a\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4ee5 1 \u5f00\u5934 return nStr.matches(\"(10)*1?\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0693-binary-number-with-alternating-bits \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543\uff1a\u4f7f\u7528 Java \u7684\u5e93\u51fd\u6570 Integer.toBinaryString(n) \u5e76\u7ed3\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u5224\u65ad\u3002"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/","text":"717. 1-bit and 2-bit Characters \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279 0 \u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279( 10 \u6216 11 )\u6765\u8868\u793a\u3002 \u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002 \u793a\u4f8b 1: \u8f93\u5165: bits = [1, 0, 0] \u8f93\u51fa: True \u89e3\u91ca: \u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002 \u793a\u4f8b 2: \u8f93\u5165: bits = [1, 1, 1, 0] \u8f93\u51fa: False \u89e3\u91ca: \u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002 \u6ce8\u610f: 1 <= len(bits) <= 1000 . bits[i] \u603b\u662f 0 \u6216 1 . \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 717. 1-bit and 2-bit Characters \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 717. 1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d public boolean isOneBitCharacter(int[] bits) { int len = bits.length; if (len == 0) { return false; } if (len == 1) { return true; } int i = 0; // \u6700\u591a\u770b\u5230 len-2 \uff0clen - 1 \u4e0d\u7528\u770b\u4e86 // 1 0 1 1 1 1 0 // 1 0 1 1 1 0 0 while (i < len - 1) { if (bits[i] == 0) { i++; } else { i += 2; } } return i == len - 1; } public static void main(String[] args) { int[] bits = {1, 1, 1, 0}; Solution solution = new Solution(); boolean oneBitCharacter = solution.isOneBitCharacter(bits); System.out.println(oneBitCharacter); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0717-1-bit-and-2-bit-characters \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"717. 1-bit and 2-bit Characters"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/#717-1-bit-and-2-bit-characters","text":"","title":"717. 1-bit and 2-bit Characters"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279 0 \u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279( 10 \u6216 11 )\u6765\u8868\u793a\u3002 \u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002 \u793a\u4f8b 1: \u8f93\u5165: bits = [1, 0, 0] \u8f93\u51fa: True \u89e3\u91ca: \u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002 \u793a\u4f8b 2: \u8f93\u5165: bits = [1, 1, 1, 0] \u8f93\u51fa: False \u89e3\u91ca: \u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002 \u6ce8\u610f: 1 <= len(bits) <= 1000 . bits[i] \u603b\u662f 0 \u6216 1 . \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 717. 1-bit and 2-bit Characters \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 717. 1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0717-1-bit-and-2-bit-characters/#1","text":"public class Solution { // \u6709\u70b9\u8d2a\u5fc3\u7b97\u6cd5\u7684\u610f\u601d public boolean isOneBitCharacter(int[] bits) { int len = bits.length; if (len == 0) { return false; } if (len == 1) { return true; } int i = 0; // \u6700\u591a\u770b\u5230 len-2 \uff0clen - 1 \u4e0d\u7528\u770b\u4e86 // 1 0 1 1 1 1 0 // 1 0 1 1 1 0 0 while (i < len - 1) { if (bits[i] == 0) { i++; } else { i += 2; } } return i == len - 1; } public static void main(String[] args) { int[] bits = {1, 1, 1, 0}; Solution solution = new Solution(); boolean oneBitCharacter = solution.isOneBitCharacter(bits); System.out.println(oneBitCharacter); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0717-1-bit-and-2-bit-characters \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0720-longest-word-in-dictionary/","text":"720. Longest Word in Dictionary \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words \u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531 words \u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002 \u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"] \u8f93\u51fa: \"world\" \u89e3\u91ca: \u5355\u8bcd\"world\"\u53ef\u7531\"w\", \"wo\", \"wor\", \u548c \"worl\"\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002 \u793a\u4f8b 2: \u8f93\u5165: words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"] \u8f93\u51fa: \"apple\" \u89e3\u91ca: \"apply\"\u548c\"apple\"\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f\"apple\"\u5f97\u5b57\u5178\u5e8f\u5c0f\u4e8e\"apply\"\u3002 \u6ce8\u610f: \u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 words \u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1,1000] \u3002 words[i] \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1,30] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 720. Longest Word in Dictionary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 720. \u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0720-longest-word-in-dictionary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"720. Longest Word in Dictionary"},{"location":"leetcode-0720-longest-word-in-dictionary/#720-longest-word-in-dictionary","text":"","title":"720. Longest Word in Dictionary"},{"location":"leetcode-0720-longest-word-in-dictionary/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words \u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531 words \u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002 \u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"] \u8f93\u51fa: \"world\" \u89e3\u91ca: \u5355\u8bcd\"world\"\u53ef\u7531\"w\", \"wo\", \"wor\", \u548c \"worl\"\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002 \u793a\u4f8b 2: \u8f93\u5165: words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"] \u8f93\u51fa: \"apple\" \u89e3\u91ca: \"apply\"\u548c\"apple\"\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f\"apple\"\u5f97\u5b57\u5178\u5e8f\u5c0f\u4e8e\"apply\"\u3002 \u6ce8\u610f: \u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 words \u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1,1000] \u3002 words[i] \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1,30] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 720. Longest Word in Dictionary \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 720. \u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0720-longest-word-in-dictionary/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0720-longest-word-in-dictionary/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0720-longest-word-in-dictionary/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0720-longest-word-in-dictionary \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0746-min-cost-climbing-stairs/","text":"746. Min Cost Climbing Stairs \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c i \u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c cost[i] (\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002 \u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002 \u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002 \u793a\u4f8b 1: \u8f93\u5165: cost = [10, 15, 20] \u8f93\u51fa: 15 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002 \u793a\u4f8b 2: \u8f93\u5165: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] \u8f93\u51fa: 6 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002 \u6ce8\u610f\uff1a cost \u7684\u957f\u5ea6\u5c06\u4f1a\u5728 [2, 1000] \u3002 \u6bcf\u4e00\u4e2a cost[i] \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a [0, 999] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 746. Min Cost Climbing Stairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u72b6\u6001\u7684\u5b9a\u4e49\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541\uff1a \u5b9a\u4e49\u72b6\u6001 dp[i] \uff1a\u7b2c i \u5c42\u5fc5\u987b\u722c\uff0c\u6d88\u8017\u7684\u4f53\u529b\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8981\u722c\u5230\u7b2c len-1 \u5c42\u6709\u4e24\u79cd\u9009\u62e9\uff1a \uff081\uff09\u722c\u5230 len-1 \u5c42\uff0c\u518d\u4e0a\u4e00\u5c42\u5230\u697c\u9876 \uff082\uff09\u722c\u5230 len-2 \u5c42\uff0c\u518d\u4e0a\u4e24\u5c42\u5230\u697c\u9876 public class Solution { public int minCostClimbingStairs(int[] cost) { int len = cost.length; if (len == 0) { return 0; } if (len == 1) { return cost[0]; } if (len == 2) { return Integer.min(cost[0], cost[1]); } int[] dp = new int[len]; dp[0] = cost[0]; dp[1] = cost[1]; for (int i = 2; i < len; i++) { dp[i] = cost[i] + Integer.min(dp[i - 1], dp[i - 2]); } return Integer.min(dp[len - 1], dp[len - 2]); } public static void main(String[] args) { int[] cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1}; Solution solution = new Solution(); int minCostClimbingStairs = solution.minCostClimbingStairs(cost); System.out.println(minCostClimbingStairs); } } \u53c2\u8003\u89e3\u7b542 /** * \u5b9a\u4e49\u72b6\u6001\u4e0e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i]\uff1a\u722c\u5230\u7b2c i \u5c42\uff08\u4ece 0 \u5f00\u59cb\uff09\uff0c\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c * \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u722c\u5230\u8fd9\u4e00\u5c42\uff0c\u4e0d\u6d88\u8017\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\u53ea\u8868\u793a\u5411\u4e0a\u8df3\u8981\u6d88\u8017\u7684\u4f53\u529b\u503c * \u5f88\u5bb9\u6613\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i] = min(cost[i-1] + dp[i-1], cost[i-2] + dp[i-2]) * * @author liwei */ public class Solution2 { public int minCostClimbingStairs(int[] cost) { int len = cost.length; if (len == 0) { return 0; } if (len == 1) { return cost[0]; } if (len == 2) { return Math.min(cost[0], cost[1]); } int[] dp = new int[len + 1]; // \u6ce8\u610f\uff1a\u8df3\u5230\u7b2c 0 \u9636\u548c\u7b2c 1 \u9636\u662f\u4e0d\u7528\u6d88\u8017\u4f53\u529b\u503c\u7684 // \u56e0\u4e3a\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8df3\u53f0\u9636\u7684\u8d77\u70b9(\u9898\u76ee\u4e2d\u8bf4\uff1a\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002) dp[0] = 0; dp[1] = 0; for (int i = 2; i <= len; i++) { dp[i] = Math.min(cost[i - 1] + dp[i - 1], cost[i - 2] + dp[i - 2]); } return dp[len]; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0746-min-cost-climbing-stairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"746. Min Cost Climbing Stairs"},{"location":"leetcode-0746-min-cost-climbing-stairs/#746-min-cost-climbing-stairs","text":"","title":"746. Min Cost Climbing Stairs"},{"location":"leetcode-0746-min-cost-climbing-stairs/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c i \u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c cost[i] (\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002 \u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002 \u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002 \u793a\u4f8b 1: \u8f93\u5165: cost = [10, 15, 20] \u8f93\u51fa: 15 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002 \u793a\u4f8b 2: \u8f93\u5165: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] \u8f93\u51fa: 6 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002 \u6ce8\u610f\uff1a cost \u7684\u957f\u5ea6\u5c06\u4f1a\u5728 [2, 1000] \u3002 \u6bcf\u4e00\u4e2a cost[i] \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a [0, 999] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 746. Min Cost Climbing Stairs \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0746-min-cost-climbing-stairs/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6ce8\u610f\u72b6\u6001\u7684\u5b9a\u4e49\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0746-min-cost-climbing-stairs/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0746-min-cost-climbing-stairs/#1","text":"\u5b9a\u4e49\u72b6\u6001 dp[i] \uff1a\u7b2c i \u5c42\u5fc5\u987b\u722c\uff0c\u6d88\u8017\u7684\u4f53\u529b\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8981\u722c\u5230\u7b2c len-1 \u5c42\u6709\u4e24\u79cd\u9009\u62e9\uff1a \uff081\uff09\u722c\u5230 len-1 \u5c42\uff0c\u518d\u4e0a\u4e00\u5c42\u5230\u697c\u9876 \uff082\uff09\u722c\u5230 len-2 \u5c42\uff0c\u518d\u4e0a\u4e24\u5c42\u5230\u697c\u9876 public class Solution { public int minCostClimbingStairs(int[] cost) { int len = cost.length; if (len == 0) { return 0; } if (len == 1) { return cost[0]; } if (len == 2) { return Integer.min(cost[0], cost[1]); } int[] dp = new int[len]; dp[0] = cost[0]; dp[1] = cost[1]; for (int i = 2; i < len; i++) { dp[i] = cost[i] + Integer.min(dp[i - 1], dp[i - 2]); } return Integer.min(dp[len - 1], dp[len - 2]); } public static void main(String[] args) { int[] cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1}; Solution solution = new Solution(); int minCostClimbingStairs = solution.minCostClimbingStairs(cost); System.out.println(minCostClimbingStairs); } }","title":"\u53c2\u8003\u89e3\u7b541\uff1a"},{"location":"leetcode-0746-min-cost-climbing-stairs/#2","text":"/** * \u5b9a\u4e49\u72b6\u6001\u4e0e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i]\uff1a\u722c\u5230\u7b2c i \u5c42\uff08\u4ece 0 \u5f00\u59cb\uff09\uff0c\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c * \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u722c\u5230\u8fd9\u4e00\u5c42\uff0c\u4e0d\u6d88\u8017\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5c42\u7684\u4f53\u529b\u503c\u53ea\u8868\u793a\u5411\u4e0a\u8df3\u8981\u6d88\u8017\u7684\u4f53\u529b\u503c * \u5f88\u5bb9\u6613\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a * dp[i] = min(cost[i-1] + dp[i-1], cost[i-2] + dp[i-2]) * * @author liwei */ public class Solution2 { public int minCostClimbingStairs(int[] cost) { int len = cost.length; if (len == 0) { return 0; } if (len == 1) { return cost[0]; } if (len == 2) { return Math.min(cost[0], cost[1]); } int[] dp = new int[len + 1]; // \u6ce8\u610f\uff1a\u8df3\u5230\u7b2c 0 \u9636\u548c\u7b2c 1 \u9636\u662f\u4e0d\u7528\u6d88\u8017\u4f53\u529b\u503c\u7684 // \u56e0\u4e3a\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8df3\u53f0\u9636\u7684\u8d77\u70b9(\u9898\u76ee\u4e2d\u8bf4\uff1a\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002) dp[0] = 0; dp[1] = 0; for (int i = 2; i <= len; i++) { dp[i] = Math.min(cost[i - 1] + dp[i - 1], cost[i - 2] + dp[i - 2]); } return dp[len]; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0746-min-cost-climbing-stairs \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/","text":"762. Prime Number of Set Bits in Binary Representation \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 L \u548c R \uff0c\u627e\u5230\u95ed\u533a\u95f4 [L, R] \u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002 \uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982 21 \u7684\u4e8c\u8fdb\u5236\u8868\u793a 10101 \u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09 \u793a\u4f8b 1: \u8f93\u5165: L = 6, R = 10 \u8f93\u51fa: 4 \u89e3\u91ca: 6 -> 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) 7 -> 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570) 9 -> 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) 10-> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) \u793a\u4f8b 2: \u8f93\u5165: L = 10, R = 15 \u8f93\u51fa: 5 \u89e3\u91ca: 10 -> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570) 11 -> 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 12 -> 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570) 13 -> 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 14 -> 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 15 -> 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570) \u6ce8\u610f: L, R \u662f L <= R \u4e14\u5728 [1, 10^6] \u4e2d\u7684\u6574\u6570\u3002 R - L \u7684\u6700\u5927\u503c\u4e3a 10000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 762. Prime Number of Set Bits in Binary Representation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 762. \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int countPrimeSetBits(int L, int R) { // int \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u8868\u793a 1 \u7684\u4e2a\u6570\u6700\u591a\u662f 32 // \u6240\u4ee5 32 \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u5b8c\u5168\u53ef\u4ee5\u6253\u8868\u5217\u4e3e\u51fa\u6765 boolean[] isPrime = new boolean[32]; int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}; // \u8d28\u6570\u7684\u4e2a\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u662f\u4e0d\u662f\u8d28\u6570\u4f53\u73b0\u5728\u7d22\u5f15\u5bf9\u5e94\u7684\u503c for (int prime : primes) { isPrime[prime] = true; } int res = 0; for (int i = L; i <= R; i++) { if (isPrime[Integer.bitCount(i)]) { res++; } } return res; } } \u53c2\u8003\u89e3\u7b542 public class Solution3 { public int countPrimeSetBits(int L, int R) { int res = 0; for (int i = L; i <= R; i++) { int count = countPrimeSetBit(i); if (isPrime(count)) { res++; } } return res; } private boolean isPrime(int num) { if (num == 1) { return false; } if (num == 2 || num == 3) { return true; } for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) { return false; } } return true; } private int countPrimeSetBit(int num) { int count = 0; while (num != 0) { if (num % 2 == 1) { count++; } num >>>= 1; } return count; } } \u53c2\u8003\u89e3\u7b543 public class Solution4 { public int countPrimeSetBits(int L, int R) { boolean[] primes = new boolean[32]; int[] primeNums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}; for (int prime : primeNums) { primes[prime] = true; } int res = 0; for (int i = L; i <= R; i++) { int bitCount = 0; int num = i; while (num != 0) { num = num & (num - 1); bitCount++; } if (primes[bitCount]) { res++; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0762-prime-number-of-set-bits-in-binary-representation \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"762. Prime Number of Set Bits in Binary Representation"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#762-prime-number-of-set-bits-in-binary-representation","text":"","title":"762. Prime Number of Set Bits in Binary Representation"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 L \u548c R \uff0c\u627e\u5230\u95ed\u533a\u95f4 [L, R] \u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002 \uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982 21 \u7684\u4e8c\u8fdb\u5236\u8868\u793a 10101 \u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09 \u793a\u4f8b 1: \u8f93\u5165: L = 6, R = 10 \u8f93\u51fa: 4 \u89e3\u91ca: 6 -> 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) 7 -> 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570) 9 -> 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) 10-> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570) \u793a\u4f8b 2: \u8f93\u5165: L = 10, R = 15 \u8f93\u51fa: 5 \u89e3\u91ca: 10 -> 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570) 11 -> 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 12 -> 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570) 13 -> 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 14 -> 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570) 15 -> 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570) \u6ce8\u610f: L, R \u662f L <= R \u4e14\u5728 [1, 10^6] \u4e2d\u7684\u6574\u6570\u3002 R - L \u7684\u6700\u5927\u503c\u4e3a 10000\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 762. Prime Number of Set Bits in Binary Representation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 762. \u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#1","text":"public class Solution { public int countPrimeSetBits(int L, int R) { // int \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u8868\u793a 1 \u7684\u4e2a\u6570\u6700\u591a\u662f 32 // \u6240\u4ee5 32 \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u5b8c\u5168\u53ef\u4ee5\u6253\u8868\u5217\u4e3e\u51fa\u6765 boolean[] isPrime = new boolean[32]; int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}; // \u8d28\u6570\u7684\u4e2a\u6570\u4f5c\u4e3a\u7d22\u5f15\uff0c\u662f\u4e0d\u662f\u8d28\u6570\u4f53\u73b0\u5728\u7d22\u5f15\u5bf9\u5e94\u7684\u503c for (int prime : primes) { isPrime[prime] = true; } int res = 0; for (int i = L; i <= R; i++) { if (isPrime[Integer.bitCount(i)]) { res++; } } return res; } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#2","text":"public class Solution3 { public int countPrimeSetBits(int L, int R) { int res = 0; for (int i = L; i <= R; i++) { int count = countPrimeSetBit(i); if (isPrime(count)) { res++; } } return res; } private boolean isPrime(int num) { if (num == 1) { return false; } if (num == 2 || num == 3) { return true; } for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) { return false; } } return true; } private int countPrimeSetBit(int num) { int count = 0; while (num != 0) { if (num % 2 == 1) { count++; } num >>>= 1; } return count; } }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0762-prime-number-of-set-bits-in-binary-representation/#3","text":"public class Solution4 { public int countPrimeSetBits(int L, int R) { boolean[] primes = new boolean[32]; int[] primeNums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}; for (int prime : primeNums) { primes[prime] = true; } int res = 0; for (int i = L; i <= R; i++) { int bitCount = 0; int num = i; while (num != 0) { num = num & (num - 1); bitCount++; } if (primes[bitCount]) { res++; } } return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0762-prime-number-of-set-bits-in-binary-representation \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b543"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/","text":"783. Minimum Distance Between BST Nodes \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9 root , \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: root = [4,2,6,1,3,null,null] \u8f93\u51fa: 1 \u89e3\u91ca: \u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002 \u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe: 4 / \\ 2 6 / \\ 1 3 \u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002 \u6ce8\u610f\uff1a \u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 2 \u5230 100 \u3002 \u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 783. Minimum Distance Between BST Nodes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 783. \u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u70b9\u6700\u5c0f\u8ddd\u79bb \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5f97\u5230\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\u3002\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u6bd4\u8f83\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\uff0c\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u81f3\u5e38\u6570\u7ea7\u522b\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { // \u6211\u8d77\u521d\u7684\u601d\u8def\u662f\u4f7f\u7528\u4e2d\u7eed\u904d\u5386\uff0c\u8fd4\u56de\u6700\u5c0f\u503c public int minDiffInBST(TreeNode root) { List<Integer> inOrderList = new ArrayList<>(); inOrder(root, inOrderList); int len = inOrderList.size(); int ret = Integer.MAX_VALUE; for (int i = 0; i < len - 1; i++) { ret = Math.min(ret, inOrderList.get(i + 1) - inOrderList.get(i)); } return ret; } private void inOrder(TreeNode node, List<Integer> inOrderList) { if (node == null) { return; } inOrder(node.left, inOrderList); inOrderList.add(node.val); inOrder(node.right, inOrderList); } } \u53c2\u8003\u89e3\u7b542 public class Solution2 { public int minDiffInBST(TreeNode root) { // \u8bbe\u7f6e\u4e3a Integer \u662f\u4e3a\u4e86\u68c0\u6d4b\u51fa\u6ca1\u6709\u8d4b\u503c\u7684\u60c5\u51b5 Integer[] preVal = new Integer[1]; int[] ret = new int[]{Integer.MAX_VALUE}; inOrder(root,preVal,ret); return ret[0]; } private void inOrder(TreeNode node, Integer[] preVal, int[] ret) { if (node == null) { return; } inOrder(node.left, preVal, ret); if (preVal[0] != null) { int diff = node.val - preVal[0]; ret[0] = Math.min(ret[0], diff); } // \u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e4b\u524d\u7684\u503c preVal[0] = node.val; inOrder(node.right, preVal, ret); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0783-minimum-distance-between-bst-nodes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"783. Minimum Distance Between BST Nodes"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#783-minimum-distance-between-bst-nodes","text":"","title":"783. Minimum Distance Between BST Nodes"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9 root , \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: root = [4,2,6,1,3,null,null] \u8f93\u51fa: 1 \u89e3\u91ca: \u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002 \u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe: 4 / \\ 2 6 / \\ 1 3 \u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002 \u6ce8\u610f\uff1a \u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 2 \u5230 100 \u3002 \u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 783. Minimum Distance Between BST Nodes \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 783. \u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u70b9\u6700\u5c0f\u8ddd\u79bb \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5f97\u5230\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\u3002\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u8fdb\u884c\u6bd4\u8f83\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\uff0c\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u81f3\u5e38\u6570\u7ea7\u522b\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#1","text":"import java.util.ArrayList; import java.util.List; class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } public class Solution { // \u6211\u8d77\u521d\u7684\u601d\u8def\u662f\u4f7f\u7528\u4e2d\u7eed\u904d\u5386\uff0c\u8fd4\u56de\u6700\u5c0f\u503c public int minDiffInBST(TreeNode root) { List<Integer> inOrderList = new ArrayList<>(); inOrder(root, inOrderList); int len = inOrderList.size(); int ret = Integer.MAX_VALUE; for (int i = 0; i < len - 1; i++) { ret = Math.min(ret, inOrderList.get(i + 1) - inOrderList.get(i)); } return ret; } private void inOrder(TreeNode node, List<Integer> inOrderList) { if (node == null) { return; } inOrder(node.left, inOrderList); inOrderList.add(node.val); inOrder(node.right, inOrderList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0783-minimum-distance-between-bst-nodes/#2","text":"public class Solution2 { public int minDiffInBST(TreeNode root) { // \u8bbe\u7f6e\u4e3a Integer \u662f\u4e3a\u4e86\u68c0\u6d4b\u51fa\u6ca1\u6709\u8d4b\u503c\u7684\u60c5\u51b5 Integer[] preVal = new Integer[1]; int[] ret = new int[]{Integer.MAX_VALUE}; inOrder(root,preVal,ret); return ret[0]; } private void inOrder(TreeNode node, Integer[] preVal, int[] ret) { if (node == null) { return; } inOrder(node.left, preVal, ret); if (preVal[0] != null) { int diff = node.val - preVal[0]; ret[0] = Math.min(ret[0], diff); } // \u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e4b\u524d\u7684\u503c preVal[0] = node.val; inOrder(node.right, preVal, ret); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0783-minimum-distance-between-bst-nodes \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b542"},{"location":"leetcode-0784-letter-case-permutation/","text":"784. Letter Case Permutation \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32 S \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"a1b2\" \u8f93\u51fa: [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"] \u8f93\u5165: S = \"3z4\" \u8f93\u51fa: [\"3z4\", \"3Z4\"] \u8f93\u5165: S = \"12345\" \u8f93\u51fa: [\"12345\"] \u6ce8\u610f\uff1a S \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 12 \u3002 S \u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 784. Letter Case Permutation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 784. \u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4f7f\u7528\u7b80\u5355\u7684\u9012\u5f52\u56de\u6eaf\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.ArrayList; import java.util.List; public class Solution { private void helper(char[] chars, int len, int begin, List<String> res) { if (begin == len) { res.add(new String(chars)); return; } // \u4e0d\u53d8\u5316\u7684\u65f6\u5019\u9012\u5f52\u641c\u7d22\u4e00\u6b21 helper(chars, len, begin + 1, res); if ((chars[begin] + \"\").matches(\"[a-zA-Z]\")) { change(chars, begin); // \u53d8\u5316\u4e86\u4ee5\u540e\u9012\u5f52\u641c\u7d22\u4e00\u6b21 helper(chars, len, begin + 1, res); } } /** * \u5c06 chars \u6570\u7ec4\u4e2d index \u6570\u4f4d\u4e0a\u7684\u5b57\u7b26\u6539\u53d8\u5927\u5c0f\u5199 * * @param chars * @param index */ private void change(char[] chars, int index) { if (chars[index] >= 97) { chars[index] -= 32; return; } if (chars[index] >= 65) { chars[index] += 32; } } public List<String> letterCasePermutation(String S) { List<String> res = new ArrayList<>(); int len = S.length(); if (len == 0) { res.add(S); return res; } char[] chars = S.toCharArray(); helper(chars, len, 0, res); return res; } public static void main(String[] args) { // 97 System.out.println((int) 'a'); // 65 System.out.println((int) 'A'); Solution solution = new Solution(); String S = \"\"; List<String> letterCasePermutation = solution.letterCasePermutation(S); System.out.println(letterCasePermutation); } } \u53c2\u8003\u89e3\u7b542\uff1a import java.util.ArrayList; import java.util.List; public class Solution2 { private static final int MASK = 1 << 5; private void helper(char[] chars, int len, int begin, List<String> res) { if (begin == len) { res.add(new String(chars)); return; } helper(chars, len, begin + 1, res); if (Character.isLetter(chars[begin])) { chars[begin] ^= MASK; helper(chars, len, begin + 1, res); } } public List<String> letterCasePermutation(String S) { List<String> res = new ArrayList<>(); int len = S.length(); if (len == 0) { res.add(S); return res; } char[] chars = S.toCharArray(); helper(chars, len, 0, res); return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0784-letter-case-permutation \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"784. Letter Case Permutation"},{"location":"leetcode-0784-letter-case-permutation/#784-letter-case-permutation","text":"","title":"784. Letter Case Permutation"},{"location":"leetcode-0784-letter-case-permutation/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32 S \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"a1b2\" \u8f93\u51fa: [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"] \u8f93\u5165: S = \"3z4\" \u8f93\u51fa: [\"3z4\", \"3Z4\"] \u8f93\u5165: S = \"12345\" \u8f93\u51fa: [\"12345\"] \u6ce8\u610f\uff1a S \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 12 \u3002 S \u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 784. Letter Case Permutation \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 784. \u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0784-letter-case-permutation/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u4f7f\u7528\u7b80\u5355\u7684\u9012\u5f52\u56de\u6eaf\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0784-letter-case-permutation/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0784-letter-case-permutation/#1","text":"import java.util.ArrayList; import java.util.List; public class Solution { private void helper(char[] chars, int len, int begin, List<String> res) { if (begin == len) { res.add(new String(chars)); return; } // \u4e0d\u53d8\u5316\u7684\u65f6\u5019\u9012\u5f52\u641c\u7d22\u4e00\u6b21 helper(chars, len, begin + 1, res); if ((chars[begin] + \"\").matches(\"[a-zA-Z]\")) { change(chars, begin); // \u53d8\u5316\u4e86\u4ee5\u540e\u9012\u5f52\u641c\u7d22\u4e00\u6b21 helper(chars, len, begin + 1, res); } } /** * \u5c06 chars \u6570\u7ec4\u4e2d index \u6570\u4f4d\u4e0a\u7684\u5b57\u7b26\u6539\u53d8\u5927\u5c0f\u5199 * * @param chars * @param index */ private void change(char[] chars, int index) { if (chars[index] >= 97) { chars[index] -= 32; return; } if (chars[index] >= 65) { chars[index] += 32; } } public List<String> letterCasePermutation(String S) { List<String> res = new ArrayList<>(); int len = S.length(); if (len == 0) { res.add(S); return res; } char[] chars = S.toCharArray(); helper(chars, len, 0, res); return res; } public static void main(String[] args) { // 97 System.out.println((int) 'a'); // 65 System.out.println((int) 'A'); Solution solution = new Solution(); String S = \"\"; List<String> letterCasePermutation = solution.letterCasePermutation(S); System.out.println(letterCasePermutation); } } \u53c2\u8003\u89e3\u7b542\uff1a import java.util.ArrayList; import java.util.List; public class Solution2 { private static final int MASK = 1 << 5; private void helper(char[] chars, int len, int begin, List<String> res) { if (begin == len) { res.add(new String(chars)); return; } helper(chars, len, begin + 1, res); if (Character.isLetter(chars[begin])) { chars[begin] ^= MASK; helper(chars, len, begin + 1, res); } } public List<String> letterCasePermutation(String S) { List<String> res = new ArrayList<>(); int len = S.length(); if (len == 0) { res.add(S); return res; } char[] chars = S.toCharArray(); helper(chars, len, 0, res); return res; } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0784-letter-case-permutation \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0792-number-of-matching-subsequences/","text":"792. Number of Matching Subsequences \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5b57\u7b26\u4e32 S \u548c\u5355\u8bcd\u5b57\u5178 words , \u6c42 words[i] \u4e2d\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"abcde\" words = [\"a\", \"bb\", \"acd\", \"ace\"] \u8f93\u51fa: 3 \u89e3\u91ca: \u6709\u4e09\u4e2a\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002 \u6ce8\u610f: \u6240\u6709\u5728 words \u548c S \u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 S \u7684\u957f\u5ea6\u5728 [1, 50000] \u3002 words \u7684\u957f\u5ea6\u5728 [1, 5000] \u3002 words[i] \u7684\u957f\u5ea6\u5728 [1, 50] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 792. Number of Matching Subsequences \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0792-number-of-matching-subsequences \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"792. Number of Matching Subsequences"},{"location":"leetcode-0792-number-of-matching-subsequences/#792-number-of-matching-subsequences","text":"","title":"792. Number of Matching Subsequences"},{"location":"leetcode-0792-number-of-matching-subsequences/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5b57\u7b26\u4e32 S \u548c\u5355\u8bcd\u5b57\u5178 words , \u6c42 words[i] \u4e2d\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"abcde\" words = [\"a\", \"bb\", \"acd\", \"ace\"] \u8f93\u51fa: 3 \u89e3\u91ca: \u6709\u4e09\u4e2a\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002 \u6ce8\u610f: \u6240\u6709\u5728 words \u548c S \u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 S \u7684\u957f\u5ea6\u5728 [1, 50000] \u3002 words \u7684\u957f\u5ea6\u5728 [1, 5000] \u3002 words[i] \u7684\u957f\u5ea6\u5728 [1, 50] \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u4e2d\u7b49 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 792. Number of Matching Subsequences \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0792-number-of-matching-subsequences/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0792-number-of-matching-subsequences/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0792-number-of-matching-subsequences/#1","text":"\u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0792-number-of-matching-subsequences \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0819-most-common-word/","text":"819. Most Common Word \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002 \u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\" banned = [\"hit\"] \u8f93\u51fa: \"ball\" \u89e3\u91ca: \"hit\" \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002 \"ball\" \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 \"ball,\"\uff09\uff0c \"hit\"\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002 \u8bf4\u660e: 1 <= \u6bb5\u843d\u957f\u5ea6 <= 1000 . 1 <= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 <= 100 . 1 <= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 <= 10 . \u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd (\u5373\u4f7f\u5728 paragraph \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002) paragraph \u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7 !?',;. paragraph \u91cc\u5355\u8bcd\u4e4b\u95f4\u90fd\u7531\u7a7a\u683c\u9694\u5f00\u3002 \u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 819. Most Common Word \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 819. \u6700\u5e38\u89c1\u7684\u5355\u8bcd \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u7528\u4ec0\u4e48\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.Arrays; import java.util.HashMap; import java.util.HashSet; import java.util.Map; public class Solution { public String mostCommonWord(String paragraph, String[] banned) { HashSet<String> set = new HashSet<>(Arrays.asList(banned)); HashMap<String, Integer> map = new HashMap<>(); String[] ps = paragraph.toLowerCase().split(\"[^a-z]\"); // \u6ce8\u610f\u4f1a\u6709\u7a7a\u7684\u5b57\u7b26\u4e32\u51fa\u73b0 // System.out.println(Arrays.toString(ps)); for (String p : ps) { if (\"\".equals(p)) { continue; } if (!set.contains(p)) { if (map.containsKey(p)) { map.put(p, map.get(p) + 1); } else { map.put(p, 1); } } } int max = 0; String mcw = \"\"; for (Map.Entry<String, Integer> entry : map.entrySet()) { if (entry.getValue() > max) { max = entry.getValue(); mcw = entry.getKey(); } } return mcw; } public static void main(String[] args) { String paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"; String[] banned = {\"hit\"}; Solution solution = new Solution(); String mostCommonWord = solution.mostCommonWord(paragraph, banned); System.out.println(mostCommonWord); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0819-most-common-word \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"819. Most Common Word"},{"location":"leetcode-0819-most-common-word/#819-most-common-word","text":"","title":"819. Most Common Word"},{"location":"leetcode-0819-most-common-word/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002 \u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\" banned = [\"hit\"] \u8f93\u51fa: \"ball\" \u89e3\u91ca: \"hit\" \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002 \"ball\" \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 \"ball,\"\uff09\uff0c \"hit\"\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002 \u8bf4\u660e: 1 <= \u6bb5\u843d\u957f\u5ea6 <= 1000 . 1 <= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 <= 100 . 1 <= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 <= 10 . \u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd (\u5373\u4f7f\u5728 paragraph \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002) paragraph \u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7 !?',;. paragraph \u91cc\u5355\u8bcd\u4e4b\u95f4\u90fd\u7531\u7a7a\u683c\u9694\u5f00\u3002 \u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 819. Most Common Word \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 819. \u6700\u5e38\u89c1\u7684\u5355\u8bcd \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0819-most-common-word/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u5f88\u5e38\u89c4\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u51e0\u4e4e\u4e0d\u7528\u4ec0\u4e48\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0819-most-common-word/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0819-most-common-word/#1","text":"import java.util.Arrays; import java.util.HashMap; import java.util.HashSet; import java.util.Map; public class Solution { public String mostCommonWord(String paragraph, String[] banned) { HashSet<String> set = new HashSet<>(Arrays.asList(banned)); HashMap<String, Integer> map = new HashMap<>(); String[] ps = paragraph.toLowerCase().split(\"[^a-z]\"); // \u6ce8\u610f\u4f1a\u6709\u7a7a\u7684\u5b57\u7b26\u4e32\u51fa\u73b0 // System.out.println(Arrays.toString(ps)); for (String p : ps) { if (\"\".equals(p)) { continue; } if (!set.contains(p)) { if (map.containsKey(p)) { map.put(p, map.get(p) + 1); } else { map.put(p, 1); } } } int max = 0; String mcw = \"\"; for (Map.Entry<String, Integer> entry : map.entrySet()) { if (entry.getValue() > max) { max = entry.getValue(); mcw = entry.getKey(); } } return mcw; } public static void main(String[] args) { String paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"; String[] banned = {\"hit\"}; Solution solution = new Solution(); String mostCommonWord = solution.mostCommonWord(paragraph, banned); System.out.println(mostCommonWord); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0819-most-common-word \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0824-goat-latin/","text":"824. Goat Latin \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50 S \u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002 \u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a \u201cGoat Latin\u201d \uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587 - Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002 \u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0 \"ma\" \u3002 \u4f8b\u5982\uff0c\u5355\u8bcd \"apple\" \u53d8\u4e3a \"applema\" \u3002 \u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0 \"ma\" \u3002 \u4f8b\u5982\uff0c\u5355\u8bcd \"goat\" \u53d8\u4e3a \"oatgma\" \u3002 \u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd 'a' \uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002 \u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"a\" \uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"aa\" \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u8fd4\u56de\u5c06 S \u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"I speak Goat Latin\" \u8f93\u51fa: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\" \u793a\u4f8b 2: \u8f93\u5165: \"The quick brown fox jumped over the lazy dog\" \u8f93\u51fa: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\" \u8bf4\u660e: S \u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 1 <= S.length <= 150 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 824. Goat Latin \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 824. \u5c71\u7f8a\u62c9\u4e01\u6587 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u62fc\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 import java.util.HashSet; import java.util.Set; public class Solution { public String toGoatLatin(String S) { // vowel \u5143\u97f3\u5b57\u7b26 Set<Character> vowel = new HashSet<>(); for (char c : new char[]{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}) { vowel.add(c); } // \u7d22\u5f15\u7684\u4e2a\u6570 int t = 1; StringBuilder ans = new StringBuilder(); for (String word : S.split(\"\\\\s\")) { char first = word.charAt(0); // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 1 \u6761 if (vowel.contains(first)) { ans.append(word); } else { // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 2 \u6761 ans.append(word.substring(1)); ans.append(word.substring(0, 1)); } ans.append(\"ma\"); // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 3 \u6761 for (int i = 0; i < t; i++) { ans.append('a'); } ans.append(\" \"); t++; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c ans.deleteCharAt(ans.length() - 1); return ans.toString(); } public static void main(String[] args) { Solution solution = new Solution(); String S = \"I speak Goat Latin\"; String goatLatin = solution.toGoatLatin(S); System.out.println(goatLatin); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0824-goat-latin \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"824. Goat Latin"},{"location":"leetcode-0824-goat-latin/#824-goat-latin","text":"","title":"824. Goat Latin"},{"location":"leetcode-0824-goat-latin/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50 S \u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002 \u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a \u201cGoat Latin\u201d \uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587 - Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002 \u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0 \"ma\" \u3002 \u4f8b\u5982\uff0c\u5355\u8bcd \"apple\" \u53d8\u4e3a \"applema\" \u3002 \u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0 \"ma\" \u3002 \u4f8b\u5982\uff0c\u5355\u8bcd \"goat\" \u53d8\u4e3a \"oatgma\" \u3002 \u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd 'a' \uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002 \u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"a\" \uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0 \"aa\" \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u8fd4\u56de\u5c06 S \u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"I speak Goat Latin\" \u8f93\u51fa: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\" \u793a\u4f8b 2: \u8f93\u5165: \"The quick brown fox jumped over the lazy dog\" \u8f93\u51fa: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\" \u8bf4\u660e: S \u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 1 <= S.length <= 150 \u3002 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 824. Goat Latin \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 824. \u5c71\u7f8a\u62c9\u4e01\u6587 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0824-goat-latin/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u62fc\u63a5\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0824-goat-latin/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0824-goat-latin/#1","text":"import java.util.HashSet; import java.util.Set; public class Solution { public String toGoatLatin(String S) { // vowel \u5143\u97f3\u5b57\u7b26 Set<Character> vowel = new HashSet<>(); for (char c : new char[]{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}) { vowel.add(c); } // \u7d22\u5f15\u7684\u4e2a\u6570 int t = 1; StringBuilder ans = new StringBuilder(); for (String word : S.split(\"\\\\s\")) { char first = word.charAt(0); // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 1 \u6761 if (vowel.contains(first)) { ans.append(word); } else { // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 2 \u6761 ans.append(word.substring(1)); ans.append(word.substring(0, 1)); } ans.append(\"ma\"); // \u9898\u76ee\u8981\u6c42\u7684\u7b2c 3 \u6761 for (int i = 0; i < t; i++) { ans.append('a'); } ans.append(\" \"); t++; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c ans.deleteCharAt(ans.length() - 1); return ans.toString(); } public static void main(String[] args) { Solution solution = new Solution(); String S = \"I speak Goat Latin\"; String goatLatin = solution.toGoatLatin(S); System.out.println(goatLatin); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0824-goat-latin \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-0840-magic-squares-in-grid/","text":"840. Magic Squares In Grid \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a 3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709 \u4ece 1 \u5230 9 \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 N \u00d7 N \u77e9\u9635\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 \u00d7 3 \u7684 \u201c\u5e7b\u65b9\u201d \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[4,3,8,4], [9,5,1,9], [2,7,6,2]] \u8f93\u51fa: 1 \u89e3\u91ca: \u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a 438 951 276 \u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a 384 519 762 \u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002 \u63d0\u793a: 1 <= grid.length = grid[0].length <= 10 0 <= grid[i][j] <= 15 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 840. Magic Squares In Grid \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 840. \u77e9\u9635\u4e2d\u7684\u5e7b\u65b9 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 public class Solution { public int numMagicSquaresInside(int[][] grid) { int row = grid.length; if (row == 0) { return 0; } int col = grid[0].length; if (row < 3 || col < 3) { return 0; } int res = 0; int[] temp = new int[8]; // \u627e\u4e2d\u5fc3\u662f 5 \u7684\u77e9\u9635 for (int i = 1; i < row - 1; i++) { for (int j = 1; j < col - 1; j++) { System.out.println(i + \" \" + j); if (magicSquares(grid, temp, i, j)) { res++; } } } return res; } // \u4ee5\u5750\u6807 i j \u4e3a\u4e2d\u5fc3\u7684\u77e9\u9635\u662f\u4e0d\u662f\u6cb3\u56fe\u77e9\u9635 private boolean magicSquares(int[][] grid, int[] temp, int i, int j) { if (grid[i][j] != 5) { return false; } for (int k = 0; k < 3; k++) { for (int l = 0; l < 3; l++) { if (grid[i - 1 + k][j - 1 + l] < 1 || grid[i - 1 + k][j - 1 + l] > 9) { return false; } } } temp[0] = grid[i - 1][j - 1] + grid[i - 1][j] + grid[i - 1][j + 1]; if (temp[0] != 15) { return false; } temp[1] = grid[i][j - 1] + grid[i][j] + grid[i][j + 1]; if (temp[1] != 15) { return false; } temp[2] = grid[i + 1][j - 1] + grid[i + 1][j] + grid[i + 1][j + 1]; if (temp[2] != 15) { return false; } temp[3] = grid[i - 1][j - 1] + grid[i][j - 1] + grid[i + 1][j - 1]; if (temp[3] != 15) { return false; } temp[4] = grid[i - 1][j] + grid[i][j] + grid[i + 1][j]; if (temp[4] != 15) { return false; } temp[5] = grid[i - 1][j + 1] + grid[i][j + 1] + grid[i + 1][j + 1]; if (temp[5] != 15) { return false; } temp[6] = grid[i - 1][j - 1] + grid[i][j] + grid[i + 1][j + 1]; if (temp[6] != 15) { return false; } temp[7] = grid[i + 1][j - 1] + grid[i][j] + grid[i - 1][j + 1]; if (temp[7] != 15) { return false; } return true; } public static void main(String[] args) { int[][] grid = new int[][]{ {5, 2, 9, 5, 4}, {8, 1, 6, 1, 4}, {7, 2, 4, 7, 8}, {1, 8, 3, 5, 9}, {5, 7, 2, 6, 1}}; Solution solution = new Solution(); int numMagicSquaresInside = solution.numMagicSquaresInside(grid); System.out.println(numMagicSquaresInside); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0840-magic-squares-in-grid \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"840. Magic Squares In Grid"},{"location":"leetcode-0840-magic-squares-in-grid/#840-magic-squares-in-grid","text":"","title":"840. Magic Squares In Grid"},{"location":"leetcode-0840-magic-squares-in-grid/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a 3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709 \u4ece 1 \u5230 9 \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 N \u00d7 N \u77e9\u9635\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 \u00d7 3 \u7684 \u201c\u5e7b\u65b9\u201d \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[4,3,8,4], [9,5,1,9], [2,7,6,2]] \u8f93\u51fa: 1 \u89e3\u91ca: \u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a 438 951 276 \u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a 384 519 762 \u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002 \u63d0\u793a: 1 <= grid.length = grid[0].length <= 10 0 <= grid[i][j] <= 15 \u9898\u76ee\u96be\u5ea6\uff1a \u7b80\u5355 \u3002 \u82f1\u6587\u7f51\u5740\uff1a 840. Magic Squares In Grid \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 840. \u77e9\u9635\u4e2d\u7684\u5e7b\u65b9 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-0840-magic-squares-in-grid/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-0840-magic-squares-in-grid/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-0840-magic-squares-in-grid/#1","text":"public class Solution { public int numMagicSquaresInside(int[][] grid) { int row = grid.length; if (row == 0) { return 0; } int col = grid[0].length; if (row < 3 || col < 3) { return 0; } int res = 0; int[] temp = new int[8]; // \u627e\u4e2d\u5fc3\u662f 5 \u7684\u77e9\u9635 for (int i = 1; i < row - 1; i++) { for (int j = 1; j < col - 1; j++) { System.out.println(i + \" \" + j); if (magicSquares(grid, temp, i, j)) { res++; } } } return res; } // \u4ee5\u5750\u6807 i j \u4e3a\u4e2d\u5fc3\u7684\u77e9\u9635\u662f\u4e0d\u662f\u6cb3\u56fe\u77e9\u9635 private boolean magicSquares(int[][] grid, int[] temp, int i, int j) { if (grid[i][j] != 5) { return false; } for (int k = 0; k < 3; k++) { for (int l = 0; l < 3; l++) { if (grid[i - 1 + k][j - 1 + l] < 1 || grid[i - 1 + k][j - 1 + l] > 9) { return false; } } } temp[0] = grid[i - 1][j - 1] + grid[i - 1][j] + grid[i - 1][j + 1]; if (temp[0] != 15) { return false; } temp[1] = grid[i][j - 1] + grid[i][j] + grid[i][j + 1]; if (temp[1] != 15) { return false; } temp[2] = grid[i + 1][j - 1] + grid[i + 1][j] + grid[i + 1][j + 1]; if (temp[2] != 15) { return false; } temp[3] = grid[i - 1][j - 1] + grid[i][j - 1] + grid[i + 1][j - 1]; if (temp[3] != 15) { return false; } temp[4] = grid[i - 1][j] + grid[i][j] + grid[i + 1][j]; if (temp[4] != 15) { return false; } temp[5] = grid[i - 1][j + 1] + grid[i][j + 1] + grid[i + 1][j + 1]; if (temp[5] != 15) { return false; } temp[6] = grid[i - 1][j - 1] + grid[i][j] + grid[i + 1][j + 1]; if (temp[6] != 15) { return false; } temp[7] = grid[i + 1][j - 1] + grid[i][j] + grid[i - 1][j + 1]; if (temp[7] != 15) { return false; } return true; } public static void main(String[] args) { int[][] grid = new int[][]{ {5, 2, 9, 5, 4}, {8, 1, 6, 1, 4}, {7, 2, 4, 7, 8}, {1, 8, 3, 5, 9}, {5, 7, 2, 6, 1}}; Solution solution = new Solution(); int numMagicSquaresInside = solution.numMagicSquaresInside(grid); System.out.println(numMagicSquaresInside); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0840-magic-squares-in-grid \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com \u3002 .label-warning { background-color: #f0ad4e; } .label-success { background-color: #5cb85c; } .label-danger { background-color: #d9534f; } .label { display: inline; padding: .2em .6em .3em; font-size: 75%; font-weight: 700; line-height: 1; color: #fff; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"leetcode-articles-template/","text":"\u586b\u5199 \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be \u82f1\u6587\u7f51\u5740\uff1a \u3002 \u4e2d\u6587\u7f51\u5740\uff1a \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541","title":"\u586b\u5199"},{"location":"leetcode-articles-template/#_1","text":"","title":"\u586b\u5199"},{"location":"leetcode-articles-template/#_2","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\u3002\u4e2d\u7b49\u3002\u56f0\u96be \u82f1\u6587\u7f51\u5740\uff1a \u3002 \u4e2d\u6587\u7f51\u5740\uff1a \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"leetcode-articles-template/#_3","text":"\u6c42\u89e3\u5173\u952e\uff1a","title":"\u601d\u8def\u5206\u6790"},{"location":"leetcode-articles-template/#_4","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"leetcode-articles-template/#1","text":"","title":"\u53c2\u8003\u89e3\u7b541"}]}